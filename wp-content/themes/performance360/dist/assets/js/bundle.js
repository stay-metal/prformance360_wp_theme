/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/desandro-matches-selector/matches-selector.js":
/*!********************************************************************!*\
  !*** ./node_modules/desandro-matches-selector/matches-selector.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * matchesSelector v2.0.2
 * matchesSelector( element, '.selector' )
 * MIT license
 */

/*jshint browser: true, strict: true, undef: true, unused: true */
(function (window, factory) {
  /*global define: false, module: false */
  'use strict'; // universal module definition

  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(window, function factory() {
  'use strict';

  var matchesMethod = function () {
    var ElemProto = window.Element.prototype; // check for the standard method name first

    if (ElemProto.matches) {
      return 'matches';
    } // check un-prefixed


    if (ElemProto.matchesSelector) {
      return 'matchesSelector';
    } // check vendor prefixes


    var prefixes = ['webkit', 'moz', 'ms', 'o'];

    for (var i = 0; i < prefixes.length; i++) {
      var prefix = prefixes[i];
      var method = prefix + 'MatchesSelector';

      if (ElemProto[method]) {
        return method;
      }
    }
  }();

  return function matchesSelector(elem, selector) {
    return elem[matchesMethod](selector);
  };
});

/***/ }),

/***/ "./node_modules/ev-emitter/ev-emitter.js":
/*!***********************************************!*\
  !*** ./node_modules/ev-emitter/ev-emitter.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * EvEmitter v1.1.0
 * Lil' event emitter
 * MIT License
 */

/* jshint unused: true, undef: true, strict: true */
(function (global, factory) {
  // universal module definition

  /* jshint strict: false */

  /* globals define, module, window */
  if (true) {
    // AMD - RequireJS
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(typeof window != 'undefined' ? window : this, function () {
  "use strict";

  function EvEmitter() {}

  var proto = EvEmitter.prototype;

  proto.on = function (eventName, listener) {
    if (!eventName || !listener) {
      return;
    } // set events hash


    var events = this._events = this._events || {}; // set listeners array

    var listeners = events[eventName] = events[eventName] || []; // only add once

    if (listeners.indexOf(listener) == -1) {
      listeners.push(listener);
    }

    return this;
  };

  proto.once = function (eventName, listener) {
    if (!eventName || !listener) {
      return;
    } // add event


    this.on(eventName, listener); // set once flag
    // set onceEvents hash

    var onceEvents = this._onceEvents = this._onceEvents || {}; // set onceListeners object

    var onceListeners = onceEvents[eventName] = onceEvents[eventName] || {}; // set flag

    onceListeners[listener] = true;
    return this;
  };

  proto.off = function (eventName, listener) {
    var listeners = this._events && this._events[eventName];

    if (!listeners || !listeners.length) {
      return;
    }

    var index = listeners.indexOf(listener);

    if (index != -1) {
      listeners.splice(index, 1);
    }

    return this;
  };

  proto.emitEvent = function (eventName, args) {
    var listeners = this._events && this._events[eventName];

    if (!listeners || !listeners.length) {
      return;
    } // copy over to avoid interference if .off() in listener


    listeners = listeners.slice(0);
    args = args || []; // once stuff

    var onceListeners = this._onceEvents && this._onceEvents[eventName];

    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];
      var isOnce = onceListeners && onceListeners[listener];

      if (isOnce) {
        // remove listener
        // remove before trigger to prevent recursion
        this.off(eventName, listener); // unset once flag

        delete onceListeners[listener];
      } // trigger listener


      listener.apply(this, args);
    }

    return this;
  };

  proto.allOff = function () {
    delete this._events;
    delete this._onceEvents;
  };

  return EvEmitter;
});

/***/ }),

/***/ "./node_modules/fizzy-ui-utils/utils.js":
/*!**********************************************!*\
  !*** ./node_modules/fizzy-ui-utils/utils.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Fizzy UI utils v2.0.7
 * MIT license
 */

/*jshint browser: true, undef: true, unused: true, strict: true */
(function (window, factory) {
  // universal module definition

  /*jshint strict: false */

  /*globals define, module, require */
  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! desandro-matches-selector/matches-selector */ "./node_modules/desandro-matches-selector/matches-selector.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (matchesSelector) {
      return factory(window, matchesSelector);
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(window, function factory(window, matchesSelector) {
  'use strict';

  var utils = {}; // ----- extend ----- //
  // extends objects

  utils.extend = function (a, b) {
    for (var prop in b) {
      a[prop] = b[prop];
    }

    return a;
  }; // ----- modulo ----- //


  utils.modulo = function (num, div) {
    return (num % div + div) % div;
  }; // ----- makeArray ----- //


  var arraySlice = Array.prototype.slice; // turn element or nodeList into an array

  utils.makeArray = function (obj) {
    if (Array.isArray(obj)) {
      // use object if already an array
      return obj;
    } // return empty array if undefined or null. #6


    if (obj === null || obj === undefined) {
      return [];
    }

    var isArrayLike = typeof obj == 'object' && typeof obj.length == 'number';

    if (isArrayLike) {
      // convert nodeList to array
      return arraySlice.call(obj);
    } // array of single index


    return [obj];
  }; // ----- removeFrom ----- //


  utils.removeFrom = function (ary, obj) {
    var index = ary.indexOf(obj);

    if (index != -1) {
      ary.splice(index, 1);
    }
  }; // ----- getParent ----- //


  utils.getParent = function (elem, selector) {
    while (elem.parentNode && elem != document.body) {
      elem = elem.parentNode;

      if (matchesSelector(elem, selector)) {
        return elem;
      }
    }
  }; // ----- getQueryElement ----- //
  // use element as selector string


  utils.getQueryElement = function (elem) {
    if (typeof elem == 'string') {
      return document.querySelector(elem);
    }

    return elem;
  }; // ----- handleEvent ----- //
  // enable .ontype to trigger from .addEventListener( elem, 'type' )


  utils.handleEvent = function (event) {
    var method = 'on' + event.type;

    if (this[method]) {
      this[method](event);
    }
  }; // ----- filterFindElements ----- //


  utils.filterFindElements = function (elems, selector) {
    // make array of elems
    elems = utils.makeArray(elems);
    var ffElems = [];
    elems.forEach(function (elem) {
      // check that elem is an actual element
      if (!(elem instanceof HTMLElement)) {
        return;
      } // add elem if no selector


      if (!selector) {
        ffElems.push(elem);
        return;
      } // filter & find items if we have a selector
      // filter


      if (matchesSelector(elem, selector)) {
        ffElems.push(elem);
      } // find children


      var childElems = elem.querySelectorAll(selector); // concat childElems to filterFound array

      for (var i = 0; i < childElems.length; i++) {
        ffElems.push(childElems[i]);
      }
    });
    return ffElems;
  }; // ----- debounceMethod ----- //


  utils.debounceMethod = function (_class, methodName, threshold) {
    threshold = threshold || 100; // original method

    var method = _class.prototype[methodName];
    var timeoutName = methodName + 'Timeout';

    _class.prototype[methodName] = function () {
      var timeout = this[timeoutName];
      clearTimeout(timeout);
      var args = arguments;

      var _this = this;

      this[timeoutName] = setTimeout(function () {
        method.apply(_this, args);
        delete _this[timeoutName];
      }, threshold);
    };
  }; // ----- docReady ----- //


  utils.docReady = function (callback) {
    var readyState = document.readyState;

    if (readyState == 'complete' || readyState == 'interactive') {
      // do async to allow for other scripts to run. metafizzy/flickity#441
      setTimeout(callback);
    } else {
      document.addEventListener('DOMContentLoaded', callback);
    }
  }; // ----- htmlInit ----- //
  // http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/


  utils.toDashed = function (str) {
    return str.replace(/(.)([A-Z])/g, function (match, $1, $2) {
      return $1 + '-' + $2;
    }).toLowerCase();
  };

  var console = window.console;
  /**
   * allow user to initialize classes via [data-namespace] or .js-namespace class
   * htmlInit( Widget, 'widgetName' )
   * options are parsed from data-namespace-options
   */

  utils.htmlInit = function (WidgetClass, namespace) {
    utils.docReady(function () {
      var dashedNamespace = utils.toDashed(namespace);
      var dataAttr = 'data-' + dashedNamespace;
      var dataAttrElems = document.querySelectorAll('[' + dataAttr + ']');
      var jsDashElems = document.querySelectorAll('.js-' + dashedNamespace);
      var elems = utils.makeArray(dataAttrElems).concat(utils.makeArray(jsDashElems));
      var dataOptionsAttr = dataAttr + '-options';
      var jQuery = window.jQuery;
      elems.forEach(function (elem) {
        var attr = elem.getAttribute(dataAttr) || elem.getAttribute(dataOptionsAttr);
        var options;

        try {
          options = attr && JSON.parse(attr);
        } catch (error) {
          // log error, do not initialize
          if (console) {
            console.error('Error parsing ' + dataAttr + ' on ' + elem.className + ': ' + error);
          }

          return;
        } // initialize


        var instance = new WidgetClass(elem, options); // make available via $().data('namespace')

        if (jQuery) {
          jQuery.data(elem, namespace, instance);
        }
      });
    });
  }; // -----  ----- //


  return utils;
});

/***/ }),

/***/ "./node_modules/get-size/get-size.js":
/*!*******************************************!*\
  !*** ./node_modules/get-size/get-size.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * getSize v2.0.3
 * measure size of elements
 * MIT license
 */

/* jshint browser: true, strict: true, undef: true, unused: true */

/* globals console: false */
(function (window, factory) {
  /* jshint strict: false */

  /* globals define, module */
  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(window, function factory() {
  'use strict'; // -------------------------- helpers -------------------------- //
  // get a number from a string, not a percentage

  function getStyleSize(value) {
    var num = parseFloat(value); // not a percent like '100%', and a number

    var isValid = value.indexOf('%') == -1 && !isNaN(num);
    return isValid && num;
  }

  function noop() {}

  var logError = typeof console == 'undefined' ? noop : function (message) {
    console.error(message);
  }; // -------------------------- measurements -------------------------- //

  var measurements = ['paddingLeft', 'paddingRight', 'paddingTop', 'paddingBottom', 'marginLeft', 'marginRight', 'marginTop', 'marginBottom', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth', 'borderBottomWidth'];
  var measurementsLength = measurements.length;

  function getZeroSize() {
    var size = {
      width: 0,
      height: 0,
      innerWidth: 0,
      innerHeight: 0,
      outerWidth: 0,
      outerHeight: 0
    };

    for (var i = 0; i < measurementsLength; i++) {
      var measurement = measurements[i];
      size[measurement] = 0;
    }

    return size;
  } // -------------------------- getStyle -------------------------- //

  /**
   * getStyle, get style of element, check for Firefox bug
   * https://bugzilla.mozilla.org/show_bug.cgi?id=548397
   */


  function getStyle(elem) {
    var style = getComputedStyle(elem);

    if (!style) {
      logError('Style returned ' + style + '. Are you running this code in a hidden iframe on Firefox? ' + 'See https://bit.ly/getsizebug1');
    }

    return style;
  } // -------------------------- setup -------------------------- //


  var isSetup = false;
  var isBoxSizeOuter;
  /**
   * setup
   * check isBoxSizerOuter
   * do on first getSize() rather than on page load for Firefox bug
   */

  function setup() {
    // setup once
    if (isSetup) {
      return;
    }

    isSetup = true; // -------------------------- box sizing -------------------------- //

    /**
     * Chrome & Safari measure the outer-width on style.width on border-box elems
     * IE11 & Firefox<29 measures the inner-width
     */

    var div = document.createElement('div');
    div.style.width = '200px';
    div.style.padding = '1px 2px 3px 4px';
    div.style.borderStyle = 'solid';
    div.style.borderWidth = '1px 2px 3px 4px';
    div.style.boxSizing = 'border-box';
    var body = document.body || document.documentElement;
    body.appendChild(div);
    var style = getStyle(div); // round value for browser zoom. desandro/masonry#928

    isBoxSizeOuter = Math.round(getStyleSize(style.width)) == 200;
    getSize.isBoxSizeOuter = isBoxSizeOuter;
    body.removeChild(div);
  } // -------------------------- getSize -------------------------- //


  function getSize(elem) {
    setup(); // use querySeletor if elem is string

    if (typeof elem == 'string') {
      elem = document.querySelector(elem);
    } // do not proceed on non-objects


    if (!elem || typeof elem != 'object' || !elem.nodeType) {
      return;
    }

    var style = getStyle(elem); // if hidden, everything is 0

    if (style.display == 'none') {
      return getZeroSize();
    }

    var size = {};
    size.width = elem.offsetWidth;
    size.height = elem.offsetHeight;
    var isBorderBox = size.isBorderBox = style.boxSizing == 'border-box'; // get all measurements

    for (var i = 0; i < measurementsLength; i++) {
      var measurement = measurements[i];
      var value = style[measurement];
      var num = parseFloat(value); // any 'auto', 'medium' value will be 0

      size[measurement] = !isNaN(num) ? num : 0;
    }

    var paddingWidth = size.paddingLeft + size.paddingRight;
    var paddingHeight = size.paddingTop + size.paddingBottom;
    var marginWidth = size.marginLeft + size.marginRight;
    var marginHeight = size.marginTop + size.marginBottom;
    var borderWidth = size.borderLeftWidth + size.borderRightWidth;
    var borderHeight = size.borderTopWidth + size.borderBottomWidth;
    var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter; // overwrite width and height if we can get it from style

    var styleWidth = getStyleSize(style.width);

    if (styleWidth !== false) {
      size.width = styleWidth + ( // add padding and border unless it's already including it
      isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth);
    }

    var styleHeight = getStyleSize(style.height);

    if (styleHeight !== false) {
      size.height = styleHeight + ( // add padding and border unless it's already including it
      isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight);
    }

    size.innerWidth = size.width - (paddingWidth + borderWidth);
    size.innerHeight = size.height - (paddingHeight + borderHeight);
    size.outerWidth = size.width + marginWidth;
    size.outerHeight = size.height + marginHeight;
    return size;
  }

  return getSize;
});

/***/ }),

/***/ "./node_modules/imagesloaded/imagesloaded.js":
/*!***************************************************!*\
  !*** ./node_modules/imagesloaded/imagesloaded.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * imagesLoaded v4.1.4
 * JavaScript is all like "You images are done yet or what?"
 * MIT License
 */
(function (window, factory) {
  'use strict'; // universal module definition

  /*global define: false, module: false, require: false */

  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ev-emitter/ev-emitter */ "./node_modules/ev-emitter/ev-emitter.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (EvEmitter) {
      return factory(window, EvEmitter);
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(typeof window !== 'undefined' ? window : this, // --------------------------  factory -------------------------- //
function factory(window, EvEmitter) {
  'use strict';

  var $ = window.jQuery;
  var console = window.console; // -------------------------- helpers -------------------------- //
  // extend objects

  function extend(a, b) {
    for (var prop in b) {
      a[prop] = b[prop];
    }

    return a;
  }

  var arraySlice = Array.prototype.slice; // turn element or nodeList into an array

  function makeArray(obj) {
    if (Array.isArray(obj)) {
      // use object if already an array
      return obj;
    }

    var isArrayLike = typeof obj == 'object' && typeof obj.length == 'number';

    if (isArrayLike) {
      // convert nodeList to array
      return arraySlice.call(obj);
    } // array of single index


    return [obj];
  } // -------------------------- imagesLoaded -------------------------- //

  /**
   * @param {Array, Element, NodeList, String} elem
   * @param {Object or Function} options - if function, use as callback
   * @param {Function} onAlways - callback function
   */


  function ImagesLoaded(elem, options, onAlways) {
    // coerce ImagesLoaded() without new, to be new ImagesLoaded()
    if (!(this instanceof ImagesLoaded)) {
      return new ImagesLoaded(elem, options, onAlways);
    } // use elem as selector string


    var queryElem = elem;

    if (typeof elem == 'string') {
      queryElem = document.querySelectorAll(elem);
    } // bail if bad element


    if (!queryElem) {
      console.error('Bad element for imagesLoaded ' + (queryElem || elem));
      return;
    }

    this.elements = makeArray(queryElem);
    this.options = extend({}, this.options); // shift arguments if no options set

    if (typeof options == 'function') {
      onAlways = options;
    } else {
      extend(this.options, options);
    }

    if (onAlways) {
      this.on('always', onAlways);
    }

    this.getImages();

    if ($) {
      // add jQuery Deferred object
      this.jqDeferred = new $.Deferred();
    } // HACK check async to allow time to bind listeners


    setTimeout(this.check.bind(this));
  }

  ImagesLoaded.prototype = Object.create(EvEmitter.prototype);
  ImagesLoaded.prototype.options = {};

  ImagesLoaded.prototype.getImages = function () {
    this.images = []; // filter & find items if we have an item selector

    this.elements.forEach(this.addElementImages, this);
  };
  /**
   * @param {Node} element
   */


  ImagesLoaded.prototype.addElementImages = function (elem) {
    // filter siblings
    if (elem.nodeName == 'IMG') {
      this.addImage(elem);
    } // get background image on element


    if (this.options.background === true) {
      this.addElementBackgroundImages(elem);
    } // find children
    // no non-element nodes, #143


    var nodeType = elem.nodeType;

    if (!nodeType || !elementNodeTypes[nodeType]) {
      return;
    }

    var childImgs = elem.querySelectorAll('img'); // concat childElems to filterFound array

    for (var i = 0; i < childImgs.length; i++) {
      var img = childImgs[i];
      this.addImage(img);
    } // get child background images


    if (typeof this.options.background == 'string') {
      var children = elem.querySelectorAll(this.options.background);

      for (i = 0; i < children.length; i++) {
        var child = children[i];
        this.addElementBackgroundImages(child);
      }
    }
  };

  var elementNodeTypes = {
    1: true,
    9: true,
    11: true
  };

  ImagesLoaded.prototype.addElementBackgroundImages = function (elem) {
    var style = getComputedStyle(elem);

    if (!style) {
      // Firefox returns null if in a hidden iframe https://bugzil.la/548397
      return;
    } // get url inside url("...")


    var reURL = /url\((['"])?(.*?)\1\)/gi;
    var matches = reURL.exec(style.backgroundImage);

    while (matches !== null) {
      var url = matches && matches[2];

      if (url) {
        this.addBackground(url, elem);
      }

      matches = reURL.exec(style.backgroundImage);
    }
  };
  /**
   * @param {Image} img
   */


  ImagesLoaded.prototype.addImage = function (img) {
    var loadingImage = new LoadingImage(img);
    this.images.push(loadingImage);
  };

  ImagesLoaded.prototype.addBackground = function (url, elem) {
    var background = new Background(url, elem);
    this.images.push(background);
  };

  ImagesLoaded.prototype.check = function () {
    var _this = this;

    this.progressedCount = 0;
    this.hasAnyBroken = false; // complete if no images

    if (!this.images.length) {
      this.complete();
      return;
    }

    function onProgress(image, elem, message) {
      // HACK - Chrome triggers event before object properties have changed. #83
      setTimeout(function () {
        _this.progress(image, elem, message);
      });
    }

    this.images.forEach(function (loadingImage) {
      loadingImage.once('progress', onProgress);
      loadingImage.check();
    });
  };

  ImagesLoaded.prototype.progress = function (image, elem, message) {
    this.progressedCount++;
    this.hasAnyBroken = this.hasAnyBroken || !image.isLoaded; // progress event

    this.emitEvent('progress', [this, image, elem]);

    if (this.jqDeferred && this.jqDeferred.notify) {
      this.jqDeferred.notify(this, image);
    } // check if completed


    if (this.progressedCount == this.images.length) {
      this.complete();
    }

    if (this.options.debug && console) {
      console.log('progress: ' + message, image, elem);
    }
  };

  ImagesLoaded.prototype.complete = function () {
    var eventName = this.hasAnyBroken ? 'fail' : 'done';
    this.isComplete = true;
    this.emitEvent(eventName, [this]);
    this.emitEvent('always', [this]);

    if (this.jqDeferred) {
      var jqMethod = this.hasAnyBroken ? 'reject' : 'resolve';
      this.jqDeferred[jqMethod](this);
    }
  }; // --------------------------  -------------------------- //


  function LoadingImage(img) {
    this.img = img;
  }

  LoadingImage.prototype = Object.create(EvEmitter.prototype);

  LoadingImage.prototype.check = function () {
    // If complete is true and browser supports natural sizes,
    // try to check for image status manually.
    var isComplete = this.getIsImageComplete();

    if (isComplete) {
      // report based on naturalWidth
      this.confirm(this.img.naturalWidth !== 0, 'naturalWidth');
      return;
    } // If none of the checks above matched, simulate loading on detached element.


    this.proxyImage = new Image();
    this.proxyImage.addEventListener('load', this);
    this.proxyImage.addEventListener('error', this); // bind to image as well for Firefox. #191

    this.img.addEventListener('load', this);
    this.img.addEventListener('error', this);
    this.proxyImage.src = this.img.src;
  };

  LoadingImage.prototype.getIsImageComplete = function () {
    // check for non-zero, non-undefined naturalWidth
    // fixes Safari+InfiniteScroll+Masonry bug infinite-scroll#671
    return this.img.complete && this.img.naturalWidth;
  };

  LoadingImage.prototype.confirm = function (isLoaded, message) {
    this.isLoaded = isLoaded;
    this.emitEvent('progress', [this, this.img, message]);
  }; // ----- events ----- //
  // trigger specified handler for event type


  LoadingImage.prototype.handleEvent = function (event) {
    var method = 'on' + event.type;

    if (this[method]) {
      this[method](event);
    }
  };

  LoadingImage.prototype.onload = function () {
    this.confirm(true, 'onload');
    this.unbindEvents();
  };

  LoadingImage.prototype.onerror = function () {
    this.confirm(false, 'onerror');
    this.unbindEvents();
  };

  LoadingImage.prototype.unbindEvents = function () {
    this.proxyImage.removeEventListener('load', this);
    this.proxyImage.removeEventListener('error', this);
    this.img.removeEventListener('load', this);
    this.img.removeEventListener('error', this);
  }; // -------------------------- Background -------------------------- //


  function Background(url, element) {
    this.url = url;
    this.element = element;
    this.img = new Image();
  } // inherit LoadingImage prototype


  Background.prototype = Object.create(LoadingImage.prototype);

  Background.prototype.check = function () {
    this.img.addEventListener('load', this);
    this.img.addEventListener('error', this);
    this.img.src = this.url; // check if image is already complete

    var isComplete = this.getIsImageComplete();

    if (isComplete) {
      this.confirm(this.img.naturalWidth !== 0, 'naturalWidth');
      this.unbindEvents();
    }
  };

  Background.prototype.unbindEvents = function () {
    this.img.removeEventListener('load', this);
    this.img.removeEventListener('error', this);
  };

  Background.prototype.confirm = function (isLoaded, message) {
    this.isLoaded = isLoaded;
    this.emitEvent('progress', [this, this.element, message]);
  }; // -------------------------- jQuery -------------------------- //


  ImagesLoaded.makeJQueryPlugin = function (jQuery) {
    jQuery = jQuery || window.jQuery;

    if (!jQuery) {
      return;
    } // set local variable


    $ = jQuery; // $().imagesLoaded()

    $.fn.imagesLoaded = function (options, callback) {
      var instance = new ImagesLoaded(this, options, callback);
      return instance.jqDeferred.promise($(this));
    };
  }; // try making plugin


  ImagesLoaded.makeJQueryPlugin(); // --------------------------  -------------------------- //

  return ImagesLoaded;
});

/***/ }),

/***/ "./node_modules/jQuery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jQuery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.5.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-04-10T15:07Z
 */
(function (global, factory) {
  "use strict";

  if ( true && typeof module.exports === "object") {
    // For CommonJS and CommonJS-like environments where a proper `window`
    // is present, execute the factory and get jQuery.
    // For environments that do not have a `window` with a `document`
    // (such as Node.js), expose a factory as module.exports.
    // This accentuates the need for the creation of a real `window`.
    // e.g. var jQuery = require("jquery")(window);
    // See ticket #14549 for more info.
    module.exports = global.document ? factory(global, true) : function (w) {
      if (!w.document) {
        throw new Error("jQuery requires a window with a document");
      }

      return factory(w);
    };
  } else {
    factory(global);
  } // Pass this if window is not defined yet

})(typeof window !== "undefined" ? window : this, function (window, noGlobal) {
  // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
  // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
  // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
  // enough that all such attempts are guarded in a try block.
  "use strict";

  var arr = [];
  var getProto = Object.getPrototypeOf;
  var slice = arr.slice;
  var flat = arr.flat ? function (array) {
    return arr.flat.call(array);
  } : function (array) {
    return arr.concat.apply([], array);
  };
  var push = arr.push;
  var indexOf = arr.indexOf;
  var class2type = {};
  var toString = class2type.toString;
  var hasOwn = class2type.hasOwnProperty;
  var fnToString = hasOwn.toString;
  var ObjectFunctionString = fnToString.call(Object);
  var support = {};

  var isFunction = function isFunction(obj) {
    // Support: Chrome <=57, Firefox <=52
    // In some browsers, typeof returns "function" for HTML <object> elements
    // (i.e., `typeof document.createElement( "object" ) === "function"`).
    // We don't want to classify *any* DOM node as a function.
    return typeof obj === "function" && typeof obj.nodeType !== "number";
  };

  var isWindow = function isWindow(obj) {
    return obj != null && obj === obj.window;
  };

  var document = window.document;
  var preservedScriptAttributes = {
    type: true,
    src: true,
    nonce: true,
    noModule: true
  };

  function DOMEval(code, node, doc) {
    doc = doc || document;
    var i,
        val,
        script = doc.createElement("script");
    script.text = code;

    if (node) {
      for (i in preservedScriptAttributes) {
        // Support: Firefox 64+, Edge 18+
        // Some browsers don't support the "nonce" property on scripts.
        // On the other hand, just using `getAttribute` is not enough as
        // the `nonce` attribute is reset to an empty string whenever it
        // becomes browsing-context connected.
        // See https://github.com/whatwg/html/issues/2369
        // See https://html.spec.whatwg.org/#nonce-attributes
        // The `node.getAttribute` check was added for the sake of
        // `jQuery.globalEval` so that it can fake a nonce-containing node
        // via an object.
        val = node[i] || node.getAttribute && node.getAttribute(i);

        if (val) {
          script.setAttribute(i, val);
        }
      }
    }

    doc.head.appendChild(script).parentNode.removeChild(script);
  }

  function toType(obj) {
    if (obj == null) {
      return obj + "";
    } // Support: Android <=2.3 only (functionish RegExp)


    return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
  }
  /* global Symbol */
  // Defining this global in .eslintrc.json would create a danger of using the global
  // unguarded in another place, it seems safer to define global only for this module


  var version = "3.5.0",
      // Define a local copy of jQuery
  jQuery = function (selector, context) {
    // The jQuery object is actually just the init constructor 'enhanced'
    // Need init if jQuery is called (just allow error to be thrown if not included)
    return new jQuery.fn.init(selector, context);
  };

  jQuery.fn = jQuery.prototype = {
    // The current version of jQuery being used
    jquery: version,
    constructor: jQuery,
    // The default length of a jQuery object is 0
    length: 0,
    toArray: function () {
      return slice.call(this);
    },
    // Get the Nth element in the matched element set OR
    // Get the whole matched element set as a clean array
    get: function (num) {
      // Return all the elements in a clean array
      if (num == null) {
        return slice.call(this);
      } // Return just the one element from the set


      return num < 0 ? this[num + this.length] : this[num];
    },
    // Take an array of elements and push it onto the stack
    // (returning the new matched element set)
    pushStack: function (elems) {
      // Build a new jQuery matched element set
      var ret = jQuery.merge(this.constructor(), elems); // Add the old object onto the stack (as a reference)

      ret.prevObject = this; // Return the newly-formed element set

      return ret;
    },
    // Execute a callback for every element in the matched set.
    each: function (callback) {
      return jQuery.each(this, callback);
    },
    map: function (callback) {
      return this.pushStack(jQuery.map(this, function (elem, i) {
        return callback.call(elem, i, elem);
      }));
    },
    slice: function () {
      return this.pushStack(slice.apply(this, arguments));
    },
    first: function () {
      return this.eq(0);
    },
    last: function () {
      return this.eq(-1);
    },
    even: function () {
      return this.pushStack(jQuery.grep(this, function (_elem, i) {
        return (i + 1) % 2;
      }));
    },
    odd: function () {
      return this.pushStack(jQuery.grep(this, function (_elem, i) {
        return i % 2;
      }));
    },
    eq: function (i) {
      var len = this.length,
          j = +i + (i < 0 ? len : 0);
      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
    },
    end: function () {
      return this.prevObject || this.constructor();
    },
    // For internal use only.
    // Behaves like an Array's method, not like a jQuery method.
    push: push,
    sort: arr.sort,
    splice: arr.splice
  };

  jQuery.extend = jQuery.fn.extend = function () {
    var options,
        name,
        src,
        copy,
        copyIsArray,
        clone,
        target = arguments[0] || {},
        i = 1,
        length = arguments.length,
        deep = false; // Handle a deep copy situation

    if (typeof target === "boolean") {
      deep = target; // Skip the boolean and the target

      target = arguments[i] || {};
      i++;
    } // Handle case when target is a string or something (possible in deep copy)


    if (typeof target !== "object" && !isFunction(target)) {
      target = {};
    } // Extend jQuery itself if only one argument is passed


    if (i === length) {
      target = this;
      i--;
    }

    for (; i < length; i++) {
      // Only deal with non-null/undefined values
      if ((options = arguments[i]) != null) {
        // Extend the base object
        for (name in options) {
          copy = options[name]; // Prevent Object.prototype pollution
          // Prevent never-ending loop

          if (name === "__proto__" || target === copy) {
            continue;
          } // Recurse if we're merging plain objects or arrays


          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
            src = target[name]; // Ensure proper type for the source value

            if (copyIsArray && !Array.isArray(src)) {
              clone = [];
            } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
              clone = {};
            } else {
              clone = src;
            }

            copyIsArray = false; // Never move original objects, clone them

            target[name] = jQuery.extend(deep, clone, copy); // Don't bring in undefined values
          } else if (copy !== undefined) {
            target[name] = copy;
          }
        }
      }
    } // Return the modified object


    return target;
  };

  jQuery.extend({
    // Unique for each copy of jQuery on the page
    expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
    // Assume jQuery is ready without the ready module
    isReady: true,
    error: function (msg) {
      throw new Error(msg);
    },
    noop: function () {},
    isPlainObject: function (obj) {
      var proto, Ctor; // Detect obvious negatives
      // Use toString instead of jQuery.type to catch host objects

      if (!obj || toString.call(obj) !== "[object Object]") {
        return false;
      }

      proto = getProto(obj); // Objects with no prototype (e.g., `Object.create( null )`) are plain

      if (!proto) {
        return true;
      } // Objects with prototype are plain iff they were constructed by a global Object function


      Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
      return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
    },
    isEmptyObject: function (obj) {
      var name;

      for (name in obj) {
        return false;
      }

      return true;
    },
    // Evaluates a script in a provided context; falls back to the global one
    // if not specified.
    globalEval: function (code, options, doc) {
      DOMEval(code, {
        nonce: options && options.nonce
      }, doc);
    },
    each: function (obj, callback) {
      var length,
          i = 0;

      if (isArrayLike(obj)) {
        length = obj.length;

        for (; i < length; i++) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      } else {
        for (i in obj) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      }

      return obj;
    },
    // results is for internal usage only
    makeArray: function (arr, results) {
      var ret = results || [];

      if (arr != null) {
        if (isArrayLike(Object(arr))) {
          jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
        } else {
          push.call(ret, arr);
        }
      }

      return ret;
    },
    inArray: function (elem, arr, i) {
      return arr == null ? -1 : indexOf.call(arr, elem, i);
    },
    // Support: Android <=4.0 only, PhantomJS 1 only
    // push.apply(_, arraylike) throws on ancient WebKit
    merge: function (first, second) {
      var len = +second.length,
          j = 0,
          i = first.length;

      for (; j < len; j++) {
        first[i++] = second[j];
      }

      first.length = i;
      return first;
    },
    grep: function (elems, callback, invert) {
      var callbackInverse,
          matches = [],
          i = 0,
          length = elems.length,
          callbackExpect = !invert; // Go through the array, only saving the items
      // that pass the validator function

      for (; i < length; i++) {
        callbackInverse = !callback(elems[i], i);

        if (callbackInverse !== callbackExpect) {
          matches.push(elems[i]);
        }
      }

      return matches;
    },
    // arg is for internal usage only
    map: function (elems, callback, arg) {
      var length,
          value,
          i = 0,
          ret = []; // Go through the array, translating each of the items to their new values

      if (isArrayLike(elems)) {
        length = elems.length;

        for (; i < length; i++) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        } // Go through every key on the object,

      } else {
        for (i in elems) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        }
      } // Flatten any nested arrays


      return flat(ret);
    },
    // A global GUID counter for objects
    guid: 1,
    // jQuery.support is not used in Core but other projects attach their
    // properties to it so it needs to exist.
    support: support
  });

  if (typeof Symbol === "function") {
    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
  } // Populate the class2type map


  jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (_i, name) {
    class2type["[object " + name + "]"] = name.toLowerCase();
  });

  function isArrayLike(obj) {
    // Support: real iOS 8.2 only (not reproducible in simulator)
    // `in` check used to prevent JIT error (gh-2145)
    // hasOwn isn't used here due to false negatives
    // regarding Nodelist length in IE
    var length = !!obj && "length" in obj && obj.length,
        type = toType(obj);

    if (isFunction(obj) || isWindow(obj)) {
      return false;
    }

    return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
  }

  var Sizzle =
  /*!
   * Sizzle CSS Selector Engine v2.3.5
   * https://sizzlejs.com/
   *
   * Copyright JS Foundation and other contributors
   * Released under the MIT license
   * https://js.foundation/
   *
   * Date: 2020-03-14
   */
  function (window) {
    var i,
        support,
        Expr,
        getText,
        isXML,
        tokenize,
        compile,
        select,
        outermostContext,
        sortInput,
        hasDuplicate,
        // Local document vars
    setDocument,
        document,
        docElem,
        documentIsHTML,
        rbuggyQSA,
        rbuggyMatches,
        matches,
        contains,
        // Instance-specific data
    expando = "sizzle" + 1 * new Date(),
        preferredDoc = window.document,
        dirruns = 0,
        done = 0,
        classCache = createCache(),
        tokenCache = createCache(),
        compilerCache = createCache(),
        nonnativeSelectorCache = createCache(),
        sortOrder = function (a, b) {
      if (a === b) {
        hasDuplicate = true;
      }

      return 0;
    },
        // Instance methods
    hasOwn = {}.hasOwnProperty,
        arr = [],
        pop = arr.pop,
        pushNative = arr.push,
        push = arr.push,
        slice = arr.slice,
        // Use a stripped-down indexOf as it's faster than native
    // https://jsperf.com/thor-indexof-vs-for/5
    indexOf = function (list, elem) {
      var i = 0,
          len = list.length;

      for (; i < len; i++) {
        if (list[i] === elem) {
          return i;
        }
      }

      return -1;
    },
        booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" + "ismap|loop|multiple|open|readonly|required|scoped",
        // Regular expressions
    // http://www.w3.org/TR/css3-selectors/#whitespace
    whitespace = "[\\x20\\t\\r\\n\\f]",
        // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
    identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",
        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
    attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + // Operator (capture 2)
    "*([*^$|!~]?=)" + whitespace + // "Attribute values must be CSS identifiers [capture 5]
    // or strings [capture 3 or capture 4]"
    "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
        pseudos = ":(" + identifier + ")(?:\\((" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
    // 1. quoted (capture 3; capture 4 or capture 5)
    "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + // 2. simple (capture 6)
    "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + // 3. anything else (capture 2)
    ".*" + ")\\)|)",
        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
    rwhitespace = new RegExp(whitespace + "+", "g"),
        rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
        rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
        rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
        rdescend = new RegExp(whitespace + "|>"),
        rpseudo = new RegExp(pseudos),
        ridentifier = new RegExp("^" + identifier + "$"),
        matchExpr = {
      "ID": new RegExp("^#(" + identifier + ")"),
      "CLASS": new RegExp("^\\.(" + identifier + ")"),
      "TAG": new RegExp("^(" + identifier + "|[*])"),
      "ATTR": new RegExp("^" + attributes),
      "PSEUDO": new RegExp("^" + pseudos),
      "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
      "bool": new RegExp("^(?:" + booleans + ")$", "i"),
      // For use in libraries implementing .is()
      // We use this for POS matching in `select`
      "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
    },
        rhtml = /HTML$/i,
        rinputs = /^(?:input|select|textarea|button)$/i,
        rheader = /^h\d$/i,
        rnative = /^[^{]+\{\s*\[native \w/,
        // Easily-parseable/retrievable ID or TAG or CLASS selectors
    rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
        rsibling = /[+~]/,
        // CSS escapes
    // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
    runescape = new RegExp("\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g"),
        funescape = function (escape, nonHex) {
      var high = "0x" + escape.slice(1) - 0x10000;
      return nonHex ? // Strip the backslash prefix from a non-hex escape sequence
      nonHex : // Replace a hexadecimal escape sequence with the encoded Unicode code point
      // Support: IE <=11+
      // For values outside the Basic Multilingual Plane (BMP), manually construct a
      // surrogate pair
      high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
    },
        // CSS string/identifier serialization
    // https://drafts.csswg.org/cssom/#common-serializing-idioms
    rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
        fcssescape = function (ch, asCodePoint) {
      if (asCodePoint) {
        // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
        if (ch === "\0") {
          return "\uFFFD";
        } // Control characters and (dependent upon position) numbers get escaped as code points


        return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
      } // Other potentially-special ASCII characters get backslash-escaped


      return "\\" + ch;
    },
        // Used for iframes
    // See setDocument()
    // Removing the function wrapper causes a "Permission Denied"
    // error in IE
    unloadHandler = function () {
      setDocument();
    },
        inDisabledFieldset = addCombinator(function (elem) {
      return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
    }, {
      dir: "parentNode",
      next: "legend"
    }); // Optimize for push.apply( _, NodeList )


    try {
      push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes); // Support: Android<4.0
      // Detect silently failing push.apply
      // eslint-disable-next-line no-unused-expressions

      arr[preferredDoc.childNodes.length].nodeType;
    } catch (e) {
      push = {
        apply: arr.length ? // Leverage slice if possible
        function (target, els) {
          pushNative.apply(target, slice.call(els));
        } : // Support: IE<9
        // Otherwise append directly
        function (target, els) {
          var j = target.length,
              i = 0; // Can't trust NodeList.length

          while (target[j++] = els[i++]) {}

          target.length = j - 1;
        }
      };
    }

    function Sizzle(selector, context, results, seed) {
      var m,
          i,
          elem,
          nid,
          match,
          groups,
          newSelector,
          newContext = context && context.ownerDocument,
          // nodeType defaults to 9, since context defaults to document
      nodeType = context ? context.nodeType : 9;
      results = results || []; // Return early from calls with invalid selector or context

      if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
        return results;
      } // Try to shortcut find operations (as opposed to filters) in HTML documents


      if (!seed) {
        setDocument(context);
        context = context || document;

        if (documentIsHTML) {
          // If the selector is sufficiently simple, try using a "get*By*" DOM method
          // (excepting DocumentFragment context, where the methods don't exist)
          if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
            // ID selector
            if (m = match[1]) {
              // Document context
              if (nodeType === 9) {
                if (elem = context.getElementById(m)) {
                  // Support: IE, Opera, Webkit
                  // TODO: identify versions
                  // getElementById can match elements by name instead of ID
                  if (elem.id === m) {
                    results.push(elem);
                    return results;
                  }
                } else {
                  return results;
                } // Element context

              } else {
                // Support: IE, Opera, Webkit
                // TODO: identify versions
                // getElementById can match elements by name instead of ID
                if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                  results.push(elem);
                  return results;
                }
              } // Type selector

            } else if (match[2]) {
              push.apply(results, context.getElementsByTagName(selector));
              return results; // Class selector
            } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
              push.apply(results, context.getElementsByClassName(m));
              return results;
            }
          } // Take advantage of querySelectorAll


          if (support.qsa && !nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && ( // Support: IE 8 only
          // Exclude object elements
          nodeType !== 1 || context.nodeName.toLowerCase() !== "object")) {
            newSelector = selector;
            newContext = context; // qSA considers elements outside a scoping root when evaluating child or
            // descendant combinators, which is not what we want.
            // In such cases, we work around the behavior by prefixing every selector in the
            // list with an ID selector referencing the scope context.
            // The technique has to be used as well when a leading combinator is used
            // as such selectors are not recognized by querySelectorAll.
            // Thanks to Andrew Dupont for this technique.

            if (nodeType === 1 && (rdescend.test(selector) || rcombinators.test(selector))) {
              // Expand context for sibling selectors
              newContext = rsibling.test(selector) && testContext(context.parentNode) || context; // We can use :scope instead of the ID hack if the browser
              // supports it & if we're not changing the context.

              if (newContext !== context || !support.scope) {
                // Capture the context ID, setting it first if necessary
                if (nid = context.getAttribute("id")) {
                  nid = nid.replace(rcssescape, fcssescape);
                } else {
                  context.setAttribute("id", nid = expando);
                }
              } // Prefix every selector in the list


              groups = tokenize(selector);
              i = groups.length;

              while (i--) {
                groups[i] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i]);
              }

              newSelector = groups.join(",");
            }

            try {
              push.apply(results, newContext.querySelectorAll(newSelector));
              return results;
            } catch (qsaError) {
              nonnativeSelectorCache(selector, true);
            } finally {
              if (nid === expando) {
                context.removeAttribute("id");
              }
            }
          }
        }
      } // All others


      return select(selector.replace(rtrim, "$1"), context, results, seed);
    }
    /**
     * Create key-value caches of limited size
     * @returns {function(string, object)} Returns the Object data after storing it on itself with
     *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
     *	deleting the oldest entry
     */


    function createCache() {
      var keys = [];

      function cache(key, value) {
        // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
        if (keys.push(key + " ") > Expr.cacheLength) {
          // Only keep the most recent entries
          delete cache[keys.shift()];
        }

        return cache[key + " "] = value;
      }

      return cache;
    }
    /**
     * Mark a function for special use by Sizzle
     * @param {Function} fn The function to mark
     */


    function markFunction(fn) {
      fn[expando] = true;
      return fn;
    }
    /**
     * Support testing using an element
     * @param {Function} fn Passed the created element and returns a boolean result
     */


    function assert(fn) {
      var el = document.createElement("fieldset");

      try {
        return !!fn(el);
      } catch (e) {
        return false;
      } finally {
        // Remove from its parent by default
        if (el.parentNode) {
          el.parentNode.removeChild(el);
        } // release memory in IE


        el = null;
      }
    }
    /**
     * Adds the same handler for all of the specified attrs
     * @param {String} attrs Pipe-separated list of attributes
     * @param {Function} handler The method that will be applied
     */


    function addHandle(attrs, handler) {
      var arr = attrs.split("|"),
          i = arr.length;

      while (i--) {
        Expr.attrHandle[arr[i]] = handler;
      }
    }
    /**
     * Checks document order of two siblings
     * @param {Element} a
     * @param {Element} b
     * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
     */


    function siblingCheck(a, b) {
      var cur = b && a,
          diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex; // Use IE sourceIndex if available on both nodes

      if (diff) {
        return diff;
      } // Check if b follows a


      if (cur) {
        while (cur = cur.nextSibling) {
          if (cur === b) {
            return -1;
          }
        }
      }

      return a ? 1 : -1;
    }
    /**
     * Returns a function to use in pseudos for input types
     * @param {String} type
     */


    function createInputPseudo(type) {
      return function (elem) {
        var name = elem.nodeName.toLowerCase();
        return name === "input" && elem.type === type;
      };
    }
    /**
     * Returns a function to use in pseudos for buttons
     * @param {String} type
     */


    function createButtonPseudo(type) {
      return function (elem) {
        var name = elem.nodeName.toLowerCase();
        return (name === "input" || name === "button") && elem.type === type;
      };
    }
    /**
     * Returns a function to use in pseudos for :enabled/:disabled
     * @param {Boolean} disabled true for :disabled; false for :enabled
     */


    function createDisabledPseudo(disabled) {
      // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
      return function (elem) {
        // Only certain elements can match :enabled or :disabled
        // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
        // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
        if ("form" in elem) {
          // Check for inherited disabledness on relevant non-disabled elements:
          // * listed form-associated elements in a disabled fieldset
          //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
          //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
          // * option elements in a disabled optgroup
          //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
          // All such elements have a "form" property.
          if (elem.parentNode && elem.disabled === false) {
            // Option elements defer to a parent optgroup if present
            if ("label" in elem) {
              if ("label" in elem.parentNode) {
                return elem.parentNode.disabled === disabled;
              } else {
                return elem.disabled === disabled;
              }
            } // Support: IE 6 - 11
            // Use the isDisabled shortcut property to check for disabled fieldset ancestors


            return elem.isDisabled === disabled || // Where there is no isDisabled, check manually

            /* jshint -W018 */
            elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
          }

          return elem.disabled === disabled; // Try to winnow out elements that can't be disabled before trusting the disabled property.
          // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
          // even exist on them, let alone have a boolean value.
        } else if ("label" in elem) {
          return elem.disabled === disabled;
        } // Remaining elements are neither :enabled nor :disabled


        return false;
      };
    }
    /**
     * Returns a function to use in pseudos for positionals
     * @param {Function} fn
     */


    function createPositionalPseudo(fn) {
      return markFunction(function (argument) {
        argument = +argument;
        return markFunction(function (seed, matches) {
          var j,
              matchIndexes = fn([], seed.length, argument),
              i = matchIndexes.length; // Match elements found at the specified indexes

          while (i--) {
            if (seed[j = matchIndexes[i]]) {
              seed[j] = !(matches[j] = seed[j]);
            }
          }
        });
      });
    }
    /**
     * Checks a node for validity as a Sizzle context
     * @param {Element|Object=} context
     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
     */


    function testContext(context) {
      return context && typeof context.getElementsByTagName !== "undefined" && context;
    } // Expose support vars for convenience


    support = Sizzle.support = {};
    /**
     * Detects XML nodes
     * @param {Element|Object} elem An element or a document
     * @returns {Boolean} True iff elem is a non-HTML XML node
     */

    isXML = Sizzle.isXML = function (elem) {
      var namespace = elem.namespaceURI,
          docElem = (elem.ownerDocument || elem).documentElement; // Support: IE <=8
      // Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
      // https://bugs.jquery.com/ticket/4833

      return !rhtml.test(namespace || docElem && docElem.nodeName || "HTML");
    };
    /**
     * Sets document-related variables once based on the current document
     * @param {Element|Object} [doc] An element or document object to use to set the document
     * @returns {Object} Returns the current document
     */


    setDocument = Sizzle.setDocument = function (node) {
      var hasCompare,
          subWindow,
          doc = node ? node.ownerDocument || node : preferredDoc; // Return early if doc is invalid or already selected
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq

      if (doc == document || doc.nodeType !== 9 || !doc.documentElement) {
        return document;
      } // Update global variables


      document = doc;
      docElem = document.documentElement;
      documentIsHTML = !isXML(document); // Support: IE 9 - 11+, Edge 12 - 18+
      // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq

      if (preferredDoc != document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
        // Support: IE 11, Edge
        if (subWindow.addEventListener) {
          subWindow.addEventListener("unload", unloadHandler, false); // Support: IE 9 - 10 only
        } else if (subWindow.attachEvent) {
          subWindow.attachEvent("onunload", unloadHandler);
        }
      } // Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
      // Safari 4 - 5 only, Opera <=11.6 - 12.x only
      // IE/Edge & older browsers don't support the :scope pseudo-class.
      // Support: Safari 6.0 only
      // Safari 6.0 supports :scope but it's an alias of :root there.


      support.scope = assert(function (el) {
        docElem.appendChild(el).appendChild(document.createElement("div"));
        return typeof el.querySelectorAll !== "undefined" && !el.querySelectorAll(":scope fieldset div").length;
      });
      /* Attributes
      ---------------------------------------------------------------------- */
      // Support: IE<8
      // Verify that getAttribute really returns attributes and not properties
      // (excepting IE8 booleans)

      support.attributes = assert(function (el) {
        el.className = "i";
        return !el.getAttribute("className");
      });
      /* getElement(s)By*
      ---------------------------------------------------------------------- */
      // Check if getElementsByTagName("*") returns only elements

      support.getElementsByTagName = assert(function (el) {
        el.appendChild(document.createComment(""));
        return !el.getElementsByTagName("*").length;
      }); // Support: IE<9

      support.getElementsByClassName = rnative.test(document.getElementsByClassName); // Support: IE<10
      // Check if getElementById returns elements by name
      // The broken getElementById methods don't pick up programmatically-set names,
      // so use a roundabout getElementsByName test

      support.getById = assert(function (el) {
        docElem.appendChild(el).id = expando;
        return !document.getElementsByName || !document.getElementsByName(expando).length;
      }); // ID filter and find

      if (support.getById) {
        Expr.filter["ID"] = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            return elem.getAttribute("id") === attrId;
          };
        };

        Expr.find["ID"] = function (id, context) {
          if (typeof context.getElementById !== "undefined" && documentIsHTML) {
            var elem = context.getElementById(id);
            return elem ? [elem] : [];
          }
        };
      } else {
        Expr.filter["ID"] = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
            return node && node.value === attrId;
          };
        }; // Support: IE 6 - 7 only
        // getElementById is not reliable as a find shortcut


        Expr.find["ID"] = function (id, context) {
          if (typeof context.getElementById !== "undefined" && documentIsHTML) {
            var node,
                i,
                elems,
                elem = context.getElementById(id);

            if (elem) {
              // Verify the id attribute
              node = elem.getAttributeNode("id");

              if (node && node.value === id) {
                return [elem];
              } // Fall back on getElementsByName


              elems = context.getElementsByName(id);
              i = 0;

              while (elem = elems[i++]) {
                node = elem.getAttributeNode("id");

                if (node && node.value === id) {
                  return [elem];
                }
              }
            }

            return [];
          }
        };
      } // Tag


      Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
        if (typeof context.getElementsByTagName !== "undefined") {
          return context.getElementsByTagName(tag); // DocumentFragment nodes don't have gEBTN
        } else if (support.qsa) {
          return context.querySelectorAll(tag);
        }
      } : function (tag, context) {
        var elem,
            tmp = [],
            i = 0,
            // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
        results = context.getElementsByTagName(tag); // Filter out possible comments

        if (tag === "*") {
          while (elem = results[i++]) {
            if (elem.nodeType === 1) {
              tmp.push(elem);
            }
          }

          return tmp;
        }

        return results;
      }; // Class

      Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
        if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
          return context.getElementsByClassName(className);
        }
      };
      /* QSA/matchesSelector
      ---------------------------------------------------------------------- */
      // QSA and matchesSelector support
      // matchesSelector(:active) reports false when true (IE9/Opera 11.5)


      rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21)
      // We allow this because of a bug in IE8/9 that throws an error
      // whenever `document.activeElement` is accessed on an iframe
      // So, we allow :focus to pass through QSA all the time to avoid the IE error
      // See https://bugs.jquery.com/ticket/13378

      rbuggyQSA = [];

      if (support.qsa = rnative.test(document.querySelectorAll)) {
        // Build QSA regex
        // Regex strategy adopted from Diego Perini
        assert(function (el) {
          var input; // Select is set to empty string on purpose
          // This is to test IE's treatment of not explicitly
          // setting a boolean content attribute,
          // since its presence should be enough
          // https://bugs.jquery.com/ticket/12359

          docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>"; // Support: IE8, Opera 11-12.16
          // Nothing should be selected when empty strings follow ^= or $= or *=
          // The test attribute must be unknown in Opera but "safe" for WinRT
          // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section

          if (el.querySelectorAll("[msallowcapture^='']").length) {
            rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
          } // Support: IE8
          // Boolean attributes and "value" are not treated correctly


          if (!el.querySelectorAll("[selected]").length) {
            rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
          } // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+


          if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
            rbuggyQSA.push("~=");
          } // Support: IE 11+, Edge 15 - 18+
          // IE 11/Edge don't find elements on a `[name='']` query in some cases.
          // Adding a temporary attribute to the document before the selection works
          // around the issue.
          // Interestingly, IE 10 & older don't seem to have the issue.


          input = document.createElement("input");
          input.setAttribute("name", "");
          el.appendChild(input);

          if (!el.querySelectorAll("[name='']").length) {
            rbuggyQSA.push("\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + "*(?:''|\"\")");
          } // Webkit/Opera - :checked should return selected option elements
          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          // IE8 throws error here and will not see later tests


          if (!el.querySelectorAll(":checked").length) {
            rbuggyQSA.push(":checked");
          } // Support: Safari 8+, iOS 8+
          // https://bugs.webkit.org/show_bug.cgi?id=136851
          // In-page `selector#id sibling-combinator selector` fails


          if (!el.querySelectorAll("a#" + expando + "+*").length) {
            rbuggyQSA.push(".#.+[+~]");
          } // Support: Firefox <=3.6 - 5 only
          // Old Firefox doesn't throw on a badly-escaped identifier.


          el.querySelectorAll("\\\f");
          rbuggyQSA.push("[\\r\\n\\f]");
        });
        assert(function (el) {
          el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>"; // Support: Windows 8 Native Apps
          // The type and name attributes are restricted during .innerHTML assignment

          var input = document.createElement("input");
          input.setAttribute("type", "hidden");
          el.appendChild(input).setAttribute("name", "D"); // Support: IE8
          // Enforce case-sensitivity of name attribute

          if (el.querySelectorAll("[name=d]").length) {
            rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
          } // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
          // IE8 throws error here and will not see later tests


          if (el.querySelectorAll(":enabled").length !== 2) {
            rbuggyQSA.push(":enabled", ":disabled");
          } // Support: IE9-11+
          // IE's :disabled selector does not pick up the children of disabled fieldsets


          docElem.appendChild(el).disabled = true;

          if (el.querySelectorAll(":disabled").length !== 2) {
            rbuggyQSA.push(":enabled", ":disabled");
          } // Support: Opera 10 - 11 only
          // Opera 10-11 does not throw on post-comma invalid pseudos


          el.querySelectorAll("*,:x");
          rbuggyQSA.push(",.*:");
        });
      }

      if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
        assert(function (el) {
          // Check to see if it's possible to do matchesSelector
          // on a disconnected node (IE 9)
          support.disconnectedMatch = matches.call(el, "*"); // This should fail with an exception
          // Gecko does not error, returns false instead

          matches.call(el, "[s!='']:x");
          rbuggyMatches.push("!=", pseudos);
        });
      }

      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
      rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
      /* Contains
      ---------------------------------------------------------------------- */

      hasCompare = rnative.test(docElem.compareDocumentPosition); // Element contains another
      // Purposefully self-exclusive
      // As in, an element does not contain itself

      contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
        var adown = a.nodeType === 9 ? a.documentElement : a,
            bup = b && b.parentNode;
        return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
      } : function (a, b) {
        if (b) {
          while (b = b.parentNode) {
            if (b === a) {
              return true;
            }
          }
        }

        return false;
      };
      /* Sorting
      ---------------------------------------------------------------------- */
      // Document order sorting

      sortOrder = hasCompare ? function (a, b) {
        // Flag for duplicate removal
        if (a === b) {
          hasDuplicate = true;
          return 0;
        } // Sort on method existence if only one input has compareDocumentPosition


        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;

        if (compare) {
          return compare;
        } // Calculate position if both inputs belong to the same document
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq


        compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected
        1; // Disconnected nodes

        if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
          // Choose the first element that is related to our preferred document
          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq
          if (a == document || a.ownerDocument == preferredDoc && contains(preferredDoc, a)) {
            return -1;
          } // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq


          if (b == document || b.ownerDocument == preferredDoc && contains(preferredDoc, b)) {
            return 1;
          } // Maintain original order


          return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
        }

        return compare & 4 ? -1 : 1;
      } : function (a, b) {
        // Exit early if the nodes are identical
        if (a === b) {
          hasDuplicate = true;
          return 0;
        }

        var cur,
            i = 0,
            aup = a.parentNode,
            bup = b.parentNode,
            ap = [a],
            bp = [b]; // Parentless nodes are either documents or disconnected

        if (!aup || !bup) {
          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.

          /* eslint-disable eqeqeq */
          return a == document ? -1 : b == document ? 1 :
          /* eslint-enable eqeqeq */
          aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0; // If the nodes are siblings, we can do a quick check
        } else if (aup === bup) {
          return siblingCheck(a, b);
        } // Otherwise we need full lists of their ancestors for comparison


        cur = a;

        while (cur = cur.parentNode) {
          ap.unshift(cur);
        }

        cur = b;

        while (cur = cur.parentNode) {
          bp.unshift(cur);
        } // Walk down the tree looking for a discrepancy


        while (ap[i] === bp[i]) {
          i++;
        }

        return i ? // Do a sibling check if the nodes have a common ancestor
        siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.

        /* eslint-disable eqeqeq */
        ap[i] == preferredDoc ? -1 : bp[i] == preferredDoc ? 1 :
        /* eslint-enable eqeqeq */
        0;
      };
      return document;
    };

    Sizzle.matches = function (expr, elements) {
      return Sizzle(expr, null, null, elements);
    };

    Sizzle.matchesSelector = function (elem, expr) {
      setDocument(elem);

      if (support.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
        try {
          var ret = matches.call(elem, expr); // IE 9's matchesSelector returns false on disconnected nodes

          if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
          // fragment in IE 9
          elem.document && elem.document.nodeType !== 11) {
            return ret;
          }
        } catch (e) {
          nonnativeSelectorCache(expr, true);
        }
      }

      return Sizzle(expr, document, null, [elem]).length > 0;
    };

    Sizzle.contains = function (context, elem) {
      // Set document vars if needed
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq
      if ((context.ownerDocument || context) != document) {
        setDocument(context);
      }

      return contains(context, elem);
    };

    Sizzle.attr = function (elem, name) {
      // Set document vars if needed
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq
      if ((elem.ownerDocument || elem) != document) {
        setDocument(elem);
      }

      var fn = Expr.attrHandle[name.toLowerCase()],
          // Don't get fooled by Object.prototype properties (jQuery #13807)
      val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
      return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
    };

    Sizzle.escape = function (sel) {
      return (sel + "").replace(rcssescape, fcssescape);
    };

    Sizzle.error = function (msg) {
      throw new Error("Syntax error, unrecognized expression: " + msg);
    };
    /**
     * Document sorting and removing duplicates
     * @param {ArrayLike} results
     */


    Sizzle.uniqueSort = function (results) {
      var elem,
          duplicates = [],
          j = 0,
          i = 0; // Unless we *know* we can detect duplicates, assume their presence

      hasDuplicate = !support.detectDuplicates;
      sortInput = !support.sortStable && results.slice(0);
      results.sort(sortOrder);

      if (hasDuplicate) {
        while (elem = results[i++]) {
          if (elem === results[i]) {
            j = duplicates.push(i);
          }
        }

        while (j--) {
          results.splice(duplicates[j], 1);
        }
      } // Clear input after sorting to release objects
      // See https://github.com/jquery/sizzle/pull/225


      sortInput = null;
      return results;
    };
    /**
     * Utility function for retrieving the text value of an array of DOM nodes
     * @param {Array|Element} elem
     */


    getText = Sizzle.getText = function (elem) {
      var node,
          ret = "",
          i = 0,
          nodeType = elem.nodeType;

      if (!nodeType) {
        // If no nodeType, this is expected to be an array
        while (node = elem[i++]) {
          // Do not traverse comment nodes
          ret += getText(node);
        }
      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
        // Use textContent for elements
        // innerText usage removed for consistency of new lines (jQuery #11153)
        if (typeof elem.textContent === "string") {
          return elem.textContent;
        } else {
          // Traverse its children
          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
            ret += getText(elem);
          }
        }
      } else if (nodeType === 3 || nodeType === 4) {
        return elem.nodeValue;
      } // Do not include comment or processing instruction nodes


      return ret;
    };

    Expr = Sizzle.selectors = {
      // Can be adjusted by the user
      cacheLength: 50,
      createPseudo: markFunction,
      match: matchExpr,
      attrHandle: {},
      find: {},
      relative: {
        ">": {
          dir: "parentNode",
          first: true
        },
        " ": {
          dir: "parentNode"
        },
        "+": {
          dir: "previousSibling",
          first: true
        },
        "~": {
          dir: "previousSibling"
        }
      },
      preFilter: {
        "ATTR": function (match) {
          match[1] = match[1].replace(runescape, funescape); // Move the given value to match[3] whether quoted or unquoted

          match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

          if (match[2] === "~=") {
            match[3] = " " + match[3] + " ";
          }

          return match.slice(0, 4);
        },
        "CHILD": function (match) {
          /* matches from matchExpr["CHILD"]
          	1 type (only|nth|...)
          	2 what (child|of-type)
          	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
          	4 xn-component of xn+y argument ([+-]?\d*n|)
          	5 sign of xn-component
          	6 x of xn-component
          	7 sign of y-component
          	8 y of y-component
          */
          match[1] = match[1].toLowerCase();

          if (match[1].slice(0, 3) === "nth") {
            // nth-* requires argument
            if (!match[3]) {
              Sizzle.error(match[0]);
            } // numeric x and y parameters for Expr.filter.CHILD
            // remember that false/true cast respectively to 0/1


            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
            match[5] = +(match[7] + match[8] || match[3] === "odd"); // other types prohibit arguments
          } else if (match[3]) {
            Sizzle.error(match[0]);
          }

          return match;
        },
        "PSEUDO": function (match) {
          var excess,
              unquoted = !match[6] && match[2];

          if (matchExpr["CHILD"].test(match[0])) {
            return null;
          } // Accept quoted arguments as-is


          if (match[3]) {
            match[2] = match[4] || match[5] || ""; // Strip excess characters from unquoted arguments
          } else if (unquoted && rpseudo.test(unquoted) && ( // Get excess from tokenize (recursively)
          excess = tokenize(unquoted, true)) && ( // advance to the next closing parenthesis
          excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
            // excess is a negative index
            match[0] = match[0].slice(0, excess);
            match[2] = unquoted.slice(0, excess);
          } // Return only captures needed by the pseudo filter method (type and argument)


          return match.slice(0, 3);
        }
      },
      filter: {
        "TAG": function (nodeNameSelector) {
          var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
          return nodeNameSelector === "*" ? function () {
            return true;
          } : function (elem) {
            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
          };
        },
        "CLASS": function (className) {
          var pattern = classCache[className + " "];
          return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
            return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
          });
        },
        "ATTR": function (name, operator, check) {
          return function (elem) {
            var result = Sizzle.attr(elem, name);

            if (result == null) {
              return operator === "!=";
            }

            if (!operator) {
              return true;
            }

            result += "";
            /* eslint-disable max-len */

            return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
            /* eslint-enable max-len */
          };
        },
        "CHILD": function (type, what, _argument, first, last) {
          var simple = type.slice(0, 3) !== "nth",
              forward = type.slice(-4) !== "last",
              ofType = what === "of-type";
          return first === 1 && last === 0 ? // Shortcut for :nth-*(n)
          function (elem) {
            return !!elem.parentNode;
          } : function (elem, _context, xml) {
            var cache,
                uniqueCache,
                outerCache,
                node,
                nodeIndex,
                start,
                dir = simple !== forward ? "nextSibling" : "previousSibling",
                parent = elem.parentNode,
                name = ofType && elem.nodeName.toLowerCase(),
                useCache = !xml && !ofType,
                diff = false;

            if (parent) {
              // :(first|last|only)-(child|of-type)
              if (simple) {
                while (dir) {
                  node = elem;

                  while (node = node[dir]) {
                    if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                      return false;
                    }
                  } // Reverse direction for :only-* (if we haven't yet done so)


                  start = dir = type === "only" && !start && "nextSibling";
                }

                return true;
              }

              start = [forward ? parent.firstChild : parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`

              if (forward && useCache) {
                // Seek `elem` from a previously-cached index
                // ...in a gzip-friendly way
                node = parent;
                outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                // Defend against cloned attroperties (jQuery gh-1709)

                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                cache = uniqueCache[type] || [];
                nodeIndex = cache[0] === dirruns && cache[1];
                diff = nodeIndex && cache[2];
                node = nodeIndex && parent.childNodes[nodeIndex];

                while (node = ++nodeIndex && node && node[dir] || ( // Fallback to seeking `elem` from the start
                diff = nodeIndex = 0) || start.pop()) {
                  // When found, cache indexes on `parent` and break
                  if (node.nodeType === 1 && ++diff && node === elem) {
                    uniqueCache[type] = [dirruns, nodeIndex, diff];
                    break;
                  }
                }
              } else {
                // Use previously-cached element index if available
                if (useCache) {
                  // ...in a gzip-friendly way
                  node = elem;
                  outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                  // Defend against cloned attroperties (jQuery gh-1709)

                  uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                  cache = uniqueCache[type] || [];
                  nodeIndex = cache[0] === dirruns && cache[1];
                  diff = nodeIndex;
                } // xml :nth-child(...)
                // or :nth-last-child(...) or :nth(-last)?-of-type(...)


                if (diff === false) {
                  // Use the same loop as above to seek `elem` from the start
                  while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                      // Cache the index of each encountered element
                      if (useCache) {
                        outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                        // Defend against cloned attroperties (jQuery gh-1709)

                        uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                        uniqueCache[type] = [dirruns, diff];
                      }

                      if (node === elem) {
                        break;
                      }
                    }
                  }
                }
              } // Incorporate the offset, then check against cycle size


              diff -= last;
              return diff === first || diff % first === 0 && diff / first >= 0;
            }
          };
        },
        "PSEUDO": function (pseudo, argument) {
          // pseudo-class names are case-insensitive
          // http://www.w3.org/TR/selectors/#pseudo-classes
          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
          // Remember that setFilters inherits from pseudos
          var args,
              fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo); // The user may use createPseudo to indicate that
          // arguments are needed to create the filter function
          // just as Sizzle does

          if (fn[expando]) {
            return fn(argument);
          } // But maintain support for old signatures


          if (fn.length > 1) {
            args = [pseudo, pseudo, "", argument];
            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
              var idx,
                  matched = fn(seed, argument),
                  i = matched.length;

              while (i--) {
                idx = indexOf(seed, matched[i]);
                seed[idx] = !(matches[idx] = matched[i]);
              }
            }) : function (elem) {
              return fn(elem, 0, args);
            };
          }

          return fn;
        }
      },
      pseudos: {
        // Potentially complex pseudos
        "not": markFunction(function (selector) {
          // Trim the selector passed to compile
          // to avoid treating leading and trailing
          // spaces as combinators
          var input = [],
              results = [],
              matcher = compile(selector.replace(rtrim, "$1"));
          return matcher[expando] ? markFunction(function (seed, matches, _context, xml) {
            var elem,
                unmatched = matcher(seed, null, xml, []),
                i = seed.length; // Match elements unmatched by `matcher`

            while (i--) {
              if (elem = unmatched[i]) {
                seed[i] = !(matches[i] = elem);
              }
            }
          }) : function (elem, _context, xml) {
            input[0] = elem;
            matcher(input, null, xml, results); // Don't keep the element (issue #299)

            input[0] = null;
            return !results.pop();
          };
        }),
        "has": markFunction(function (selector) {
          return function (elem) {
            return Sizzle(selector, elem).length > 0;
          };
        }),
        "contains": markFunction(function (text) {
          text = text.replace(runescape, funescape);
          return function (elem) {
            return (elem.textContent || getText(elem)).indexOf(text) > -1;
          };
        }),
        // "Whether an element is represented by a :lang() selector
        // is based solely on the element's language value
        // being equal to the identifier C,
        // or beginning with the identifier C immediately followed by "-".
        // The matching of C against the element's language value is performed case-insensitively.
        // The identifier C does not have to be a valid language name."
        // http://www.w3.org/TR/selectors/#lang-pseudo
        "lang": markFunction(function (lang) {
          // lang value must be a valid identifier
          if (!ridentifier.test(lang || "")) {
            Sizzle.error("unsupported lang: " + lang);
          }

          lang = lang.replace(runescape, funescape).toLowerCase();
          return function (elem) {
            var elemLang;

            do {
              if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                elemLang = elemLang.toLowerCase();
                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
              }
            } while ((elem = elem.parentNode) && elem.nodeType === 1);

            return false;
          };
        }),
        // Miscellaneous
        "target": function (elem) {
          var hash = window.location && window.location.hash;
          return hash && hash.slice(1) === elem.id;
        },
        "root": function (elem) {
          return elem === docElem;
        },
        "focus": function (elem) {
          return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
        },
        // Boolean properties
        "enabled": createDisabledPseudo(false),
        "disabled": createDisabledPseudo(true),
        "checked": function (elem) {
          // In CSS3, :checked should return both checked and selected elements
          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          var nodeName = elem.nodeName.toLowerCase();
          return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
        },
        "selected": function (elem) {
          // Accessing this property makes selected-by-default
          // options in Safari work properly
          if (elem.parentNode) {
            // eslint-disable-next-line no-unused-expressions
            elem.parentNode.selectedIndex;
          }

          return elem.selected === true;
        },
        // Contents
        "empty": function (elem) {
          // http://www.w3.org/TR/selectors/#empty-pseudo
          // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
          //   but not by others (comment: 8; processing instruction: 7; etc.)
          // nodeType < 6 works because attributes (2) do not appear as children
          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
            if (elem.nodeType < 6) {
              return false;
            }
          }

          return true;
        },
        "parent": function (elem) {
          return !Expr.pseudos["empty"](elem);
        },
        // Element/input types
        "header": function (elem) {
          return rheader.test(elem.nodeName);
        },
        "input": function (elem) {
          return rinputs.test(elem.nodeName);
        },
        "button": function (elem) {
          var name = elem.nodeName.toLowerCase();
          return name === "input" && elem.type === "button" || name === "button";
        },
        "text": function (elem) {
          var attr;
          return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ( // Support: IE<8
          // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
          (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
        },
        // Position-in-collection
        "first": createPositionalPseudo(function () {
          return [0];
        }),
        "last": createPositionalPseudo(function (_matchIndexes, length) {
          return [length - 1];
        }),
        "eq": createPositionalPseudo(function (_matchIndexes, length, argument) {
          return [argument < 0 ? argument + length : argument];
        }),
        "even": createPositionalPseudo(function (matchIndexes, length) {
          var i = 0;

          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        }),
        "odd": createPositionalPseudo(function (matchIndexes, length) {
          var i = 1;

          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        }),
        "lt": createPositionalPseudo(function (matchIndexes, length, argument) {
          var i = argument < 0 ? argument + length : argument > length ? length : argument;

          for (; --i >= 0;) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        }),
        "gt": createPositionalPseudo(function (matchIndexes, length, argument) {
          var i = argument < 0 ? argument + length : argument;

          for (; ++i < length;) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        })
      }
    };
    Expr.pseudos["nth"] = Expr.pseudos["eq"]; // Add button/input type pseudos

    for (i in {
      radio: true,
      checkbox: true,
      file: true,
      password: true,
      image: true
    }) {
      Expr.pseudos[i] = createInputPseudo(i);
    }

    for (i in {
      submit: true,
      reset: true
    }) {
      Expr.pseudos[i] = createButtonPseudo(i);
    } // Easy API for creating new setFilters


    function setFilters() {}

    setFilters.prototype = Expr.filters = Expr.pseudos;
    Expr.setFilters = new setFilters();

    tokenize = Sizzle.tokenize = function (selector, parseOnly) {
      var matched,
          match,
          tokens,
          type,
          soFar,
          groups,
          preFilters,
          cached = tokenCache[selector + " "];

      if (cached) {
        return parseOnly ? 0 : cached.slice(0);
      }

      soFar = selector;
      groups = [];
      preFilters = Expr.preFilter;

      while (soFar) {
        // Comma and first run
        if (!matched || (match = rcomma.exec(soFar))) {
          if (match) {
            // Don't consume trailing commas as valid
            soFar = soFar.slice(match[0].length) || soFar;
          }

          groups.push(tokens = []);
        }

        matched = false; // Combinators

        if (match = rcombinators.exec(soFar)) {
          matched = match.shift();
          tokens.push({
            value: matched,
            // Cast descendant combinators to space
            type: match[0].replace(rtrim, " ")
          });
          soFar = soFar.slice(matched.length);
        } // Filters


        for (type in Expr.filter) {
          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
            matched = match.shift();
            tokens.push({
              value: matched,
              type: type,
              matches: match
            });
            soFar = soFar.slice(matched.length);
          }
        }

        if (!matched) {
          break;
        }
      } // Return the length of the invalid excess
      // if we're just parsing
      // Otherwise, throw an error or return tokens


      return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens
      tokenCache(selector, groups).slice(0);
    };

    function toSelector(tokens) {
      var i = 0,
          len = tokens.length,
          selector = "";

      for (; i < len; i++) {
        selector += tokens[i].value;
      }

      return selector;
    }

    function addCombinator(matcher, combinator, base) {
      var dir = combinator.dir,
          skip = combinator.next,
          key = skip || dir,
          checkNonElements = base && key === "parentNode",
          doneName = done++;
      return combinator.first ? // Check against closest ancestor/preceding element
      function (elem, context, xml) {
        while (elem = elem[dir]) {
          if (elem.nodeType === 1 || checkNonElements) {
            return matcher(elem, context, xml);
          }
        }

        return false;
      } : // Check against all ancestor/preceding elements
      function (elem, context, xml) {
        var oldCache,
            uniqueCache,
            outerCache,
            newCache = [dirruns, doneName]; // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching

        if (xml) {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              if (matcher(elem, context, xml)) {
                return true;
              }
            }
          }
        } else {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              outerCache = elem[expando] || (elem[expando] = {}); // Support: IE <9 only
              // Defend against cloned attroperties (jQuery gh-1709)

              uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

              if (skip && skip === elem.nodeName.toLowerCase()) {
                elem = elem[dir] || elem;
              } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                // Assign to newCache so results back-propagate to previous elements
                return newCache[2] = oldCache[2];
              } else {
                // Reuse newcache so results back-propagate to previous elements
                uniqueCache[key] = newCache; // A match means we're done; a fail means we have to keep checking

                if (newCache[2] = matcher(elem, context, xml)) {
                  return true;
                }
              }
            }
          }
        }

        return false;
      };
    }

    function elementMatcher(matchers) {
      return matchers.length > 1 ? function (elem, context, xml) {
        var i = matchers.length;

        while (i--) {
          if (!matchers[i](elem, context, xml)) {
            return false;
          }
        }

        return true;
      } : matchers[0];
    }

    function multipleContexts(selector, contexts, results) {
      var i = 0,
          len = contexts.length;

      for (; i < len; i++) {
        Sizzle(selector, contexts[i], results);
      }

      return results;
    }

    function condense(unmatched, map, filter, context, xml) {
      var elem,
          newUnmatched = [],
          i = 0,
          len = unmatched.length,
          mapped = map != null;

      for (; i < len; i++) {
        if (elem = unmatched[i]) {
          if (!filter || filter(elem, context, xml)) {
            newUnmatched.push(elem);

            if (mapped) {
              map.push(i);
            }
          }
        }
      }

      return newUnmatched;
    }

    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
      if (postFilter && !postFilter[expando]) {
        postFilter = setMatcher(postFilter);
      }

      if (postFinder && !postFinder[expando]) {
        postFinder = setMatcher(postFinder, postSelector);
      }

      return markFunction(function (seed, results, context, xml) {
        var temp,
            i,
            elem,
            preMap = [],
            postMap = [],
            preexisting = results.length,
            // Get initial elements from seed or context
        elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
            // Prefilter to get matcher input, preserving a map for seed-results synchronization
        matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
            matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
        postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary
        [] : // ...otherwise use results directly
        results : matcherIn; // Find primary matches

        if (matcher) {
          matcher(matcherIn, matcherOut, context, xml);
        } // Apply postFilter


        if (postFilter) {
          temp = condense(matcherOut, postMap);
          postFilter(temp, [], context, xml); // Un-match failing elements by moving them back to matcherIn

          i = temp.length;

          while (i--) {
            if (elem = temp[i]) {
              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
            }
          }
        }

        if (seed) {
          if (postFinder || preFilter) {
            if (postFinder) {
              // Get the final matcherOut by condensing this intermediate into postFinder contexts
              temp = [];
              i = matcherOut.length;

              while (i--) {
                if (elem = matcherOut[i]) {
                  // Restore matcherIn since elem is not yet a final match
                  temp.push(matcherIn[i] = elem);
                }
              }

              postFinder(null, matcherOut = [], temp, xml);
            } // Move matched elements from seed to results to keep them synchronized


            i = matcherOut.length;

            while (i--) {
              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                seed[temp] = !(results[temp] = elem);
              }
            }
          } // Add elements to results, through postFinder if defined

        } else {
          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);

          if (postFinder) {
            postFinder(null, results, matcherOut, xml);
          } else {
            push.apply(results, matcherOut);
          }
        }
      });
    }

    function matcherFromTokens(tokens) {
      var checkContext,
          matcher,
          j,
          len = tokens.length,
          leadingRelative = Expr.relative[tokens[0].type],
          implicitRelative = leadingRelative || Expr.relative[" "],
          i = leadingRelative ? 1 : 0,
          // The foundational matcher ensures that elements are reachable from top-level context(s)
      matchContext = addCombinator(function (elem) {
        return elem === checkContext;
      }, implicitRelative, true),
          matchAnyContext = addCombinator(function (elem) {
        return indexOf(checkContext, elem) > -1;
      }, implicitRelative, true),
          matchers = [function (elem, context, xml) {
        var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml)); // Avoid hanging onto element (issue #299)

        checkContext = null;
        return ret;
      }];

      for (; i < len; i++) {
        if (matcher = Expr.relative[tokens[i].type]) {
          matchers = [addCombinator(elementMatcher(matchers), matcher)];
        } else {
          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); // Return special upon seeing a positional matcher

          if (matcher[expando]) {
            // Find the next relative operator (if any) for proper handling
            j = ++i;

            for (; j < len; j++) {
              if (Expr.relative[tokens[j].type]) {
                break;
              }
            }

            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector( // If the preceding token was a descendant combinator, insert an implicit any-element `*`
            tokens.slice(0, i - 1).concat({
              value: tokens[i - 2].type === " " ? "*" : ""
            })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
          }

          matchers.push(matcher);
        }
      }

      return elementMatcher(matchers);
    }

    function matcherFromGroupMatchers(elementMatchers, setMatchers) {
      var bySet = setMatchers.length > 0,
          byElement = elementMatchers.length > 0,
          superMatcher = function (seed, context, xml, results, outermost) {
        var elem,
            j,
            matcher,
            matchedCount = 0,
            i = "0",
            unmatched = seed && [],
            setMatched = [],
            contextBackup = outermostContext,
            // We must always have either seed elements or outermost context
        elems = seed || byElement && Expr.find["TAG"]("*", outermost),
            // Use integer dirruns iff this is the outermost matcher
        dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
            len = elems.length;

        if (outermost) {
          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq
          outermostContext = context == document || context || outermost;
        } // Add elements passing elementMatchers directly to results
        // Support: IE<9, Safari
        // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id


        for (; i !== len && (elem = elems[i]) != null; i++) {
          if (byElement && elem) {
            j = 0; // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.
            // eslint-disable-next-line eqeqeq

            if (!context && elem.ownerDocument != document) {
              setDocument(elem);
              xml = !documentIsHTML;
            }

            while (matcher = elementMatchers[j++]) {
              if (matcher(elem, context || document, xml)) {
                results.push(elem);
                break;
              }
            }

            if (outermost) {
              dirruns = dirrunsUnique;
            }
          } // Track unmatched elements for set filters


          if (bySet) {
            // They will have gone through all possible matchers
            if (elem = !matcher && elem) {
              matchedCount--;
            } // Lengthen the array for every element, matched or not


            if (seed) {
              unmatched.push(elem);
            }
          }
        } // `i` is now the count of elements visited above, and adding it to `matchedCount`
        // makes the latter nonnegative.


        matchedCount += i; // Apply set filters to unmatched elements
        // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
        // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
        // no element matchers and no seed.
        // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
        // case, which will result in a "00" `matchedCount` that differs from `i` but is also
        // numerically zero.

        if (bySet && i !== matchedCount) {
          j = 0;

          while (matcher = setMatchers[j++]) {
            matcher(unmatched, setMatched, context, xml);
          }

          if (seed) {
            // Reintegrate element matches to eliminate the need for sorting
            if (matchedCount > 0) {
              while (i--) {
                if (!(unmatched[i] || setMatched[i])) {
                  setMatched[i] = pop.call(results);
                }
              }
            } // Discard index placeholder values to get only actual matches


            setMatched = condense(setMatched);
          } // Add matches to results


          push.apply(results, setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting

          if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
            Sizzle.uniqueSort(results);
          }
        } // Override manipulation of globals by nested matchers


        if (outermost) {
          dirruns = dirrunsUnique;
          outermostContext = contextBackup;
        }

        return unmatched;
      };

      return bySet ? markFunction(superMatcher) : superMatcher;
    }

    compile = Sizzle.compile = function (selector, match
    /* Internal Use Only */
    ) {
      var i,
          setMatchers = [],
          elementMatchers = [],
          cached = compilerCache[selector + " "];

      if (!cached) {
        // Generate a function of recursive functions that can be used to check each element
        if (!match) {
          match = tokenize(selector);
        }

        i = match.length;

        while (i--) {
          cached = matcherFromTokens(match[i]);

          if (cached[expando]) {
            setMatchers.push(cached);
          } else {
            elementMatchers.push(cached);
          }
        } // Cache the compiled function


        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers)); // Save selector and tokenization

        cached.selector = selector;
      }

      return cached;
    };
    /**
     * A low-level selection function that works with Sizzle's compiled
     *  selector functions
     * @param {String|Function} selector A selector or a pre-compiled
     *  selector function built with Sizzle.compile
     * @param {Element} context
     * @param {Array} [results]
     * @param {Array} [seed] A set of elements to match against
     */


    select = Sizzle.select = function (selector, context, results, seed) {
      var i,
          tokens,
          token,
          type,
          find,
          compiled = typeof selector === "function" && selector,
          match = !seed && tokenize(selector = compiled.selector || selector);
      results = results || []; // Try to minimize operations if there is only one selector in the list and no seed
      // (the latter of which guarantees us context)

      if (match.length === 1) {
        // Reduce context if the leading compound selector is an ID
        tokens = match[0] = match[0].slice(0);

        if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
          context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];

          if (!context) {
            return results; // Precompiled matchers will still verify ancestry, so step up a level
          } else if (compiled) {
            context = context.parentNode;
          }

          selector = selector.slice(tokens.shift().value.length);
        } // Fetch a seed set for right-to-left matching


        i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;

        while (i--) {
          token = tokens[i]; // Abort if we hit a combinator

          if (Expr.relative[type = token.type]) {
            break;
          }

          if (find = Expr.find[type]) {
            // Search, expanding context for leading sibling combinators
            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
              // If seed is empty or no tokens remain, we can return early
              tokens.splice(i, 1);
              selector = seed.length && toSelector(tokens);

              if (!selector) {
                push.apply(results, seed);
                return results;
              }

              break;
            }
          }
        }
      } // Compile and execute a filtering function if one is not provided
      // Provide `match` to avoid retokenization if we modified the selector above


      (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
      return results;
    }; // One-time assignments
    // Sort stability


    support.sortStable = expando.split("").sort(sortOrder).join("") === expando; // Support: Chrome 14-35+
    // Always assume duplicates if they aren't passed to the comparison function

    support.detectDuplicates = !!hasDuplicate; // Initialize against the default document

    setDocument(); // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
    // Detached nodes confoundingly follow *each other*

    support.sortDetached = assert(function (el) {
      // Should return 1, but returns 4 (following)
      return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
    }); // Support: IE<8
    // Prevent attribute/property "interpolation"
    // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx

    if (!assert(function (el) {
      el.innerHTML = "<a href='#'></a>";
      return el.firstChild.getAttribute("href") === "#";
    })) {
      addHandle("type|href|height|width", function (elem, name, isXML) {
        if (!isXML) {
          return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
        }
      });
    } // Support: IE<9
    // Use defaultValue in place of getAttribute("value")


    if (!support.attributes || !assert(function (el) {
      el.innerHTML = "<input/>";
      el.firstChild.setAttribute("value", "");
      return el.firstChild.getAttribute("value") === "";
    })) {
      addHandle("value", function (elem, _name, isXML) {
        if (!isXML && elem.nodeName.toLowerCase() === "input") {
          return elem.defaultValue;
        }
      });
    } // Support: IE<9
    // Use getAttributeNode to fetch booleans when getAttribute lies


    if (!assert(function (el) {
      return el.getAttribute("disabled") == null;
    })) {
      addHandle(booleans, function (elem, name, isXML) {
        var val;

        if (!isXML) {
          return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        }
      });
    }

    return Sizzle;
  }(window);

  jQuery.find = Sizzle;
  jQuery.expr = Sizzle.selectors; // Deprecated

  jQuery.expr[":"] = jQuery.expr.pseudos;
  jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
  jQuery.text = Sizzle.getText;
  jQuery.isXMLDoc = Sizzle.isXML;
  jQuery.contains = Sizzle.contains;
  jQuery.escapeSelector = Sizzle.escape;

  var dir = function (elem, dir, until) {
    var matched = [],
        truncate = until !== undefined;

    while ((elem = elem[dir]) && elem.nodeType !== 9) {
      if (elem.nodeType === 1) {
        if (truncate && jQuery(elem).is(until)) {
          break;
        }

        matched.push(elem);
      }
    }

    return matched;
  };

  var siblings = function (n, elem) {
    var matched = [];

    for (; n; n = n.nextSibling) {
      if (n.nodeType === 1 && n !== elem) {
        matched.push(n);
      }
    }

    return matched;
  };

  var rneedsContext = jQuery.expr.match.needsContext;

  function nodeName(elem, name) {
    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
  }

  ;
  var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i; // Implement the identical functionality for filter and not

  function winnow(elements, qualifier, not) {
    if (isFunction(qualifier)) {
      return jQuery.grep(elements, function (elem, i) {
        return !!qualifier.call(elem, i, elem) !== not;
      });
    } // Single element


    if (qualifier.nodeType) {
      return jQuery.grep(elements, function (elem) {
        return elem === qualifier !== not;
      });
    } // Arraylike of elements (jQuery, arguments, Array)


    if (typeof qualifier !== "string") {
      return jQuery.grep(elements, function (elem) {
        return indexOf.call(qualifier, elem) > -1 !== not;
      });
    } // Filtered directly for both simple and complex selectors


    return jQuery.filter(qualifier, elements, not);
  }

  jQuery.filter = function (expr, elems, not) {
    var elem = elems[0];

    if (not) {
      expr = ":not(" + expr + ")";
    }

    if (elems.length === 1 && elem.nodeType === 1) {
      return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
    }

    return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
      return elem.nodeType === 1;
    }));
  };

  jQuery.fn.extend({
    find: function (selector) {
      var i,
          ret,
          len = this.length,
          self = this;

      if (typeof selector !== "string") {
        return this.pushStack(jQuery(selector).filter(function () {
          for (i = 0; i < len; i++) {
            if (jQuery.contains(self[i], this)) {
              return true;
            }
          }
        }));
      }

      ret = this.pushStack([]);

      for (i = 0; i < len; i++) {
        jQuery.find(selector, self[i], ret);
      }

      return len > 1 ? jQuery.uniqueSort(ret) : ret;
    },
    filter: function (selector) {
      return this.pushStack(winnow(this, selector || [], false));
    },
    not: function (selector) {
      return this.pushStack(winnow(this, selector || [], true));
    },
    is: function (selector) {
      return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set
      // so $("p:first").is("p:last") won't return true for a doc with two "p".
      typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
    }
  }); // Initialize a jQuery object
  // A central reference to the root jQuery(document)

  var rootjQuery,
      // A simple way to check for HTML strings
  // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
  // Strict HTML recognition (#11290: must start with <)
  // Shortcut simple #id case for speed
  rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
      init = jQuery.fn.init = function (selector, context, root) {
    var match, elem; // HANDLE: $(""), $(null), $(undefined), $(false)

    if (!selector) {
      return this;
    } // Method init() accepts an alternate rootjQuery
    // so migrate can support jQuery.sub (gh-2101)


    root = root || rootjQuery; // Handle HTML strings

    if (typeof selector === "string") {
      if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
        // Assume that strings that start and end with <> are HTML and skip the regex check
        match = [null, selector, null];
      } else {
        match = rquickExpr.exec(selector);
      } // Match html or make sure no context is specified for #id


      if (match && (match[1] || !context)) {
        // HANDLE: $(html) -> $(array)
        if (match[1]) {
          context = context instanceof jQuery ? context[0] : context; // Option to run scripts is true for back-compat
          // Intentionally let the error be thrown if parseHTML is not present

          jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true)); // HANDLE: $(html, props)

          if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
            for (match in context) {
              // Properties of context are called as methods if possible
              if (isFunction(this[match])) {
                this[match](context[match]); // ...and otherwise set as attributes
              } else {
                this.attr(match, context[match]);
              }
            }
          }

          return this; // HANDLE: $(#id)
        } else {
          elem = document.getElementById(match[2]);

          if (elem) {
            // Inject the element directly into the jQuery object
            this[0] = elem;
            this.length = 1;
          }

          return this;
        } // HANDLE: $(expr, $(...))

      } else if (!context || context.jquery) {
        return (context || root).find(selector); // HANDLE: $(expr, context)
        // (which is just equivalent to: $(context).find(expr)
      } else {
        return this.constructor(context).find(selector);
      } // HANDLE: $(DOMElement)

    } else if (selector.nodeType) {
      this[0] = selector;
      this.length = 1;
      return this; // HANDLE: $(function)
      // Shortcut for document ready
    } else if (isFunction(selector)) {
      return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present
      selector(jQuery);
    }

    return jQuery.makeArray(selector, this);
  }; // Give the init function the jQuery prototype for later instantiation


  init.prototype = jQuery.fn; // Initialize central reference

  rootjQuery = jQuery(document);
  var rparentsprev = /^(?:parents|prev(?:Until|All))/,
      // Methods guaranteed to produce a unique set when starting from a unique set
  guaranteedUnique = {
    children: true,
    contents: true,
    next: true,
    prev: true
  };
  jQuery.fn.extend({
    has: function (target) {
      var targets = jQuery(target, this),
          l = targets.length;
      return this.filter(function () {
        var i = 0;

        for (; i < l; i++) {
          if (jQuery.contains(this, targets[i])) {
            return true;
          }
        }
      });
    },
    closest: function (selectors, context) {
      var cur,
          i = 0,
          l = this.length,
          matched = [],
          targets = typeof selectors !== "string" && jQuery(selectors); // Positional selectors never match, since there's no _selection_ context

      if (!rneedsContext.test(selectors)) {
        for (; i < l; i++) {
          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
            // Always skip document fragments
            if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : // Don't pass non-elements to Sizzle
            cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
              matched.push(cur);
              break;
            }
          }
        }
      }

      return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
    },
    // Determine the position of an element within the set
    index: function (elem) {
      // No argument, return index in parent
      if (!elem) {
        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
      } // Index in selector


      if (typeof elem === "string") {
        return indexOf.call(jQuery(elem), this[0]);
      } // Locate the position of the desired element


      return indexOf.call(this, // If it receives a jQuery object, the first element is used
      elem.jquery ? elem[0] : elem);
    },
    add: function (selector, context) {
      return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
    },
    addBack: function (selector) {
      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
    }
  });

  function sibling(cur, dir) {
    while ((cur = cur[dir]) && cur.nodeType !== 1) {}

    return cur;
  }

  jQuery.each({
    parent: function (elem) {
      var parent = elem.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },
    parents: function (elem) {
      return dir(elem, "parentNode");
    },
    parentsUntil: function (elem, _i, until) {
      return dir(elem, "parentNode", until);
    },
    next: function (elem) {
      return sibling(elem, "nextSibling");
    },
    prev: function (elem) {
      return sibling(elem, "previousSibling");
    },
    nextAll: function (elem) {
      return dir(elem, "nextSibling");
    },
    prevAll: function (elem) {
      return dir(elem, "previousSibling");
    },
    nextUntil: function (elem, _i, until) {
      return dir(elem, "nextSibling", until);
    },
    prevUntil: function (elem, _i, until) {
      return dir(elem, "previousSibling", until);
    },
    siblings: function (elem) {
      return siblings((elem.parentNode || {}).firstChild, elem);
    },
    children: function (elem) {
      return siblings(elem.firstChild);
    },
    contents: function (elem) {
      if (elem.contentDocument != null && // Support: IE 11+
      // <object> elements with no `data` attribute has an object
      // `contentDocument` with a `null` prototype.
      getProto(elem.contentDocument)) {
        return elem.contentDocument;
      } // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
      // Treat the template element as a regular one in browsers that
      // don't support it.


      if (nodeName(elem, "template")) {
        elem = elem.content || elem;
      }

      return jQuery.merge([], elem.childNodes);
    }
  }, function (name, fn) {
    jQuery.fn[name] = function (until, selector) {
      var matched = jQuery.map(this, fn, until);

      if (name.slice(-5) !== "Until") {
        selector = until;
      }

      if (selector && typeof selector === "string") {
        matched = jQuery.filter(selector, matched);
      }

      if (this.length > 1) {
        // Remove duplicates
        if (!guaranteedUnique[name]) {
          jQuery.uniqueSort(matched);
        } // Reverse order for parents* and prev-derivatives


        if (rparentsprev.test(name)) {
          matched.reverse();
        }
      }

      return this.pushStack(matched);
    };
  });
  var rnothtmlwhite = /[^\x20\t\r\n\f]+/g; // Convert String-formatted options into Object-formatted ones

  function createOptions(options) {
    var object = {};
    jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
      object[flag] = true;
    });
    return object;
  }
  /*
   * Create a callback list using the following parameters:
   *
   *	options: an optional list of space-separated options that will change how
   *			the callback list behaves or a more traditional option object
   *
   * By default a callback list will act like an event callback list and can be
   * "fired" multiple times.
   *
   * Possible options:
   *
   *	once:			will ensure the callback list can only be fired once (like a Deferred)
   *
   *	memory:			will keep track of previous values and will call any callback added
   *					after the list has been fired right away with the latest "memorized"
   *					values (like a Deferred)
   *
   *	unique:			will ensure a callback can only be added once (no duplicate in the list)
   *
   *	stopOnFalse:	interrupt callings when a callback returns false
   *
   */


  jQuery.Callbacks = function (options) {
    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

    var // Flag to know if list is currently firing
    firing,
        // Last fire value for non-forgettable lists
    memory,
        // Flag to know if list was already fired
    fired,
        // Flag to prevent firing
    locked,
        // Actual callback list
    list = [],
        // Queue of execution data for repeatable lists
    queue = [],
        // Index of currently firing callback (modified by add/remove as needed)
    firingIndex = -1,
        // Fire callbacks
    fire = function () {
      // Enforce single-firing
      locked = locked || options.once; // Execute callbacks for all pending executions,
      // respecting firingIndex overrides and runtime changes

      fired = firing = true;

      for (; queue.length; firingIndex = -1) {
        memory = queue.shift();

        while (++firingIndex < list.length) {
          // Run callback and check for early termination
          if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
            // Jump to end and forget the data so .add doesn't re-fire
            firingIndex = list.length;
            memory = false;
          }
        }
      } // Forget the data if we're done with it


      if (!options.memory) {
        memory = false;
      }

      firing = false; // Clean up if we're done firing for good

      if (locked) {
        // Keep an empty list if we have data for future add calls
        if (memory) {
          list = []; // Otherwise, this object is spent
        } else {
          list = "";
        }
      }
    },
        // Actual Callbacks object
    self = {
      // Add a callback or a collection of callbacks to the list
      add: function () {
        if (list) {
          // If we have memory from a past run, we should fire after adding
          if (memory && !firing) {
            firingIndex = list.length - 1;
            queue.push(memory);
          }

          (function add(args) {
            jQuery.each(args, function (_, arg) {
              if (isFunction(arg)) {
                if (!options.unique || !self.has(arg)) {
                  list.push(arg);
                }
              } else if (arg && arg.length && toType(arg) !== "string") {
                // Inspect recursively
                add(arg);
              }
            });
          })(arguments);

          if (memory && !firing) {
            fire();
          }
        }

        return this;
      },
      // Remove a callback from the list
      remove: function () {
        jQuery.each(arguments, function (_, arg) {
          var index;

          while ((index = jQuery.inArray(arg, list, index)) > -1) {
            list.splice(index, 1); // Handle firing indexes

            if (index <= firingIndex) {
              firingIndex--;
            }
          }
        });
        return this;
      },
      // Check if a given callback is in the list.
      // If no argument is given, return whether or not list has callbacks attached.
      has: function (fn) {
        return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
      },
      // Remove all callbacks from the list
      empty: function () {
        if (list) {
          list = [];
        }

        return this;
      },
      // Disable .fire and .add
      // Abort any current/pending executions
      // Clear all callbacks and values
      disable: function () {
        locked = queue = [];
        list = memory = "";
        return this;
      },
      disabled: function () {
        return !list;
      },
      // Disable .fire
      // Also disable .add unless we have memory (since it would have no effect)
      // Abort any pending executions
      lock: function () {
        locked = queue = [];

        if (!memory && !firing) {
          list = memory = "";
        }

        return this;
      },
      locked: function () {
        return !!locked;
      },
      // Call all callbacks with the given context and arguments
      fireWith: function (context, args) {
        if (!locked) {
          args = args || [];
          args = [context, args.slice ? args.slice() : args];
          queue.push(args);

          if (!firing) {
            fire();
          }
        }

        return this;
      },
      // Call all the callbacks with the given arguments
      fire: function () {
        self.fireWith(this, arguments);
        return this;
      },
      // To know if the callbacks have already been called at least once
      fired: function () {
        return !!fired;
      }
    };

    return self;
  };

  function Identity(v) {
    return v;
  }

  function Thrower(ex) {
    throw ex;
  }

  function adoptValue(value, resolve, reject, noValue) {
    var method;

    try {
      // Check for promise aspect first to privilege synchronous behavior
      if (value && isFunction(method = value.promise)) {
        method.call(value).done(resolve).fail(reject); // Other thenables
      } else if (value && isFunction(method = value.then)) {
        method.call(value, resolve, reject); // Other non-thenables
      } else {
        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
        // * false: [ value ].slice( 0 ) => resolve( value )
        // * true: [ value ].slice( 1 ) => resolve()
        resolve.apply(undefined, [value].slice(noValue));
      } // For Promises/A+, convert exceptions into rejections
      // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
      // Deferred#then to conditionally suppress rejection.

    } catch (value) {
      // Support: Android 4.0 only
      // Strict mode functions invoked without .call/.apply get global-object context
      reject.apply(undefined, [value]);
    }
  }

  jQuery.extend({
    Deferred: function (func) {
      var tuples = [// action, add listener, callbacks,
      // ... .then handlers, argument index, [final state]
      ["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],
          state = "pending",
          promise = {
        state: function () {
          return state;
        },
        always: function () {
          deferred.done(arguments).fail(arguments);
          return this;
        },
        "catch": function (fn) {
          return promise.then(null, fn);
        },
        // Keep pipe for back-compat
        pipe: function ()
        /* fnDone, fnFail, fnProgress */
        {
          var fns = arguments;
          return jQuery.Deferred(function (newDefer) {
            jQuery.each(tuples, function (_i, tuple) {
              // Map tuples (progress, done, fail) to arguments (done, fail, progress)
              var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]]; // deferred.progress(function() { bind to newDefer or newDefer.notify })
              // deferred.done(function() { bind to newDefer or newDefer.resolve })
              // deferred.fail(function() { bind to newDefer or newDefer.reject })

              deferred[tuple[1]](function () {
                var returned = fn && fn.apply(this, arguments);

                if (returned && isFunction(returned.promise)) {
                  returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                } else {
                  newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
                }
              });
            });
            fns = null;
          }).promise();
        },
        then: function (onFulfilled, onRejected, onProgress) {
          var maxDepth = 0;

          function resolve(depth, deferred, handler, special) {
            return function () {
              var that = this,
                  args = arguments,
                  mightThrow = function () {
                var returned, then; // Support: Promises/A+ section 2.3.3.3.3
                // https://promisesaplus.com/#point-59
                // Ignore double-resolution attempts

                if (depth < maxDepth) {
                  return;
                }

                returned = handler.apply(that, args); // Support: Promises/A+ section 2.3.1
                // https://promisesaplus.com/#point-48

                if (returned === deferred.promise()) {
                  throw new TypeError("Thenable self-resolution");
                } // Support: Promises/A+ sections 2.3.3.1, 3.5
                // https://promisesaplus.com/#point-54
                // https://promisesaplus.com/#point-75
                // Retrieve `then` only once


                then = returned && ( // Support: Promises/A+ section 2.3.4
                // https://promisesaplus.com/#point-64
                // Only check objects and functions for thenability
                typeof returned === "object" || typeof returned === "function") && returned.then; // Handle a returned thenable

                if (isFunction(then)) {
                  // Special processors (notify) just wait for resolution
                  if (special) {
                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special)); // Normal processors (resolve) also hook into progress
                  } else {
                    // ...and disregard older resolution values
                    maxDepth++;
                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
                  } // Handle all other returned values

                } else {
                  // Only substitute handlers pass on context
                  // and multiple values (non-spec behavior)
                  if (handler !== Identity) {
                    that = undefined;
                    args = [returned];
                  } // Process the value(s)
                  // Default process is resolve


                  (special || deferred.resolveWith)(that, args);
                }
              },
                  // Only normal processors (resolve) catch and reject exceptions
              process = special ? mightThrow : function () {
                try {
                  mightThrow();
                } catch (e) {
                  if (jQuery.Deferred.exceptionHook) {
                    jQuery.Deferred.exceptionHook(e, process.stackTrace);
                  } // Support: Promises/A+ section 2.3.3.3.4.1
                  // https://promisesaplus.com/#point-61
                  // Ignore post-resolution exceptions


                  if (depth + 1 >= maxDepth) {
                    // Only substitute handlers pass on context
                    // and multiple values (non-spec behavior)
                    if (handler !== Thrower) {
                      that = undefined;
                      args = [e];
                    }

                    deferred.rejectWith(that, args);
                  }
                }
              }; // Support: Promises/A+ section 2.3.3.3.1
              // https://promisesaplus.com/#point-57
              // Re-resolve promises immediately to dodge false rejection from
              // subsequent errors


              if (depth) {
                process();
              } else {
                // Call an optional hook to record the stack, in case of exception
                // since it's otherwise lost when execution goes async
                if (jQuery.Deferred.getStackHook) {
                  process.stackTrace = jQuery.Deferred.getStackHook();
                }

                window.setTimeout(process);
              }
            };
          }

          return jQuery.Deferred(function (newDefer) {
            // progress_handlers.add( ... )
            tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith)); // fulfilled_handlers.add( ... )

            tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity)); // rejected_handlers.add( ... )

            tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
          }).promise();
        },
        // Get a promise for this deferred
        // If obj is provided, the promise aspect is added to the object
        promise: function (obj) {
          return obj != null ? jQuery.extend(obj, promise) : promise;
        }
      },
          deferred = {}; // Add list-specific methods

      jQuery.each(tuples, function (i, tuple) {
        var list = tuple[2],
            stateString = tuple[5]; // promise.progress = list.add
        // promise.done = list.add
        // promise.fail = list.add

        promise[tuple[1]] = list.add; // Handle state

        if (stateString) {
          list.add(function () {
            // state = "resolved" (i.e., fulfilled)
            // state = "rejected"
            state = stateString;
          }, // rejected_callbacks.disable
          // fulfilled_callbacks.disable
          tuples[3 - i][2].disable, // rejected_handlers.disable
          // fulfilled_handlers.disable
          tuples[3 - i][3].disable, // progress_callbacks.lock
          tuples[0][2].lock, // progress_handlers.lock
          tuples[0][3].lock);
        } // progress_handlers.fire
        // fulfilled_handlers.fire
        // rejected_handlers.fire


        list.add(tuple[3].fire); // deferred.notify = function() { deferred.notifyWith(...) }
        // deferred.resolve = function() { deferred.resolveWith(...) }
        // deferred.reject = function() { deferred.rejectWith(...) }

        deferred[tuple[0]] = function () {
          deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
          return this;
        }; // deferred.notifyWith = list.fireWith
        // deferred.resolveWith = list.fireWith
        // deferred.rejectWith = list.fireWith


        deferred[tuple[0] + "With"] = list.fireWith;
      }); // Make the deferred a promise

      promise.promise(deferred); // Call given func if any

      if (func) {
        func.call(deferred, deferred);
      } // All done!


      return deferred;
    },
    // Deferred helper
    when: function (singleValue) {
      var // count of uncompleted subordinates
      remaining = arguments.length,
          // count of unprocessed arguments
      i = remaining,
          // subordinate fulfillment data
      resolveContexts = Array(i),
          resolveValues = slice.call(arguments),
          // the master Deferred
      master = jQuery.Deferred(),
          // subordinate callback factory
      updateFunc = function (i) {
        return function (value) {
          resolveContexts[i] = this;
          resolveValues[i] = arguments.length > 1 ? slice.call(arguments) : value;

          if (! --remaining) {
            master.resolveWith(resolveContexts, resolveValues);
          }
        };
      }; // Single- and empty arguments are adopted like Promise.resolve


      if (remaining <= 1) {
        adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining); // Use .then() to unwrap secondary thenables (cf. gh-3000)

        if (master.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {
          return master.then();
        }
      } // Multiple arguments are aggregated like Promise.all array elements


      while (i--) {
        adoptValue(resolveValues[i], updateFunc(i), master.reject);
      }

      return master.promise();
    }
  }); // These usually indicate a programmer mistake during development,
  // warn about them ASAP rather than swallowing them by default.

  var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

  jQuery.Deferred.exceptionHook = function (error, stack) {
    // Support: IE 8 - 9 only
    // Console exists when dev tools are open, which can happen at any time
    if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
      window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
    }
  };

  jQuery.readyException = function (error) {
    window.setTimeout(function () {
      throw error;
    });
  }; // The deferred used on DOM ready


  var readyList = jQuery.Deferred();

  jQuery.fn.ready = function (fn) {
    readyList.then(fn) // Wrap jQuery.readyException in a function so that the lookup
    // happens at the time of error handling instead of callback
    // registration.
    .catch(function (error) {
      jQuery.readyException(error);
    });
    return this;
  };

  jQuery.extend({
    // Is the DOM ready to be used? Set to true once it occurs.
    isReady: false,
    // A counter to track how many items to wait for before
    // the ready event fires. See #6781
    readyWait: 1,
    // Handle when the DOM is ready
    ready: function (wait) {
      // Abort if there are pending holds or we're already ready
      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
        return;
      } // Remember that the DOM is ready


      jQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be

      if (wait !== true && --jQuery.readyWait > 0) {
        return;
      } // If there are functions bound, to execute


      readyList.resolveWith(document, [jQuery]);
    }
  });
  jQuery.ready.then = readyList.then; // The ready event handler and self cleanup method

  function completed() {
    document.removeEventListener("DOMContentLoaded", completed);
    window.removeEventListener("load", completed);
    jQuery.ready();
  } // Catch cases where $(document).ready() is called
  // after the browser event has already occurred.
  // Support: IE <=9 - 10 only
  // Older IE sometimes signals "interactive" too soon


  if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {
    // Handle it asynchronously to allow scripts the opportunity to delay ready
    window.setTimeout(jQuery.ready);
  } else {
    // Use the handy event callback
    document.addEventListener("DOMContentLoaded", completed); // A fallback to window.onload, that will always work

    window.addEventListener("load", completed);
  } // Multifunctional method to get and set values of a collection
  // The value/s can optionally be executed if it's a function


  var access = function (elems, fn, key, value, chainable, emptyGet, raw) {
    var i = 0,
        len = elems.length,
        bulk = key == null; // Sets many values

    if (toType(key) === "object") {
      chainable = true;

      for (i in key) {
        access(elems, fn, i, key[i], true, emptyGet, raw);
      } // Sets one value

    } else if (value !== undefined) {
      chainable = true;

      if (!isFunction(value)) {
        raw = true;
      }

      if (bulk) {
        // Bulk operations run against the entire set
        if (raw) {
          fn.call(elems, value);
          fn = null; // ...except when executing function values
        } else {
          bulk = fn;

          fn = function (elem, _key, value) {
            return bulk.call(jQuery(elem), value);
          };
        }
      }

      if (fn) {
        for (; i < len; i++) {
          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
        }
      }
    }

    if (chainable) {
      return elems;
    } // Gets


    if (bulk) {
      return fn.call(elems);
    }

    return len ? fn(elems[0], key) : emptyGet;
  }; // Matches dashed string for camelizing


  var rmsPrefix = /^-ms-/,
      rdashAlpha = /-([a-z])/g; // Used by camelCase as callback to replace()

  function fcamelCase(_all, letter) {
    return letter.toUpperCase();
  } // Convert dashed to camelCase; used by the css and data modules
  // Support: IE <=9 - 11, Edge 12 - 15
  // Microsoft forgot to hump their vendor prefix (#9572)


  function camelCase(string) {
    return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
  }

  var acceptData = function (owner) {
    // Accepts only:
    //  - Node
    //    - Node.ELEMENT_NODE
    //    - Node.DOCUMENT_NODE
    //  - Object
    //    - Any
    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
  };

  function Data() {
    this.expando = jQuery.expando + Data.uid++;
  }

  Data.uid = 1;
  Data.prototype = {
    cache: function (owner) {
      // Check if the owner object already has a cache
      var value = owner[this.expando]; // If not, create one

      if (!value) {
        value = Object.create(null); // We can accept data for non-element nodes in modern browsers,
        // but we should not, see #8335.
        // Always return an empty object.

        if (acceptData(owner)) {
          // If it is a node unlikely to be stringify-ed or looped over
          // use plain assignment
          if (owner.nodeType) {
            owner[this.expando] = value; // Otherwise secure it in a non-enumerable property
            // configurable must be true to allow the property to be
            // deleted when data is removed
          } else {
            Object.defineProperty(owner, this.expando, {
              value: value,
              configurable: true
            });
          }
        }
      }

      return value;
    },
    set: function (owner, data, value) {
      var prop,
          cache = this.cache(owner); // Handle: [ owner, key, value ] args
      // Always use camelCase key (gh-2257)

      if (typeof data === "string") {
        cache[camelCase(data)] = value; // Handle: [ owner, { properties } ] args
      } else {
        // Copy the properties one-by-one to the cache object
        for (prop in data) {
          cache[camelCase(prop)] = data[prop];
        }
      }

      return cache;
    },
    get: function (owner, key) {
      return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)
      owner[this.expando] && owner[this.expando][camelCase(key)];
    },
    access: function (owner, key, value) {
      // In cases where either:
      //
      //   1. No key was specified
      //   2. A string key was specified, but no value provided
      //
      // Take the "read" path and allow the get method to determine
      // which value to return, respectively either:
      //
      //   1. The entire cache object
      //   2. The data stored at the key
      //
      if (key === undefined || key && typeof key === "string" && value === undefined) {
        return this.get(owner, key);
      } // When the key is not a string, or both a key and value
      // are specified, set or extend (existing objects) with either:
      //
      //   1. An object of properties
      //   2. A key and value
      //


      this.set(owner, key, value); // Since the "set" path can have two possible entry points
      // return the expected data based on which path was taken[*]

      return value !== undefined ? value : key;
    },
    remove: function (owner, key) {
      var i,
          cache = owner[this.expando];

      if (cache === undefined) {
        return;
      }

      if (key !== undefined) {
        // Support array or space separated string of keys
        if (Array.isArray(key)) {
          // If key is an array of keys...
          // We always set camelCase keys, so remove that.
          key = key.map(camelCase);
        } else {
          key = camelCase(key); // If a key with the spaces exists, use it.
          // Otherwise, create an array by matching non-whitespace

          key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
        }

        i = key.length;

        while (i--) {
          delete cache[key[i]];
        }
      } // Remove the expando if there's no more data


      if (key === undefined || jQuery.isEmptyObject(cache)) {
        // Support: Chrome <=35 - 45
        // Webkit & Blink performance suffers when deleting properties
        // from DOM nodes, so set to undefined instead
        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
        if (owner.nodeType) {
          owner[this.expando] = undefined;
        } else {
          delete owner[this.expando];
        }
      }
    },
    hasData: function (owner) {
      var cache = owner[this.expando];
      return cache !== undefined && !jQuery.isEmptyObject(cache);
    }
  };
  var dataPriv = new Data();
  var dataUser = new Data(); //	Implementation Summary
  //
  //	1. Enforce API surface and semantic compatibility with 1.9.x branch
  //	2. Improve the module's maintainability by reducing the storage
  //		paths to a single mechanism.
  //	3. Use the same single mechanism to support "private" and "user" data.
  //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
  //	5. Avoid exposing implementation details on user objects (eg. expando properties)
  //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
      rmultiDash = /[A-Z]/g;

  function getData(data) {
    if (data === "true") {
      return true;
    }

    if (data === "false") {
      return false;
    }

    if (data === "null") {
      return null;
    } // Only convert to a number if it doesn't change the string


    if (data === +data + "") {
      return +data;
    }

    if (rbrace.test(data)) {
      return JSON.parse(data);
    }

    return data;
  }

  function dataAttr(elem, key, data) {
    var name; // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute

    if (data === undefined && elem.nodeType === 1) {
      name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
      data = elem.getAttribute(name);

      if (typeof data === "string") {
        try {
          data = getData(data);
        } catch (e) {} // Make sure we set the data so it isn't changed later


        dataUser.set(elem, key, data);
      } else {
        data = undefined;
      }
    }

    return data;
  }

  jQuery.extend({
    hasData: function (elem) {
      return dataUser.hasData(elem) || dataPriv.hasData(elem);
    },
    data: function (elem, name, data) {
      return dataUser.access(elem, name, data);
    },
    removeData: function (elem, name) {
      dataUser.remove(elem, name);
    },
    // TODO: Now that all calls to _data and _removeData have been replaced
    // with direct calls to dataPriv methods, these can be deprecated.
    _data: function (elem, name, data) {
      return dataPriv.access(elem, name, data);
    },
    _removeData: function (elem, name) {
      dataPriv.remove(elem, name);
    }
  });
  jQuery.fn.extend({
    data: function (key, value) {
      var i,
          name,
          data,
          elem = this[0],
          attrs = elem && elem.attributes; // Gets all values

      if (key === undefined) {
        if (this.length) {
          data = dataUser.get(elem);

          if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
            i = attrs.length;

            while (i--) {
              // Support: IE 11 only
              // The attrs elements can be null (#14894)
              if (attrs[i]) {
                name = attrs[i].name;

                if (name.indexOf("data-") === 0) {
                  name = camelCase(name.slice(5));
                  dataAttr(elem, name, data[name]);
                }
              }
            }

            dataPriv.set(elem, "hasDataAttrs", true);
          }
        }

        return data;
      } // Sets multiple values


      if (typeof key === "object") {
        return this.each(function () {
          dataUser.set(this, key);
        });
      }

      return access(this, function (value) {
        var data; // The calling jQuery object (element matches) is not empty
        // (and therefore has an element appears at this[ 0 ]) and the
        // `value` parameter was not undefined. An empty jQuery object
        // will result in `undefined` for elem = this[ 0 ] which will
        // throw an exception if an attempt to read a data cache is made.

        if (elem && value === undefined) {
          // Attempt to get data from the cache
          // The key will always be camelCased in Data
          data = dataUser.get(elem, key);

          if (data !== undefined) {
            return data;
          } // Attempt to "discover" the data in
          // HTML5 custom data-* attrs


          data = dataAttr(elem, key);

          if (data !== undefined) {
            return data;
          } // We tried really hard, but the data doesn't exist.


          return;
        } // Set the data...


        this.each(function () {
          // We always store the camelCased key
          dataUser.set(this, key, value);
        });
      }, null, value, arguments.length > 1, null, true);
    },
    removeData: function (key) {
      return this.each(function () {
        dataUser.remove(this, key);
      });
    }
  });
  jQuery.extend({
    queue: function (elem, type, data) {
      var queue;

      if (elem) {
        type = (type || "fx") + "queue";
        queue = dataPriv.get(elem, type); // Speed up dequeue by getting out quickly if this is just a lookup

        if (data) {
          if (!queue || Array.isArray(data)) {
            queue = dataPriv.access(elem, type, jQuery.makeArray(data));
          } else {
            queue.push(data);
          }
        }

        return queue || [];
      }
    },
    dequeue: function (elem, type) {
      type = type || "fx";

      var queue = jQuery.queue(elem, type),
          startLength = queue.length,
          fn = queue.shift(),
          hooks = jQuery._queueHooks(elem, type),
          next = function () {
        jQuery.dequeue(elem, type);
      }; // If the fx queue is dequeued, always remove the progress sentinel


      if (fn === "inprogress") {
        fn = queue.shift();
        startLength--;
      }

      if (fn) {
        // Add a progress sentinel to prevent the fx queue from being
        // automatically dequeued
        if (type === "fx") {
          queue.unshift("inprogress");
        } // Clear up the last queue stop function


        delete hooks.stop;
        fn.call(elem, next, hooks);
      }

      if (!startLength && hooks) {
        hooks.empty.fire();
      }
    },
    // Not public - generate a queueHooks object, or return the current one
    _queueHooks: function (elem, type) {
      var key = type + "queueHooks";
      return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
        empty: jQuery.Callbacks("once memory").add(function () {
          dataPriv.remove(elem, [type + "queue", key]);
        })
      });
    }
  });
  jQuery.fn.extend({
    queue: function (type, data) {
      var setter = 2;

      if (typeof type !== "string") {
        data = type;
        type = "fx";
        setter--;
      }

      if (arguments.length < setter) {
        return jQuery.queue(this[0], type);
      }

      return data === undefined ? this : this.each(function () {
        var queue = jQuery.queue(this, type, data); // Ensure a hooks for this queue

        jQuery._queueHooks(this, type);

        if (type === "fx" && queue[0] !== "inprogress") {
          jQuery.dequeue(this, type);
        }
      });
    },
    dequeue: function (type) {
      return this.each(function () {
        jQuery.dequeue(this, type);
      });
    },
    clearQueue: function (type) {
      return this.queue(type || "fx", []);
    },
    // Get a promise resolved when queues of a certain type
    // are emptied (fx is the type by default)
    promise: function (type, obj) {
      var tmp,
          count = 1,
          defer = jQuery.Deferred(),
          elements = this,
          i = this.length,
          resolve = function () {
        if (! --count) {
          defer.resolveWith(elements, [elements]);
        }
      };

      if (typeof type !== "string") {
        obj = type;
        type = undefined;
      }

      type = type || "fx";

      while (i--) {
        tmp = dataPriv.get(elements[i], type + "queueHooks");

        if (tmp && tmp.empty) {
          count++;
          tmp.empty.add(resolve);
        }
      }

      resolve();
      return defer.promise(obj);
    }
  });
  var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
  var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
  var cssExpand = ["Top", "Right", "Bottom", "Left"];
  var documentElement = document.documentElement;

  var isAttached = function (elem) {
    return jQuery.contains(elem.ownerDocument, elem);
  },
      composed = {
    composed: true
  }; // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
  // Check attachment across shadow DOM boundaries when possible (gh-3504)
  // Support: iOS 10.0-10.2 only
  // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
  // leading to errors. We need to check for `getRootNode`.


  if (documentElement.getRootNode) {
    isAttached = function (elem) {
      return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
    };
  }

  var isHiddenWithinTree = function (elem, el) {
    // isHiddenWithinTree might be called from jQuery#filter function;
    // in that case, element will be second argument
    elem = el || elem; // Inline style trumps all

    return elem.style.display === "none" || elem.style.display === "" && // Otherwise, check computed style
    // Support: Firefox <=43 - 45
    // Disconnected elements can have computed display: none, so first confirm that elem is
    // in the document.
    isAttached(elem) && jQuery.css(elem, "display") === "none";
  };

  function adjustCSS(elem, prop, valueParts, tween) {
    var adjusted,
        scale,
        maxIterations = 20,
        currentValue = tween ? function () {
      return tween.cur();
    } : function () {
      return jQuery.css(elem, prop, "");
    },
        initial = currentValue(),
        unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
        // Starting value computation is required for potential unit mismatches
    initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

    if (initialInUnit && initialInUnit[3] !== unit) {
      // Support: Firefox <=54
      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
      initial = initial / 2; // Trust units reported by jQuery.css

      unit = unit || initialInUnit[3]; // Iteratively approximate from a nonzero starting point

      initialInUnit = +initial || 1;

      while (maxIterations--) {
        // Evaluate and update our best guess (doubling guesses that zero out).
        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
        jQuery.style(elem, prop, initialInUnit + unit);

        if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
          maxIterations = 0;
        }

        initialInUnit = initialInUnit / scale;
      }

      initialInUnit = initialInUnit * 2;
      jQuery.style(elem, prop, initialInUnit + unit); // Make sure we update the tween properties later on

      valueParts = valueParts || [];
    }

    if (valueParts) {
      initialInUnit = +initialInUnit || +initial || 0; // Apply relative offset (+=/-=) if specified

      adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];

      if (tween) {
        tween.unit = unit;
        tween.start = initialInUnit;
        tween.end = adjusted;
      }
    }

    return adjusted;
  }

  var defaultDisplayMap = {};

  function getDefaultDisplay(elem) {
    var temp,
        doc = elem.ownerDocument,
        nodeName = elem.nodeName,
        display = defaultDisplayMap[nodeName];

    if (display) {
      return display;
    }

    temp = doc.body.appendChild(doc.createElement(nodeName));
    display = jQuery.css(temp, "display");
    temp.parentNode.removeChild(temp);

    if (display === "none") {
      display = "block";
    }

    defaultDisplayMap[nodeName] = display;
    return display;
  }

  function showHide(elements, show) {
    var display,
        elem,
        values = [],
        index = 0,
        length = elements.length; // Determine new display value for elements that need to change

    for (; index < length; index++) {
      elem = elements[index];

      if (!elem.style) {
        continue;
      }

      display = elem.style.display;

      if (show) {
        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
        // check is required in this first loop unless we have a nonempty display value (either
        // inline or about-to-be-restored)
        if (display === "none") {
          values[index] = dataPriv.get(elem, "display") || null;

          if (!values[index]) {
            elem.style.display = "";
          }
        }

        if (elem.style.display === "" && isHiddenWithinTree(elem)) {
          values[index] = getDefaultDisplay(elem);
        }
      } else {
        if (display !== "none") {
          values[index] = "none"; // Remember what we're overwriting

          dataPriv.set(elem, "display", display);
        }
      }
    } // Set the display of the elements in a second loop to avoid constant reflow


    for (index = 0; index < length; index++) {
      if (values[index] != null) {
        elements[index].style.display = values[index];
      }
    }

    return elements;
  }

  jQuery.fn.extend({
    show: function () {
      return showHide(this, true);
    },
    hide: function () {
      return showHide(this);
    },
    toggle: function (state) {
      if (typeof state === "boolean") {
        return state ? this.show() : this.hide();
      }

      return this.each(function () {
        if (isHiddenWithinTree(this)) {
          jQuery(this).show();
        } else {
          jQuery(this).hide();
        }
      });
    }
  });
  var rcheckableType = /^(?:checkbox|radio)$/i;
  var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
  var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;

  (function () {
    var fragment = document.createDocumentFragment(),
        div = fragment.appendChild(document.createElement("div")),
        input = document.createElement("input"); // Support: Android 4.0 - 4.3 only
    // Check state lost if the name is set (#11217)
    // Support: Windows Web Apps (WWA)
    // `name` and `type` must use .setAttribute for WWA (#14901)

    input.setAttribute("type", "radio");
    input.setAttribute("checked", "checked");
    input.setAttribute("name", "t");
    div.appendChild(input); // Support: Android <=4.1 only
    // Older WebKit doesn't clone checked state correctly in fragments

    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; // Support: IE <=11 only
    // Make sure textarea (and checkbox) defaultValue is properly cloned

    div.innerHTML = "<textarea>x</textarea>";
    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue; // Support: IE <=9 only
    // IE <=9 replaces <option> tags with their contents when inserted outside of
    // the select element.

    div.innerHTML = "<option></option>";
    support.option = !!div.lastChild;
  })(); // We have to close these tags to support XHTML (#13200)


  var wrapMap = {
    // XHTML parsers do not magically insert elements in the
    // same way that tag soup parsers do. So we cannot shorten
    // this by omitting <tbody> or other required elements.
    thead: [1, "<table>", "</table>"],
    col: [2, "<table><colgroup>", "</colgroup></table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    _default: [0, "", ""]
  };
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td; // Support: IE <=9 only

  if (!support.option) {
    wrapMap.optgroup = wrapMap.option = [1, "<select multiple='multiple'>", "</select>"];
  }

  function getAll(context, tag) {
    // Support: IE <=9 - 11 only
    // Use typeof to avoid zero-argument method invocation on host objects (#15151)
    var ret;

    if (typeof context.getElementsByTagName !== "undefined") {
      ret = context.getElementsByTagName(tag || "*");
    } else if (typeof context.querySelectorAll !== "undefined") {
      ret = context.querySelectorAll(tag || "*");
    } else {
      ret = [];
    }

    if (tag === undefined || tag && nodeName(context, tag)) {
      return jQuery.merge([context], ret);
    }

    return ret;
  } // Mark scripts as having already been evaluated


  function setGlobalEval(elems, refElements) {
    var i = 0,
        l = elems.length;

    for (; i < l; i++) {
      dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
    }
  }

  var rhtml = /<|&#?\w+;/;

  function buildFragment(elems, context, scripts, selection, ignored) {
    var elem,
        tmp,
        tag,
        wrap,
        attached,
        j,
        fragment = context.createDocumentFragment(),
        nodes = [],
        i = 0,
        l = elems.length;

    for (; i < l; i++) {
      elem = elems[i];

      if (elem || elem === 0) {
        // Add nodes directly
        if (toType(elem) === "object") {
          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          jQuery.merge(nodes, elem.nodeType ? [elem] : elem); // Convert non-html into a text node
        } else if (!rhtml.test(elem)) {
          nodes.push(context.createTextNode(elem)); // Convert html into DOM nodes
        } else {
          tmp = tmp || fragment.appendChild(context.createElement("div")); // Deserialize a standard representation

          tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
          wrap = wrapMap[tag] || wrapMap._default;
          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2]; // Descend through wrappers to the right content

          j = wrap[0];

          while (j--) {
            tmp = tmp.lastChild;
          } // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit


          jQuery.merge(nodes, tmp.childNodes); // Remember the top-level container

          tmp = fragment.firstChild; // Ensure the created nodes are orphaned (#12392)

          tmp.textContent = "";
        }
      }
    } // Remove wrapper from fragment


    fragment.textContent = "";
    i = 0;

    while (elem = nodes[i++]) {
      // Skip elements already in the context collection (trac-4087)
      if (selection && jQuery.inArray(elem, selection) > -1) {
        if (ignored) {
          ignored.push(elem);
        }

        continue;
      }

      attached = isAttached(elem); // Append to fragment

      tmp = getAll(fragment.appendChild(elem), "script"); // Preserve script evaluation history

      if (attached) {
        setGlobalEval(tmp);
      } // Capture executables


      if (scripts) {
        j = 0;

        while (elem = tmp[j++]) {
          if (rscriptType.test(elem.type || "")) {
            scripts.push(elem);
          }
        }
      }
    }

    return fragment;
  }

  var rkeyEvent = /^key/,
      rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
      rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

  function returnTrue() {
    return true;
  }

  function returnFalse() {
    return false;
  } // Support: IE <=9 - 11+
  // focus() and blur() are asynchronous, except when they are no-op.
  // So expect focus to be synchronous when the element is already active,
  // and blur to be synchronous when the element is not already active.
  // (focus and blur are always synchronous in other supported browsers,
  // this just defines when we can count on it).


  function expectSync(elem, type) {
    return elem === safeActiveElement() === (type === "focus");
  } // Support: IE <=9 only
  // Accessing document.activeElement can throw unexpectedly
  // https://bugs.jquery.com/ticket/13393


  function safeActiveElement() {
    try {
      return document.activeElement;
    } catch (err) {}
  }

  function on(elem, types, selector, data, fn, one) {
    var origFn, type; // Types can be a map of types/handlers

    if (typeof types === "object") {
      // ( types-Object, selector, data )
      if (typeof selector !== "string") {
        // ( types-Object, data )
        data = data || selector;
        selector = undefined;
      }

      for (type in types) {
        on(elem, type, selector, data, types[type], one);
      }

      return elem;
    }

    if (data == null && fn == null) {
      // ( types, fn )
      fn = selector;
      data = selector = undefined;
    } else if (fn == null) {
      if (typeof selector === "string") {
        // ( types, selector, fn )
        fn = data;
        data = undefined;
      } else {
        // ( types, data, fn )
        fn = data;
        data = selector;
        selector = undefined;
      }
    }

    if (fn === false) {
      fn = returnFalse;
    } else if (!fn) {
      return elem;
    }

    if (one === 1) {
      origFn = fn;

      fn = function (event) {
        // Can use an empty set, since event contains the info
        jQuery().off(event);
        return origFn.apply(this, arguments);
      }; // Use same guid so caller can remove using origFn


      fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
    }

    return elem.each(function () {
      jQuery.event.add(this, types, fn, data, selector);
    });
  }
  /*
   * Helper functions for managing events -- not part of the public interface.
   * Props to Dean Edwards' addEvent library for many of the ideas.
   */


  jQuery.event = {
    global: {},
    add: function (elem, types, handler, data, selector) {
      var handleObjIn,
          eventHandle,
          tmp,
          events,
          t,
          handleObj,
          special,
          handlers,
          type,
          namespaces,
          origType,
          elemData = dataPriv.get(elem); // Only attach events to objects that accept data

      if (!acceptData(elem)) {
        return;
      } // Caller can pass in an object of custom data in lieu of the handler


      if (handler.handler) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      } // Ensure that invalid selectors throw exceptions at attach time
      // Evaluate against documentElement in case elem is a non-element node (e.g., document)


      if (selector) {
        jQuery.find.matchesSelector(documentElement, selector);
      } // Make sure that the handler has a unique ID, used to find/remove it later


      if (!handler.guid) {
        handler.guid = jQuery.guid++;
      } // Init the element's event structure and main handler, if this is the first


      if (!(events = elemData.events)) {
        events = elemData.events = Object.create(null);
      }

      if (!(eventHandle = elemData.handle)) {
        eventHandle = elemData.handle = function (e) {
          // Discard the second event of a jQuery.event.trigger() and
          // when an event is called after a page has unloaded
          return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
        };
      } // Handle multiple events separated by a space


      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;

      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort(); // There *must* be a type, no attaching namespace-only handlers

        if (!type) {
          continue;
        } // If event changes its type, use the special event handlers for the changed type


        special = jQuery.event.special[type] || {}; // If selector defined, determine special event api type, otherwise given type

        type = (selector ? special.delegateType : special.bindType) || type; // Update special based on newly reset type

        special = jQuery.event.special[type] || {}; // handleObj is passed to all event handlers

        handleObj = jQuery.extend({
          type: type,
          origType: origType,
          data: data,
          handler: handler,
          guid: handler.guid,
          selector: selector,
          needsContext: selector && jQuery.expr.match.needsContext.test(selector),
          namespace: namespaces.join(".")
        }, handleObjIn); // Init the event handler queue if we're the first

        if (!(handlers = events[type])) {
          handlers = events[type] = [];
          handlers.delegateCount = 0; // Only use addEventListener if the special events handler returns false

          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
            if (elem.addEventListener) {
              elem.addEventListener(type, eventHandle);
            }
          }
        }

        if (special.add) {
          special.add.call(elem, handleObj);

          if (!handleObj.handler.guid) {
            handleObj.handler.guid = handler.guid;
          }
        } // Add to the element's handler list, delegates in front


        if (selector) {
          handlers.splice(handlers.delegateCount++, 0, handleObj);
        } else {
          handlers.push(handleObj);
        } // Keep track of which events have ever been used, for event optimization


        jQuery.event.global[type] = true;
      }
    },
    // Detach an event or set of events from an element
    remove: function (elem, types, handler, selector, mappedTypes) {
      var j,
          origCount,
          tmp,
          events,
          t,
          handleObj,
          special,
          handlers,
          type,
          namespaces,
          origType,
          elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

      if (!elemData || !(events = elemData.events)) {
        return;
      } // Once for each type.namespace in types; type may be omitted


      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;

      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort(); // Unbind all events (on this namespace, if provided) for the element

        if (!type) {
          for (type in events) {
            jQuery.event.remove(elem, type + types[t], handler, selector, true);
          }

          continue;
        }

        special = jQuery.event.special[type] || {};
        type = (selector ? special.delegateType : special.bindType) || type;
        handlers = events[type] || [];
        tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"); // Remove matching events

        origCount = j = handlers.length;

        while (j--) {
          handleObj = handlers[j];

          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
            handlers.splice(j, 1);

            if (handleObj.selector) {
              handlers.delegateCount--;
            }

            if (special.remove) {
              special.remove.call(elem, handleObj);
            }
          }
        } // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)


        if (origCount && !handlers.length) {
          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
            jQuery.removeEvent(elem, type, elemData.handle);
          }

          delete events[type];
        }
      } // Remove data and the expando if it's no longer used


      if (jQuery.isEmptyObject(events)) {
        dataPriv.remove(elem, "handle events");
      }
    },
    dispatch: function (nativeEvent) {
      var i,
          j,
          ret,
          matched,
          handleObj,
          handlerQueue,
          args = new Array(arguments.length),
          // Make a writable jQuery.Event from the native event object
      event = jQuery.event.fix(nativeEvent),
          handlers = (dataPriv.get(this, "events") || Object.create(null))[event.type] || [],
          special = jQuery.event.special[event.type] || {}; // Use the fix-ed jQuery.Event rather than the (read-only) native event

      args[0] = event;

      for (i = 1; i < arguments.length; i++) {
        args[i] = arguments[i];
      }

      event.delegateTarget = this; // Call the preDispatch hook for the mapped type, and let it bail if desired

      if (special.preDispatch && special.preDispatch.call(this, event) === false) {
        return;
      } // Determine handlers


      handlerQueue = jQuery.event.handlers.call(this, event, handlers); // Run delegates first; they may want to stop propagation beneath us

      i = 0;

      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
        event.currentTarget = matched.elem;
        j = 0;

        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
          // If the event is namespaced, then each handler is only invoked if it is
          // specially universal or its namespaces are a superset of the event's.
          if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
            event.handleObj = handleObj;
            event.data = handleObj.data;
            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

            if (ret !== undefined) {
              if ((event.result = ret) === false) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
      } // Call the postDispatch hook for the mapped type


      if (special.postDispatch) {
        special.postDispatch.call(this, event);
      }

      return event.result;
    },
    handlers: function (event, handlers) {
      var i,
          handleObj,
          sel,
          matchedHandlers,
          matchedSelectors,
          handlerQueue = [],
          delegateCount = handlers.delegateCount,
          cur = event.target; // Find delegate handlers

      if (delegateCount && // Support: IE <=9
      // Black-hole SVG <use> instance trees (trac-13180)
      cur.nodeType && // Support: Firefox <=42
      // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
      // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
      // Support: IE 11 only
      // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
      !(event.type === "click" && event.button >= 1)) {
        for (; cur !== this; cur = cur.parentNode || this) {
          // Don't check non-elements (#13208)
          // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
          if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
            matchedHandlers = [];
            matchedSelectors = {};

            for (i = 0; i < delegateCount; i++) {
              handleObj = handlers[i]; // Don't conflict with Object.prototype properties (#13203)

              sel = handleObj.selector + " ";

              if (matchedSelectors[sel] === undefined) {
                matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
              }

              if (matchedSelectors[sel]) {
                matchedHandlers.push(handleObj);
              }
            }

            if (matchedHandlers.length) {
              handlerQueue.push({
                elem: cur,
                handlers: matchedHandlers
              });
            }
          }
        }
      } // Add the remaining (directly-bound) handlers


      cur = this;

      if (delegateCount < handlers.length) {
        handlerQueue.push({
          elem: cur,
          handlers: handlers.slice(delegateCount)
        });
      }

      return handlerQueue;
    },
    addProp: function (name, hook) {
      Object.defineProperty(jQuery.Event.prototype, name, {
        enumerable: true,
        configurable: true,
        get: isFunction(hook) ? function () {
          if (this.originalEvent) {
            return hook(this.originalEvent);
          }
        } : function () {
          if (this.originalEvent) {
            return this.originalEvent[name];
          }
        },
        set: function (value) {
          Object.defineProperty(this, name, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value
          });
        }
      });
    },
    fix: function (originalEvent) {
      return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
    },
    special: {
      load: {
        // Prevent triggered image.load events from bubbling to window.load
        noBubble: true
      },
      click: {
        // Utilize native event to ensure correct state for checkable inputs
        setup: function (data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data; // Claim the first handler

          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
            // dataPriv.set( el, "click", ... )
            leverageNative(el, "click", returnTrue);
          } // Return false to allow normal processing in the caller


          return false;
        },
        trigger: function (data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data; // Force setup before triggering a click

          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
            leverageNative(el, "click");
          } // Return non-false to allow normal event-path propagation


          return true;
        },
        // For cross-browser consistency, suppress native .click() on links
        // Also prevent it if we're currently inside a leveraged native-event stack
        _default: function (event) {
          var target = event.target;
          return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
        }
      },
      beforeunload: {
        postDispatch: function (event) {
          // Support: Firefox 20+
          // Firefox doesn't alert if the returnValue field is not set.
          if (event.result !== undefined && event.originalEvent) {
            event.originalEvent.returnValue = event.result;
          }
        }
      }
    }
  }; // Ensure the presence of an event listener that handles manually-triggered
  // synthetic events by interrupting progress until reinvoked in response to
  // *native* events that it fires directly, ensuring that state changes have
  // already occurred before other listeners are invoked.

  function leverageNative(el, type, expectSync) {
    // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
    if (!expectSync) {
      if (dataPriv.get(el, type) === undefined) {
        jQuery.event.add(el, type, returnTrue);
      }

      return;
    } // Register the controller as a special universal handler for all event namespaces


    dataPriv.set(el, type, false);
    jQuery.event.add(el, type, {
      namespace: false,
      handler: function (event) {
        var notAsync,
            result,
            saved = dataPriv.get(this, type);

        if (event.isTrigger & 1 && this[type]) {
          // Interrupt processing of the outer synthetic .trigger()ed event
          // Saved data should be false in such cases, but might be a leftover capture object
          // from an async native handler (gh-4350)
          if (!saved.length) {
            // Store arguments for use when handling the inner native event
            // There will always be at least one argument (an event object), so this array
            // will not be confused with a leftover capture object.
            saved = slice.call(arguments);
            dataPriv.set(this, type, saved); // Trigger the native event and capture its result
            // Support: IE <=9 - 11+
            // focus() and blur() are asynchronous

            notAsync = expectSync(this, type);
            this[type]();
            result = dataPriv.get(this, type);

            if (saved !== result || notAsync) {
              dataPriv.set(this, type, false);
            } else {
              result = {};
            }

            if (saved !== result) {
              // Cancel the outer synthetic event
              event.stopImmediatePropagation();
              event.preventDefault();
              return result.value;
            } // If this is an inner synthetic event for an event with a bubbling surrogate
            // (focus or blur), assume that the surrogate already propagated from triggering the
            // native event and prevent that from happening again here.
            // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
            // bubbling surrogate propagates *after* the non-bubbling base), but that seems
            // less bad than duplication.

          } else if ((jQuery.event.special[type] || {}).delegateType) {
            event.stopPropagation();
          } // If this is a native event triggered above, everything is now in order
          // Fire an inner synthetic event with the original arguments

        } else if (saved.length) {
          // ...and capture the result
          dataPriv.set(this, type, {
            value: jQuery.event.trigger( // Support: IE <=9 - 11+
            // Extend with the prototype to reset the above stopImmediatePropagation()
            jQuery.extend(saved[0], jQuery.Event.prototype), saved.slice(1), this)
          }); // Abort handling of the native event

          event.stopImmediatePropagation();
        }
      }
    });
  }

  jQuery.removeEvent = function (elem, type, handle) {
    // This "if" is needed for plain objects
    if (elem.removeEventListener) {
      elem.removeEventListener(type, handle);
    }
  };

  jQuery.Event = function (src, props) {
    // Allow instantiation without the 'new' keyword
    if (!(this instanceof jQuery.Event)) {
      return new jQuery.Event(src, props);
    } // Event object


    if (src && src.type) {
      this.originalEvent = src;
      this.type = src.type; // Events bubbling up the document may have been marked as prevented
      // by a handler lower down the tree; reflect the correct value.

      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android <=2.3 only
      src.returnValue === false ? returnTrue : returnFalse; // Create target properties
      // Support: Safari <=6 - 7 only
      // Target should not be a text node (#504, #13143)

      this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
      this.currentTarget = src.currentTarget;
      this.relatedTarget = src.relatedTarget; // Event type
    } else {
      this.type = src;
    } // Put explicitly provided properties onto the event object


    if (props) {
      jQuery.extend(this, props);
    } // Create a timestamp if incoming event doesn't have one


    this.timeStamp = src && src.timeStamp || Date.now(); // Mark it as fixed

    this[jQuery.expando] = true;
  }; // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html


  jQuery.Event.prototype = {
    constructor: jQuery.Event,
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,
    isSimulated: false,
    preventDefault: function () {
      var e = this.originalEvent;
      this.isDefaultPrevented = returnTrue;

      if (e && !this.isSimulated) {
        e.preventDefault();
      }
    },
    stopPropagation: function () {
      var e = this.originalEvent;
      this.isPropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function () {
      var e = this.originalEvent;
      this.isImmediatePropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopImmediatePropagation();
      }

      this.stopPropagation();
    }
  }; // Includes all common event props including KeyEvent and MouseEvent specific props

  jQuery.each({
    altKey: true,
    bubbles: true,
    cancelable: true,
    changedTouches: true,
    ctrlKey: true,
    detail: true,
    eventPhase: true,
    metaKey: true,
    pageX: true,
    pageY: true,
    shiftKey: true,
    view: true,
    "char": true,
    code: true,
    charCode: true,
    key: true,
    keyCode: true,
    button: true,
    buttons: true,
    clientX: true,
    clientY: true,
    offsetX: true,
    offsetY: true,
    pointerId: true,
    pointerType: true,
    screenX: true,
    screenY: true,
    targetTouches: true,
    toElement: true,
    touches: true,
    which: function (event) {
      var button = event.button; // Add which for key events

      if (event.which == null && rkeyEvent.test(event.type)) {
        return event.charCode != null ? event.charCode : event.keyCode;
      } // Add which for click: 1 === left; 2 === middle; 3 === right


      if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
        if (button & 1) {
          return 1;
        }

        if (button & 2) {
          return 3;
        }

        if (button & 4) {
          return 2;
        }

        return 0;
      }

      return event.which;
    }
  }, jQuery.event.addProp);
  jQuery.each({
    focus: "focusin",
    blur: "focusout"
  }, function (type, delegateType) {
    jQuery.event.special[type] = {
      // Utilize native event if possible so blur/focus sequence is correct
      setup: function () {
        // Claim the first handler
        // dataPriv.set( this, "focus", ... )
        // dataPriv.set( this, "blur", ... )
        leverageNative(this, type, expectSync); // Return false to allow normal processing in the caller

        return false;
      },
      trigger: function () {
        // Force setup before trigger
        leverageNative(this, type); // Return non-false to allow normal event-path propagation

        return true;
      },
      delegateType: delegateType
    };
  }); // Create mouseenter/leave events using mouseover/out and event-time checks
  // so that event delegation works in jQuery.
  // Do the same for pointerenter/pointerleave and pointerover/pointerout
  //
  // Support: Safari 7 only
  // Safari sends mouseenter too often; see:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
  // for the description of the bug (it existed in older Chrome versions as well).

  jQuery.each({
    mouseenter: "mouseover",
    mouseleave: "mouseout",
    pointerenter: "pointerover",
    pointerleave: "pointerout"
  }, function (orig, fix) {
    jQuery.event.special[orig] = {
      delegateType: fix,
      bindType: fix,
      handle: function (event) {
        var ret,
            target = this,
            related = event.relatedTarget,
            handleObj = event.handleObj; // For mouseenter/leave call the handler if related is outside the target.
        // NB: No relatedTarget if the mouse left/entered the browser window

        if (!related || related !== target && !jQuery.contains(target, related)) {
          event.type = handleObj.origType;
          ret = handleObj.handler.apply(this, arguments);
          event.type = fix;
        }

        return ret;
      }
    };
  });
  jQuery.fn.extend({
    on: function (types, selector, data, fn) {
      return on(this, types, selector, data, fn);
    },
    one: function (types, selector, data, fn) {
      return on(this, types, selector, data, fn, 1);
    },
    off: function (types, selector, fn) {
      var handleObj, type;

      if (types && types.preventDefault && types.handleObj) {
        // ( event )  dispatched jQuery.Event
        handleObj = types.handleObj;
        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
        return this;
      }

      if (typeof types === "object") {
        // ( types-object [, selector] )
        for (type in types) {
          this.off(type, selector, types[type]);
        }

        return this;
      }

      if (selector === false || typeof selector === "function") {
        // ( types [, fn] )
        fn = selector;
        selector = undefined;
      }

      if (fn === false) {
        fn = returnFalse;
      }

      return this.each(function () {
        jQuery.event.remove(this, types, fn, selector);
      });
    }
  });
  var // Support: IE <=10 - 11, Edge 12 - 13 only
  // In IE/Edge using regex groups here causes severe slowdowns.
  // See https://connect.microsoft.com/IE/feedback/details/1736512/
  rnoInnerhtml = /<script|<style|<link/i,
      // checked="checked" or checked
  rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
      rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g; // Prefer a tbody over its parent table for containing new rows

  function manipulationTarget(elem, content) {
    if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
      return jQuery(elem).children("tbody")[0] || elem;
    }

    return elem;
  } // Replace/restore the type attribute of script elements for safe DOM manipulation


  function disableScript(elem) {
    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
    return elem;
  }

  function restoreScript(elem) {
    if ((elem.type || "").slice(0, 5) === "true/") {
      elem.type = elem.type.slice(5);
    } else {
      elem.removeAttribute("type");
    }

    return elem;
  }

  function cloneCopyEvent(src, dest) {
    var i, l, type, pdataOld, udataOld, udataCur, events;

    if (dest.nodeType !== 1) {
      return;
    } // 1. Copy private data: events, handlers, etc.


    if (dataPriv.hasData(src)) {
      pdataOld = dataPriv.get(src);
      events = pdataOld.events;

      if (events) {
        dataPriv.remove(dest, "handle events");

        for (type in events) {
          for (i = 0, l = events[type].length; i < l; i++) {
            jQuery.event.add(dest, type, events[type][i]);
          }
        }
      }
    } // 2. Copy user data


    if (dataUser.hasData(src)) {
      udataOld = dataUser.access(src);
      udataCur = jQuery.extend({}, udataOld);
      dataUser.set(dest, udataCur);
    }
  } // Fix IE bugs, see support tests


  function fixInput(src, dest) {
    var nodeName = dest.nodeName.toLowerCase(); // Fails to persist the checked state of a cloned checkbox or radio button.

    if (nodeName === "input" && rcheckableType.test(src.type)) {
      dest.checked = src.checked; // Fails to return the selected option to the default selected state when cloning options
    } else if (nodeName === "input" || nodeName === "textarea") {
      dest.defaultValue = src.defaultValue;
    }
  }

  function domManip(collection, args, callback, ignored) {
    // Flatten any nested arrays
    args = flat(args);
    var fragment,
        first,
        scripts,
        hasScripts,
        node,
        doc,
        i = 0,
        l = collection.length,
        iNoClone = l - 1,
        value = args[0],
        valueIsFunction = isFunction(value); // We can't cloneNode fragments that contain checked, in WebKit

    if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
      return collection.each(function (index) {
        var self = collection.eq(index);

        if (valueIsFunction) {
          args[0] = value.call(this, index, self.html());
        }

        domManip(self, args, callback, ignored);
      });
    }

    if (l) {
      fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
      first = fragment.firstChild;

      if (fragment.childNodes.length === 1) {
        fragment = first;
      } // Require either new content or an interest in ignored elements to invoke the callback


      if (first || ignored) {
        scripts = jQuery.map(getAll(fragment, "script"), disableScript);
        hasScripts = scripts.length; // Use the original fragment for the last item
        // instead of the first because it can end up
        // being emptied incorrectly in certain situations (#8070).

        for (; i < l; i++) {
          node = fragment;

          if (i !== iNoClone) {
            node = jQuery.clone(node, true, true); // Keep references to cloned scripts for later restoration

            if (hasScripts) {
              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge(scripts, getAll(node, "script"));
            }
          }

          callback.call(collection[i], node, i);
        }

        if (hasScripts) {
          doc = scripts[scripts.length - 1].ownerDocument; // Reenable scripts

          jQuery.map(scripts, restoreScript); // Evaluate executable scripts on first document insertion

          for (i = 0; i < hasScripts; i++) {
            node = scripts[i];

            if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
              if (node.src && (node.type || "").toLowerCase() !== "module") {
                // Optional AJAX dependency, but won't run scripts if not present
                if (jQuery._evalUrl && !node.noModule) {
                  jQuery._evalUrl(node.src, {
                    nonce: node.nonce || node.getAttribute("nonce")
                  }, doc);
                }
              } else {
                DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
              }
            }
          }
        }
      }
    }

    return collection;
  }

  function remove(elem, selector, keepData) {
    var node,
        nodes = selector ? jQuery.filter(selector, elem) : elem,
        i = 0;

    for (; (node = nodes[i]) != null; i++) {
      if (!keepData && node.nodeType === 1) {
        jQuery.cleanData(getAll(node));
      }

      if (node.parentNode) {
        if (keepData && isAttached(node)) {
          setGlobalEval(getAll(node, "script"));
        }

        node.parentNode.removeChild(node);
      }
    }

    return elem;
  }

  jQuery.extend({
    htmlPrefilter: function (html) {
      return html;
    },
    clone: function (elem, dataAndEvents, deepDataAndEvents) {
      var i,
          l,
          srcElements,
          destElements,
          clone = elem.cloneNode(true),
          inPage = isAttached(elem); // Fix IE cloning issues

      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
        // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
        destElements = getAll(clone);
        srcElements = getAll(elem);

        for (i = 0, l = srcElements.length; i < l; i++) {
          fixInput(srcElements[i], destElements[i]);
        }
      } // Copy the events from the original to the clone


      if (dataAndEvents) {
        if (deepDataAndEvents) {
          srcElements = srcElements || getAll(elem);
          destElements = destElements || getAll(clone);

          for (i = 0, l = srcElements.length; i < l; i++) {
            cloneCopyEvent(srcElements[i], destElements[i]);
          }
        } else {
          cloneCopyEvent(elem, clone);
        }
      } // Preserve script evaluation history


      destElements = getAll(clone, "script");

      if (destElements.length > 0) {
        setGlobalEval(destElements, !inPage && getAll(elem, "script"));
      } // Return the cloned set


      return clone;
    },
    cleanData: function (elems) {
      var data,
          elem,
          type,
          special = jQuery.event.special,
          i = 0;

      for (; (elem = elems[i]) !== undefined; i++) {
        if (acceptData(elem)) {
          if (data = elem[dataPriv.expando]) {
            if (data.events) {
              for (type in data.events) {
                if (special[type]) {
                  jQuery.event.remove(elem, type); // This is a shortcut to avoid jQuery.event.remove's overhead
                } else {
                  jQuery.removeEvent(elem, type, data.handle);
                }
              }
            } // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove


            elem[dataPriv.expando] = undefined;
          }

          if (elem[dataUser.expando]) {
            // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove
            elem[dataUser.expando] = undefined;
          }
        }
      }
    }
  });
  jQuery.fn.extend({
    detach: function (selector) {
      return remove(this, selector, true);
    },
    remove: function (selector) {
      return remove(this, selector);
    },
    text: function (value) {
      return access(this, function (value) {
        return value === undefined ? jQuery.text(this) : this.empty().each(function () {
          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
            this.textContent = value;
          }
        });
      }, null, value, arguments.length);
    },
    append: function () {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.appendChild(elem);
        }
      });
    },
    prepend: function () {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.insertBefore(elem, target.firstChild);
        }
      });
    },
    before: function () {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this);
        }
      });
    },
    after: function () {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this.nextSibling);
        }
      });
    },
    empty: function () {
      var elem,
          i = 0;

      for (; (elem = this[i]) != null; i++) {
        if (elem.nodeType === 1) {
          // Prevent memory leaks
          jQuery.cleanData(getAll(elem, false)); // Remove any remaining nodes

          elem.textContent = "";
        }
      }

      return this;
    },
    clone: function (dataAndEvents, deepDataAndEvents) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
      return this.map(function () {
        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
      });
    },
    html: function (value) {
      return access(this, function (value) {
        var elem = this[0] || {},
            i = 0,
            l = this.length;

        if (value === undefined && elem.nodeType === 1) {
          return elem.innerHTML;
        } // See if we can take a shortcut and just use innerHTML


        if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
          value = jQuery.htmlPrefilter(value);

          try {
            for (; i < l; i++) {
              elem = this[i] || {}; // Remove element nodes and prevent memory leaks

              if (elem.nodeType === 1) {
                jQuery.cleanData(getAll(elem, false));
                elem.innerHTML = value;
              }
            }

            elem = 0; // If using innerHTML throws an exception, use the fallback method
          } catch (e) {}
        }

        if (elem) {
          this.empty().append(value);
        }
      }, null, value, arguments.length);
    },
    replaceWith: function () {
      var ignored = []; // Make the changes, replacing each non-ignored context element with the new content

      return domManip(this, arguments, function (elem) {
        var parent = this.parentNode;

        if (jQuery.inArray(this, ignored) < 0) {
          jQuery.cleanData(getAll(this));

          if (parent) {
            parent.replaceChild(elem, this);
          }
        } // Force callback invocation

      }, ignored);
    }
  });
  jQuery.each({
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
  }, function (name, original) {
    jQuery.fn[name] = function (selector) {
      var elems,
          ret = [],
          insert = jQuery(selector),
          last = insert.length - 1,
          i = 0;

      for (; i <= last; i++) {
        elems = i === last ? this : this.clone(true);
        jQuery(insert[i])[original](elems); // Support: Android <=4.0 only, PhantomJS 1 only
        // .get() because push.apply(_, arraylike) throws on ancient WebKit

        push.apply(ret, elems.get());
      }

      return this.pushStack(ret);
    };
  });
  var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

  var getStyles = function (elem) {
    // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
    // IE throws on elements created in popups
    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
    var view = elem.ownerDocument.defaultView;

    if (!view || !view.opener) {
      view = window;
    }

    return view.getComputedStyle(elem);
  };

  var swap = function (elem, options, callback) {
    var ret,
        name,
        old = {}; // Remember the old values, and insert the new ones

    for (name in options) {
      old[name] = elem.style[name];
      elem.style[name] = options[name];
    }

    ret = callback.call(elem); // Revert the old values

    for (name in options) {
      elem.style[name] = old[name];
    }

    return ret;
  };

  var rboxStyle = new RegExp(cssExpand.join("|"), "i");

  (function () {
    // Executing both pixelPosition & boxSizingReliable tests require only one layout
    // so they're executed at the same time to save the second computation.
    function computeStyleTests() {
      // This is a singleton, we need to execute it only once
      if (!div) {
        return;
      }

      container.style.cssText = "position:absolute;left:-11111px;width:60px;" + "margin-top:1px;padding:0;border:0";
      div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;" + "margin:auto;border:1px;padding:1px;" + "width:60%;top:1%";
      documentElement.appendChild(container).appendChild(div);
      var divStyle = window.getComputedStyle(div);
      pixelPositionVal = divStyle.top !== "1%"; // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44

      reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12; // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
      // Some styles come back with percentage values, even though they shouldn't

      div.style.right = "60%";
      pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36; // Support: IE 9 - 11 only
      // Detect misreporting of content dimensions for box-sizing:border-box elements

      boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36; // Support: IE 9 only
      // Detect overflow:scroll screwiness (gh-3699)
      // Support: Chrome <=64
      // Don't get tricked when zoom affects offsetWidth (gh-4029)

      div.style.position = "absolute";
      scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
      documentElement.removeChild(container); // Nullify the div so it wouldn't be stored in the memory and
      // it will also be a sign that checks already performed

      div = null;
    }

    function roundPixelMeasures(measure) {
      return Math.round(parseFloat(measure));
    }

    var pixelPositionVal,
        boxSizingReliableVal,
        scrollboxSizeVal,
        pixelBoxStylesVal,
        reliableTrDimensionsVal,
        reliableMarginLeftVal,
        container = document.createElement("div"),
        div = document.createElement("div"); // Finish early in limited (non-browser) environments

    if (!div.style) {
      return;
    } // Support: IE <=9 - 11 only
    // Style of cloned element affects source element cloned (#8908)


    div.style.backgroundClip = "content-box";
    div.cloneNode(true).style.backgroundClip = "";
    support.clearCloneStyle = div.style.backgroundClip === "content-box";
    jQuery.extend(support, {
      boxSizingReliable: function () {
        computeStyleTests();
        return boxSizingReliableVal;
      },
      pixelBoxStyles: function () {
        computeStyleTests();
        return pixelBoxStylesVal;
      },
      pixelPosition: function () {
        computeStyleTests();
        return pixelPositionVal;
      },
      reliableMarginLeft: function () {
        computeStyleTests();
        return reliableMarginLeftVal;
      },
      scrollboxSize: function () {
        computeStyleTests();
        return scrollboxSizeVal;
      },
      // Support: IE 9 - 11+, Edge 15 - 18+
      // IE/Edge misreport `getComputedStyle` of table rows with width/height
      // set in CSS while `offset*` properties report correct values.
      // Behavior in IE 9 is more subtle than in newer versions & it passes
      // some versions of this test; make sure not to make it pass there!
      reliableTrDimensions: function () {
        var table, tr, trChild, trStyle;

        if (reliableTrDimensionsVal == null) {
          table = document.createElement("table");
          tr = document.createElement("tr");
          trChild = document.createElement("div");
          table.style.cssText = "position:absolute;left:-11111px";
          tr.style.height = "1px";
          trChild.style.height = "9px";
          documentElement.appendChild(table).appendChild(tr).appendChild(trChild);
          trStyle = window.getComputedStyle(tr);
          reliableTrDimensionsVal = parseInt(trStyle.height) > 3;
          documentElement.removeChild(table);
        }

        return reliableTrDimensionsVal;
      }
    });
  })();

  function curCSS(elem, name, computed) {
    var width,
        minWidth,
        maxWidth,
        ret,
        // Support: Firefox 51+
    // Retrieving style before computed somehow
    // fixes an issue with getting wrong values
    // on detached elements
    style = elem.style;
    computed = computed || getStyles(elem); // getPropertyValue is needed for:
    //   .css('filter') (IE 9 only, #12537)
    //   .css('--customProperty) (#3144)

    if (computed) {
      ret = computed.getPropertyValue(name) || computed[name];

      if (ret === "" && !isAttached(elem)) {
        ret = jQuery.style(elem, name);
      } // A tribute to the "awesome hack by Dean Edwards"
      // Android Browser returns percentage for some values,
      // but width seems to be reliably pixels.
      // This is against the CSSOM draft spec:
      // https://drafts.csswg.org/cssom/#resolved-values


      if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
        // Remember the original values
        width = style.width;
        minWidth = style.minWidth;
        maxWidth = style.maxWidth; // Put in the new values to get a computed value out

        style.minWidth = style.maxWidth = style.width = ret;
        ret = computed.width; // Revert the changed values

        style.width = width;
        style.minWidth = minWidth;
        style.maxWidth = maxWidth;
      }
    }

    return ret !== undefined ? // Support: IE <=9 - 11 only
    // IE returns zIndex value as an integer.
    ret + "" : ret;
  }

  function addGetHookIf(conditionFn, hookFn) {
    // Define the hook, we'll check on the first run if it's really needed.
    return {
      get: function () {
        if (conditionFn()) {
          // Hook not needed (or it's not possible to use it due
          // to missing dependency), remove it.
          delete this.get;
          return;
        } // Hook needed; redefine it so that the support test is not executed again.


        return (this.get = hookFn).apply(this, arguments);
      }
    };
  }

  var cssPrefixes = ["Webkit", "Moz", "ms"],
      emptyStyle = document.createElement("div").style,
      vendorProps = {}; // Return a vendor-prefixed property or undefined

  function vendorPropName(name) {
    // Check for vendor prefixed names
    var capName = name[0].toUpperCase() + name.slice(1),
        i = cssPrefixes.length;

    while (i--) {
      name = cssPrefixes[i] + capName;

      if (name in emptyStyle) {
        return name;
      }
    }
  } // Return a potentially-mapped jQuery.cssProps or vendor prefixed property


  function finalPropName(name) {
    var final = jQuery.cssProps[name] || vendorProps[name];

    if (final) {
      return final;
    }

    if (name in emptyStyle) {
      return name;
    }

    return vendorProps[name] = vendorPropName(name) || name;
  }

  var // Swappable if display is none or starts with table
  // except "table", "table-cell", or "table-caption"
  // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
  rdisplayswap = /^(none|table(?!-c[ea]).+)/,
      rcustomProp = /^--/,
      cssShow = {
    position: "absolute",
    visibility: "hidden",
    display: "block"
  },
      cssNormalTransform = {
    letterSpacing: "0",
    fontWeight: "400"
  };

  function setPositiveNumber(_elem, value, subtract) {
    // Any relative (+/-) values have already been
    // normalized at this point
    var matches = rcssNum.exec(value);
    return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks
    Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
  }

  function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
    var i = dimension === "width" ? 1 : 0,
        extra = 0,
        delta = 0; // Adjustment may not be necessary

    if (box === (isBorderBox ? "border" : "content")) {
      return 0;
    }

    for (; i < 4; i += 2) {
      // Both box models exclude margin
      if (box === "margin") {
        delta += jQuery.css(elem, box + cssExpand[i], true, styles);
      } // If we get here with a content-box, we're seeking "padding" or "border" or "margin"


      if (!isBorderBox) {
        // Add padding
        delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles); // For "border" or "margin", add border

        if (box !== "padding") {
          delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles); // But still keep track of it otherwise
        } else {
          extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        } // If we get here with a border-box (content + padding + border), we're seeking "content" or
        // "padding" or "margin"

      } else {
        // For "content", subtract padding
        if (box === "content") {
          delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
        } // For "content" or "padding", subtract border


        if (box !== "margin") {
          delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        }
      }
    } // Account for positive content-box scroll gutter when requested by providing computedVal


    if (!isBorderBox && computedVal >= 0) {
      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
      // Assuming integer scroll gutter, subtract the rest and round down
      delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5 // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
      // Use an explicit zero to avoid NaN (gh-3964)
      )) || 0;
    }

    return delta;
  }

  function getWidthOrHeight(elem, dimension, extra) {
    // Start with computed style
    var styles = getStyles(elem),
        // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
    // Fake content-box until we know it's needed to know the true value.
    boxSizingNeeded = !support.boxSizingReliable() || extra,
        isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",
        valueIsBorderBox = isBorderBox,
        val = curCSS(elem, dimension, styles),
        offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1); // Support: Firefox <=54
    // Return a confounding non-pixel value or feign ignorance, as appropriate.

    if (rnumnonpx.test(val)) {
      if (!extra) {
        return val;
      }

      val = "auto";
    } // Support: IE 9 - 11 only
    // Use offsetWidth/offsetHeight for when box sizing is unreliable.
    // In those cases, the computed value can be trusted to be border-box.


    if ((!support.boxSizingReliable() && isBorderBox || // Support: IE 10 - 11+, Edge 15 - 18+
    // IE/Edge misreport `getComputedStyle` of table rows with width/height
    // set in CSS while `offset*` properties report correct values.
    // Interestingly, in some cases IE 9 doesn't suffer from this issue.
    !support.reliableTrDimensions() && nodeName(elem, "tr") || // Fall back to offsetWidth/offsetHeight when value is "auto"
    // This happens for inline elements with no explicit setting (gh-3571)
    val === "auto" || // Support: Android <=4.1 - 4.3 only
    // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
    !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") && // Make sure the element is visible & connected
    elem.getClientRects().length) {
      isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box"; // Where available, offsetWidth/offsetHeight approximate border box dimensions.
      // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
      // retrieved value as a content box dimension.

      valueIsBorderBox = offsetProp in elem;

      if (valueIsBorderBox) {
        val = elem[offsetProp];
      }
    } // Normalize "" and auto


    val = parseFloat(val) || 0; // Adjust for the element's box model

    return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles, // Provide the current computed size to request scroll gutter calculation (gh-3589)
    val) + "px";
  }

  jQuery.extend({
    // Add in style property hooks for overriding the default
    // behavior of getting and setting a style property
    cssHooks: {
      opacity: {
        get: function (elem, computed) {
          if (computed) {
            // We should always get a number back from opacity
            var ret = curCSS(elem, "opacity");
            return ret === "" ? "1" : ret;
          }
        }
      }
    },
    // Don't automatically add "px" to these possibly-unitless properties
    cssNumber: {
      "animationIterationCount": true,
      "columnCount": true,
      "fillOpacity": true,
      "flexGrow": true,
      "flexShrink": true,
      "fontWeight": true,
      "gridArea": true,
      "gridColumn": true,
      "gridColumnEnd": true,
      "gridColumnStart": true,
      "gridRow": true,
      "gridRowEnd": true,
      "gridRowStart": true,
      "lineHeight": true,
      "opacity": true,
      "order": true,
      "orphans": true,
      "widows": true,
      "zIndex": true,
      "zoom": true
    },
    // Add in properties whose names you wish to fix before
    // setting or getting the value
    cssProps: {},
    // Get and set the style property on a DOM Node
    style: function (elem, name, value, extra) {
      // Don't set styles on text and comment nodes
      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
        return;
      } // Make sure that we're working with the right name


      var ret,
          type,
          hooks,
          origName = camelCase(name),
          isCustomProp = rcustomProp.test(name),
          style = elem.style; // Make sure that we're working with the right name. We don't
      // want to query the value if it is a CSS custom property
      // since they are user-defined.

      if (!isCustomProp) {
        name = finalPropName(origName);
      } // Gets hook for the prefixed version, then unprefixed version


      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // Check if we're setting a value

      if (value !== undefined) {
        type = typeof value; // Convert "+=" or "-=" to relative numbers (#7345)

        if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
          value = adjustCSS(elem, name, ret); // Fixes bug #9237

          type = "number";
        } // Make sure that null and NaN values aren't set (#7116)


        if (value == null || value !== value) {
          return;
        } // If a number was passed in, add the unit (except for certain CSS properties)
        // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
        // "px" to a few hardcoded values.


        if (type === "number" && !isCustomProp) {
          value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
        } // background-* props affect original clone's values


        if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
          style[name] = "inherit";
        } // If a hook was provided, use that value, otherwise just set the specified value


        if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
          if (isCustomProp) {
            style.setProperty(name, value);
          } else {
            style[name] = value;
          }
        }
      } else {
        // If a hook was provided get the non-computed value from there
        if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
          return ret;
        } // Otherwise just get the value from the style object


        return style[name];
      }
    },
    css: function (elem, name, extra, styles) {
      var val,
          num,
          hooks,
          origName = camelCase(name),
          isCustomProp = rcustomProp.test(name); // Make sure that we're working with the right name. We don't
      // want to modify the value if it is a CSS custom property
      // since they are user-defined.

      if (!isCustomProp) {
        name = finalPropName(origName);
      } // Try prefixed name followed by the unprefixed name


      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // If a hook was provided get the computed value from there

      if (hooks && "get" in hooks) {
        val = hooks.get(elem, true, extra);
      } // Otherwise, if a way to get the computed value exists, use that


      if (val === undefined) {
        val = curCSS(elem, name, styles);
      } // Convert "normal" to computed value


      if (val === "normal" && name in cssNormalTransform) {
        val = cssNormalTransform[name];
      } // Make numeric if forced or a qualifier was provided and val looks numeric


      if (extra === "" || extra) {
        num = parseFloat(val);
        return extra === true || isFinite(num) ? num || 0 : val;
      }

      return val;
    }
  });
  jQuery.each(["height", "width"], function (_i, dimension) {
    jQuery.cssHooks[dimension] = {
      get: function (elem, computed, extra) {
        if (computed) {
          // Certain elements can have dimension info if we invisibly show them
          // but it must have a current display style that would benefit
          return rdisplayswap.test(jQuery.css(elem, "display")) && ( // Support: Safari 8+
          // Table columns in Safari have non-zero offsetWidth & zero
          // getBoundingClientRect().width unless display is changed.
          // Support: IE <=11 only
          // Running getBoundingClientRect on a disconnected node
          // in IE throws an error.
          !elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
            return getWidthOrHeight(elem, dimension, extra);
          }) : getWidthOrHeight(elem, dimension, extra);
        }
      },
      set: function (elem, value, extra) {
        var matches,
            styles = getStyles(elem),
            // Only read styles.position if the test has a chance to fail
        // to avoid forcing a reflow.
        scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute",
            // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
        boxSizingNeeded = scrollboxSizeBuggy || extra,
            isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",
            subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0; // Account for unreliable border-box dimensions by comparing offset* to computed and
        // faking a content-box to get border and padding (gh-3699)

        if (isBorderBox && scrollboxSizeBuggy) {
          subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);
        } // Convert to pixels if value adjustment is needed


        if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
          elem.style[dimension] = value;
          value = jQuery.css(elem, dimension);
        }

        return setPositiveNumber(elem, value, subtract);
      }
    };
  });
  jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
    if (computed) {
      return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {
        marginLeft: 0
      }, function () {
        return elem.getBoundingClientRect().left;
      })) + "px";
    }
  }); // These hooks are used by animate to expand properties

  jQuery.each({
    margin: "",
    padding: "",
    border: "Width"
  }, function (prefix, suffix) {
    jQuery.cssHooks[prefix + suffix] = {
      expand: function (value) {
        var i = 0,
            expanded = {},
            // Assumes a single number if not a string
        parts = typeof value === "string" ? value.split(" ") : [value];

        for (; i < 4; i++) {
          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
        }

        return expanded;
      }
    };

    if (prefix !== "margin") {
      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
    }
  });
  jQuery.fn.extend({
    css: function (name, value) {
      return access(this, function (elem, name, value) {
        var styles,
            len,
            map = {},
            i = 0;

        if (Array.isArray(name)) {
          styles = getStyles(elem);
          len = name.length;

          for (; i < len; i++) {
            map[name[i]] = jQuery.css(elem, name[i], false, styles);
          }

          return map;
        }

        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
      }, name, value, arguments.length > 1);
    }
  });

  function Tween(elem, options, prop, end, easing) {
    return new Tween.prototype.init(elem, options, prop, end, easing);
  }

  jQuery.Tween = Tween;
  Tween.prototype = {
    constructor: Tween,
    init: function (elem, options, prop, end, easing, unit) {
      this.elem = elem;
      this.prop = prop;
      this.easing = easing || jQuery.easing._default;
      this.options = options;
      this.start = this.now = this.cur();
      this.end = end;
      this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
    },
    cur: function () {
      var hooks = Tween.propHooks[this.prop];
      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
    },
    run: function (percent) {
      var eased,
          hooks = Tween.propHooks[this.prop];

      if (this.options.duration) {
        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
      } else {
        this.pos = eased = percent;
      }

      this.now = (this.end - this.start) * eased + this.start;

      if (this.options.step) {
        this.options.step.call(this.elem, this.now, this);
      }

      if (hooks && hooks.set) {
        hooks.set(this);
      } else {
        Tween.propHooks._default.set(this);
      }

      return this;
    }
  };
  Tween.prototype.init.prototype = Tween.prototype;
  Tween.propHooks = {
    _default: {
      get: function (tween) {
        var result; // Use a property on the element directly when it is not a DOM element,
        // or when there is no matching style property that exists.

        if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
          return tween.elem[tween.prop];
        } // Passing an empty string as a 3rd parameter to .css will automatically
        // attempt a parseFloat and fallback to a string if the parse fails.
        // Simple values such as "10px" are parsed to Float;
        // complex values such as "rotate(1rad)" are returned as-is.


        result = jQuery.css(tween.elem, tween.prop, ""); // Empty strings, null, undefined and "auto" are converted to 0.

        return !result || result === "auto" ? 0 : result;
      },
      set: function (tween) {
        // Use step hook for back compat.
        // Use cssHook if its there.
        // Use .style if available and use plain properties where available.
        if (jQuery.fx.step[tween.prop]) {
          jQuery.fx.step[tween.prop](tween);
        } else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
        } else {
          tween.elem[tween.prop] = tween.now;
        }
      }
    }
  }; // Support: IE <=9 only
  // Panic based approach to setting things on disconnected nodes

  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set: function (tween) {
      if (tween.elem.nodeType && tween.elem.parentNode) {
        tween.elem[tween.prop] = tween.now;
      }
    }
  };
  jQuery.easing = {
    linear: function (p) {
      return p;
    },
    swing: function (p) {
      return 0.5 - Math.cos(p * Math.PI) / 2;
    },
    _default: "swing"
  };
  jQuery.fx = Tween.prototype.init; // Back compat <1.8 extension point

  jQuery.fx.step = {};
  var fxNow,
      inProgress,
      rfxtypes = /^(?:toggle|show|hide)$/,
      rrun = /queueHooks$/;

  function schedule() {
    if (inProgress) {
      if (document.hidden === false && window.requestAnimationFrame) {
        window.requestAnimationFrame(schedule);
      } else {
        window.setTimeout(schedule, jQuery.fx.interval);
      }

      jQuery.fx.tick();
    }
  } // Animations created synchronously will run synchronously


  function createFxNow() {
    window.setTimeout(function () {
      fxNow = undefined;
    });
    return fxNow = Date.now();
  } // Generate parameters to create a standard animation


  function genFx(type, includeWidth) {
    var which,
        i = 0,
        attrs = {
      height: type
    }; // If we include width, step value is 1 to do all cssExpand values,
    // otherwise step value is 2 to skip over Left and Right

    includeWidth = includeWidth ? 1 : 0;

    for (; i < 4; i += 2 - includeWidth) {
      which = cssExpand[i];
      attrs["margin" + which] = attrs["padding" + which] = type;
    }

    if (includeWidth) {
      attrs.opacity = attrs.width = type;
    }

    return attrs;
  }

  function createTween(value, prop, animation) {
    var tween,
        collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
        index = 0,
        length = collection.length;

    for (; index < length; index++) {
      if (tween = collection[index].call(animation, prop, value)) {
        // We're done with this property
        return tween;
      }
    }
  }

  function defaultPrefilter(elem, props, opts) {
    var prop,
        value,
        toggle,
        hooks,
        oldfire,
        propTween,
        restoreDisplay,
        display,
        isBox = "width" in props || "height" in props,
        anim = this,
        orig = {},
        style = elem.style,
        hidden = elem.nodeType && isHiddenWithinTree(elem),
        dataShow = dataPriv.get(elem, "fxshow"); // Queue-skipping animations hijack the fx hooks

    if (!opts.queue) {
      hooks = jQuery._queueHooks(elem, "fx");

      if (hooks.unqueued == null) {
        hooks.unqueued = 0;
        oldfire = hooks.empty.fire;

        hooks.empty.fire = function () {
          if (!hooks.unqueued) {
            oldfire();
          }
        };
      }

      hooks.unqueued++;
      anim.always(function () {
        // Ensure the complete handler is called before this completes
        anim.always(function () {
          hooks.unqueued--;

          if (!jQuery.queue(elem, "fx").length) {
            hooks.empty.fire();
          }
        });
      });
    } // Detect show/hide animations


    for (prop in props) {
      value = props[prop];

      if (rfxtypes.test(value)) {
        delete props[prop];
        toggle = toggle || value === "toggle";

        if (value === (hidden ? "hide" : "show")) {
          // Pretend to be hidden if this is a "show" and
          // there is still data from a stopped show/hide
          if (value === "show" && dataShow && dataShow[prop] !== undefined) {
            hidden = true; // Ignore all other no-op show/hide data
          } else {
            continue;
          }
        }

        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
      }
    } // Bail out if this is a no-op like .hide().hide()


    propTween = !jQuery.isEmptyObject(props);

    if (!propTween && jQuery.isEmptyObject(orig)) {
      return;
    } // Restrict "overflow" and "display" styles during box animations


    if (isBox && elem.nodeType === 1) {
      // Support: IE <=9 - 11, Edge 12 - 15
      // Record all 3 overflow attributes because IE does not infer the shorthand
      // from identically-valued overflowX and overflowY and Edge just mirrors
      // the overflowX value there.
      opts.overflow = [style.overflow, style.overflowX, style.overflowY]; // Identify a display type, preferring old show/hide data over the CSS cascade

      restoreDisplay = dataShow && dataShow.display;

      if (restoreDisplay == null) {
        restoreDisplay = dataPriv.get(elem, "display");
      }

      display = jQuery.css(elem, "display");

      if (display === "none") {
        if (restoreDisplay) {
          display = restoreDisplay;
        } else {
          // Get nonempty value(s) by temporarily forcing visibility
          showHide([elem], true);
          restoreDisplay = elem.style.display || restoreDisplay;
          display = jQuery.css(elem, "display");
          showHide([elem]);
        }
      } // Animate inline elements as inline-block


      if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
        if (jQuery.css(elem, "float") === "none") {
          // Restore the original display value at the end of pure show/hide animations
          if (!propTween) {
            anim.done(function () {
              style.display = restoreDisplay;
            });

            if (restoreDisplay == null) {
              display = style.display;
              restoreDisplay = display === "none" ? "" : display;
            }
          }

          style.display = "inline-block";
        }
      }
    }

    if (opts.overflow) {
      style.overflow = "hidden";
      anim.always(function () {
        style.overflow = opts.overflow[0];
        style.overflowX = opts.overflow[1];
        style.overflowY = opts.overflow[2];
      });
    } // Implement show/hide animations


    propTween = false;

    for (prop in orig) {
      // General show/hide setup for this element animation
      if (!propTween) {
        if (dataShow) {
          if ("hidden" in dataShow) {
            hidden = dataShow.hidden;
          }
        } else {
          dataShow = dataPriv.access(elem, "fxshow", {
            display: restoreDisplay
          });
        } // Store hidden/visible for toggle so `.stop().toggle()` "reverses"


        if (toggle) {
          dataShow.hidden = !hidden;
        } // Show elements before animating them


        if (hidden) {
          showHide([elem], true);
        }
        /* eslint-disable no-loop-func */


        anim.done(function () {
          /* eslint-enable no-loop-func */
          // The final step of a "hide" animation is actually hiding the element
          if (!hidden) {
            showHide([elem]);
          }

          dataPriv.remove(elem, "fxshow");

          for (prop in orig) {
            jQuery.style(elem, prop, orig[prop]);
          }
        });
      } // Per-property setup


      propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

      if (!(prop in dataShow)) {
        dataShow[prop] = propTween.start;

        if (hidden) {
          propTween.end = propTween.start;
          propTween.start = 0;
        }
      }
    }
  }

  function propFilter(props, specialEasing) {
    var index, name, easing, value, hooks; // camelCase, specialEasing and expand cssHook pass

    for (index in props) {
      name = camelCase(index);
      easing = specialEasing[name];
      value = props[index];

      if (Array.isArray(value)) {
        easing = value[1];
        value = props[index] = value[0];
      }

      if (index !== name) {
        props[name] = value;
        delete props[index];
      }

      hooks = jQuery.cssHooks[name];

      if (hooks && "expand" in hooks) {
        value = hooks.expand(value);
        delete props[name]; // Not quite $.extend, this won't overwrite existing keys.
        // Reusing 'index' because we have the correct "name"

        for (index in value) {
          if (!(index in props)) {
            props[index] = value[index];
            specialEasing[index] = easing;
          }
        }
      } else {
        specialEasing[name] = easing;
      }
    }
  }

  function Animation(elem, properties, options) {
    var result,
        stopped,
        index = 0,
        length = Animation.prefilters.length,
        deferred = jQuery.Deferred().always(function () {
      // Don't match elem in the :animated selector
      delete tick.elem;
    }),
        tick = function () {
      if (stopped) {
        return false;
      }

      var currentTime = fxNow || createFxNow(),
          remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
          // Support: Android 2.3 only
      // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
      temp = remaining / animation.duration || 0,
          percent = 1 - temp,
          index = 0,
          length = animation.tweens.length;

      for (; index < length; index++) {
        animation.tweens[index].run(percent);
      }

      deferred.notifyWith(elem, [animation, percent, remaining]); // If there's more to do, yield

      if (percent < 1 && length) {
        return remaining;
      } // If this was an empty animation, synthesize a final progress notification


      if (!length) {
        deferred.notifyWith(elem, [animation, 1, 0]);
      } // Resolve the animation and report its conclusion


      deferred.resolveWith(elem, [animation]);
      return false;
    },
        animation = deferred.promise({
      elem: elem,
      props: jQuery.extend({}, properties),
      opts: jQuery.extend(true, {
        specialEasing: {},
        easing: jQuery.easing._default
      }, options),
      originalProperties: properties,
      originalOptions: options,
      startTime: fxNow || createFxNow(),
      duration: options.duration,
      tweens: [],
      createTween: function (prop, end) {
        var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
        animation.tweens.push(tween);
        return tween;
      },
      stop: function (gotoEnd) {
        var index = 0,
            // If we are going to the end, we want to run all the tweens
        // otherwise we skip this part
        length = gotoEnd ? animation.tweens.length : 0;

        if (stopped) {
          return this;
        }

        stopped = true;

        for (; index < length; index++) {
          animation.tweens[index].run(1);
        } // Resolve when we played the last frame; otherwise, reject


        if (gotoEnd) {
          deferred.notifyWith(elem, [animation, 1, 0]);
          deferred.resolveWith(elem, [animation, gotoEnd]);
        } else {
          deferred.rejectWith(elem, [animation, gotoEnd]);
        }

        return this;
      }
    }),
        props = animation.props;

    propFilter(props, animation.opts.specialEasing);

    for (; index < length; index++) {
      result = Animation.prefilters[index].call(animation, elem, props, animation.opts);

      if (result) {
        if (isFunction(result.stop)) {
          jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
        }

        return result;
      }
    }

    jQuery.map(props, createTween, animation);

    if (isFunction(animation.opts.start)) {
      animation.opts.start.call(elem, animation);
    } // Attach callbacks from options


    animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
    jQuery.fx.timer(jQuery.extend(tick, {
      elem: elem,
      anim: animation,
      queue: animation.opts.queue
    }));
    return animation;
  }

  jQuery.Animation = jQuery.extend(Animation, {
    tweeners: {
      "*": [function (prop, value) {
        var tween = this.createTween(prop, value);
        adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
        return tween;
      }]
    },
    tweener: function (props, callback) {
      if (isFunction(props)) {
        callback = props;
        props = ["*"];
      } else {
        props = props.match(rnothtmlwhite);
      }

      var prop,
          index = 0,
          length = props.length;

      for (; index < length; index++) {
        prop = props[index];
        Animation.tweeners[prop] = Animation.tweeners[prop] || [];
        Animation.tweeners[prop].unshift(callback);
      }
    },
    prefilters: [defaultPrefilter],
    prefilter: function (callback, prepend) {
      if (prepend) {
        Animation.prefilters.unshift(callback);
      } else {
        Animation.prefilters.push(callback);
      }
    }
  });

  jQuery.speed = function (speed, easing, fn) {
    var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
      complete: fn || !fn && easing || isFunction(speed) && speed,
      duration: speed,
      easing: fn && easing || easing && !isFunction(easing) && easing
    }; // Go to the end state if fx are off

    if (jQuery.fx.off) {
      opt.duration = 0;
    } else {
      if (typeof opt.duration !== "number") {
        if (opt.duration in jQuery.fx.speeds) {
          opt.duration = jQuery.fx.speeds[opt.duration];
        } else {
          opt.duration = jQuery.fx.speeds._default;
        }
      }
    } // Normalize opt.queue - true/undefined/null -> "fx"


    if (opt.queue == null || opt.queue === true) {
      opt.queue = "fx";
    } // Queueing


    opt.old = opt.complete;

    opt.complete = function () {
      if (isFunction(opt.old)) {
        opt.old.call(this);
      }

      if (opt.queue) {
        jQuery.dequeue(this, opt.queue);
      }
    };

    return opt;
  };

  jQuery.fn.extend({
    fadeTo: function (speed, to, easing, callback) {
      // Show any hidden elements after setting opacity to 0
      return this.filter(isHiddenWithinTree).css("opacity", 0).show() // Animate to the value specified
      .end().animate({
        opacity: to
      }, speed, easing, callback);
    },
    animate: function (prop, speed, easing, callback) {
      var empty = jQuery.isEmptyObject(prop),
          optall = jQuery.speed(speed, easing, callback),
          doAnimation = function () {
        // Operate on a copy of prop so per-property easing won't be lost
        var anim = Animation(this, jQuery.extend({}, prop), optall); // Empty animations, or finishing resolves immediately

        if (empty || dataPriv.get(this, "finish")) {
          anim.stop(true);
        }
      };

      doAnimation.finish = doAnimation;
      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
    },
    stop: function (type, clearQueue, gotoEnd) {
      var stopQueue = function (hooks) {
        var stop = hooks.stop;
        delete hooks.stop;
        stop(gotoEnd);
      };

      if (typeof type !== "string") {
        gotoEnd = clearQueue;
        clearQueue = type;
        type = undefined;
      }

      if (clearQueue) {
        this.queue(type || "fx", []);
      }

      return this.each(function () {
        var dequeue = true,
            index = type != null && type + "queueHooks",
            timers = jQuery.timers,
            data = dataPriv.get(this);

        if (index) {
          if (data[index] && data[index].stop) {
            stopQueue(data[index]);
          }
        } else {
          for (index in data) {
            if (data[index] && data[index].stop && rrun.test(index)) {
              stopQueue(data[index]);
            }
          }
        }

        for (index = timers.length; index--;) {
          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
            timers[index].anim.stop(gotoEnd);
            dequeue = false;
            timers.splice(index, 1);
          }
        } // Start the next in the queue if the last step wasn't forced.
        // Timers currently will call their complete callbacks, which
        // will dequeue but only if they were gotoEnd.


        if (dequeue || !gotoEnd) {
          jQuery.dequeue(this, type);
        }
      });
    },
    finish: function (type) {
      if (type !== false) {
        type = type || "fx";
      }

      return this.each(function () {
        var index,
            data = dataPriv.get(this),
            queue = data[type + "queue"],
            hooks = data[type + "queueHooks"],
            timers = jQuery.timers,
            length = queue ? queue.length : 0; // Enable finishing flag on private data

        data.finish = true; // Empty the queue first

        jQuery.queue(this, type, []);

        if (hooks && hooks.stop) {
          hooks.stop.call(this, true);
        } // Look for any active animations, and finish them


        for (index = timers.length; index--;) {
          if (timers[index].elem === this && timers[index].queue === type) {
            timers[index].anim.stop(true);
            timers.splice(index, 1);
          }
        } // Look for any animations in the old queue and finish them


        for (index = 0; index < length; index++) {
          if (queue[index] && queue[index].finish) {
            queue[index].finish.call(this);
          }
        } // Turn off finishing flag


        delete data.finish;
      });
    }
  });
  jQuery.each(["toggle", "show", "hide"], function (_i, name) {
    var cssFn = jQuery.fn[name];

    jQuery.fn[name] = function (speed, easing, callback) {
      return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
    };
  }); // Generate shortcuts for custom animations

  jQuery.each({
    slideDown: genFx("show"),
    slideUp: genFx("hide"),
    slideToggle: genFx("toggle"),
    fadeIn: {
      opacity: "show"
    },
    fadeOut: {
      opacity: "hide"
    },
    fadeToggle: {
      opacity: "toggle"
    }
  }, function (name, props) {
    jQuery.fn[name] = function (speed, easing, callback) {
      return this.animate(props, speed, easing, callback);
    };
  });
  jQuery.timers = [];

  jQuery.fx.tick = function () {
    var timer,
        i = 0,
        timers = jQuery.timers;
    fxNow = Date.now();

    for (; i < timers.length; i++) {
      timer = timers[i]; // Run the timer and safely remove it when done (allowing for external removal)

      if (!timer() && timers[i] === timer) {
        timers.splice(i--, 1);
      }
    }

    if (!timers.length) {
      jQuery.fx.stop();
    }

    fxNow = undefined;
  };

  jQuery.fx.timer = function (timer) {
    jQuery.timers.push(timer);
    jQuery.fx.start();
  };

  jQuery.fx.interval = 13;

  jQuery.fx.start = function () {
    if (inProgress) {
      return;
    }

    inProgress = true;
    schedule();
  };

  jQuery.fx.stop = function () {
    inProgress = null;
  };

  jQuery.fx.speeds = {
    slow: 600,
    fast: 200,
    // Default speed
    _default: 400
  }; // Based off of the plugin by Clint Helfers, with permission.
  // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/

  jQuery.fn.delay = function (time, type) {
    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
    type = type || "fx";
    return this.queue(type, function (next, hooks) {
      var timeout = window.setTimeout(next, time);

      hooks.stop = function () {
        window.clearTimeout(timeout);
      };
    });
  };

  (function () {
    var input = document.createElement("input"),
        select = document.createElement("select"),
        opt = select.appendChild(document.createElement("option"));
    input.type = "checkbox"; // Support: Android <=4.3 only
    // Default value for a checkbox should be "on"

    support.checkOn = input.value !== ""; // Support: IE <=11 only
    // Must access selectedIndex to make default options select

    support.optSelected = opt.selected; // Support: IE <=11 only
    // An input loses its value after becoming a radio

    input = document.createElement("input");
    input.value = "t";
    input.type = "radio";
    support.radioValue = input.value === "t";
  })();

  var boolHook,
      attrHandle = jQuery.expr.attrHandle;
  jQuery.fn.extend({
    attr: function (name, value) {
      return access(this, jQuery.attr, name, value, arguments.length > 1);
    },
    removeAttr: function (name) {
      return this.each(function () {
        jQuery.removeAttr(this, name);
      });
    }
  });
  jQuery.extend({
    attr: function (elem, name, value) {
      var ret,
          hooks,
          nType = elem.nodeType; // Don't get/set attributes on text, comment and attribute nodes

      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      } // Fallback to prop when attributes are not supported


      if (typeof elem.getAttribute === "undefined") {
        return jQuery.prop(elem, name, value);
      } // Attribute hooks are determined by the lowercase version
      // Grab necessary hook if one is defined


      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
      }

      if (value !== undefined) {
        if (value === null) {
          jQuery.removeAttr(elem, name);
          return;
        }

        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }

        elem.setAttribute(name, value + "");
        return value;
      }

      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      ret = jQuery.find.attr(elem, name); // Non-existent attributes return null, we normalize to undefined

      return ret == null ? undefined : ret;
    },
    attrHooks: {
      type: {
        set: function (elem, value) {
          if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
            var val = elem.value;
            elem.setAttribute("type", value);

            if (val) {
              elem.value = val;
            }

            return value;
          }
        }
      }
    },
    removeAttr: function (elem, value) {
      var name,
          i = 0,
          // Attribute names can contain non-HTML whitespace characters
      // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
      attrNames = value && value.match(rnothtmlwhite);

      if (attrNames && elem.nodeType === 1) {
        while (name = attrNames[i++]) {
          elem.removeAttribute(name);
        }
      }
    }
  }); // Hooks for boolean attributes

  boolHook = {
    set: function (elem, value, name) {
      if (value === false) {
        // Remove boolean attributes when set to false
        jQuery.removeAttr(elem, name);
      } else {
        elem.setAttribute(name, name);
      }

      return name;
    }
  };
  jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (_i, name) {
    var getter = attrHandle[name] || jQuery.find.attr;

    attrHandle[name] = function (elem, name, isXML) {
      var ret,
          handle,
          lowercaseName = name.toLowerCase();

      if (!isXML) {
        // Avoid an infinite loop by temporarily removing this function from the getter
        handle = attrHandle[lowercaseName];
        attrHandle[lowercaseName] = ret;
        ret = getter(elem, name, isXML) != null ? lowercaseName : null;
        attrHandle[lowercaseName] = handle;
      }

      return ret;
    };
  });
  var rfocusable = /^(?:input|select|textarea|button)$/i,
      rclickable = /^(?:a|area)$/i;
  jQuery.fn.extend({
    prop: function (name, value) {
      return access(this, jQuery.prop, name, value, arguments.length > 1);
    },
    removeProp: function (name) {
      return this.each(function () {
        delete this[jQuery.propFix[name] || name];
      });
    }
  });
  jQuery.extend({
    prop: function (elem, name, value) {
      var ret,
          hooks,
          nType = elem.nodeType; // Don't get/set properties on text, comment and attribute nodes

      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      }

      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        // Fix name and attach hooks
        name = jQuery.propFix[name] || name;
        hooks = jQuery.propHooks[name];
      }

      if (value !== undefined) {
        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }

        return elem[name] = value;
      }

      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      return elem[name];
    },
    propHooks: {
      tabIndex: {
        get: function (elem) {
          // Support: IE <=9 - 11 only
          // elem.tabIndex doesn't always return the
          // correct value when it hasn't been explicitly set
          // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
          // Use proper attribute retrieval(#12072)
          var tabindex = jQuery.find.attr(elem, "tabindex");

          if (tabindex) {
            return parseInt(tabindex, 10);
          }

          if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
            return 0;
          }

          return -1;
        }
      }
    },
    propFix: {
      "for": "htmlFor",
      "class": "className"
    }
  }); // Support: IE <=11 only
  // Accessing the selectedIndex property
  // forces the browser to respect setting selected
  // on the option
  // The getter ensures a default option is selected
  // when in an optgroup
  // eslint rule "no-unused-expressions" is disabled for this code
  // since it considers such accessions noop

  if (!support.optSelected) {
    jQuery.propHooks.selected = {
      get: function (elem) {
        /* eslint no-unused-expressions: "off" */
        var parent = elem.parentNode;

        if (parent && parent.parentNode) {
          parent.parentNode.selectedIndex;
        }

        return null;
      },
      set: function (elem) {
        /* eslint no-unused-expressions: "off" */
        var parent = elem.parentNode;

        if (parent) {
          parent.selectedIndex;

          if (parent.parentNode) {
            parent.parentNode.selectedIndex;
          }
        }
      }
    };
  }

  jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
    jQuery.propFix[this.toLowerCase()] = this;
  }); // Strip and collapse whitespace according to HTML spec
  // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace

  function stripAndCollapse(value) {
    var tokens = value.match(rnothtmlwhite) || [];
    return tokens.join(" ");
  }

  function getClass(elem) {
    return elem.getAttribute && elem.getAttribute("class") || "";
  }

  function classesToArray(value) {
    if (Array.isArray(value)) {
      return value;
    }

    if (typeof value === "string") {
      return value.match(rnothtmlwhite) || [];
    }

    return [];
  }

  jQuery.fn.extend({
    addClass: function (value) {
      var classes,
          elem,
          cur,
          curValue,
          clazz,
          j,
          finalValue,
          i = 0;

      if (isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).addClass(value.call(this, j, getClass(this)));
        });
      }

      classes = classesToArray(value);

      if (classes.length) {
        while (elem = this[i++]) {
          curValue = getClass(elem);
          cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

          if (cur) {
            j = 0;

            while (clazz = classes[j++]) {
              if (cur.indexOf(" " + clazz + " ") < 0) {
                cur += clazz + " ";
              }
            } // Only assign if different to avoid unneeded rendering.


            finalValue = stripAndCollapse(cur);

            if (curValue !== finalValue) {
              elem.setAttribute("class", finalValue);
            }
          }
        }
      }

      return this;
    },
    removeClass: function (value) {
      var classes,
          elem,
          cur,
          curValue,
          clazz,
          j,
          finalValue,
          i = 0;

      if (isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).removeClass(value.call(this, j, getClass(this)));
        });
      }

      if (!arguments.length) {
        return this.attr("class", "");
      }

      classes = classesToArray(value);

      if (classes.length) {
        while (elem = this[i++]) {
          curValue = getClass(elem); // This expression is here for better compressibility (see addClass)

          cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

          if (cur) {
            j = 0;

            while (clazz = classes[j++]) {
              // Remove *all* instances
              while (cur.indexOf(" " + clazz + " ") > -1) {
                cur = cur.replace(" " + clazz + " ", " ");
              }
            } // Only assign if different to avoid unneeded rendering.


            finalValue = stripAndCollapse(cur);

            if (curValue !== finalValue) {
              elem.setAttribute("class", finalValue);
            }
          }
        }
      }

      return this;
    },
    toggleClass: function (value, stateVal) {
      var type = typeof value,
          isValidValue = type === "string" || Array.isArray(value);

      if (typeof stateVal === "boolean" && isValidValue) {
        return stateVal ? this.addClass(value) : this.removeClass(value);
      }

      if (isFunction(value)) {
        return this.each(function (i) {
          jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
        });
      }

      return this.each(function () {
        var className, i, self, classNames;

        if (isValidValue) {
          // Toggle individual class names
          i = 0;
          self = jQuery(this);
          classNames = classesToArray(value);

          while (className = classNames[i++]) {
            // Check each className given, space separated list
            if (self.hasClass(className)) {
              self.removeClass(className);
            } else {
              self.addClass(className);
            }
          } // Toggle whole class name

        } else if (value === undefined || type === "boolean") {
          className = getClass(this);

          if (className) {
            // Store className if set
            dataPriv.set(this, "__className__", className);
          } // If the element has a class name or if we're passed `false`,
          // then remove the whole classname (if there was one, the above saved it).
          // Otherwise bring back whatever was previously saved (if anything),
          // falling back to the empty string if nothing was stored.


          if (this.setAttribute) {
            this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
          }
        }
      });
    },
    hasClass: function (selector) {
      var className,
          elem,
          i = 0;
      className = " " + selector + " ";

      while (elem = this[i++]) {
        if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
          return true;
        }
      }

      return false;
    }
  });
  var rreturn = /\r/g;
  jQuery.fn.extend({
    val: function (value) {
      var hooks,
          ret,
          valueIsFunction,
          elem = this[0];

      if (!arguments.length) {
        if (elem) {
          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

          if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
            return ret;
          }

          ret = elem.value; // Handle most common string cases

          if (typeof ret === "string") {
            return ret.replace(rreturn, "");
          } // Handle cases where value is null/undef or number


          return ret == null ? "" : ret;
        }

        return;
      }

      valueIsFunction = isFunction(value);
      return this.each(function (i) {
        var val;

        if (this.nodeType !== 1) {
          return;
        }

        if (valueIsFunction) {
          val = value.call(this, i, jQuery(this).val());
        } else {
          val = value;
        } // Treat null/undefined as ""; convert numbers to string


        if (val == null) {
          val = "";
        } else if (typeof val === "number") {
          val += "";
        } else if (Array.isArray(val)) {
          val = jQuery.map(val, function (value) {
            return value == null ? "" : value + "";
          });
        }

        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; // If set returns undefined, fall back to normal setting

        if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
          this.value = val;
        }
      });
    }
  });
  jQuery.extend({
    valHooks: {
      option: {
        get: function (elem) {
          var val = jQuery.find.attr(elem, "value");
          return val != null ? val : // Support: IE <=10 - 11 only
          // option.text throws exceptions (#14686, #14858)
          // Strip and collapse whitespace
          // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
          stripAndCollapse(jQuery.text(elem));
        }
      },
      select: {
        get: function (elem) {
          var value,
              option,
              i,
              options = elem.options,
              index = elem.selectedIndex,
              one = elem.type === "select-one",
              values = one ? null : [],
              max = one ? index + 1 : options.length;

          if (index < 0) {
            i = max;
          } else {
            i = one ? index : 0;
          } // Loop through all the selected options


          for (; i < max; i++) {
            option = options[i]; // Support: IE <=9 only
            // IE8-9 doesn't update selected after form reset (#2551)

            if ((option.selected || i === index) && // Don't return options that are disabled or in a disabled optgroup
            !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
              // Get the specific value for the option
              value = jQuery(option).val(); // We don't need an array for one selects

              if (one) {
                return value;
              } // Multi-Selects return an array


              values.push(value);
            }
          }

          return values;
        },
        set: function (elem, value) {
          var optionSet,
              option,
              options = elem.options,
              values = jQuery.makeArray(value),
              i = options.length;

          while (i--) {
            option = options[i];
            /* eslint-disable no-cond-assign */

            if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
              optionSet = true;
            }
            /* eslint-enable no-cond-assign */

          } // Force browsers to behave consistently when non-matching value is set


          if (!optionSet) {
            elem.selectedIndex = -1;
          }

          return values;
        }
      }
    }
  }); // Radios and checkboxes getter/setter

  jQuery.each(["radio", "checkbox"], function () {
    jQuery.valHooks[this] = {
      set: function (elem, value) {
        if (Array.isArray(value)) {
          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
        }
      }
    };

    if (!support.checkOn) {
      jQuery.valHooks[this].get = function (elem) {
        return elem.getAttribute("value") === null ? "on" : elem.value;
      };
    }
  }); // Return jQuery for attributes-only inclusion

  support.focusin = "onfocusin" in window;

  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
      stopPropagationCallback = function (e) {
    e.stopPropagation();
  };

  jQuery.extend(jQuery.event, {
    trigger: function (event, data, elem, onlyHandlers) {
      var i,
          cur,
          tmp,
          bubbleType,
          ontype,
          handle,
          special,
          lastElement,
          eventPath = [elem || document],
          type = hasOwn.call(event, "type") ? event.type : event,
          namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
      cur = lastElement = tmp = elem = elem || document; // Don't do events on text and comment nodes

      if (elem.nodeType === 3 || elem.nodeType === 8) {
        return;
      } // focus/blur morphs to focusin/out; ensure we're not firing them right now


      if (rfocusMorph.test(type + jQuery.event.triggered)) {
        return;
      }

      if (type.indexOf(".") > -1) {
        // Namespaced trigger; create a regexp to match event type in handle()
        namespaces = type.split(".");
        type = namespaces.shift();
        namespaces.sort();
      }

      ontype = type.indexOf(":") < 0 && "on" + type; // Caller can pass in a jQuery.Event object, Object, or just an event type string

      event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event); // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)

      event.isTrigger = onlyHandlers ? 2 : 3;
      event.namespace = namespaces.join(".");
      event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null; // Clean up the event in case it is being reused

      event.result = undefined;

      if (!event.target) {
        event.target = elem;
      } // Clone any incoming data and prepend the event, creating the handler arg list


      data = data == null ? [event] : jQuery.makeArray(data, [event]); // Allow special events to draw outside the lines

      special = jQuery.event.special[type] || {};

      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
        return;
      } // Determine event propagation path in advance, per W3C events spec (#9951)
      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)


      if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
        bubbleType = special.delegateType || type;

        if (!rfocusMorph.test(bubbleType + type)) {
          cur = cur.parentNode;
        }

        for (; cur; cur = cur.parentNode) {
          eventPath.push(cur);
          tmp = cur;
        } // Only add window if we got to document (e.g., not plain obj or detached DOM)


        if (tmp === (elem.ownerDocument || document)) {
          eventPath.push(tmp.defaultView || tmp.parentWindow || window);
        }
      } // Fire handlers on the event path


      i = 0;

      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
        lastElement = cur;
        event.type = i > 1 ? bubbleType : special.bindType || type; // jQuery handler

        handle = (dataPriv.get(cur, "events") || Object.create(null))[event.type] && dataPriv.get(cur, "handle");

        if (handle) {
          handle.apply(cur, data);
        } // Native handler


        handle = ontype && cur[ontype];

        if (handle && handle.apply && acceptData(cur)) {
          event.result = handle.apply(cur, data);

          if (event.result === false) {
            event.preventDefault();
          }
        }
      }

      event.type = type; // If nobody prevented the default action, do it now

      if (!onlyHandlers && !event.isDefaultPrevented()) {
        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
          // Call a native DOM method on the target with the same name as the event.
          // Don't do default actions on window, that's where global variables be (#6170)
          if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
            // Don't re-trigger an onFOO event when we call its FOO() method
            tmp = elem[ontype];

            if (tmp) {
              elem[ontype] = null;
            } // Prevent re-triggering of the same event, since we already bubbled it above


            jQuery.event.triggered = type;

            if (event.isPropagationStopped()) {
              lastElement.addEventListener(type, stopPropagationCallback);
            }

            elem[type]();

            if (event.isPropagationStopped()) {
              lastElement.removeEventListener(type, stopPropagationCallback);
            }

            jQuery.event.triggered = undefined;

            if (tmp) {
              elem[ontype] = tmp;
            }
          }
        }
      }

      return event.result;
    },
    // Piggyback on a donor event to simulate a different one
    // Used only for `focus(in | out)` events
    simulate: function (type, elem, event) {
      var e = jQuery.extend(new jQuery.Event(), event, {
        type: type,
        isSimulated: true
      });
      jQuery.event.trigger(e, null, elem);
    }
  });
  jQuery.fn.extend({
    trigger: function (type, data) {
      return this.each(function () {
        jQuery.event.trigger(type, data, this);
      });
    },
    triggerHandler: function (type, data) {
      var elem = this[0];

      if (elem) {
        return jQuery.event.trigger(type, data, elem, true);
      }
    }
  }); // Support: Firefox <=44
  // Firefox doesn't have focus(in | out) events
  // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
  //
  // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
  // focus(in | out) events fire after focus & blur events,
  // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
  // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857

  if (!support.focusin) {
    jQuery.each({
      focus: "focusin",
      blur: "focusout"
    }, function (orig, fix) {
      // Attach a single capturing handler on the document while someone wants focusin/focusout
      var handler = function (event) {
        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
      };

      jQuery.event.special[fix] = {
        setup: function () {
          // Handle: regular nodes (via `this.ownerDocument`), window
          // (via `this.document`) & document (via `this`).
          var doc = this.ownerDocument || this.document || this,
              attaches = dataPriv.access(doc, fix);

          if (!attaches) {
            doc.addEventListener(orig, handler, true);
          }

          dataPriv.access(doc, fix, (attaches || 0) + 1);
        },
        teardown: function () {
          var doc = this.ownerDocument || this.document || this,
              attaches = dataPriv.access(doc, fix) - 1;

          if (!attaches) {
            doc.removeEventListener(orig, handler, true);
            dataPriv.remove(doc, fix);
          } else {
            dataPriv.access(doc, fix, attaches);
          }
        }
      };
    });
  }

  var location = window.location;
  var nonce = {
    guid: Date.now()
  };
  var rquery = /\?/; // Cross-browser xml parsing

  jQuery.parseXML = function (data) {
    var xml;

    if (!data || typeof data !== "string") {
      return null;
    } // Support: IE 9 - 11 only
    // IE throws on parseFromString with invalid input.


    try {
      xml = new window.DOMParser().parseFromString(data, "text/xml");
    } catch (e) {
      xml = undefined;
    }

    if (!xml || xml.getElementsByTagName("parsererror").length) {
      jQuery.error("Invalid XML: " + data);
    }

    return xml;
  };

  var rbracket = /\[\]$/,
      rCRLF = /\r?\n/g,
      rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
      rsubmittable = /^(?:input|select|textarea|keygen)/i;

  function buildParams(prefix, obj, traditional, add) {
    var name;

    if (Array.isArray(obj)) {
      // Serialize array item.
      jQuery.each(obj, function (i, v) {
        if (traditional || rbracket.test(prefix)) {
          // Treat each array item as a scalar.
          add(prefix, v);
        } else {
          // Item is non-scalar (array or object), encode its numeric index.
          buildParams(prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]", v, traditional, add);
        }
      });
    } else if (!traditional && toType(obj) === "object") {
      // Serialize object item.
      for (name in obj) {
        buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
      }
    } else {
      // Serialize scalar item.
      add(prefix, obj);
    }
  } // Serialize an array of form elements or a set of
  // key/values into a query string


  jQuery.param = function (a, traditional) {
    var prefix,
        s = [],
        add = function (key, valueOrFunction) {
      // If value is a function, invoke it and use its return value
      var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
      s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
    };

    if (a == null) {
      return "";
    } // If an array was passed in, assume that it is an array of form elements.


    if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
      // Serialize the form elements
      jQuery.each(a, function () {
        add(this.name, this.value);
      });
    } else {
      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for (prefix in a) {
        buildParams(prefix, a[prefix], traditional, add);
      }
    } // Return the resulting serialization


    return s.join("&");
  };

  jQuery.fn.extend({
    serialize: function () {
      return jQuery.param(this.serializeArray());
    },
    serializeArray: function () {
      return this.map(function () {
        // Can add propHook for "elements" to filter or add form elements
        var elements = jQuery.prop(this, "elements");
        return elements ? jQuery.makeArray(elements) : this;
      }).filter(function () {
        var type = this.type; // Use .is( ":disabled" ) so that fieldset[disabled] works

        return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
      }).map(function (_i, elem) {
        var val = jQuery(this).val();

        if (val == null) {
          return null;
        }

        if (Array.isArray(val)) {
          return jQuery.map(val, function (val) {
            return {
              name: elem.name,
              value: val.replace(rCRLF, "\r\n")
            };
          });
        }

        return {
          name: elem.name,
          value: val.replace(rCRLF, "\r\n")
        };
      }).get();
    }
  });
  var r20 = /%20/g,
      rhash = /#.*$/,
      rantiCache = /([?&])_=[^&]*/,
      rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
      // #7653, #8125, #8152: local protocol detection
  rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
      rnoContent = /^(?:GET|HEAD)$/,
      rprotocol = /^\/\//,

  /* Prefilters
   * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
   * 2) These are called:
   *    - BEFORE asking for a transport
   *    - AFTER param serialization (s.data is a string if s.processData is true)
   * 3) key is the dataType
   * 4) the catchall symbol "*" can be used
   * 5) execution will start with transport dataType and THEN continue down to "*" if needed
   */
  prefilters = {},

  /* Transports bindings
   * 1) key is the dataType
   * 2) the catchall symbol "*" can be used
   * 3) selection will start with transport dataType and THEN go to "*" if needed
   */
  transports = {},
      // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
  allTypes = "*/".concat("*"),
      // Anchor tag for parsing the document origin
  originAnchor = document.createElement("a");
  originAnchor.href = location.href; // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport

  function addToPrefiltersOrTransports(structure) {
    // dataTypeExpression is optional and defaults to "*"
    return function (dataTypeExpression, func) {
      if (typeof dataTypeExpression !== "string") {
        func = dataTypeExpression;
        dataTypeExpression = "*";
      }

      var dataType,
          i = 0,
          dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

      if (isFunction(func)) {
        // For each dataType in the dataTypeExpression
        while (dataType = dataTypes[i++]) {
          // Prepend if requested
          if (dataType[0] === "+") {
            dataType = dataType.slice(1) || "*";
            (structure[dataType] = structure[dataType] || []).unshift(func); // Otherwise append
          } else {
            (structure[dataType] = structure[dataType] || []).push(func);
          }
        }
      }
    };
  } // Base inspection function for prefilters and transports


  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
    var inspected = {},
        seekingTransport = structure === transports;

    function inspect(dataType) {
      var selected;
      inspected[dataType] = true;
      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);

        if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
          options.dataTypes.unshift(dataTypeOrTransport);
          inspect(dataTypeOrTransport);
          return false;
        } else if (seekingTransport) {
          return !(selected = dataTypeOrTransport);
        }
      });
      return selected;
    }

    return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
  } // A special extend for ajax options
  // that takes "flat" options (not to be deep extended)
  // Fixes #9887


  function ajaxExtend(target, src) {
    var key,
        deep,
        flatOptions = jQuery.ajaxSettings.flatOptions || {};

    for (key in src) {
      if (src[key] !== undefined) {
        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
      }
    }

    if (deep) {
      jQuery.extend(true, target, deep);
    }

    return target;
  }
  /* Handles responses to an ajax request:
   * - finds the right dataType (mediates between content-type and expected dataType)
   * - returns the corresponding response
   */


  function ajaxHandleResponses(s, jqXHR, responses) {
    var ct,
        type,
        finalDataType,
        firstDataType,
        contents = s.contents,
        dataTypes = s.dataTypes; // Remove auto dataType and get content-type in the process

    while (dataTypes[0] === "*") {
      dataTypes.shift();

      if (ct === undefined) {
        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
      }
    } // Check if we're dealing with a known content-type


    if (ct) {
      for (type in contents) {
        if (contents[type] && contents[type].test(ct)) {
          dataTypes.unshift(type);
          break;
        }
      }
    } // Check to see if we have a response for the expected dataType


    if (dataTypes[0] in responses) {
      finalDataType = dataTypes[0];
    } else {
      // Try convertible dataTypes
      for (type in responses) {
        if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
          finalDataType = type;
          break;
        }

        if (!firstDataType) {
          firstDataType = type;
        }
      } // Or just use first one


      finalDataType = finalDataType || firstDataType;
    } // If we found a dataType
    // We add the dataType to the list if needed
    // and return the corresponding response


    if (finalDataType) {
      if (finalDataType !== dataTypes[0]) {
        dataTypes.unshift(finalDataType);
      }

      return responses[finalDataType];
    }
  }
  /* Chain conversions given the request and the original response
   * Also sets the responseXXX fields on the jqXHR instance
   */


  function ajaxConvert(s, response, jqXHR, isSuccess) {
    var conv2,
        current,
        conv,
        tmp,
        prev,
        converters = {},
        // Work with a copy of dataTypes in case we need to modify it for conversion
    dataTypes = s.dataTypes.slice(); // Create converters map with lowercased keys

    if (dataTypes[1]) {
      for (conv in s.converters) {
        converters[conv.toLowerCase()] = s.converters[conv];
      }
    }

    current = dataTypes.shift(); // Convert to each sequential dataType

    while (current) {
      if (s.responseFields[current]) {
        jqXHR[s.responseFields[current]] = response;
      } // Apply the dataFilter if provided


      if (!prev && isSuccess && s.dataFilter) {
        response = s.dataFilter(response, s.dataType);
      }

      prev = current;
      current = dataTypes.shift();

      if (current) {
        // There's only work to do if current dataType is non-auto
        if (current === "*") {
          current = prev; // Convert response if prev dataType is non-auto and differs from current
        } else if (prev !== "*" && prev !== current) {
          // Seek a direct converter
          conv = converters[prev + " " + current] || converters["* " + current]; // If none found, seek a pair

          if (!conv) {
            for (conv2 in converters) {
              // If conv2 outputs current
              tmp = conv2.split(" ");

              if (tmp[1] === current) {
                // If prev can be converted to accepted input
                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];

                if (conv) {
                  // Condense equivalence converters
                  if (conv === true) {
                    conv = converters[conv2]; // Otherwise, insert the intermediate dataType
                  } else if (converters[conv2] !== true) {
                    current = tmp[0];
                    dataTypes.unshift(tmp[1]);
                  }

                  break;
                }
              }
            }
          } // Apply converter (if not an equivalence)


          if (conv !== true) {
            // Unless errors are allowed to bubble, catch and return them
            if (conv && s.throws) {
              response = conv(response);
            } else {
              try {
                response = conv(response);
              } catch (e) {
                return {
                  state: "parsererror",
                  error: conv ? e : "No conversion from " + prev + " to " + current
                };
              }
            }
          }
        }
      }
    }

    return {
      state: "success",
      data: response
    };
  }

  jQuery.extend({
    // Counter for holding the number of active queries
    active: 0,
    // Last-Modified header cache for next request
    lastModified: {},
    etag: {},
    ajaxSettings: {
      url: location.href,
      type: "GET",
      isLocal: rlocalProtocol.test(location.protocol),
      global: true,
      processData: true,
      async: true,
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",

      /*
      timeout: 0,
      data: null,
      dataType: null,
      username: null,
      password: null,
      cache: null,
      throws: false,
      traditional: false,
      headers: {},
      */
      accepts: {
        "*": allTypes,
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript"
      },
      contents: {
        xml: /\bxml\b/,
        html: /\bhtml/,
        json: /\bjson\b/
      },
      responseFields: {
        xml: "responseXML",
        text: "responseText",
        json: "responseJSON"
      },
      // Data converters
      // Keys separate source (or catchall "*") and destination types with a single space
      converters: {
        // Convert anything to text
        "* text": String,
        // Text to html (true = no transformation)
        "text html": true,
        // Evaluate text as a json expression
        "text json": JSON.parse,
        // Parse text as xml
        "text xml": jQuery.parseXML
      },
      // For options that shouldn't be deep extended:
      // you can add your own custom options here if
      // and when you create one that shouldn't be
      // deep extended (see ajaxExtend)
      flatOptions: {
        url: true,
        context: true
      }
    },
    // Creates a full fledged settings object into target
    // with both ajaxSettings and settings fields.
    // If target is omitted, writes into ajaxSettings.
    ajaxSetup: function (target, settings) {
      return settings ? // Building a settings object
      ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings
      ajaxExtend(jQuery.ajaxSettings, target);
    },
    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
    ajaxTransport: addToPrefiltersOrTransports(transports),
    // Main method
    ajax: function (url, options) {
      // If url is an object, simulate pre-1.5 signature
      if (typeof url === "object") {
        options = url;
        url = undefined;
      } // Force options to be an object


      options = options || {};
      var transport,
          // URL without anti-cache param
      cacheURL,
          // Response headers
      responseHeadersString,
          responseHeaders,
          // timeout handle
      timeoutTimer,
          // Url cleanup var
      urlAnchor,
          // Request state (becomes false upon send and true upon completion)
      completed,
          // To know if global events are to be dispatched
      fireGlobals,
          // Loop variable
      i,
          // uncached part of the url
      uncached,
          // Create the final options object
      s = jQuery.ajaxSetup({}, options),
          // Callbacks context
      callbackContext = s.context || s,
          // Context for global events is callbackContext if it is a DOM node or jQuery collection
      globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
          // Deferreds
      deferred = jQuery.Deferred(),
          completeDeferred = jQuery.Callbacks("once memory"),
          // Status-dependent callbacks
      statusCode = s.statusCode || {},
          // Headers (they are sent all at once)
      requestHeaders = {},
          requestHeadersNames = {},
          // Default abort message
      strAbort = "canceled",
          // Fake xhr
      jqXHR = {
        readyState: 0,
        // Builds headers hashtable if needed
        getResponseHeader: function (key) {
          var match;

          if (completed) {
            if (!responseHeaders) {
              responseHeaders = {};

              while (match = rheaders.exec(responseHeadersString)) {
                responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
              }
            }

            match = responseHeaders[key.toLowerCase() + " "];
          }

          return match == null ? null : match.join(", ");
        },
        // Raw string
        getAllResponseHeaders: function () {
          return completed ? responseHeadersString : null;
        },
        // Caches the header
        setRequestHeader: function (name, value) {
          if (completed == null) {
            name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
            requestHeaders[name] = value;
          }

          return this;
        },
        // Overrides response content-type header
        overrideMimeType: function (type) {
          if (completed == null) {
            s.mimeType = type;
          }

          return this;
        },
        // Status-dependent callbacks
        statusCode: function (map) {
          var code;

          if (map) {
            if (completed) {
              // Execute the appropriate callbacks
              jqXHR.always(map[jqXHR.status]);
            } else {
              // Lazy-add the new callbacks in a way that preserves old ones
              for (code in map) {
                statusCode[code] = [statusCode[code], map[code]];
              }
            }
          }

          return this;
        },
        // Cancel the request
        abort: function (statusText) {
          var finalText = statusText || strAbort;

          if (transport) {
            transport.abort(finalText);
          }

          done(0, finalText);
          return this;
        }
      }; // Attach deferreds

      deferred.promise(jqXHR); // Add protocol if not provided (prefilters might expect it)
      // Handle falsy url in the settings object (#10093: consistency with old signature)
      // We also use the url parameter if available

      s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//"); // Alias method option to type as per ticket #12004

      s.type = options.method || options.type || s.method || s.type; // Extract dataTypes list

      s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""]; // A cross-domain request is in order when the origin doesn't match the current origin.

      if (s.crossDomain == null) {
        urlAnchor = document.createElement("a"); // Support: IE <=8 - 11, Edge 12 - 15
        // IE throws exception on accessing the href property if url is malformed,
        // e.g. http://example.com:80x/

        try {
          urlAnchor.href = s.url; // Support: IE <=8 - 11 only
          // Anchor's host property isn't correctly set when s.url is relative

          urlAnchor.href = urlAnchor.href;
          s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
        } catch (e) {
          // If there is an error parsing the URL, assume it is crossDomain,
          // it can be rejected by the transport if it is invalid
          s.crossDomain = true;
        }
      } // Convert data if not already a string


      if (s.data && s.processData && typeof s.data !== "string") {
        s.data = jQuery.param(s.data, s.traditional);
      } // Apply prefilters


      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR); // If request was aborted inside a prefilter, stop there

      if (completed) {
        return jqXHR;
      } // We can fire global events as of now if asked to
      // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)


      fireGlobals = jQuery.event && s.global; // Watch for a new set of requests

      if (fireGlobals && jQuery.active++ === 0) {
        jQuery.event.trigger("ajaxStart");
      } // Uppercase the type


      s.type = s.type.toUpperCase(); // Determine if request has content

      s.hasContent = !rnoContent.test(s.type); // Save the URL in case we're toying with the If-Modified-Since
      // and/or If-None-Match header later on
      // Remove hash to simplify url manipulation

      cacheURL = s.url.replace(rhash, ""); // More options handling for requests with no content

      if (!s.hasContent) {
        // Remember the hash so we can put it back
        uncached = s.url.slice(cacheURL.length); // If data is available and should be processed, append data to url

        if (s.data && (s.processData || typeof s.data === "string")) {
          cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data; // #9682: remove data so that it's not used in an eventual retry

          delete s.data;
        } // Add or update anti-cache param if needed


        if (s.cache === false) {
          cacheURL = cacheURL.replace(rantiCache, "$1");
          uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;
        } // Put hash and anti-cache on the URL that will be requested (gh-1732)


        s.url = cacheURL + uncached; // Change '%20' to '+' if this is encoded form body content (gh-2658)
      } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
        s.data = s.data.replace(r20, "+");
      } // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.


      if (s.ifModified) {
        if (jQuery.lastModified[cacheURL]) {
          jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
        }

        if (jQuery.etag[cacheURL]) {
          jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
        }
      } // Set the correct header, if data is being sent


      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
        jqXHR.setRequestHeader("Content-Type", s.contentType);
      } // Set the Accepts header for the server, depending on the dataType


      jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]); // Check for headers option

      for (i in s.headers) {
        jqXHR.setRequestHeader(i, s.headers[i]);
      } // Allow custom headers/mimetypes and early abort


      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {
        // Abort if not done already and return
        return jqXHR.abort();
      } // Aborting is no longer a cancellation


      strAbort = "abort"; // Install callbacks on deferreds

      completeDeferred.add(s.complete);
      jqXHR.done(s.success);
      jqXHR.fail(s.error); // Get transport

      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR); // If no transport, we auto-abort

      if (!transport) {
        done(-1, "No Transport");
      } else {
        jqXHR.readyState = 1; // Send global event

        if (fireGlobals) {
          globalEventContext.trigger("ajaxSend", [jqXHR, s]);
        } // If request was aborted inside ajaxSend, stop there


        if (completed) {
          return jqXHR;
        } // Timeout


        if (s.async && s.timeout > 0) {
          timeoutTimer = window.setTimeout(function () {
            jqXHR.abort("timeout");
          }, s.timeout);
        }

        try {
          completed = false;
          transport.send(requestHeaders, done);
        } catch (e) {
          // Rethrow post-completion exceptions
          if (completed) {
            throw e;
          } // Propagate others as results


          done(-1, e);
        }
      } // Callback for when everything is done


      function done(status, nativeStatusText, responses, headers) {
        var isSuccess,
            success,
            error,
            response,
            modified,
            statusText = nativeStatusText; // Ignore repeat invocations

        if (completed) {
          return;
        }

        completed = true; // Clear timeout if it exists

        if (timeoutTimer) {
          window.clearTimeout(timeoutTimer);
        } // Dereference transport for early garbage collection
        // (no matter how long the jqXHR object will be used)


        transport = undefined; // Cache response headers

        responseHeadersString = headers || ""; // Set readyState

        jqXHR.readyState = status > 0 ? 4 : 0; // Determine if successful

        isSuccess = status >= 200 && status < 300 || status === 304; // Get response data

        if (responses) {
          response = ajaxHandleResponses(s, jqXHR, responses);
        } // Use a noop converter for missing script


        if (!isSuccess && jQuery.inArray("script", s.dataTypes) > -1) {
          s.converters["text script"] = function () {};
        } // Convert no matter what (that way responseXXX fields are always set)


        response = ajaxConvert(s, response, jqXHR, isSuccess); // If successful, handle type chaining

        if (isSuccess) {
          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if (s.ifModified) {
            modified = jqXHR.getResponseHeader("Last-Modified");

            if (modified) {
              jQuery.lastModified[cacheURL] = modified;
            }

            modified = jqXHR.getResponseHeader("etag");

            if (modified) {
              jQuery.etag[cacheURL] = modified;
            }
          } // if no content


          if (status === 204 || s.type === "HEAD") {
            statusText = "nocontent"; // if not modified
          } else if (status === 304) {
            statusText = "notmodified"; // If we have data, let's convert it
          } else {
            statusText = response.state;
            success = response.data;
            error = response.error;
            isSuccess = !error;
          }
        } else {
          // Extract error from statusText and normalize for non-aborts
          error = statusText;

          if (status || !statusText) {
            statusText = "error";

            if (status < 0) {
              status = 0;
            }
          }
        } // Set data for the fake xhr object


        jqXHR.status = status;
        jqXHR.statusText = (nativeStatusText || statusText) + ""; // Success/Error

        if (isSuccess) {
          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
        } else {
          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
        } // Status-dependent callbacks


        jqXHR.statusCode(statusCode);
        statusCode = undefined;

        if (fireGlobals) {
          globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
        } // Complete


        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

        if (fireGlobals) {
          globalEventContext.trigger("ajaxComplete", [jqXHR, s]); // Handle the global AJAX counter

          if (! --jQuery.active) {
            jQuery.event.trigger("ajaxStop");
          }
        }
      }

      return jqXHR;
    },
    getJSON: function (url, data, callback) {
      return jQuery.get(url, data, callback, "json");
    },
    getScript: function (url, callback) {
      return jQuery.get(url, undefined, callback, "script");
    }
  });
  jQuery.each(["get", "post"], function (_i, method) {
    jQuery[method] = function (url, data, callback, type) {
      // Shift arguments if data argument was omitted
      if (isFunction(data)) {
        type = type || callback;
        callback = data;
        data = undefined;
      } // The url can be an options object (which then must have .url)


      return jQuery.ajax(jQuery.extend({
        url: url,
        type: method,
        dataType: type,
        data: data,
        success: callback
      }, jQuery.isPlainObject(url) && url));
    };
  });
  jQuery.ajaxPrefilter(function (s) {
    var i;

    for (i in s.headers) {
      if (i.toLowerCase() === "content-type") {
        s.contentType = s.headers[i] || "";
      }
    }
  });

  jQuery._evalUrl = function (url, options, doc) {
    return jQuery.ajax({
      url: url,
      // Make this explicit, since user can override this through ajaxSetup (#11264)
      type: "GET",
      dataType: "script",
      cache: true,
      async: false,
      global: false,
      // Only evaluate the response if it is successful (gh-4126)
      // dataFilter is not invoked for failure responses, so using it instead
      // of the default converter is kludgy but it works.
      converters: {
        "text script": function () {}
      },
      dataFilter: function (response) {
        jQuery.globalEval(response, options, doc);
      }
    });
  };

  jQuery.fn.extend({
    wrapAll: function (html) {
      var wrap;

      if (this[0]) {
        if (isFunction(html)) {
          html = html.call(this[0]);
        } // The elements to wrap the target around


        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

        if (this[0].parentNode) {
          wrap.insertBefore(this[0]);
        }

        wrap.map(function () {
          var elem = this;

          while (elem.firstElementChild) {
            elem = elem.firstElementChild;
          }

          return elem;
        }).append(this);
      }

      return this;
    },
    wrapInner: function (html) {
      if (isFunction(html)) {
        return this.each(function (i) {
          jQuery(this).wrapInner(html.call(this, i));
        });
      }

      return this.each(function () {
        var self = jQuery(this),
            contents = self.contents();

        if (contents.length) {
          contents.wrapAll(html);
        } else {
          self.append(html);
        }
      });
    },
    wrap: function (html) {
      var htmlIsFunction = isFunction(html);
      return this.each(function (i) {
        jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
      });
    },
    unwrap: function (selector) {
      this.parent(selector).not("body").each(function () {
        jQuery(this).replaceWith(this.childNodes);
      });
      return this;
    }
  });

  jQuery.expr.pseudos.hidden = function (elem) {
    return !jQuery.expr.pseudos.visible(elem);
  };

  jQuery.expr.pseudos.visible = function (elem) {
    return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
  };

  jQuery.ajaxSettings.xhr = function () {
    try {
      return new window.XMLHttpRequest();
    } catch (e) {}
  };

  var xhrSuccessStatus = {
    // File protocol always yields status code 0, assume 200
    0: 200,
    // Support: IE <=9 only
    // #1450: sometimes IE returns 1223 when it should be 204
    1223: 204
  },
      xhrSupported = jQuery.ajaxSettings.xhr();
  support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
  support.ajax = xhrSupported = !!xhrSupported;
  jQuery.ajaxTransport(function (options) {
    var callback, errorCallback; // Cross domain only allowed if supported through XMLHttpRequest

    if (support.cors || xhrSupported && !options.crossDomain) {
      return {
        send: function (headers, complete) {
          var i,
              xhr = options.xhr();
          xhr.open(options.type, options.url, options.async, options.username, options.password); // Apply custom fields if provided

          if (options.xhrFields) {
            for (i in options.xhrFields) {
              xhr[i] = options.xhrFields[i];
            }
          } // Override mime type if needed


          if (options.mimeType && xhr.overrideMimeType) {
            xhr.overrideMimeType(options.mimeType);
          } // X-Requested-With header
          // For cross-domain requests, seeing as conditions for a preflight are
          // akin to a jigsaw puzzle, we simply never set it to be sure.
          // (it can always be set on a per-request basis or even using ajaxSetup)
          // For same-domain requests, won't change header if already provided.


          if (!options.crossDomain && !headers["X-Requested-With"]) {
            headers["X-Requested-With"] = "XMLHttpRequest";
          } // Set headers


          for (i in headers) {
            xhr.setRequestHeader(i, headers[i]);
          } // Callback


          callback = function (type) {
            return function () {
              if (callback) {
                callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;

                if (type === "abort") {
                  xhr.abort();
                } else if (type === "error") {
                  // Support: IE <=9 only
                  // On a manual native abort, IE9 throws
                  // errors on any property access that is not readyState
                  if (typeof xhr.status !== "number") {
                    complete(0, "error");
                  } else {
                    complete( // File: protocol always yields status 0; see #8605, #14207
                    xhr.status, xhr.statusText);
                  }
                } else {
                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE <=9 only
                  // IE9 has no XHR2 but throws on binary (trac-11426)
                  // For XHR2 non-text, let the caller handle it (gh-2498)
                  (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {
                    binary: xhr.response
                  } : {
                    text: xhr.responseText
                  }, xhr.getAllResponseHeaders());
                }
              }
            };
          }; // Listen to events


          xhr.onload = callback();
          errorCallback = xhr.onerror = xhr.ontimeout = callback("error"); // Support: IE 9 only
          // Use onreadystatechange to replace onabort
          // to handle uncaught aborts

          if (xhr.onabort !== undefined) {
            xhr.onabort = errorCallback;
          } else {
            xhr.onreadystatechange = function () {
              // Check readyState before timeout as it changes
              if (xhr.readyState === 4) {
                // Allow onerror to be called first,
                // but that will not handle a native abort
                // Also, save errorCallback to a variable
                // as xhr.onerror cannot be accessed
                window.setTimeout(function () {
                  if (callback) {
                    errorCallback();
                  }
                });
              }
            };
          } // Create the abort callback


          callback = callback("abort");

          try {
            // Do send the request (this may raise an exception)
            xhr.send(options.hasContent && options.data || null);
          } catch (e) {
            // #14683: Only rethrow if this hasn't been notified as an error yet
            if (callback) {
              throw e;
            }
          }
        },
        abort: function () {
          if (callback) {
            callback();
          }
        }
      };
    }
  }); // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)

  jQuery.ajaxPrefilter(function (s) {
    if (s.crossDomain) {
      s.contents.script = false;
    }
  }); // Install script dataType

  jQuery.ajaxSetup({
    accepts: {
      script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
    },
    contents: {
      script: /\b(?:java|ecma)script\b/
    },
    converters: {
      "text script": function (text) {
        jQuery.globalEval(text);
        return text;
      }
    }
  }); // Handle cache's special case and crossDomain

  jQuery.ajaxPrefilter("script", function (s) {
    if (s.cache === undefined) {
      s.cache = false;
    }

    if (s.crossDomain) {
      s.type = "GET";
    }
  }); // Bind script tag hack transport

  jQuery.ajaxTransport("script", function (s) {
    // This transport only deals with cross domain or forced-by-attrs requests
    if (s.crossDomain || s.scriptAttrs) {
      var script, callback;
      return {
        send: function (_, complete) {
          script = jQuery("<script>").attr(s.scriptAttrs || {}).prop({
            charset: s.scriptCharset,
            src: s.url
          }).on("load error", callback = function (evt) {
            script.remove();
            callback = null;

            if (evt) {
              complete(evt.type === "error" ? 404 : 200, evt.type);
            }
          }); // Use native DOM manipulation to avoid our domManip AJAX trickery

          document.head.appendChild(script[0]);
        },
        abort: function () {
          if (callback) {
            callback();
          }
        }
      };
    }
  });
  var oldCallbacks = [],
      rjsonp = /(=)\?(?=&|$)|\?\?/; // Default jsonp settings

  jQuery.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function () {
      var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce.guid++;
      this[callback] = true;
      return callback;
    }
  }); // Detect, normalize options and install callbacks for jsonp requests

  jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
    var callbackName,
        overwritten,
        responseContainer,
        jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data"); // Handle iff the expected data type is "jsonp" or we have a parameter to set

    if (jsonProp || s.dataTypes[0] === "jsonp") {
      // Get callback name, remembering preexisting value associated with it
      callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback; // Insert callback into url or form data

      if (jsonProp) {
        s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
      } else if (s.jsonp !== false) {
        s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
      } // Use data converter to retrieve json after script execution


      s.converters["script json"] = function () {
        if (!responseContainer) {
          jQuery.error(callbackName + " was not called");
        }

        return responseContainer[0];
      }; // Force json dataType


      s.dataTypes[0] = "json"; // Install callback

      overwritten = window[callbackName];

      window[callbackName] = function () {
        responseContainer = arguments;
      }; // Clean-up function (fires after converters)


      jqXHR.always(function () {
        // If previous value didn't exist - remove it
        if (overwritten === undefined) {
          jQuery(window).removeProp(callbackName); // Otherwise restore preexisting value
        } else {
          window[callbackName] = overwritten;
        } // Save back as free


        if (s[callbackName]) {
          // Make sure that re-using the options doesn't screw things around
          s.jsonpCallback = originalSettings.jsonpCallback; // Save the callback name for future use

          oldCallbacks.push(callbackName);
        } // Call if it was a function and we have a response


        if (responseContainer && isFunction(overwritten)) {
          overwritten(responseContainer[0]);
        }

        responseContainer = overwritten = undefined;
      }); // Delegate to script

      return "script";
    }
  }); // Support: Safari 8 only
  // In Safari 8 documents created via document.implementation.createHTMLDocument
  // collapse sibling forms: the second one becomes a child of the first one.
  // Because of that, this security measure has to be disabled in Safari 8.
  // https://bugs.webkit.org/show_bug.cgi?id=137337

  support.createHTMLDocument = function () {
    var body = document.implementation.createHTMLDocument("").body;
    body.innerHTML = "<form></form><form></form>";
    return body.childNodes.length === 2;
  }(); // Argument "data" should be string of html
  // context (optional): If specified, the fragment will be created in this context,
  // defaults to document
  // keepScripts (optional): If true, will include scripts passed in the html string


  jQuery.parseHTML = function (data, context, keepScripts) {
    if (typeof data !== "string") {
      return [];
    }

    if (typeof context === "boolean") {
      keepScripts = context;
      context = false;
    }

    var base, parsed, scripts;

    if (!context) {
      // Stop scripts or inline event handlers from being executed immediately
      // by using document.implementation
      if (support.createHTMLDocument) {
        context = document.implementation.createHTMLDocument(""); // Set the base href for the created document
        // so any parsed elements with URLs
        // are based on the document's URL (gh-2965)

        base = context.createElement("base");
        base.href = document.location.href;
        context.head.appendChild(base);
      } else {
        context = document;
      }
    }

    parsed = rsingleTag.exec(data);
    scripts = !keepScripts && []; // Single tag

    if (parsed) {
      return [context.createElement(parsed[1])];
    }

    parsed = buildFragment([data], context, scripts);

    if (scripts && scripts.length) {
      jQuery(scripts).remove();
    }

    return jQuery.merge([], parsed.childNodes);
  };
  /**
   * Load a url into a page
   */


  jQuery.fn.load = function (url, params, callback) {
    var selector,
        type,
        response,
        self = this,
        off = url.indexOf(" ");

    if (off > -1) {
      selector = stripAndCollapse(url.slice(off));
      url = url.slice(0, off);
    } // If it's a function


    if (isFunction(params)) {
      // We assume that it's the callback
      callback = params;
      params = undefined; // Otherwise, build a param string
    } else if (params && typeof params === "object") {
      type = "POST";
    } // If we have elements to modify, make the request


    if (self.length > 0) {
      jQuery.ajax({
        url: url,
        // If "type" variable is undefined, then "GET" method will be used.
        // Make value of this field explicit since
        // user can override it through ajaxSetup method
        type: type || "GET",
        dataType: "html",
        data: params
      }).done(function (responseText) {
        // Save response for use in complete callback
        response = arguments;
        self.html(selector ? // If a selector was specified, locate the right elements in a dummy div
        // Exclude scripts to avoid IE 'Permission Denied' errors
        jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result
        responseText); // If the request succeeds, this function gets "data", "status", "jqXHR"
        // but they are ignored because response was set above.
        // If it fails, this function gets "jqXHR", "status", "error"
      }).always(callback && function (jqXHR, status) {
        self.each(function () {
          callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
        });
      });
    }

    return this;
  };

  jQuery.expr.pseudos.animated = function (elem) {
    return jQuery.grep(jQuery.timers, function (fn) {
      return elem === fn.elem;
    }).length;
  };

  jQuery.offset = {
    setOffset: function (elem, options, i) {
      var curPosition,
          curLeft,
          curCSSTop,
          curTop,
          curOffset,
          curCSSLeft,
          calculatePosition,
          position = jQuery.css(elem, "position"),
          curElem = jQuery(elem),
          props = {}; // Set position first, in-case top/left are set even on static elem

      if (position === "static") {
        elem.style.position = "relative";
      }

      curOffset = curElem.offset();
      curCSSTop = jQuery.css(elem, "top");
      curCSSLeft = jQuery.css(elem, "left");
      calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1; // Need to be able to calculate position if either
      // top or left is auto and position is either absolute or fixed

      if (calculatePosition) {
        curPosition = curElem.position();
        curTop = curPosition.top;
        curLeft = curPosition.left;
      } else {
        curTop = parseFloat(curCSSTop) || 0;
        curLeft = parseFloat(curCSSLeft) || 0;
      }

      if (isFunction(options)) {
        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
        options = options.call(elem, i, jQuery.extend({}, curOffset));
      }

      if (options.top != null) {
        props.top = options.top - curOffset.top + curTop;
      }

      if (options.left != null) {
        props.left = options.left - curOffset.left + curLeft;
      }

      if ("using" in options) {
        options.using.call(elem, props);
      } else {
        if (typeof props.top === "number") {
          props.top += "px";
        }

        if (typeof props.left === "number") {
          props.left += "px";
        }

        curElem.css(props);
      }
    }
  };
  jQuery.fn.extend({
    // offset() relates an element's border box to the document origin
    offset: function (options) {
      // Preserve chaining for setter
      if (arguments.length) {
        return options === undefined ? this : this.each(function (i) {
          jQuery.offset.setOffset(this, options, i);
        });
      }

      var rect,
          win,
          elem = this[0];

      if (!elem) {
        return;
      } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
      // Support: IE <=11 only
      // Running getBoundingClientRect on a
      // disconnected node in IE throws an error


      if (!elem.getClientRects().length) {
        return {
          top: 0,
          left: 0
        };
      } // Get document-relative position by adding viewport scroll to viewport-relative gBCR


      rect = elem.getBoundingClientRect();
      win = elem.ownerDocument.defaultView;
      return {
        top: rect.top + win.pageYOffset,
        left: rect.left + win.pageXOffset
      };
    },
    // position() relates an element's margin box to its offset parent's padding box
    // This corresponds to the behavior of CSS absolute positioning
    position: function () {
      if (!this[0]) {
        return;
      }

      var offsetParent,
          offset,
          doc,
          elem = this[0],
          parentOffset = {
        top: 0,
        left: 0
      }; // position:fixed elements are offset from the viewport, which itself always has zero offset

      if (jQuery.css(elem, "position") === "fixed") {
        // Assume position:fixed implies availability of getBoundingClientRect
        offset = elem.getBoundingClientRect();
      } else {
        offset = this.offset(); // Account for the *real* offset parent, which can be the document or its root element
        // when a statically positioned element is identified

        doc = elem.ownerDocument;
        offsetParent = elem.offsetParent || doc.documentElement;

        while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {
          offsetParent = offsetParent.parentNode;
        }

        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
          // Incorporate borders into its offset, since they are outside its content origin
          parentOffset = jQuery(offsetParent).offset();
          parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
          parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
        }
      } // Subtract parent offsets and element margins


      return {
        top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
        left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
      };
    },
    // This method will return documentElement in the following cases:
    // 1) For the element inside the iframe without offsetParent, this method will return
    //    documentElement of the parent window
    // 2) For the hidden or detached element
    // 3) For body or html element, i.e. in case of the html node - it will return itself
    //
    // but those exceptions were never presented as a real life use-cases
    // and might be considered as more preferable results.
    //
    // This logic, however, is not guaranteed and can change at any point in the future
    offsetParent: function () {
      return this.map(function () {
        var offsetParent = this.offsetParent;

        while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
          offsetParent = offsetParent.offsetParent;
        }

        return offsetParent || documentElement;
      });
    }
  }); // Create scrollLeft and scrollTop methods

  jQuery.each({
    scrollLeft: "pageXOffset",
    scrollTop: "pageYOffset"
  }, function (method, prop) {
    var top = "pageYOffset" === prop;

    jQuery.fn[method] = function (val) {
      return access(this, function (elem, method, val) {
        // Coalesce documents and windows
        var win;

        if (isWindow(elem)) {
          win = elem;
        } else if (elem.nodeType === 9) {
          win = elem.defaultView;
        }

        if (val === undefined) {
          return win ? win[prop] : elem[method];
        }

        if (win) {
          win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
        } else {
          elem[method] = val;
        }
      }, method, val, arguments.length);
    };
  }); // Support: Safari <=7 - 9.1, Chrome <=37 - 49
  // Add the top/left cssHooks using jQuery.fn.position
  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
  // getComputedStyle returns percent when specified for top/left/bottom/right;
  // rather than make the css module depend on the offset module, just check for it here

  jQuery.each(["top", "left"], function (_i, prop) {
    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
      if (computed) {
        computed = curCSS(elem, prop); // If curCSS returns percentage, fallback to offset

        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
      }
    });
  }); // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods

  jQuery.each({
    Height: "height",
    Width: "width"
  }, function (name, type) {
    jQuery.each({
      padding: "inner" + name,
      content: type,
      "": "outer" + name
    }, function (defaultExtra, funcName) {
      // Margin is only for outerHeight, outerWidth
      jQuery.fn[funcName] = function (margin, value) {
        var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
            extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
        return access(this, function (elem, type, value) {
          var doc;

          if (isWindow(elem)) {
            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
            return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
          } // Get document width or height


          if (elem.nodeType === 9) {
            doc = elem.documentElement; // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
            // whichever is greatest

            return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
          }

          return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat
          jQuery.css(elem, type, extra) : // Set width or height on the element
          jQuery.style(elem, type, value, extra);
        }, type, chainable ? margin : undefined, chainable);
      };
    });
  });
  jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (_i, type) {
    jQuery.fn[type] = function (fn) {
      return this.on(type, fn);
    };
  });
  jQuery.fn.extend({
    bind: function (types, data, fn) {
      return this.on(types, null, data, fn);
    },
    unbind: function (types, fn) {
      return this.off(types, null, fn);
    },
    delegate: function (selector, types, data, fn) {
      return this.on(types, selector, data, fn);
    },
    undelegate: function (selector, types, fn) {
      // ( namespace ) or ( selector, types [, fn] )
      return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
    },
    hover: function (fnOver, fnOut) {
      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    }
  });
  jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (_i, name) {
    // Handle event binding
    jQuery.fn[name] = function (data, fn) {
      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
    };
  }); // Support: Android <=4.0 only
  // Make sure we trim BOM and NBSP

  var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g; // Bind a function to a context, optionally partially applying any
  // arguments.
  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
  // However, it is not slated for removal any time soon

  jQuery.proxy = function (fn, context) {
    var tmp, args, proxy;

    if (typeof context === "string") {
      tmp = fn[context];
      context = fn;
      fn = tmp;
    } // Quick check to determine if target is callable, in the spec
    // this throws a TypeError, but we will just return undefined.


    if (!isFunction(fn)) {
      return undefined;
    } // Simulated bind


    args = slice.call(arguments, 2);

    proxy = function () {
      return fn.apply(context || this, args.concat(slice.call(arguments)));
    }; // Set the guid of unique handler to the same of original handler, so it can be removed


    proxy.guid = fn.guid = fn.guid || jQuery.guid++;
    return proxy;
  };

  jQuery.holdReady = function (hold) {
    if (hold) {
      jQuery.readyWait++;
    } else {
      jQuery.ready(true);
    }
  };

  jQuery.isArray = Array.isArray;
  jQuery.parseJSON = JSON.parse;
  jQuery.nodeName = nodeName;
  jQuery.isFunction = isFunction;
  jQuery.isWindow = isWindow;
  jQuery.camelCase = camelCase;
  jQuery.type = toType;
  jQuery.now = Date.now;

  jQuery.isNumeric = function (obj) {
    // As of jQuery 3.0, isNumeric is limited to
    // strings and numbers (primitives or objects)
    // that can be coerced to finite numbers (gh-2662)
    var type = jQuery.type(obj);
    return (type === "number" || type === "string") && // parseFloat NaNs numeric-cast false positives ("")
    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
    // subtraction forces infinities to NaN
    !isNaN(obj - parseFloat(obj));
  };

  jQuery.trim = function (text) {
    return text == null ? "" : (text + "").replace(rtrim, "");
  }; // Register as a named AMD module, since jQuery can be concatenated with other
  // files that may use define, but not via a proper concatenation script that
  // understands anonymous AMD modules. A named AMD is safest and most robust
  // way to register. Lowercase jquery is used because AMD module names are
  // derived from file names, and jQuery is normally delivered in a lowercase
  // file name. Do this after creating the global so that if an AMD module wants
  // to call noConflict to hide this version of jQuery, it will work.
  // Note that for maximum portability, libraries that are not jQuery should
  // declare themselves as anonymous modules, and avoid setting a global if an
  // AMD loader is present. jQuery is a special case. For more information, see
  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon


  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return jQuery;
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }

  var // Map over jQuery in case of overwrite
  _jQuery = window.jQuery,
      // Map over the $ in case of overwrite
  _$ = window.$;

  jQuery.noConflict = function (deep) {
    if (window.$ === jQuery) {
      window.$ = _$;
    }

    if (deep && window.jQuery === jQuery) {
      window.jQuery = _jQuery;
    }

    return jQuery;
  }; // Expose jQuery and $ identifiers, even in AMD
  // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
  // and CommonJS for browser emulators (#13566)


  if (typeof noGlobal === "undefined") {
    window.jQuery = window.$ = jQuery;
  }

  return jQuery;
});

/***/ }),

/***/ "./node_modules/masonry-layout/masonry.js":
/*!************************************************!*\
  !*** ./node_modules/masonry-layout/masonry.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * Masonry v4.2.2
 * Cascading grid layout library
 * https://masonry.desandro.com
 * MIT License
 * by David DeSandro
 */
(function (window, factory) {
  // universal module definition

  /* jshint strict: false */

  /*globals define, module, require */
  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! outlayer/outlayer */ "./node_modules/outlayer/outlayer.js"), __webpack_require__(/*! get-size/get-size */ "./node_modules/get-size/get-size.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(window, function factory(Outlayer, getSize) {
  'use strict'; // -------------------------- masonryDefinition -------------------------- //
  // create an Outlayer layout class

  var Masonry = Outlayer.create('masonry'); // isFitWidth -> fitWidth

  Masonry.compatOptions.fitWidth = 'isFitWidth';
  var proto = Masonry.prototype;

  proto._resetLayout = function () {
    this.getSize();

    this._getMeasurement('columnWidth', 'outerWidth');

    this._getMeasurement('gutter', 'outerWidth');

    this.measureColumns(); // reset column Y

    this.colYs = [];

    for (var i = 0; i < this.cols; i++) {
      this.colYs.push(0);
    }

    this.maxY = 0;
    this.horizontalColIndex = 0;
  };

  proto.measureColumns = function () {
    this.getContainerWidth(); // if columnWidth is 0, default to outerWidth of first item

    if (!this.columnWidth) {
      var firstItem = this.items[0];
      var firstItemElem = firstItem && firstItem.element; // columnWidth fall back to item of first element

      this.columnWidth = firstItemElem && getSize(firstItemElem).outerWidth || // if first elem has no width, default to size of container
      this.containerWidth;
    }

    var columnWidth = this.columnWidth += this.gutter; // calculate columns

    var containerWidth = this.containerWidth + this.gutter;
    var cols = containerWidth / columnWidth; // fix rounding errors, typically with gutters

    var excess = columnWidth - containerWidth % columnWidth; // if overshoot is less than a pixel, round up, otherwise floor it

    var mathMethod = excess && excess < 1 ? 'round' : 'floor';
    cols = Math[mathMethod](cols);
    this.cols = Math.max(cols, 1);
  };

  proto.getContainerWidth = function () {
    // container is parent if fit width
    var isFitWidth = this._getOption('fitWidth');

    var container = isFitWidth ? this.element.parentNode : this.element; // check that this.size and size are there
    // IE8 triggers resize on body size change, so they might not be

    var size = getSize(container);
    this.containerWidth = size && size.innerWidth;
  };

  proto._getItemLayoutPosition = function (item) {
    item.getSize(); // how many columns does this brick span

    var remainder = item.size.outerWidth % this.columnWidth;
    var mathMethod = remainder && remainder < 1 ? 'round' : 'ceil'; // round if off by 1 pixel, otherwise use ceil

    var colSpan = Math[mathMethod](item.size.outerWidth / this.columnWidth);
    colSpan = Math.min(colSpan, this.cols); // use horizontal or top column position

    var colPosMethod = this.options.horizontalOrder ? '_getHorizontalColPosition' : '_getTopColPosition';
    var colPosition = this[colPosMethod](colSpan, item); // position the brick

    var position = {
      x: this.columnWidth * colPosition.col,
      y: colPosition.y
    }; // apply setHeight to necessary columns

    var setHeight = colPosition.y + item.size.outerHeight;
    var setMax = colSpan + colPosition.col;

    for (var i = colPosition.col; i < setMax; i++) {
      this.colYs[i] = setHeight;
    }

    return position;
  };

  proto._getTopColPosition = function (colSpan) {
    var colGroup = this._getTopColGroup(colSpan); // get the minimum Y value from the columns


    var minimumY = Math.min.apply(Math, colGroup);
    return {
      col: colGroup.indexOf(minimumY),
      y: minimumY
    };
  };
  /**
   * @param {Number} colSpan - number of columns the element spans
   * @returns {Array} colGroup
   */


  proto._getTopColGroup = function (colSpan) {
    if (colSpan < 2) {
      // if brick spans only one column, use all the column Ys
      return this.colYs;
    }

    var colGroup = []; // how many different places could this brick fit horizontally

    var groupCount = this.cols + 1 - colSpan; // for each group potential horizontal position

    for (var i = 0; i < groupCount; i++) {
      colGroup[i] = this._getColGroupY(i, colSpan);
    }

    return colGroup;
  };

  proto._getColGroupY = function (col, colSpan) {
    if (colSpan < 2) {
      return this.colYs[col];
    } // make an array of colY values for that one group


    var groupColYs = this.colYs.slice(col, col + colSpan); // and get the max value of the array

    return Math.max.apply(Math, groupColYs);
  }; // get column position based on horizontal index. #873


  proto._getHorizontalColPosition = function (colSpan, item) {
    var col = this.horizontalColIndex % this.cols;
    var isOver = colSpan > 1 && col + colSpan > this.cols; // shift to next row if item can't fit on current row

    col = isOver ? 0 : col; // don't let zero-size items take up space

    var hasSize = item.size.outerWidth && item.size.outerHeight;
    this.horizontalColIndex = hasSize ? col + colSpan : this.horizontalColIndex;
    return {
      col: col,
      y: this._getColGroupY(col, colSpan)
    };
  };

  proto._manageStamp = function (stamp) {
    var stampSize = getSize(stamp);

    var offset = this._getElementOffset(stamp); // get the columns that this stamp affects


    var isOriginLeft = this._getOption('originLeft');

    var firstX = isOriginLeft ? offset.left : offset.right;
    var lastX = firstX + stampSize.outerWidth;
    var firstCol = Math.floor(firstX / this.columnWidth);
    firstCol = Math.max(0, firstCol);
    var lastCol = Math.floor(lastX / this.columnWidth); // lastCol should not go over if multiple of columnWidth #425

    lastCol -= lastX % this.columnWidth ? 0 : 1;
    lastCol = Math.min(this.cols - 1, lastCol); // set colYs to bottom of the stamp

    var isOriginTop = this._getOption('originTop');

    var stampMaxY = (isOriginTop ? offset.top : offset.bottom) + stampSize.outerHeight;

    for (var i = firstCol; i <= lastCol; i++) {
      this.colYs[i] = Math.max(stampMaxY, this.colYs[i]);
    }
  };

  proto._getContainerSize = function () {
    this.maxY = Math.max.apply(Math, this.colYs);
    var size = {
      height: this.maxY
    };

    if (this._getOption('fitWidth')) {
      size.width = this._getContainerFitWidth();
    }

    return size;
  };

  proto._getContainerFitWidth = function () {
    var unusedCols = 0; // count unused columns

    var i = this.cols;

    while (--i) {
      if (this.colYs[i] !== 0) {
        break;
      }

      unusedCols++;
    } // fit container to columns that have been used


    return (this.cols - unusedCols) * this.columnWidth - this.gutter;
  };

  proto.needsResizeLayout = function () {
    var previousWidth = this.containerWidth;
    this.getContainerWidth();
    return previousWidth != this.containerWidth;
  };

  return Masonry;
});

/***/ }),

/***/ "./node_modules/outlayer/item.js":
/*!***************************************!*\
  !*** ./node_modules/outlayer/item.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Outlayer Item
 */
(function (window, factory) {
  // universal module definition

  /* jshint strict: false */

  /* globals define, module, require */
  if (true) {
    // AMD - RequireJS
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ev-emitter/ev-emitter */ "./node_modules/ev-emitter/ev-emitter.js"), __webpack_require__(/*! get-size/get-size */ "./node_modules/get-size/get-size.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(window, function factory(EvEmitter, getSize) {
  'use strict'; // ----- helpers ----- //

  function isEmptyObj(obj) {
    for (var prop in obj) {
      return false;
    }

    prop = null;
    return true;
  } // -------------------------- CSS3 support -------------------------- //


  var docElemStyle = document.documentElement.style;
  var transitionProperty = typeof docElemStyle.transition == 'string' ? 'transition' : 'WebkitTransition';
  var transformProperty = typeof docElemStyle.transform == 'string' ? 'transform' : 'WebkitTransform';
  var transitionEndEvent = {
    WebkitTransition: 'webkitTransitionEnd',
    transition: 'transitionend'
  }[transitionProperty]; // cache all vendor properties that could have vendor prefix

  var vendorProperties = {
    transform: transformProperty,
    transition: transitionProperty,
    transitionDuration: transitionProperty + 'Duration',
    transitionProperty: transitionProperty + 'Property',
    transitionDelay: transitionProperty + 'Delay'
  }; // -------------------------- Item -------------------------- //

  function Item(element, layout) {
    if (!element) {
      return;
    }

    this.element = element; // parent layout class, i.e. Masonry, Isotope, or Packery

    this.layout = layout;
    this.position = {
      x: 0,
      y: 0
    };

    this._create();
  } // inherit EvEmitter


  var proto = Item.prototype = Object.create(EvEmitter.prototype);
  proto.constructor = Item;

  proto._create = function () {
    // transition objects
    this._transn = {
      ingProperties: {},
      clean: {},
      onEnd: {}
    };
    this.css({
      position: 'absolute'
    });
  }; // trigger specified handler for event type


  proto.handleEvent = function (event) {
    var method = 'on' + event.type;

    if (this[method]) {
      this[method](event);
    }
  };

  proto.getSize = function () {
    this.size = getSize(this.element);
  };
  /**
   * apply CSS styles to element
   * @param {Object} style
   */


  proto.css = function (style) {
    var elemStyle = this.element.style;

    for (var prop in style) {
      // use vendor property if available
      var supportedProp = vendorProperties[prop] || prop;
      elemStyle[supportedProp] = style[prop];
    }
  }; // measure position, and sets it


  proto.getPosition = function () {
    var style = getComputedStyle(this.element);

    var isOriginLeft = this.layout._getOption('originLeft');

    var isOriginTop = this.layout._getOption('originTop');

    var xValue = style[isOriginLeft ? 'left' : 'right'];
    var yValue = style[isOriginTop ? 'top' : 'bottom'];
    var x = parseFloat(xValue);
    var y = parseFloat(yValue); // convert percent to pixels

    var layoutSize = this.layout.size;

    if (xValue.indexOf('%') != -1) {
      x = x / 100 * layoutSize.width;
    }

    if (yValue.indexOf('%') != -1) {
      y = y / 100 * layoutSize.height;
    } // clean up 'auto' or other non-integer values


    x = isNaN(x) ? 0 : x;
    y = isNaN(y) ? 0 : y; // remove padding from measurement

    x -= isOriginLeft ? layoutSize.paddingLeft : layoutSize.paddingRight;
    y -= isOriginTop ? layoutSize.paddingTop : layoutSize.paddingBottom;
    this.position.x = x;
    this.position.y = y;
  }; // set settled position, apply padding


  proto.layoutPosition = function () {
    var layoutSize = this.layout.size;
    var style = {};

    var isOriginLeft = this.layout._getOption('originLeft');

    var isOriginTop = this.layout._getOption('originTop'); // x


    var xPadding = isOriginLeft ? 'paddingLeft' : 'paddingRight';
    var xProperty = isOriginLeft ? 'left' : 'right';
    var xResetProperty = isOriginLeft ? 'right' : 'left';
    var x = this.position.x + layoutSize[xPadding]; // set in percentage or pixels

    style[xProperty] = this.getXValue(x); // reset other property

    style[xResetProperty] = ''; // y

    var yPadding = isOriginTop ? 'paddingTop' : 'paddingBottom';
    var yProperty = isOriginTop ? 'top' : 'bottom';
    var yResetProperty = isOriginTop ? 'bottom' : 'top';
    var y = this.position.y + layoutSize[yPadding]; // set in percentage or pixels

    style[yProperty] = this.getYValue(y); // reset other property

    style[yResetProperty] = '';
    this.css(style);
    this.emitEvent('layout', [this]);
  };

  proto.getXValue = function (x) {
    var isHorizontal = this.layout._getOption('horizontal');

    return this.layout.options.percentPosition && !isHorizontal ? x / this.layout.size.width * 100 + '%' : x + 'px';
  };

  proto.getYValue = function (y) {
    var isHorizontal = this.layout._getOption('horizontal');

    return this.layout.options.percentPosition && isHorizontal ? y / this.layout.size.height * 100 + '%' : y + 'px';
  };

  proto._transitionTo = function (x, y) {
    this.getPosition(); // get current x & y from top/left

    var curX = this.position.x;
    var curY = this.position.y;
    var didNotMove = x == this.position.x && y == this.position.y; // save end position

    this.setPosition(x, y); // if did not move and not transitioning, just go to layout

    if (didNotMove && !this.isTransitioning) {
      this.layoutPosition();
      return;
    }

    var transX = x - curX;
    var transY = y - curY;
    var transitionStyle = {};
    transitionStyle.transform = this.getTranslate(transX, transY);
    this.transition({
      to: transitionStyle,
      onTransitionEnd: {
        transform: this.layoutPosition
      },
      isCleaning: true
    });
  };

  proto.getTranslate = function (x, y) {
    // flip cooridinates if origin on right or bottom
    var isOriginLeft = this.layout._getOption('originLeft');

    var isOriginTop = this.layout._getOption('originTop');

    x = isOriginLeft ? x : -x;
    y = isOriginTop ? y : -y;
    return 'translate3d(' + x + 'px, ' + y + 'px, 0)';
  }; // non transition + transform support


  proto.goTo = function (x, y) {
    this.setPosition(x, y);
    this.layoutPosition();
  };

  proto.moveTo = proto._transitionTo;

  proto.setPosition = function (x, y) {
    this.position.x = parseFloat(x);
    this.position.y = parseFloat(y);
  }; // ----- transition ----- //

  /**
   * @param {Object} style - CSS
   * @param {Function} onTransitionEnd
   */
  // non transition, just trigger callback


  proto._nonTransition = function (args) {
    this.css(args.to);

    if (args.isCleaning) {
      this._removeStyles(args.to);
    }

    for (var prop in args.onTransitionEnd) {
      args.onTransitionEnd[prop].call(this);
    }
  };
  /**
   * proper transition
   * @param {Object} args - arguments
   *   @param {Object} to - style to transition to
   *   @param {Object} from - style to start transition from
   *   @param {Boolean} isCleaning - removes transition styles after transition
   *   @param {Function} onTransitionEnd - callback
   */


  proto.transition = function (args) {
    // redirect to nonTransition if no transition duration
    if (!parseFloat(this.layout.options.transitionDuration)) {
      this._nonTransition(args);

      return;
    }

    var _transition = this._transn; // keep track of onTransitionEnd callback by css property

    for (var prop in args.onTransitionEnd) {
      _transition.onEnd[prop] = args.onTransitionEnd[prop];
    } // keep track of properties that are transitioning


    for (prop in args.to) {
      _transition.ingProperties[prop] = true; // keep track of properties to clean up when transition is done

      if (args.isCleaning) {
        _transition.clean[prop] = true;
      }
    } // set from styles


    if (args.from) {
      this.css(args.from); // force redraw. http://blog.alexmaccaw.com/css-transitions

      var h = this.element.offsetHeight; // hack for JSHint to hush about unused var

      h = null;
    } // enable transition


    this.enableTransition(args.to); // set styles that are transitioning

    this.css(args.to);
    this.isTransitioning = true;
  }; // dash before all cap letters, including first for
  // WebkitTransform => -webkit-transform


  function toDashedAll(str) {
    return str.replace(/([A-Z])/g, function ($1) {
      return '-' + $1.toLowerCase();
    });
  }

  var transitionProps = 'opacity,' + toDashedAll(transformProperty);

  proto.enableTransition = function ()
  /* style */
  {
    // HACK changing transitionProperty during a transition
    // will cause transition to jump
    if (this.isTransitioning) {
      return;
    } // make `transition: foo, bar, baz` from style object
    // HACK un-comment this when enableTransition can work
    // while a transition is happening
    // var transitionValues = [];
    // for ( var prop in style ) {
    //   // dash-ify camelCased properties like WebkitTransition
    //   prop = vendorProperties[ prop ] || prop;
    //   transitionValues.push( toDashedAll( prop ) );
    // }
    // munge number to millisecond, to match stagger


    var duration = this.layout.options.transitionDuration;
    duration = typeof duration == 'number' ? duration + 'ms' : duration; // enable transition styles

    this.css({
      transitionProperty: transitionProps,
      transitionDuration: duration,
      transitionDelay: this.staggerDelay || 0
    }); // listen for transition end event

    this.element.addEventListener(transitionEndEvent, this, false);
  }; // ----- events ----- //


  proto.onwebkitTransitionEnd = function (event) {
    this.ontransitionend(event);
  };

  proto.onotransitionend = function (event) {
    this.ontransitionend(event);
  }; // properties that I munge to make my life easier


  var dashedVendorProperties = {
    '-webkit-transform': 'transform'
  };

  proto.ontransitionend = function (event) {
    // disregard bubbled events from children
    if (event.target !== this.element) {
      return;
    }

    var _transition = this._transn; // get property name of transitioned property, convert to prefix-free

    var propertyName = dashedVendorProperties[event.propertyName] || event.propertyName; // remove property that has completed transitioning

    delete _transition.ingProperties[propertyName]; // check if any properties are still transitioning

    if (isEmptyObj(_transition.ingProperties)) {
      // all properties have completed transitioning
      this.disableTransition();
    } // clean style


    if (propertyName in _transition.clean) {
      // clean up style
      this.element.style[event.propertyName] = '';
      delete _transition.clean[propertyName];
    } // trigger onTransitionEnd callback


    if (propertyName in _transition.onEnd) {
      var onTransitionEnd = _transition.onEnd[propertyName];
      onTransitionEnd.call(this);
      delete _transition.onEnd[propertyName];
    }

    this.emitEvent('transitionEnd', [this]);
  };

  proto.disableTransition = function () {
    this.removeTransitionStyles();
    this.element.removeEventListener(transitionEndEvent, this, false);
    this.isTransitioning = false;
  };
  /**
   * removes style property from element
   * @param {Object} style
  **/


  proto._removeStyles = function (style) {
    // clean up transition styles
    var cleanStyle = {};

    for (var prop in style) {
      cleanStyle[prop] = '';
    }

    this.css(cleanStyle);
  };

  var cleanTransitionStyle = {
    transitionProperty: '',
    transitionDuration: '',
    transitionDelay: ''
  };

  proto.removeTransitionStyles = function () {
    // remove transition
    this.css(cleanTransitionStyle);
  }; // ----- stagger ----- //


  proto.stagger = function (delay) {
    delay = isNaN(delay) ? 0 : delay;
    this.staggerDelay = delay + 'ms';
  }; // ----- show/hide/remove ----- //
  // remove element from DOM


  proto.removeElem = function () {
    this.element.parentNode.removeChild(this.element); // remove display: none

    this.css({
      display: ''
    });
    this.emitEvent('remove', [this]);
  };

  proto.remove = function () {
    // just remove element if no transition support or no transition
    if (!transitionProperty || !parseFloat(this.layout.options.transitionDuration)) {
      this.removeElem();
      return;
    } // start transition


    this.once('transitionEnd', function () {
      this.removeElem();
    });
    this.hide();
  };

  proto.reveal = function () {
    delete this.isHidden; // remove display: none

    this.css({
      display: ''
    });
    var options = this.layout.options;
    var onTransitionEnd = {};
    var transitionEndProperty = this.getHideRevealTransitionEndProperty('visibleStyle');
    onTransitionEnd[transitionEndProperty] = this.onRevealTransitionEnd;
    this.transition({
      from: options.hiddenStyle,
      to: options.visibleStyle,
      isCleaning: true,
      onTransitionEnd: onTransitionEnd
    });
  };

  proto.onRevealTransitionEnd = function () {
    // check if still visible
    // during transition, item may have been hidden
    if (!this.isHidden) {
      this.emitEvent('reveal');
    }
  };
  /**
   * get style property use for hide/reveal transition end
   * @param {String} styleProperty - hiddenStyle/visibleStyle
   * @returns {String}
   */


  proto.getHideRevealTransitionEndProperty = function (styleProperty) {
    var optionStyle = this.layout.options[styleProperty]; // use opacity

    if (optionStyle.opacity) {
      return 'opacity';
    } // get first property


    for (var prop in optionStyle) {
      return prop;
    }
  };

  proto.hide = function () {
    // set flag
    this.isHidden = true; // remove display: none

    this.css({
      display: ''
    });
    var options = this.layout.options;
    var onTransitionEnd = {};
    var transitionEndProperty = this.getHideRevealTransitionEndProperty('hiddenStyle');
    onTransitionEnd[transitionEndProperty] = this.onHideTransitionEnd;
    this.transition({
      from: options.visibleStyle,
      to: options.hiddenStyle,
      // keep hidden stuff hidden
      isCleaning: true,
      onTransitionEnd: onTransitionEnd
    });
  };

  proto.onHideTransitionEnd = function () {
    // check if still hidden
    // during transition, item may have been un-hidden
    if (this.isHidden) {
      this.css({
        display: 'none'
      });
      this.emitEvent('hide');
    }
  };

  proto.destroy = function () {
    this.css({
      position: '',
      left: '',
      right: '',
      top: '',
      bottom: '',
      transition: '',
      transform: ''
    });
  };

  return Item;
});

/***/ }),

/***/ "./node_modules/outlayer/outlayer.js":
/*!*******************************************!*\
  !*** ./node_modules/outlayer/outlayer.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * Outlayer v2.1.1
 * the brains and guts of a layout library
 * MIT license
 */
(function (window, factory) {
  'use strict'; // universal module definition

  /* jshint strict: false */

  /* globals define, module, require */

  if (true) {
    // AMD - RequireJS
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ev-emitter/ev-emitter */ "./node_modules/ev-emitter/ev-emitter.js"), __webpack_require__(/*! get-size/get-size */ "./node_modules/get-size/get-size.js"), __webpack_require__(/*! fizzy-ui-utils/utils */ "./node_modules/fizzy-ui-utils/utils.js"), __webpack_require__(/*! ./item */ "./node_modules/outlayer/item.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (EvEmitter, getSize, utils, Item) {
      return factory(window, EvEmitter, getSize, utils, Item);
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(window, function factory(window, EvEmitter, getSize, utils, Item) {
  'use strict'; // ----- vars ----- //

  var console = window.console;
  var jQuery = window.jQuery;

  var noop = function () {}; // -------------------------- Outlayer -------------------------- //
  // globally unique identifiers


  var GUID = 0; // internal store of all Outlayer intances

  var instances = {};
  /**
   * @param {Element, String} element
   * @param {Object} options
   * @constructor
   */

  function Outlayer(element, options) {
    var queryElement = utils.getQueryElement(element);

    if (!queryElement) {
      if (console) {
        console.error('Bad element for ' + this.constructor.namespace + ': ' + (queryElement || element));
      }

      return;
    }

    this.element = queryElement; // add jQuery

    if (jQuery) {
      this.$element = jQuery(this.element);
    } // options


    this.options = utils.extend({}, this.constructor.defaults);
    this.option(options); // add id for Outlayer.getFromElement

    var id = ++GUID;
    this.element.outlayerGUID = id; // expando

    instances[id] = this; // associate via id
    // kick it off

    this._create();

    var isInitLayout = this._getOption('initLayout');

    if (isInitLayout) {
      this.layout();
    }
  } // settings are for internal use only


  Outlayer.namespace = 'outlayer';
  Outlayer.Item = Item; // default options

  Outlayer.defaults = {
    containerStyle: {
      position: 'relative'
    },
    initLayout: true,
    originLeft: true,
    originTop: true,
    resize: true,
    resizeContainer: true,
    // item options
    transitionDuration: '0.4s',
    hiddenStyle: {
      opacity: 0,
      transform: 'scale(0.001)'
    },
    visibleStyle: {
      opacity: 1,
      transform: 'scale(1)'
    }
  };
  var proto = Outlayer.prototype; // inherit EvEmitter

  utils.extend(proto, EvEmitter.prototype);
  /**
   * set options
   * @param {Object} opts
   */

  proto.option = function (opts) {
    utils.extend(this.options, opts);
  };
  /**
   * get backwards compatible option value, check old name
   */


  proto._getOption = function (option) {
    var oldOption = this.constructor.compatOptions[option];
    return oldOption && this.options[oldOption] !== undefined ? this.options[oldOption] : this.options[option];
  };

  Outlayer.compatOptions = {
    // currentName: oldName
    initLayout: 'isInitLayout',
    horizontal: 'isHorizontal',
    layoutInstant: 'isLayoutInstant',
    originLeft: 'isOriginLeft',
    originTop: 'isOriginTop',
    resize: 'isResizeBound',
    resizeContainer: 'isResizingContainer'
  };

  proto._create = function () {
    // get items from children
    this.reloadItems(); // elements that affect layout, but are not laid out

    this.stamps = [];
    this.stamp(this.options.stamp); // set container style

    utils.extend(this.element.style, this.options.containerStyle); // bind resize method

    var canBindResize = this._getOption('resize');

    if (canBindResize) {
      this.bindResize();
    }
  }; // goes through all children again and gets bricks in proper order


  proto.reloadItems = function () {
    // collection of item elements
    this.items = this._itemize(this.element.children);
  };
  /**
   * turn elements into Outlayer.Items to be used in layout
   * @param {Array or NodeList or HTMLElement} elems
   * @returns {Array} items - collection of new Outlayer Items
   */


  proto._itemize = function (elems) {
    var itemElems = this._filterFindItemElements(elems);

    var Item = this.constructor.Item; // create new Outlayer Items for collection

    var items = [];

    for (var i = 0; i < itemElems.length; i++) {
      var elem = itemElems[i];
      var item = new Item(elem, this);
      items.push(item);
    }

    return items;
  };
  /**
   * get item elements to be used in layout
   * @param {Array or NodeList or HTMLElement} elems
   * @returns {Array} items - item elements
   */


  proto._filterFindItemElements = function (elems) {
    return utils.filterFindElements(elems, this.options.itemSelector);
  };
  /**
   * getter method for getting item elements
   * @returns {Array} elems - collection of item elements
   */


  proto.getItemElements = function () {
    return this.items.map(function (item) {
      return item.element;
    });
  }; // ----- init & layout ----- //

  /**
   * lays out all items
   */


  proto.layout = function () {
    this._resetLayout();

    this._manageStamps(); // don't animate first layout


    var layoutInstant = this._getOption('layoutInstant');

    var isInstant = layoutInstant !== undefined ? layoutInstant : !this._isLayoutInited;
    this.layoutItems(this.items, isInstant); // flag for initalized

    this._isLayoutInited = true;
  }; // _init is alias for layout


  proto._init = proto.layout;
  /**
   * logic before any new layout
   */

  proto._resetLayout = function () {
    this.getSize();
  };

  proto.getSize = function () {
    this.size = getSize(this.element);
  };
  /**
   * get measurement from option, for columnWidth, rowHeight, gutter
   * if option is String -> get element from selector string, & get size of element
   * if option is Element -> get size of element
   * else use option as a number
   *
   * @param {String} measurement
   * @param {String} size - width or height
   * @private
   */


  proto._getMeasurement = function (measurement, size) {
    var option = this.options[measurement];
    var elem;

    if (!option) {
      // default to 0
      this[measurement] = 0;
    } else {
      // use option as an element
      if (typeof option == 'string') {
        elem = this.element.querySelector(option);
      } else if (option instanceof HTMLElement) {
        elem = option;
      } // use size of element, if element


      this[measurement] = elem ? getSize(elem)[size] : option;
    }
  };
  /**
   * layout a collection of item elements
   * @api public
   */


  proto.layoutItems = function (items, isInstant) {
    items = this._getItemsForLayout(items);

    this._layoutItems(items, isInstant);

    this._postLayout();
  };
  /**
   * get the items to be laid out
   * you may want to skip over some items
   * @param {Array} items
   * @returns {Array} items
   */


  proto._getItemsForLayout = function (items) {
    return items.filter(function (item) {
      return !item.isIgnored;
    });
  };
  /**
   * layout items
   * @param {Array} items
   * @param {Boolean} isInstant
   */


  proto._layoutItems = function (items, isInstant) {
    this._emitCompleteOnItems('layout', items);

    if (!items || !items.length) {
      // no items, emit event with empty array
      return;
    }

    var queue = [];
    items.forEach(function (item) {
      // get x/y object from method
      var position = this._getItemLayoutPosition(item); // enqueue


      position.item = item;
      position.isInstant = isInstant || item.isLayoutInstant;
      queue.push(position);
    }, this);

    this._processLayoutQueue(queue);
  };
  /**
   * get item layout position
   * @param {Outlayer.Item} item
   * @returns {Object} x and y position
   */


  proto._getItemLayoutPosition = function ()
  /* item */
  {
    return {
      x: 0,
      y: 0
    };
  };
  /**
   * iterate over array and position each item
   * Reason being - separating this logic prevents 'layout invalidation'
   * thx @paul_irish
   * @param {Array} queue
   */


  proto._processLayoutQueue = function (queue) {
    this.updateStagger();
    queue.forEach(function (obj, i) {
      this._positionItem(obj.item, obj.x, obj.y, obj.isInstant, i);
    }, this);
  }; // set stagger from option in milliseconds number


  proto.updateStagger = function () {
    var stagger = this.options.stagger;

    if (stagger === null || stagger === undefined) {
      this.stagger = 0;
      return;
    }

    this.stagger = getMilliseconds(stagger);
    return this.stagger;
  };
  /**
   * Sets position of item in DOM
   * @param {Outlayer.Item} item
   * @param {Number} x - horizontal position
   * @param {Number} y - vertical position
   * @param {Boolean} isInstant - disables transitions
   */


  proto._positionItem = function (item, x, y, isInstant, i) {
    if (isInstant) {
      // if not transition, just set CSS
      item.goTo(x, y);
    } else {
      item.stagger(i * this.stagger);
      item.moveTo(x, y);
    }
  };
  /**
   * Any logic you want to do after each layout,
   * i.e. size the container
   */


  proto._postLayout = function () {
    this.resizeContainer();
  };

  proto.resizeContainer = function () {
    var isResizingContainer = this._getOption('resizeContainer');

    if (!isResizingContainer) {
      return;
    }

    var size = this._getContainerSize();

    if (size) {
      this._setContainerMeasure(size.width, true);

      this._setContainerMeasure(size.height, false);
    }
  };
  /**
   * Sets width or height of container if returned
   * @returns {Object} size
   *   @param {Number} width
   *   @param {Number} height
   */


  proto._getContainerSize = noop;
  /**
   * @param {Number} measure - size of width or height
   * @param {Boolean} isWidth
   */

  proto._setContainerMeasure = function (measure, isWidth) {
    if (measure === undefined) {
      return;
    }

    var elemSize = this.size; // add padding and border width if border box

    if (elemSize.isBorderBox) {
      measure += isWidth ? elemSize.paddingLeft + elemSize.paddingRight + elemSize.borderLeftWidth + elemSize.borderRightWidth : elemSize.paddingBottom + elemSize.paddingTop + elemSize.borderTopWidth + elemSize.borderBottomWidth;
    }

    measure = Math.max(measure, 0);
    this.element.style[isWidth ? 'width' : 'height'] = measure + 'px';
  };
  /**
   * emit eventComplete on a collection of items events
   * @param {String} eventName
   * @param {Array} items - Outlayer.Items
   */


  proto._emitCompleteOnItems = function (eventName, items) {
    var _this = this;

    function onComplete() {
      _this.dispatchEvent(eventName + 'Complete', null, [items]);
    }

    var count = items.length;

    if (!items || !count) {
      onComplete();
      return;
    }

    var doneCount = 0;

    function tick() {
      doneCount++;

      if (doneCount == count) {
        onComplete();
      }
    } // bind callback


    items.forEach(function (item) {
      item.once(eventName, tick);
    });
  };
  /**
   * emits events via EvEmitter and jQuery events
   * @param {String} type - name of event
   * @param {Event} event - original event
   * @param {Array} args - extra arguments
   */


  proto.dispatchEvent = function (type, event, args) {
    // add original event to arguments
    var emitArgs = event ? [event].concat(args) : args;
    this.emitEvent(type, emitArgs);

    if (jQuery) {
      // set this.$element
      this.$element = this.$element || jQuery(this.element);

      if (event) {
        // create jQuery event
        var $event = jQuery.Event(event);
        $event.type = type;
        this.$element.trigger($event, args);
      } else {
        // just trigger with type if no event available
        this.$element.trigger(type, args);
      }
    }
  }; // -------------------------- ignore & stamps -------------------------- //

  /**
   * keep item in collection, but do not lay it out
   * ignored items do not get skipped in layout
   * @param {Element} elem
   */


  proto.ignore = function (elem) {
    var item = this.getItem(elem);

    if (item) {
      item.isIgnored = true;
    }
  };
  /**
   * return item to layout collection
   * @param {Element} elem
   */


  proto.unignore = function (elem) {
    var item = this.getItem(elem);

    if (item) {
      delete item.isIgnored;
    }
  };
  /**
   * adds elements to stamps
   * @param {NodeList, Array, Element, or String} elems
   */


  proto.stamp = function (elems) {
    elems = this._find(elems);

    if (!elems) {
      return;
    }

    this.stamps = this.stamps.concat(elems); // ignore

    elems.forEach(this.ignore, this);
  };
  /**
   * removes elements to stamps
   * @param {NodeList, Array, or Element} elems
   */


  proto.unstamp = function (elems) {
    elems = this._find(elems);

    if (!elems) {
      return;
    }

    elems.forEach(function (elem) {
      // filter out removed stamp elements
      utils.removeFrom(this.stamps, elem);
      this.unignore(elem);
    }, this);
  };
  /**
   * finds child elements
   * @param {NodeList, Array, Element, or String} elems
   * @returns {Array} elems
   */


  proto._find = function (elems) {
    if (!elems) {
      return;
    } // if string, use argument as selector string


    if (typeof elems == 'string') {
      elems = this.element.querySelectorAll(elems);
    }

    elems = utils.makeArray(elems);
    return elems;
  };

  proto._manageStamps = function () {
    if (!this.stamps || !this.stamps.length) {
      return;
    }

    this._getBoundingRect();

    this.stamps.forEach(this._manageStamp, this);
  }; // update boundingLeft / Top


  proto._getBoundingRect = function () {
    // get bounding rect for container element
    var boundingRect = this.element.getBoundingClientRect();
    var size = this.size;
    this._boundingRect = {
      left: boundingRect.left + size.paddingLeft + size.borderLeftWidth,
      top: boundingRect.top + size.paddingTop + size.borderTopWidth,
      right: boundingRect.right - (size.paddingRight + size.borderRightWidth),
      bottom: boundingRect.bottom - (size.paddingBottom + size.borderBottomWidth)
    };
  };
  /**
   * @param {Element} stamp
  **/


  proto._manageStamp = noop;
  /**
   * get x/y position of element relative to container element
   * @param {Element} elem
   * @returns {Object} offset - has left, top, right, bottom
   */

  proto._getElementOffset = function (elem) {
    var boundingRect = elem.getBoundingClientRect();
    var thisRect = this._boundingRect;
    var size = getSize(elem);
    var offset = {
      left: boundingRect.left - thisRect.left - size.marginLeft,
      top: boundingRect.top - thisRect.top - size.marginTop,
      right: thisRect.right - boundingRect.right - size.marginRight,
      bottom: thisRect.bottom - boundingRect.bottom - size.marginBottom
    };
    return offset;
  }; // -------------------------- resize -------------------------- //
  // enable event handlers for listeners
  // i.e. resize -> onresize


  proto.handleEvent = utils.handleEvent;
  /**
   * Bind layout to window resizing
   */

  proto.bindResize = function () {
    window.addEventListener('resize', this);
    this.isResizeBound = true;
  };
  /**
   * Unbind layout to window resizing
   */


  proto.unbindResize = function () {
    window.removeEventListener('resize', this);
    this.isResizeBound = false;
  };

  proto.onresize = function () {
    this.resize();
  };

  utils.debounceMethod(Outlayer, 'onresize', 100);

  proto.resize = function () {
    // don't trigger if size did not change
    // or if resize was unbound. See #9
    if (!this.isResizeBound || !this.needsResizeLayout()) {
      return;
    }

    this.layout();
  };
  /**
   * check if layout is needed post layout
   * @returns Boolean
   */


  proto.needsResizeLayout = function () {
    var size = getSize(this.element); // check that this.size and size are there
    // IE8 triggers resize on body size change, so they might not be

    var hasSizes = this.size && size;
    return hasSizes && size.innerWidth !== this.size.innerWidth;
  }; // -------------------------- methods -------------------------- //

  /**
   * add items to Outlayer instance
   * @param {Array or NodeList or Element} elems
   * @returns {Array} items - Outlayer.Items
  **/


  proto.addItems = function (elems) {
    var items = this._itemize(elems); // add items to collection


    if (items.length) {
      this.items = this.items.concat(items);
    }

    return items;
  };
  /**
   * Layout newly-appended item elements
   * @param {Array or NodeList or Element} elems
   */


  proto.appended = function (elems) {
    var items = this.addItems(elems);

    if (!items.length) {
      return;
    } // layout and reveal just the new items


    this.layoutItems(items, true);
    this.reveal(items);
  };
  /**
   * Layout prepended elements
   * @param {Array or NodeList or Element} elems
   */


  proto.prepended = function (elems) {
    var items = this._itemize(elems);

    if (!items.length) {
      return;
    } // add items to beginning of collection


    var previousItems = this.items.slice(0);
    this.items = items.concat(previousItems); // start new layout

    this._resetLayout();

    this._manageStamps(); // layout new stuff without transition


    this.layoutItems(items, true);
    this.reveal(items); // layout previous items

    this.layoutItems(previousItems);
  };
  /**
   * reveal a collection of items
   * @param {Array of Outlayer.Items} items
   */


  proto.reveal = function (items) {
    this._emitCompleteOnItems('reveal', items);

    if (!items || !items.length) {
      return;
    }

    var stagger = this.updateStagger();
    items.forEach(function (item, i) {
      item.stagger(i * stagger);
      item.reveal();
    });
  };
  /**
   * hide a collection of items
   * @param {Array of Outlayer.Items} items
   */


  proto.hide = function (items) {
    this._emitCompleteOnItems('hide', items);

    if (!items || !items.length) {
      return;
    }

    var stagger = this.updateStagger();
    items.forEach(function (item, i) {
      item.stagger(i * stagger);
      item.hide();
    });
  };
  /**
   * reveal item elements
   * @param {Array}, {Element}, {NodeList} items
   */


  proto.revealItemElements = function (elems) {
    var items = this.getItems(elems);
    this.reveal(items);
  };
  /**
   * hide item elements
   * @param {Array}, {Element}, {NodeList} items
   */


  proto.hideItemElements = function (elems) {
    var items = this.getItems(elems);
    this.hide(items);
  };
  /**
   * get Outlayer.Item, given an Element
   * @param {Element} elem
   * @param {Function} callback
   * @returns {Outlayer.Item} item
   */


  proto.getItem = function (elem) {
    // loop through items to get the one that matches
    for (var i = 0; i < this.items.length; i++) {
      var item = this.items[i];

      if (item.element == elem) {
        // return item
        return item;
      }
    }
  };
  /**
   * get collection of Outlayer.Items, given Elements
   * @param {Array} elems
   * @returns {Array} items - Outlayer.Items
   */


  proto.getItems = function (elems) {
    elems = utils.makeArray(elems);
    var items = [];
    elems.forEach(function (elem) {
      var item = this.getItem(elem);

      if (item) {
        items.push(item);
      }
    }, this);
    return items;
  };
  /**
   * remove element(s) from instance and DOM
   * @param {Array or NodeList or Element} elems
   */


  proto.remove = function (elems) {
    var removeItems = this.getItems(elems);

    this._emitCompleteOnItems('remove', removeItems); // bail if no items to remove


    if (!removeItems || !removeItems.length) {
      return;
    }

    removeItems.forEach(function (item) {
      item.remove(); // remove item from collection

      utils.removeFrom(this.items, item);
    }, this);
  }; // ----- destroy ----- //
  // remove and disable Outlayer instance


  proto.destroy = function () {
    // clean up dynamic styles
    var style = this.element.style;
    style.height = '';
    style.position = '';
    style.width = ''; // destroy items

    this.items.forEach(function (item) {
      item.destroy();
    });
    this.unbindResize();
    var id = this.element.outlayerGUID;
    delete instances[id]; // remove reference to instance by id

    delete this.element.outlayerGUID; // remove data for jQuery

    if (jQuery) {
      jQuery.removeData(this.element, this.constructor.namespace);
    }
  }; // -------------------------- data -------------------------- //

  /**
   * get Outlayer instance from element
   * @param {Element} elem
   * @returns {Outlayer}
   */


  Outlayer.data = function (elem) {
    elem = utils.getQueryElement(elem);
    var id = elem && elem.outlayerGUID;
    return id && instances[id];
  }; // -------------------------- create Outlayer class -------------------------- //

  /**
   * create a layout class
   * @param {String} namespace
   */


  Outlayer.create = function (namespace, options) {
    // sub-class Outlayer
    var Layout = subclass(Outlayer); // apply new options and compatOptions

    Layout.defaults = utils.extend({}, Outlayer.defaults);
    utils.extend(Layout.defaults, options);
    Layout.compatOptions = utils.extend({}, Outlayer.compatOptions);
    Layout.namespace = namespace;
    Layout.data = Outlayer.data; // sub-class Item

    Layout.Item = subclass(Item); // -------------------------- declarative -------------------------- //

    utils.htmlInit(Layout, namespace); // -------------------------- jQuery bridge -------------------------- //
    // make into jQuery plugin

    if (jQuery && jQuery.bridget) {
      jQuery.bridget(namespace, Layout);
    }

    return Layout;
  };

  function subclass(Parent) {
    function SubClass() {
      Parent.apply(this, arguments);
    }

    SubClass.prototype = Object.create(Parent.prototype);
    SubClass.prototype.constructor = SubClass;
    return SubClass;
  } // ----- helpers ----- //
  // how many milliseconds are in each unit


  var msUnits = {
    ms: 1,
    s: 1000
  }; // munge time-like parameter into millisecond number
  // '0.4s' -> 40

  function getMilliseconds(time) {
    if (typeof time == 'number') {
      return time;
    }

    var matches = time.match(/(^\d*\.?\d*)(\w*)/);
    var num = matches && matches[1];
    var unit = matches && matches[2];

    if (!num.length) {
      return 0;
    }

    num = parseFloat(num);
    var mult = msUnits[unit] || 1;
    return num * mult;
  } // ----- fin ----- //
  // back in global


  Outlayer.Item = Item;
  return Outlayer;
});

/***/ }),

/***/ "./node_modules/owl.carousel/dist/owl.carousel.js":
/*!********************************************************!*\
  !*** ./node_modules/owl.carousel/dist/owl.carousel.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Owl Carousel v2.3.4
 * Copyright 2013-2018 David Deutsch
 * Licensed under: SEE LICENSE IN https://github.com/OwlCarousel2/OwlCarousel2/blob/master/LICENSE
 */

/**
 * Owl carousel
 * @version 2.3.4
 * @author Bartosz Wojciechowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 * @todo Lazy Load Icon
 * @todo prevent animationend bubling
 * @todo itemsScaleUp
 * @todo Test Zepto
 * @todo stagePadding calculate wrong active classes
 */
;

(function ($, window, document, undefined) {
  /**
   * Creates a carousel.
   * @class The Owl Carousel.
   * @public
   * @param {HTMLElement|jQuery} element - The element to create the carousel for.
   * @param {Object} [options] - The options
   */
  function Owl(element, options) {
    /**
     * Current settings for the carousel.
     * @public
     */
    this.settings = null;
    /**
     * Current options set by the caller including defaults.
     * @public
     */

    this.options = $.extend({}, Owl.Defaults, options);
    /**
     * Plugin element.
     * @public
     */

    this.$element = $(element);
    /**
     * Proxied event handlers.
     * @protected
     */

    this._handlers = {};
    /**
     * References to the running plugins of this carousel.
     * @protected
     */

    this._plugins = {};
    /**
     * Currently suppressed events to prevent them from being retriggered.
     * @protected
     */

    this._supress = {};
    /**
     * Absolute current position.
     * @protected
     */

    this._current = null;
    /**
     * Animation speed in milliseconds.
     * @protected
     */

    this._speed = null;
    /**
     * Coordinates of all items in pixel.
     * @todo The name of this member is missleading.
     * @protected
     */

    this._coordinates = [];
    /**
     * Current breakpoint.
     * @todo Real media queries would be nice.
     * @protected
     */

    this._breakpoint = null;
    /**
     * Current width of the plugin element.
     */

    this._width = null;
    /**
     * All real items.
     * @protected
     */

    this._items = [];
    /**
     * All cloned items.
     * @protected
     */

    this._clones = [];
    /**
     * Merge values of all items.
     * @todo Maybe this could be part of a plugin.
     * @protected
     */

    this._mergers = [];
    /**
     * Widths of all items.
     */

    this._widths = [];
    /**
     * Invalidated parts within the update process.
     * @protected
     */

    this._invalidated = {};
    /**
     * Ordered list of workers for the update process.
     * @protected
     */

    this._pipe = [];
    /**
     * Current state information for the drag operation.
     * @todo #261
     * @protected
     */

    this._drag = {
      time: null,
      target: null,
      pointer: null,
      stage: {
        start: null,
        current: null
      },
      direction: null
    };
    /**
     * Current state information and their tags.
     * @type {Object}
     * @protected
     */

    this._states = {
      current: {},
      tags: {
        'initializing': ['busy'],
        'animating': ['busy'],
        'dragging': ['interacting']
      }
    };
    $.each(['onResize', 'onThrottledResize'], $.proxy(function (i, handler) {
      this._handlers[handler] = $.proxy(this[handler], this);
    }, this));
    $.each(Owl.Plugins, $.proxy(function (key, plugin) {
      this._plugins[key.charAt(0).toLowerCase() + key.slice(1)] = new plugin(this);
    }, this));
    $.each(Owl.Workers, $.proxy(function (priority, worker) {
      this._pipe.push({
        'filter': worker.filter,
        'run': $.proxy(worker.run, this)
      });
    }, this));
    this.setup();
    this.initialize();
  }
  /**
   * Default options for the carousel.
   * @public
   */


  Owl.Defaults = {
    items: 3,
    loop: false,
    center: false,
    rewind: false,
    checkVisibility: true,
    mouseDrag: true,
    touchDrag: true,
    pullDrag: true,
    freeDrag: false,
    margin: 0,
    stagePadding: 0,
    merge: false,
    mergeFit: true,
    autoWidth: false,
    startPosition: 0,
    rtl: false,
    smartSpeed: 250,
    fluidSpeed: false,
    dragEndSpeed: false,
    responsive: {},
    responsiveRefreshRate: 200,
    responsiveBaseElement: window,
    fallbackEasing: 'swing',
    slideTransition: '',
    info: false,
    nestedItemSelector: false,
    itemElement: 'div',
    stageElement: 'div',
    refreshClass: 'owl-refresh',
    loadedClass: 'owl-loaded',
    loadingClass: 'owl-loading',
    rtlClass: 'owl-rtl',
    responsiveClass: 'owl-responsive',
    dragClass: 'owl-drag',
    itemClass: 'owl-item',
    stageClass: 'owl-stage',
    stageOuterClass: 'owl-stage-outer',
    grabClass: 'owl-grab'
  };
  /**
   * Enumeration for width.
   * @public
   * @readonly
   * @enum {String}
   */

  Owl.Width = {
    Default: 'default',
    Inner: 'inner',
    Outer: 'outer'
  };
  /**
   * Enumeration for types.
   * @public
   * @readonly
   * @enum {String}
   */

  Owl.Type = {
    Event: 'event',
    State: 'state'
  };
  /**
   * Contains all registered plugins.
   * @public
   */

  Owl.Plugins = {};
  /**
   * List of workers involved in the update process.
   */

  Owl.Workers = [{
    filter: ['width', 'settings'],
    run: function () {
      this._width = this.$element.width();
    }
  }, {
    filter: ['width', 'items', 'settings'],
    run: function (cache) {
      cache.current = this._items && this._items[this.relative(this._current)];
    }
  }, {
    filter: ['items', 'settings'],
    run: function () {
      this.$stage.children('.cloned').remove();
    }
  }, {
    filter: ['width', 'items', 'settings'],
    run: function (cache) {
      var margin = this.settings.margin || '',
          grid = !this.settings.autoWidth,
          rtl = this.settings.rtl,
          css = {
        'width': 'auto',
        'margin-left': rtl ? margin : '',
        'margin-right': rtl ? '' : margin
      };
      !grid && this.$stage.children().css(css);
      cache.css = css;
    }
  }, {
    filter: ['width', 'items', 'settings'],
    run: function (cache) {
      var width = (this.width() / this.settings.items).toFixed(3) - this.settings.margin,
          merge = null,
          iterator = this._items.length,
          grid = !this.settings.autoWidth,
          widths = [];
      cache.items = {
        merge: false,
        width: width
      };

      while (iterator--) {
        merge = this._mergers[iterator];
        merge = this.settings.mergeFit && Math.min(merge, this.settings.items) || merge;
        cache.items.merge = merge > 1 || cache.items.merge;
        widths[iterator] = !grid ? this._items[iterator].width() : width * merge;
      }

      this._widths = widths;
    }
  }, {
    filter: ['items', 'settings'],
    run: function () {
      var clones = [],
          items = this._items,
          settings = this.settings,
          // TODO: Should be computed from number of min width items in stage
      view = Math.max(settings.items * 2, 4),
          size = Math.ceil(items.length / 2) * 2,
          repeat = settings.loop && items.length ? settings.rewind ? view : Math.max(view, size) : 0,
          append = '',
          prepend = '';
      repeat /= 2;

      while (repeat > 0) {
        // Switch to only using appended clones
        clones.push(this.normalize(clones.length / 2, true));
        append = append + items[clones[clones.length - 1]][0].outerHTML;
        clones.push(this.normalize(items.length - 1 - (clones.length - 1) / 2, true));
        prepend = items[clones[clones.length - 1]][0].outerHTML + prepend;
        repeat -= 1;
      }

      this._clones = clones;
      $(append).addClass('cloned').appendTo(this.$stage);
      $(prepend).addClass('cloned').prependTo(this.$stage);
    }
  }, {
    filter: ['width', 'items', 'settings'],
    run: function () {
      var rtl = this.settings.rtl ? 1 : -1,
          size = this._clones.length + this._items.length,
          iterator = -1,
          previous = 0,
          current = 0,
          coordinates = [];

      while (++iterator < size) {
        previous = coordinates[iterator - 1] || 0;
        current = this._widths[this.relative(iterator)] + this.settings.margin;
        coordinates.push(previous + current * rtl);
      }

      this._coordinates = coordinates;
    }
  }, {
    filter: ['width', 'items', 'settings'],
    run: function () {
      var padding = this.settings.stagePadding,
          coordinates = this._coordinates,
          css = {
        'width': Math.ceil(Math.abs(coordinates[coordinates.length - 1])) + padding * 2,
        'padding-left': padding || '',
        'padding-right': padding || ''
      };
      this.$stage.css(css);
    }
  }, {
    filter: ['width', 'items', 'settings'],
    run: function (cache) {
      var iterator = this._coordinates.length,
          grid = !this.settings.autoWidth,
          items = this.$stage.children();

      if (grid && cache.items.merge) {
        while (iterator--) {
          cache.css.width = this._widths[this.relative(iterator)];
          items.eq(iterator).css(cache.css);
        }
      } else if (grid) {
        cache.css.width = cache.items.width;
        items.css(cache.css);
      }
    }
  }, {
    filter: ['items'],
    run: function () {
      this._coordinates.length < 1 && this.$stage.removeAttr('style');
    }
  }, {
    filter: ['width', 'items', 'settings'],
    run: function (cache) {
      cache.current = cache.current ? this.$stage.children().index(cache.current) : 0;
      cache.current = Math.max(this.minimum(), Math.min(this.maximum(), cache.current));
      this.reset(cache.current);
    }
  }, {
    filter: ['position'],
    run: function () {
      this.animate(this.coordinates(this._current));
    }
  }, {
    filter: ['width', 'position', 'items', 'settings'],
    run: function () {
      var rtl = this.settings.rtl ? 1 : -1,
          padding = this.settings.stagePadding * 2,
          begin = this.coordinates(this.current()) + padding,
          end = begin + this.width() * rtl,
          inner,
          outer,
          matches = [],
          i,
          n;

      for (i = 0, n = this._coordinates.length; i < n; i++) {
        inner = this._coordinates[i - 1] || 0;
        outer = Math.abs(this._coordinates[i]) + padding * rtl;

        if (this.op(inner, '<=', begin) && this.op(inner, '>', end) || this.op(outer, '<', begin) && this.op(outer, '>', end)) {
          matches.push(i);
        }
      }

      this.$stage.children('.active').removeClass('active');
      this.$stage.children(':eq(' + matches.join('), :eq(') + ')').addClass('active');
      this.$stage.children('.center').removeClass('center');

      if (this.settings.center) {
        this.$stage.children().eq(this.current()).addClass('center');
      }
    }
  }];
  /**
   * Create the stage DOM element
   */

  Owl.prototype.initializeStage = function () {
    this.$stage = this.$element.find('.' + this.settings.stageClass); // if the stage is already in the DOM, grab it and skip stage initialization

    if (this.$stage.length) {
      return;
    }

    this.$element.addClass(this.options.loadingClass); // create stage

    this.$stage = $('<' + this.settings.stageElement + '>', {
      "class": this.settings.stageClass
    }).wrap($('<div/>', {
      "class": this.settings.stageOuterClass
    })); // append stage

    this.$element.append(this.$stage.parent());
  };
  /**
   * Create item DOM elements
   */


  Owl.prototype.initializeItems = function () {
    var $items = this.$element.find('.owl-item'); // if the items are already in the DOM, grab them and skip item initialization

    if ($items.length) {
      this._items = $items.get().map(function (item) {
        return $(item);
      });
      this._mergers = this._items.map(function () {
        return 1;
      });
      this.refresh();
      return;
    } // append content


    this.replace(this.$element.children().not(this.$stage.parent())); // check visibility

    if (this.isVisible()) {
      // update view
      this.refresh();
    } else {
      // invalidate width
      this.invalidate('width');
    }

    this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass);
  };
  /**
   * Initializes the carousel.
   * @protected
   */


  Owl.prototype.initialize = function () {
    this.enter('initializing');
    this.trigger('initialize');
    this.$element.toggleClass(this.settings.rtlClass, this.settings.rtl);

    if (this.settings.autoWidth && !this.is('pre-loading')) {
      var imgs, nestedSelector, width;
      imgs = this.$element.find('img');
      nestedSelector = this.settings.nestedItemSelector ? '.' + this.settings.nestedItemSelector : undefined;
      width = this.$element.children(nestedSelector).width();

      if (imgs.length && width <= 0) {
        this.preloadAutoWidthImages(imgs);
      }
    }

    this.initializeStage();
    this.initializeItems(); // register event handlers

    this.registerEventHandlers();
    this.leave('initializing');
    this.trigger('initialized');
  };
  /**
   * @returns {Boolean} visibility of $element
   *                    if you know the carousel will always be visible you can set `checkVisibility` to `false` to
   *                    prevent the expensive browser layout forced reflow the $element.is(':visible') does
   */


  Owl.prototype.isVisible = function () {
    return this.settings.checkVisibility ? this.$element.is(':visible') : true;
  };
  /**
   * Setups the current settings.
   * @todo Remove responsive classes. Why should adaptive designs be brought into IE8?
   * @todo Support for media queries by using `matchMedia` would be nice.
   * @public
   */


  Owl.prototype.setup = function () {
    var viewport = this.viewport(),
        overwrites = this.options.responsive,
        match = -1,
        settings = null;

    if (!overwrites) {
      settings = $.extend({}, this.options);
    } else {
      $.each(overwrites, function (breakpoint) {
        if (breakpoint <= viewport && breakpoint > match) {
          match = Number(breakpoint);
        }
      });
      settings = $.extend({}, this.options, overwrites[match]);

      if (typeof settings.stagePadding === 'function') {
        settings.stagePadding = settings.stagePadding();
      }

      delete settings.responsive; // responsive class

      if (settings.responsiveClass) {
        this.$element.attr('class', this.$element.attr('class').replace(new RegExp('(' + this.options.responsiveClass + '-)\\S+\\s', 'g'), '$1' + match));
      }
    }

    this.trigger('change', {
      property: {
        name: 'settings',
        value: settings
      }
    });
    this._breakpoint = match;
    this.settings = settings;
    this.invalidate('settings');
    this.trigger('changed', {
      property: {
        name: 'settings',
        value: this.settings
      }
    });
  };
  /**
   * Updates option logic if necessery.
   * @protected
   */


  Owl.prototype.optionsLogic = function () {
    if (this.settings.autoWidth) {
      this.settings.stagePadding = false;
      this.settings.merge = false;
    }
  };
  /**
   * Prepares an item before add.
   * @todo Rename event parameter `content` to `item`.
   * @protected
   * @returns {jQuery|HTMLElement} - The item container.
   */


  Owl.prototype.prepare = function (item) {
    var event = this.trigger('prepare', {
      content: item
    });

    if (!event.data) {
      event.data = $('<' + this.settings.itemElement + '/>').addClass(this.options.itemClass).append(item);
    }

    this.trigger('prepared', {
      content: event.data
    });
    return event.data;
  };
  /**
   * Updates the view.
   * @public
   */


  Owl.prototype.update = function () {
    var i = 0,
        n = this._pipe.length,
        filter = $.proxy(function (p) {
      return this[p];
    }, this._invalidated),
        cache = {};

    while (i < n) {
      if (this._invalidated.all || $.grep(this._pipe[i].filter, filter).length > 0) {
        this._pipe[i].run(cache);
      }

      i++;
    }

    this._invalidated = {};
    !this.is('valid') && this.enter('valid');
  };
  /**
   * Gets the width of the view.
   * @public
   * @param {Owl.Width} [dimension=Owl.Width.Default] - The dimension to return.
   * @returns {Number} - The width of the view in pixel.
   */


  Owl.prototype.width = function (dimension) {
    dimension = dimension || Owl.Width.Default;

    switch (dimension) {
      case Owl.Width.Inner:
      case Owl.Width.Outer:
        return this._width;

      default:
        return this._width - this.settings.stagePadding * 2 + this.settings.margin;
    }
  };
  /**
   * Refreshes the carousel primarily for adaptive purposes.
   * @public
   */


  Owl.prototype.refresh = function () {
    this.enter('refreshing');
    this.trigger('refresh');
    this.setup();
    this.optionsLogic();
    this.$element.addClass(this.options.refreshClass);
    this.update();
    this.$element.removeClass(this.options.refreshClass);
    this.leave('refreshing');
    this.trigger('refreshed');
  };
  /**
   * Checks window `resize` event.
   * @protected
   */


  Owl.prototype.onThrottledResize = function () {
    window.clearTimeout(this.resizeTimer);
    this.resizeTimer = window.setTimeout(this._handlers.onResize, this.settings.responsiveRefreshRate);
  };
  /**
   * Checks window `resize` event.
   * @protected
   */


  Owl.prototype.onResize = function () {
    if (!this._items.length) {
      return false;
    }

    if (this._width === this.$element.width()) {
      return false;
    }

    if (!this.isVisible()) {
      return false;
    }

    this.enter('resizing');

    if (this.trigger('resize').isDefaultPrevented()) {
      this.leave('resizing');
      return false;
    }

    this.invalidate('width');
    this.refresh();
    this.leave('resizing');
    this.trigger('resized');
  };
  /**
   * Registers event handlers.
   * @todo Check `msPointerEnabled`
   * @todo #261
   * @protected
   */


  Owl.prototype.registerEventHandlers = function () {
    if ($.support.transition) {
      this.$stage.on($.support.transition.end + '.owl.core', $.proxy(this.onTransitionEnd, this));
    }

    if (this.settings.responsive !== false) {
      this.on(window, 'resize', this._handlers.onThrottledResize);
    }

    if (this.settings.mouseDrag) {
      this.$element.addClass(this.options.dragClass);
      this.$stage.on('mousedown.owl.core', $.proxy(this.onDragStart, this));
      this.$stage.on('dragstart.owl.core selectstart.owl.core', function () {
        return false;
      });
    }

    if (this.settings.touchDrag) {
      this.$stage.on('touchstart.owl.core', $.proxy(this.onDragStart, this));
      this.$stage.on('touchcancel.owl.core', $.proxy(this.onDragEnd, this));
    }
  };
  /**
   * Handles `touchstart` and `mousedown` events.
   * @todo Horizontal swipe threshold as option
   * @todo #261
   * @protected
   * @param {Event} event - The event arguments.
   */


  Owl.prototype.onDragStart = function (event) {
    var stage = null;

    if (event.which === 3) {
      return;
    }

    if ($.support.transform) {
      stage = this.$stage.css('transform').replace(/.*\(|\)| /g, '').split(',');
      stage = {
        x: stage[stage.length === 16 ? 12 : 4],
        y: stage[stage.length === 16 ? 13 : 5]
      };
    } else {
      stage = this.$stage.position();
      stage = {
        x: this.settings.rtl ? stage.left + this.$stage.width() - this.width() + this.settings.margin : stage.left,
        y: stage.top
      };
    }

    if (this.is('animating')) {
      $.support.transform ? this.animate(stage.x) : this.$stage.stop();
      this.invalidate('position');
    }

    this.$element.toggleClass(this.options.grabClass, event.type === 'mousedown');
    this.speed(0);
    this._drag.time = new Date().getTime();
    this._drag.target = $(event.target);
    this._drag.stage.start = stage;
    this._drag.stage.current = stage;
    this._drag.pointer = this.pointer(event);
    $(document).on('mouseup.owl.core touchend.owl.core', $.proxy(this.onDragEnd, this));
    $(document).one('mousemove.owl.core touchmove.owl.core', $.proxy(function (event) {
      var delta = this.difference(this._drag.pointer, this.pointer(event));
      $(document).on('mousemove.owl.core touchmove.owl.core', $.proxy(this.onDragMove, this));

      if (Math.abs(delta.x) < Math.abs(delta.y) && this.is('valid')) {
        return;
      }

      event.preventDefault();
      this.enter('dragging');
      this.trigger('drag');
    }, this));
  };
  /**
   * Handles the `touchmove` and `mousemove` events.
   * @todo #261
   * @protected
   * @param {Event} event - The event arguments.
   */


  Owl.prototype.onDragMove = function (event) {
    var minimum = null,
        maximum = null,
        pull = null,
        delta = this.difference(this._drag.pointer, this.pointer(event)),
        stage = this.difference(this._drag.stage.start, delta);

    if (!this.is('dragging')) {
      return;
    }

    event.preventDefault();

    if (this.settings.loop) {
      minimum = this.coordinates(this.minimum());
      maximum = this.coordinates(this.maximum() + 1) - minimum;
      stage.x = ((stage.x - minimum) % maximum + maximum) % maximum + minimum;
    } else {
      minimum = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum());
      maximum = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum());
      pull = this.settings.pullDrag ? -1 * delta.x / 5 : 0;
      stage.x = Math.max(Math.min(stage.x, minimum + pull), maximum + pull);
    }

    this._drag.stage.current = stage;
    this.animate(stage.x);
  };
  /**
   * Handles the `touchend` and `mouseup` events.
   * @todo #261
   * @todo Threshold for click event
   * @protected
   * @param {Event} event - The event arguments.
   */


  Owl.prototype.onDragEnd = function (event) {
    var delta = this.difference(this._drag.pointer, this.pointer(event)),
        stage = this._drag.stage.current,
        direction = delta.x > 0 ^ this.settings.rtl ? 'left' : 'right';
    $(document).off('.owl.core');
    this.$element.removeClass(this.options.grabClass);

    if (delta.x !== 0 && this.is('dragging') || !this.is('valid')) {
      this.speed(this.settings.dragEndSpeed || this.settings.smartSpeed);
      this.current(this.closest(stage.x, delta.x !== 0 ? direction : this._drag.direction));
      this.invalidate('position');
      this.update();
      this._drag.direction = direction;

      if (Math.abs(delta.x) > 3 || new Date().getTime() - this._drag.time > 300) {
        this._drag.target.one('click.owl.core', function () {
          return false;
        });
      }
    }

    if (!this.is('dragging')) {
      return;
    }

    this.leave('dragging');
    this.trigger('dragged');
  };
  /**
   * Gets absolute position of the closest item for a coordinate.
   * @todo Setting `freeDrag` makes `closest` not reusable. See #165.
   * @protected
   * @param {Number} coordinate - The coordinate in pixel.
   * @param {String} direction - The direction to check for the closest item. Ether `left` or `right`.
   * @return {Number} - The absolute position of the closest item.
   */


  Owl.prototype.closest = function (coordinate, direction) {
    var position = -1,
        pull = 30,
        width = this.width(),
        coordinates = this.coordinates();

    if (!this.settings.freeDrag) {
      // check closest item
      $.each(coordinates, $.proxy(function (index, value) {
        // on a left pull, check on current index
        if (direction === 'left' && coordinate > value - pull && coordinate < value + pull) {
          position = index; // on a right pull, check on previous index
          // to do so, subtract width from value and set position = index + 1
        } else if (direction === 'right' && coordinate > value - width - pull && coordinate < value - width + pull) {
          position = index + 1;
        } else if (this.op(coordinate, '<', value) && this.op(coordinate, '>', coordinates[index + 1] !== undefined ? coordinates[index + 1] : value - width)) {
          position = direction === 'left' ? index + 1 : index;
        }

        return position === -1;
      }, this));
    }

    if (!this.settings.loop) {
      // non loop boundries
      if (this.op(coordinate, '>', coordinates[this.minimum()])) {
        position = coordinate = this.minimum();
      } else if (this.op(coordinate, '<', coordinates[this.maximum()])) {
        position = coordinate = this.maximum();
      }
    }

    return position;
  };
  /**
   * Animates the stage.
   * @todo #270
   * @public
   * @param {Number} coordinate - The coordinate in pixels.
   */


  Owl.prototype.animate = function (coordinate) {
    var animate = this.speed() > 0;
    this.is('animating') && this.onTransitionEnd();

    if (animate) {
      this.enter('animating');
      this.trigger('translate');
    }

    if ($.support.transform3d && $.support.transition) {
      this.$stage.css({
        transform: 'translate3d(' + coordinate + 'px,0px,0px)',
        transition: this.speed() / 1000 + 's' + (this.settings.slideTransition ? ' ' + this.settings.slideTransition : '')
      });
    } else if (animate) {
      this.$stage.animate({
        left: coordinate + 'px'
      }, this.speed(), this.settings.fallbackEasing, $.proxy(this.onTransitionEnd, this));
    } else {
      this.$stage.css({
        left: coordinate + 'px'
      });
    }
  };
  /**
   * Checks whether the carousel is in a specific state or not.
   * @param {String} state - The state to check.
   * @returns {Boolean} - The flag which indicates if the carousel is busy.
   */


  Owl.prototype.is = function (state) {
    return this._states.current[state] && this._states.current[state] > 0;
  };
  /**
   * Sets the absolute position of the current item.
   * @public
   * @param {Number} [position] - The new absolute position or nothing to leave it unchanged.
   * @returns {Number} - The absolute position of the current item.
   */


  Owl.prototype.current = function (position) {
    if (position === undefined) {
      return this._current;
    }

    if (this._items.length === 0) {
      return undefined;
    }

    position = this.normalize(position);

    if (this._current !== position) {
      var event = this.trigger('change', {
        property: {
          name: 'position',
          value: position
        }
      });

      if (event.data !== undefined) {
        position = this.normalize(event.data);
      }

      this._current = position;
      this.invalidate('position');
      this.trigger('changed', {
        property: {
          name: 'position',
          value: this._current
        }
      });
    }

    return this._current;
  };
  /**
   * Invalidates the given part of the update routine.
   * @param {String} [part] - The part to invalidate.
   * @returns {Array.<String>} - The invalidated parts.
   */


  Owl.prototype.invalidate = function (part) {
    if ($.type(part) === 'string') {
      this._invalidated[part] = true;
      this.is('valid') && this.leave('valid');
    }

    return $.map(this._invalidated, function (v, i) {
      return i;
    });
  };
  /**
   * Resets the absolute position of the current item.
   * @public
   * @param {Number} position - The absolute position of the new item.
   */


  Owl.prototype.reset = function (position) {
    position = this.normalize(position);

    if (position === undefined) {
      return;
    }

    this._speed = 0;
    this._current = position;
    this.suppress(['translate', 'translated']);
    this.animate(this.coordinates(position));
    this.release(['translate', 'translated']);
  };
  /**
   * Normalizes an absolute or a relative position of an item.
   * @public
   * @param {Number} position - The absolute or relative position to normalize.
   * @param {Boolean} [relative=false] - Whether the given position is relative or not.
   * @returns {Number} - The normalized position.
   */


  Owl.prototype.normalize = function (position, relative) {
    var n = this._items.length,
        m = relative ? 0 : this._clones.length;

    if (!this.isNumeric(position) || n < 1) {
      position = undefined;
    } else if (position < 0 || position >= n + m) {
      position = ((position - m / 2) % n + n) % n + m / 2;
    }

    return position;
  };
  /**
   * Converts an absolute position of an item into a relative one.
   * @public
   * @param {Number} position - The absolute position to convert.
   * @returns {Number} - The converted position.
   */


  Owl.prototype.relative = function (position) {
    position -= this._clones.length / 2;
    return this.normalize(position, true);
  };
  /**
   * Gets the maximum position for the current item.
   * @public
   * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.
   * @returns {Number}
   */


  Owl.prototype.maximum = function (relative) {
    var settings = this.settings,
        maximum = this._coordinates.length,
        iterator,
        reciprocalItemsWidth,
        elementWidth;

    if (settings.loop) {
      maximum = this._clones.length / 2 + this._items.length - 1;
    } else if (settings.autoWidth || settings.merge) {
      iterator = this._items.length;

      if (iterator) {
        reciprocalItemsWidth = this._items[--iterator].width();
        elementWidth = this.$element.width();

        while (iterator--) {
          reciprocalItemsWidth += this._items[iterator].width() + this.settings.margin;

          if (reciprocalItemsWidth > elementWidth) {
            break;
          }
        }
      }

      maximum = iterator + 1;
    } else if (settings.center) {
      maximum = this._items.length - 1;
    } else {
      maximum = this._items.length - settings.items;
    }

    if (relative) {
      maximum -= this._clones.length / 2;
    }

    return Math.max(maximum, 0);
  };
  /**
   * Gets the minimum position for the current item.
   * @public
   * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.
   * @returns {Number}
   */


  Owl.prototype.minimum = function (relative) {
    return relative ? 0 : this._clones.length / 2;
  };
  /**
   * Gets an item at the specified relative position.
   * @public
   * @param {Number} [position] - The relative position of the item.
   * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.
   */


  Owl.prototype.items = function (position) {
    if (position === undefined) {
      return this._items.slice();
    }

    position = this.normalize(position, true);
    return this._items[position];
  };
  /**
   * Gets an item at the specified relative position.
   * @public
   * @param {Number} [position] - The relative position of the item.
   * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.
   */


  Owl.prototype.mergers = function (position) {
    if (position === undefined) {
      return this._mergers.slice();
    }

    position = this.normalize(position, true);
    return this._mergers[position];
  };
  /**
   * Gets the absolute positions of clones for an item.
   * @public
   * @param {Number} [position] - The relative position of the item.
   * @returns {Array.<Number>} - The absolute positions of clones for the item or all if no position was given.
   */


  Owl.prototype.clones = function (position) {
    var odd = this._clones.length / 2,
        even = odd + this._items.length,
        map = function (index) {
      return index % 2 === 0 ? even + index / 2 : odd - (index + 1) / 2;
    };

    if (position === undefined) {
      return $.map(this._clones, function (v, i) {
        return map(i);
      });
    }

    return $.map(this._clones, function (v, i) {
      return v === position ? map(i) : null;
    });
  };
  /**
   * Sets the current animation speed.
   * @public
   * @param {Number} [speed] - The animation speed in milliseconds or nothing to leave it unchanged.
   * @returns {Number} - The current animation speed in milliseconds.
   */


  Owl.prototype.speed = function (speed) {
    if (speed !== undefined) {
      this._speed = speed;
    }

    return this._speed;
  };
  /**
   * Gets the coordinate of an item.
   * @todo The name of this method is missleanding.
   * @public
   * @param {Number} position - The absolute position of the item within `minimum()` and `maximum()`.
   * @returns {Number|Array.<Number>} - The coordinate of the item in pixel or all coordinates.
   */


  Owl.prototype.coordinates = function (position) {
    var multiplier = 1,
        newPosition = position - 1,
        coordinate;

    if (position === undefined) {
      return $.map(this._coordinates, $.proxy(function (coordinate, index) {
        return this.coordinates(index);
      }, this));
    }

    if (this.settings.center) {
      if (this.settings.rtl) {
        multiplier = -1;
        newPosition = position + 1;
      }

      coordinate = this._coordinates[position];
      coordinate += (this.width() - coordinate + (this._coordinates[newPosition] || 0)) / 2 * multiplier;
    } else {
      coordinate = this._coordinates[newPosition] || 0;
    }

    coordinate = Math.ceil(coordinate);
    return coordinate;
  };
  /**
   * Calculates the speed for a translation.
   * @protected
   * @param {Number} from - The absolute position of the start item.
   * @param {Number} to - The absolute position of the target item.
   * @param {Number} [factor=undefined] - The time factor in milliseconds.
   * @returns {Number} - The time in milliseconds for the translation.
   */


  Owl.prototype.duration = function (from, to, factor) {
    if (factor === 0) {
      return 0;
    }

    return Math.min(Math.max(Math.abs(to - from), 1), 6) * Math.abs(factor || this.settings.smartSpeed);
  };
  /**
   * Slides to the specified item.
   * @public
   * @param {Number} position - The position of the item.
   * @param {Number} [speed] - The time in milliseconds for the transition.
   */


  Owl.prototype.to = function (position, speed) {
    var current = this.current(),
        revert = null,
        distance = position - this.relative(current),
        direction = (distance > 0) - (distance < 0),
        items = this._items.length,
        minimum = this.minimum(),
        maximum = this.maximum();

    if (this.settings.loop) {
      if (!this.settings.rewind && Math.abs(distance) > items / 2) {
        distance += direction * -1 * items;
      }

      position = current + distance;
      revert = ((position - minimum) % items + items) % items + minimum;

      if (revert !== position && revert - distance <= maximum && revert - distance > 0) {
        current = revert - distance;
        position = revert;
        this.reset(current);
      }
    } else if (this.settings.rewind) {
      maximum += 1;
      position = (position % maximum + maximum) % maximum;
    } else {
      position = Math.max(minimum, Math.min(maximum, position));
    }

    this.speed(this.duration(current, position, speed));
    this.current(position);

    if (this.isVisible()) {
      this.update();
    }
  };
  /**
   * Slides to the next item.
   * @public
   * @param {Number} [speed] - The time in milliseconds for the transition.
   */


  Owl.prototype.next = function (speed) {
    speed = speed || false;
    this.to(this.relative(this.current()) + 1, speed);
  };
  /**
   * Slides to the previous item.
   * @public
   * @param {Number} [speed] - The time in milliseconds for the transition.
   */


  Owl.prototype.prev = function (speed) {
    speed = speed || false;
    this.to(this.relative(this.current()) - 1, speed);
  };
  /**
   * Handles the end of an animation.
   * @protected
   * @param {Event} event - The event arguments.
   */


  Owl.prototype.onTransitionEnd = function (event) {
    // if css2 animation then event object is undefined
    if (event !== undefined) {
      event.stopPropagation(); // Catch only owl-stage transitionEnd event

      if ((event.target || event.srcElement || event.originalTarget) !== this.$stage.get(0)) {
        return false;
      }
    }

    this.leave('animating');
    this.trigger('translated');
  };
  /**
   * Gets viewport width.
   * @protected
   * @return {Number} - The width in pixel.
   */


  Owl.prototype.viewport = function () {
    var width;

    if (this.options.responsiveBaseElement !== window) {
      width = $(this.options.responsiveBaseElement).width();
    } else if (window.innerWidth) {
      width = window.innerWidth;
    } else if (document.documentElement && document.documentElement.clientWidth) {
      width = document.documentElement.clientWidth;
    } else {
      console.warn('Can not detect viewport width.');
    }

    return width;
  };
  /**
   * Replaces the current content.
   * @public
   * @param {HTMLElement|jQuery|String} content - The new content.
   */


  Owl.prototype.replace = function (content) {
    this.$stage.empty();
    this._items = [];

    if (content) {
      content = content instanceof jQuery ? content : $(content);
    }

    if (this.settings.nestedItemSelector) {
      content = content.find('.' + this.settings.nestedItemSelector);
    }

    content.filter(function () {
      return this.nodeType === 1;
    }).each($.proxy(function (index, item) {
      item = this.prepare(item);
      this.$stage.append(item);

      this._items.push(item);

      this._mergers.push(item.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);
    }, this));
    this.reset(this.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0);
    this.invalidate('items');
  };
  /**
   * Adds an item.
   * @todo Use `item` instead of `content` for the event arguments.
   * @public
   * @param {HTMLElement|jQuery|String} content - The item content to add.
   * @param {Number} [position] - The relative position at which to insert the item otherwise the item will be added to the end.
   */


  Owl.prototype.add = function (content, position) {
    var current = this.relative(this._current);
    position = position === undefined ? this._items.length : this.normalize(position, true);
    content = content instanceof jQuery ? content : $(content);
    this.trigger('add', {
      content: content,
      position: position
    });
    content = this.prepare(content);

    if (this._items.length === 0 || position === this._items.length) {
      this._items.length === 0 && this.$stage.append(content);
      this._items.length !== 0 && this._items[position - 1].after(content);

      this._items.push(content);

      this._mergers.push(content.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);
    } else {
      this._items[position].before(content);

      this._items.splice(position, 0, content);

      this._mergers.splice(position, 0, content.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);
    }

    this._items[current] && this.reset(this._items[current].index());
    this.invalidate('items');
    this.trigger('added', {
      content: content,
      position: position
    });
  };
  /**
   * Removes an item by its position.
   * @todo Use `item` instead of `content` for the event arguments.
   * @public
   * @param {Number} position - The relative position of the item to remove.
   */


  Owl.prototype.remove = function (position) {
    position = this.normalize(position, true);

    if (position === undefined) {
      return;
    }

    this.trigger('remove', {
      content: this._items[position],
      position: position
    });

    this._items[position].remove();

    this._items.splice(position, 1);

    this._mergers.splice(position, 1);

    this.invalidate('items');
    this.trigger('removed', {
      content: null,
      position: position
    });
  };
  /**
   * Preloads images with auto width.
   * @todo Replace by a more generic approach
   * @protected
   */


  Owl.prototype.preloadAutoWidthImages = function (images) {
    images.each($.proxy(function (i, element) {
      this.enter('pre-loading');
      element = $(element);
      $(new Image()).one('load', $.proxy(function (e) {
        element.attr('src', e.target.src);
        element.css('opacity', 1);
        this.leave('pre-loading');
        !this.is('pre-loading') && !this.is('initializing') && this.refresh();
      }, this)).attr('src', element.attr('src') || element.attr('data-src') || element.attr('data-src-retina'));
    }, this));
  };
  /**
   * Destroys the carousel.
   * @public
   */


  Owl.prototype.destroy = function () {
    this.$element.off('.owl.core');
    this.$stage.off('.owl.core');
    $(document).off('.owl.core');

    if (this.settings.responsive !== false) {
      window.clearTimeout(this.resizeTimer);
      this.off(window, 'resize', this._handlers.onThrottledResize);
    }

    for (var i in this._plugins) {
      this._plugins[i].destroy();
    }

    this.$stage.children('.cloned').remove();
    this.$stage.unwrap();
    this.$stage.children().contents().unwrap();
    this.$stage.children().unwrap();
    this.$stage.remove();
    this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr('class', this.$element.attr('class').replace(new RegExp(this.options.responsiveClass + '-\\S+\\s', 'g'), '')).removeData('owl.carousel');
  };
  /**
   * Operators to calculate right-to-left and left-to-right.
   * @protected
   * @param {Number} [a] - The left side operand.
   * @param {String} [o] - The operator.
   * @param {Number} [b] - The right side operand.
   */


  Owl.prototype.op = function (a, o, b) {
    var rtl = this.settings.rtl;

    switch (o) {
      case '<':
        return rtl ? a > b : a < b;

      case '>':
        return rtl ? a < b : a > b;

      case '>=':
        return rtl ? a <= b : a >= b;

      case '<=':
        return rtl ? a >= b : a <= b;

      default:
        break;
    }
  };
  /**
   * Attaches to an internal event.
   * @protected
   * @param {HTMLElement} element - The event source.
   * @param {String} event - The event name.
   * @param {Function} listener - The event handler to attach.
   * @param {Boolean} capture - Wether the event should be handled at the capturing phase or not.
   */


  Owl.prototype.on = function (element, event, listener, capture) {
    if (element.addEventListener) {
      element.addEventListener(event, listener, capture);
    } else if (element.attachEvent) {
      element.attachEvent('on' + event, listener);
    }
  };
  /**
   * Detaches from an internal event.
   * @protected
   * @param {HTMLElement} element - The event source.
   * @param {String} event - The event name.
   * @param {Function} listener - The attached event handler to detach.
   * @param {Boolean} capture - Wether the attached event handler was registered as a capturing listener or not.
   */


  Owl.prototype.off = function (element, event, listener, capture) {
    if (element.removeEventListener) {
      element.removeEventListener(event, listener, capture);
    } else if (element.detachEvent) {
      element.detachEvent('on' + event, listener);
    }
  };
  /**
   * Triggers a public event.
   * @todo Remove `status`, `relatedTarget` should be used instead.
   * @protected
   * @param {String} name - The event name.
   * @param {*} [data=null] - The event data.
   * @param {String} [namespace=carousel] - The event namespace.
   * @param {String} [state] - The state which is associated with the event.
   * @param {Boolean} [enter=false] - Indicates if the call enters the specified state or not.
   * @returns {Event} - The event arguments.
   */


  Owl.prototype.trigger = function (name, data, namespace, state, enter) {
    var status = {
      item: {
        count: this._items.length,
        index: this.current()
      }
    },
        handler = $.camelCase($.grep(['on', name, namespace], function (v) {
      return v;
    }).join('-').toLowerCase()),
        event = $.Event([name, 'owl', namespace || 'carousel'].join('.').toLowerCase(), $.extend({
      relatedTarget: this
    }, status, data));

    if (!this._supress[name]) {
      $.each(this._plugins, function (name, plugin) {
        if (plugin.onTrigger) {
          plugin.onTrigger(event);
        }
      });
      this.register({
        type: Owl.Type.Event,
        name: name
      });
      this.$element.trigger(event);

      if (this.settings && typeof this.settings[handler] === 'function') {
        this.settings[handler].call(this, event);
      }
    }

    return event;
  };
  /**
   * Enters a state.
   * @param name - The state name.
   */


  Owl.prototype.enter = function (name) {
    $.each([name].concat(this._states.tags[name] || []), $.proxy(function (i, name) {
      if (this._states.current[name] === undefined) {
        this._states.current[name] = 0;
      }

      this._states.current[name]++;
    }, this));
  };
  /**
   * Leaves a state.
   * @param name - The state name.
   */


  Owl.prototype.leave = function (name) {
    $.each([name].concat(this._states.tags[name] || []), $.proxy(function (i, name) {
      this._states.current[name]--;
    }, this));
  };
  /**
   * Registers an event or state.
   * @public
   * @param {Object} object - The event or state to register.
   */


  Owl.prototype.register = function (object) {
    if (object.type === Owl.Type.Event) {
      if (!$.event.special[object.name]) {
        $.event.special[object.name] = {};
      }

      if (!$.event.special[object.name].owl) {
        var _default = $.event.special[object.name]._default;

        $.event.special[object.name]._default = function (e) {
          if (_default && _default.apply && (!e.namespace || e.namespace.indexOf('owl') === -1)) {
            return _default.apply(this, arguments);
          }

          return e.namespace && e.namespace.indexOf('owl') > -1;
        };

        $.event.special[object.name].owl = true;
      }
    } else if (object.type === Owl.Type.State) {
      if (!this._states.tags[object.name]) {
        this._states.tags[object.name] = object.tags;
      } else {
        this._states.tags[object.name] = this._states.tags[object.name].concat(object.tags);
      }

      this._states.tags[object.name] = $.grep(this._states.tags[object.name], $.proxy(function (tag, i) {
        return $.inArray(tag, this._states.tags[object.name]) === i;
      }, this));
    }
  };
  /**
   * Suppresses events.
   * @protected
   * @param {Array.<String>} events - The events to suppress.
   */


  Owl.prototype.suppress = function (events) {
    $.each(events, $.proxy(function (index, event) {
      this._supress[event] = true;
    }, this));
  };
  /**
   * Releases suppressed events.
   * @protected
   * @param {Array.<String>} events - The events to release.
   */


  Owl.prototype.release = function (events) {
    $.each(events, $.proxy(function (index, event) {
      delete this._supress[event];
    }, this));
  };
  /**
   * Gets unified pointer coordinates from event.
   * @todo #261
   * @protected
   * @param {Event} - The `mousedown` or `touchstart` event.
   * @returns {Object} - Contains `x` and `y` coordinates of current pointer position.
   */


  Owl.prototype.pointer = function (event) {
    var result = {
      x: null,
      y: null
    };
    event = event.originalEvent || event || window.event;
    event = event.touches && event.touches.length ? event.touches[0] : event.changedTouches && event.changedTouches.length ? event.changedTouches[0] : event;

    if (event.pageX) {
      result.x = event.pageX;
      result.y = event.pageY;
    } else {
      result.x = event.clientX;
      result.y = event.clientY;
    }

    return result;
  };
  /**
   * Determines if the input is a Number or something that can be coerced to a Number
   * @protected
   * @param {Number|String|Object|Array|Boolean|RegExp|Function|Symbol} - The input to be tested
   * @returns {Boolean} - An indication if the input is a Number or can be coerced to a Number
   */


  Owl.prototype.isNumeric = function (number) {
    return !isNaN(parseFloat(number));
  };
  /**
   * Gets the difference of two vectors.
   * @todo #261
   * @protected
   * @param {Object} - The first vector.
   * @param {Object} - The second vector.
   * @returns {Object} - The difference.
   */


  Owl.prototype.difference = function (first, second) {
    return {
      x: first.x - second.x,
      y: first.y - second.y
    };
  };
  /**
   * The jQuery Plugin for the Owl Carousel
   * @todo Navigation plugin `next` and `prev`
   * @public
   */


  $.fn.owlCarousel = function (option) {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.each(function () {
      var $this = $(this),
          data = $this.data('owl.carousel');

      if (!data) {
        data = new Owl(this, typeof option == 'object' && option);
        $this.data('owl.carousel', data);
        $.each(['next', 'prev', 'to', 'destroy', 'refresh', 'replace', 'add', 'remove'], function (i, event) {
          data.register({
            type: Owl.Type.Event,
            name: event
          });
          data.$element.on(event + '.owl.carousel.core', $.proxy(function (e) {
            if (e.namespace && e.relatedTarget !== this) {
              this.suppress([event]);
              data[event].apply(this, [].slice.call(arguments, 1));
              this.release([event]);
            }
          }, data));
        });
      }

      if (typeof option == 'string' && option.charAt(0) !== '_') {
        data[option].apply(data, args);
      }
    });
  };
  /**
   * The constructor for the jQuery Plugin
   * @public
   */


  $.fn.owlCarousel.Constructor = Owl;
})(window.Zepto || window.jQuery, window, document);
/**
 * AutoRefresh Plugin
 * @version 2.3.4
 * @author Artus Kolanowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */


;

(function ($, window, document, undefined) {
  /**
   * Creates the auto refresh plugin.
   * @class The Auto Refresh Plugin
   * @param {Owl} carousel - The Owl Carousel
   */
  var AutoRefresh = function (carousel) {
    /**
     * Reference to the core.
     * @protected
     * @type {Owl}
     */
    this._core = carousel;
    /**
     * Refresh interval.
     * @protected
     * @type {number}
     */

    this._interval = null;
    /**
     * Whether the element is currently visible or not.
     * @protected
     * @type {Boolean}
     */

    this._visible = null;
    /**
     * All event handlers.
     * @protected
     * @type {Object}
     */

    this._handlers = {
      'initialized.owl.carousel': $.proxy(function (e) {
        if (e.namespace && this._core.settings.autoRefresh) {
          this.watch();
        }
      }, this)
    }; // set default options

    this._core.options = $.extend({}, AutoRefresh.Defaults, this._core.options); // register event handlers

    this._core.$element.on(this._handlers);
  };
  /**
   * Default options.
   * @public
   */


  AutoRefresh.Defaults = {
    autoRefresh: true,
    autoRefreshInterval: 500
  };
  /**
   * Watches the element.
   */

  AutoRefresh.prototype.watch = function () {
    if (this._interval) {
      return;
    }

    this._visible = this._core.isVisible();
    this._interval = window.setInterval($.proxy(this.refresh, this), this._core.settings.autoRefreshInterval);
  };
  /**
   * Refreshes the element.
   */


  AutoRefresh.prototype.refresh = function () {
    if (this._core.isVisible() === this._visible) {
      return;
    }

    this._visible = !this._visible;

    this._core.$element.toggleClass('owl-hidden', !this._visible);

    this._visible && this._core.invalidate('width') && this._core.refresh();
  };
  /**
   * Destroys the plugin.
   */


  AutoRefresh.prototype.destroy = function () {
    var handler, property;
    window.clearInterval(this._interval);

    for (handler in this._handlers) {
      this._core.$element.off(handler, this._handlers[handler]);
    }

    for (property in Object.getOwnPropertyNames(this)) {
      typeof this[property] != 'function' && (this[property] = null);
    }
  };

  $.fn.owlCarousel.Constructor.Plugins.AutoRefresh = AutoRefresh;
})(window.Zepto || window.jQuery, window, document);
/**
 * Lazy Plugin
 * @version 2.3.4
 * @author Bartosz Wojciechowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */


;

(function ($, window, document, undefined) {
  /**
   * Creates the lazy plugin.
   * @class The Lazy Plugin
   * @param {Owl} carousel - The Owl Carousel
   */
  var Lazy = function (carousel) {
    /**
     * Reference to the core.
     * @protected
     * @type {Owl}
     */
    this._core = carousel;
    /**
     * Already loaded items.
     * @protected
     * @type {Array.<jQuery>}
     */

    this._loaded = [];
    /**
     * Event handlers.
     * @protected
     * @type {Object}
     */

    this._handlers = {
      'initialized.owl.carousel change.owl.carousel resized.owl.carousel': $.proxy(function (e) {
        if (!e.namespace) {
          return;
        }

        if (!this._core.settings || !this._core.settings.lazyLoad) {
          return;
        }

        if (e.property && e.property.name == 'position' || e.type == 'initialized') {
          var settings = this._core.settings,
              n = settings.center && Math.ceil(settings.items / 2) || settings.items,
              i = settings.center && n * -1 || 0,
              position = (e.property && e.property.value !== undefined ? e.property.value : this._core.current()) + i,
              clones = this._core.clones().length,
              load = $.proxy(function (i, v) {
            this.load(v);
          }, this); //TODO: Need documentation for this new option


          if (settings.lazyLoadEager > 0) {
            n += settings.lazyLoadEager; // If the carousel is looping also preload images that are to the "left"

            if (settings.loop) {
              position -= settings.lazyLoadEager;
              n++;
            }
          }

          while (i++ < n) {
            this.load(clones / 2 + this._core.relative(position));
            clones && $.each(this._core.clones(this._core.relative(position)), load);
            position++;
          }
        }
      }, this)
    }; // set the default options

    this._core.options = $.extend({}, Lazy.Defaults, this._core.options); // register event handler

    this._core.$element.on(this._handlers);
  };
  /**
   * Default options.
   * @public
   */


  Lazy.Defaults = {
    lazyLoad: false,
    lazyLoadEager: 0
  };
  /**
   * Loads all resources of an item at the specified position.
   * @param {Number} position - The absolute position of the item.
   * @protected
   */

  Lazy.prototype.load = function (position) {
    var $item = this._core.$stage.children().eq(position),
        $elements = $item && $item.find('.owl-lazy');

    if (!$elements || $.inArray($item.get(0), this._loaded) > -1) {
      return;
    }

    $elements.each($.proxy(function (index, element) {
      var $element = $(element),
          image,
          url = window.devicePixelRatio > 1 && $element.attr('data-src-retina') || $element.attr('data-src') || $element.attr('data-srcset');

      this._core.trigger('load', {
        element: $element,
        url: url
      }, 'lazy');

      if ($element.is('img')) {
        $element.one('load.owl.lazy', $.proxy(function () {
          $element.css('opacity', 1);

          this._core.trigger('loaded', {
            element: $element,
            url: url
          }, 'lazy');
        }, this)).attr('src', url);
      } else if ($element.is('source')) {
        $element.one('load.owl.lazy', $.proxy(function () {
          this._core.trigger('loaded', {
            element: $element,
            url: url
          }, 'lazy');
        }, this)).attr('srcset', url);
      } else {
        image = new Image();
        image.onload = $.proxy(function () {
          $element.css({
            'background-image': 'url("' + url + '")',
            'opacity': '1'
          });

          this._core.trigger('loaded', {
            element: $element,
            url: url
          }, 'lazy');
        }, this);
        image.src = url;
      }
    }, this));

    this._loaded.push($item.get(0));
  };
  /**
   * Destroys the plugin.
   * @public
   */


  Lazy.prototype.destroy = function () {
    var handler, property;

    for (handler in this.handlers) {
      this._core.$element.off(handler, this.handlers[handler]);
    }

    for (property in Object.getOwnPropertyNames(this)) {
      typeof this[property] != 'function' && (this[property] = null);
    }
  };

  $.fn.owlCarousel.Constructor.Plugins.Lazy = Lazy;
})(window.Zepto || window.jQuery, window, document);
/**
 * AutoHeight Plugin
 * @version 2.3.4
 * @author Bartosz Wojciechowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */


;

(function ($, window, document, undefined) {
  /**
   * Creates the auto height plugin.
   * @class The Auto Height Plugin
   * @param {Owl} carousel - The Owl Carousel
   */
  var AutoHeight = function (carousel) {
    /**
     * Reference to the core.
     * @protected
     * @type {Owl}
     */
    this._core = carousel;
    this._previousHeight = null;
    /**
     * All event handlers.
     * @protected
     * @type {Object}
     */

    this._handlers = {
      'initialized.owl.carousel refreshed.owl.carousel': $.proxy(function (e) {
        if (e.namespace && this._core.settings.autoHeight) {
          this.update();
        }
      }, this),
      'changed.owl.carousel': $.proxy(function (e) {
        if (e.namespace && this._core.settings.autoHeight && e.property.name === 'position') {
          this.update();
        }
      }, this),
      'loaded.owl.lazy': $.proxy(function (e) {
        if (e.namespace && this._core.settings.autoHeight && e.element.closest('.' + this._core.settings.itemClass).index() === this._core.current()) {
          this.update();
        }
      }, this)
    }; // set default options

    this._core.options = $.extend({}, AutoHeight.Defaults, this._core.options); // register event handlers

    this._core.$element.on(this._handlers);

    this._intervalId = null;
    var refThis = this; // These changes have been taken from a PR by gavrochelegnou proposed in #1575
    // and have been made compatible with the latest jQuery version

    $(window).on('load', function () {
      if (refThis._core.settings.autoHeight) {
        refThis.update();
      }
    }); // Autoresize the height of the carousel when window is resized
    // When carousel has images, the height is dependent on the width
    // and should also change on resize

    $(window).resize(function () {
      if (refThis._core.settings.autoHeight) {
        if (refThis._intervalId != null) {
          clearTimeout(refThis._intervalId);
        }

        refThis._intervalId = setTimeout(function () {
          refThis.update();
        }, 250);
      }
    });
  };
  /**
   * Default options.
   * @public
   */


  AutoHeight.Defaults = {
    autoHeight: false,
    autoHeightClass: 'owl-height'
  };
  /**
   * Updates the view.
   */

  AutoHeight.prototype.update = function () {
    var start = this._core._current,
        end = start + this._core.settings.items,
        lazyLoadEnabled = this._core.settings.lazyLoad,
        visible = this._core.$stage.children().toArray().slice(start, end),
        heights = [],
        maxheight = 0;

    $.each(visible, function (index, item) {
      heights.push($(item).height());
    });
    maxheight = Math.max.apply(null, heights);

    if (maxheight <= 1 && lazyLoadEnabled && this._previousHeight) {
      maxheight = this._previousHeight;
    }

    this._previousHeight = maxheight;

    this._core.$stage.parent().height(maxheight).addClass(this._core.settings.autoHeightClass);
  };

  AutoHeight.prototype.destroy = function () {
    var handler, property;

    for (handler in this._handlers) {
      this._core.$element.off(handler, this._handlers[handler]);
    }

    for (property in Object.getOwnPropertyNames(this)) {
      typeof this[property] !== 'function' && (this[property] = null);
    }
  };

  $.fn.owlCarousel.Constructor.Plugins.AutoHeight = AutoHeight;
})(window.Zepto || window.jQuery, window, document);
/**
 * Video Plugin
 * @version 2.3.4
 * @author Bartosz Wojciechowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */


;

(function ($, window, document, undefined) {
  /**
   * Creates the video plugin.
   * @class The Video Plugin
   * @param {Owl} carousel - The Owl Carousel
   */
  var Video = function (carousel) {
    /**
     * Reference to the core.
     * @protected
     * @type {Owl}
     */
    this._core = carousel;
    /**
     * Cache all video URLs.
     * @protected
     * @type {Object}
     */

    this._videos = {};
    /**
     * Current playing item.
     * @protected
     * @type {jQuery}
     */

    this._playing = null;
    /**
     * All event handlers.
     * @todo The cloned content removale is too late
     * @protected
     * @type {Object}
     */

    this._handlers = {
      'initialized.owl.carousel': $.proxy(function (e) {
        if (e.namespace) {
          this._core.register({
            type: 'state',
            name: 'playing',
            tags: ['interacting']
          });
        }
      }, this),
      'resize.owl.carousel': $.proxy(function (e) {
        if (e.namespace && this._core.settings.video && this.isInFullScreen()) {
          e.preventDefault();
        }
      }, this),
      'refreshed.owl.carousel': $.proxy(function (e) {
        if (e.namespace && this._core.is('resizing')) {
          this._core.$stage.find('.cloned .owl-video-frame').remove();
        }
      }, this),
      'changed.owl.carousel': $.proxy(function (e) {
        if (e.namespace && e.property.name === 'position' && this._playing) {
          this.stop();
        }
      }, this),
      'prepared.owl.carousel': $.proxy(function (e) {
        if (!e.namespace) {
          return;
        }

        var $element = $(e.content).find('.owl-video');

        if ($element.length) {
          $element.css('display', 'none');
          this.fetch($element, $(e.content));
        }
      }, this)
    }; // set default options

    this._core.options = $.extend({}, Video.Defaults, this._core.options); // register event handlers

    this._core.$element.on(this._handlers);

    this._core.$element.on('click.owl.video', '.owl-video-play-icon', $.proxy(function (e) {
      this.play(e);
    }, this));
  };
  /**
   * Default options.
   * @public
   */


  Video.Defaults = {
    video: false,
    videoHeight: false,
    videoWidth: false
  };
  /**
   * Gets the video ID and the type (YouTube/Vimeo/vzaar only).
   * @protected
   * @param {jQuery} target - The target containing the video data.
   * @param {jQuery} item - The item containing the video.
   */

  Video.prototype.fetch = function (target, item) {
    var type = function () {
      if (target.attr('data-vimeo-id')) {
        return 'vimeo';
      } else if (target.attr('data-vzaar-id')) {
        return 'vzaar';
      } else {
        return 'youtube';
      }
    }(),
        id = target.attr('data-vimeo-id') || target.attr('data-youtube-id') || target.attr('data-vzaar-id'),
        width = target.attr('data-width') || this._core.settings.videoWidth,
        height = target.attr('data-height') || this._core.settings.videoHeight,
        url = target.attr('href');

    if (url) {
      /*
      		Parses the id's out of the following urls (and probably more):
      		https://www.youtube.com/watch?v=:id
      		https://youtu.be/:id
      		https://vimeo.com/:id
      		https://vimeo.com/channels/:channel/:id
      		https://vimeo.com/groups/:group/videos/:id
      		https://app.vzaar.com/videos/:id
      			Visual example: https://regexper.com/#(http%3A%7Chttps%3A%7C)%5C%2F%5C%2F(player.%7Cwww.%7Capp.)%3F(vimeo%5C.com%7Cyoutu(be%5C.com%7C%5C.be%7Cbe%5C.googleapis%5C.com)%7Cvzaar%5C.com)%5C%2F(video%5C%2F%7Cvideos%5C%2F%7Cembed%5C%2F%7Cchannels%5C%2F.%2B%5C%2F%7Cgroups%5C%2F.%2B%5C%2F%7Cwatch%5C%3Fv%3D%7Cv%5C%2F)%3F(%5BA-Za-z0-9._%25-%5D*)(%5C%26%5CS%2B)%3F
      */
      id = url.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com|be\-nocookie\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/);

      if (id[3].indexOf('youtu') > -1) {
        type = 'youtube';
      } else if (id[3].indexOf('vimeo') > -1) {
        type = 'vimeo';
      } else if (id[3].indexOf('vzaar') > -1) {
        type = 'vzaar';
      } else {
        throw new Error('Video URL not supported.');
      }

      id = id[6];
    } else {
      throw new Error('Missing video URL.');
    }

    this._videos[url] = {
      type: type,
      id: id,
      width: width,
      height: height
    };
    item.attr('data-video', url);
    this.thumbnail(target, this._videos[url]);
  };
  /**
   * Creates video thumbnail.
   * @protected
   * @param {jQuery} target - The target containing the video data.
   * @param {Object} info - The video info object.
   * @see `fetch`
   */


  Video.prototype.thumbnail = function (target, video) {
    var tnLink,
        icon,
        path,
        dimensions = video.width && video.height ? 'width:' + video.width + 'px;height:' + video.height + 'px;' : '',
        customTn = target.find('img'),
        srcType = 'src',
        lazyClass = '',
        settings = this._core.settings,
        create = function (path) {
      icon = '<div class="owl-video-play-icon"></div>';

      if (settings.lazyLoad) {
        tnLink = $('<div/>', {
          "class": 'owl-video-tn ' + lazyClass,
          "srcType": path
        });
      } else {
        tnLink = $('<div/>', {
          "class": "owl-video-tn",
          "style": 'opacity:1;background-image:url(' + path + ')'
        });
      }

      target.after(tnLink);
      target.after(icon);
    }; // wrap video content into owl-video-wrapper div


    target.wrap($('<div/>', {
      "class": "owl-video-wrapper",
      "style": dimensions
    }));

    if (this._core.settings.lazyLoad) {
      srcType = 'data-src';
      lazyClass = 'owl-lazy';
    } // custom thumbnail


    if (customTn.length) {
      create(customTn.attr(srcType));
      customTn.remove();
      return false;
    }

    if (video.type === 'youtube') {
      path = "//img.youtube.com/vi/" + video.id + "/hqdefault.jpg";
      create(path);
    } else if (video.type === 'vimeo') {
      $.ajax({
        type: 'GET',
        url: '//vimeo.com/api/v2/video/' + video.id + '.json',
        jsonp: 'callback',
        dataType: 'jsonp',
        success: function (data) {
          path = data[0].thumbnail_large;
          create(path);
        }
      });
    } else if (video.type === 'vzaar') {
      $.ajax({
        type: 'GET',
        url: '//vzaar.com/api/videos/' + video.id + '.json',
        jsonp: 'callback',
        dataType: 'jsonp',
        success: function (data) {
          path = data.framegrab_url;
          create(path);
        }
      });
    }
  };
  /**
   * Stops the current video.
   * @public
   */


  Video.prototype.stop = function () {
    this._core.trigger('stop', null, 'video');

    this._playing.find('.owl-video-frame').remove();

    this._playing.removeClass('owl-video-playing');

    this._playing = null;

    this._core.leave('playing');

    this._core.trigger('stopped', null, 'video');
  };
  /**
   * Starts the current video.
   * @public
   * @param {Event} event - The event arguments.
   */


  Video.prototype.play = function (event) {
    var target = $(event.target),
        item = target.closest('.' + this._core.settings.itemClass),
        video = this._videos[item.attr('data-video')],
        width = video.width || '100%',
        height = video.height || this._core.$stage.height(),
        html,
        iframe;

    if (this._playing) {
      return;
    }

    this._core.enter('playing');

    this._core.trigger('play', null, 'video');

    item = this._core.items(this._core.relative(item.index()));

    this._core.reset(item.index());

    html = $('<iframe frameborder="0" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>');
    html.attr('height', height);
    html.attr('width', width);

    if (video.type === 'youtube') {
      html.attr('src', '//www.youtube.com/embed/' + video.id + '?autoplay=1&rel=0&v=' + video.id);
    } else if (video.type === 'vimeo') {
      html.attr('src', '//player.vimeo.com/video/' + video.id + '?autoplay=1');
    } else if (video.type === 'vzaar') {
      html.attr('src', '//view.vzaar.com/' + video.id + '/player?autoplay=true');
    }

    iframe = $(html).wrap('<div class="owl-video-frame" />').insertAfter(item.find('.owl-video'));
    this._playing = item.addClass('owl-video-playing');
  };
  /**
   * Checks whether an video is currently in full screen mode or not.
   * @todo Bad style because looks like a readonly method but changes members.
   * @protected
   * @returns {Boolean}
   */


  Video.prototype.isInFullScreen = function () {
    var element = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;
    return element && $(element).parent().hasClass('owl-video-frame');
  };
  /**
   * Destroys the plugin.
   */


  Video.prototype.destroy = function () {
    var handler, property;

    this._core.$element.off('click.owl.video');

    for (handler in this._handlers) {
      this._core.$element.off(handler, this._handlers[handler]);
    }

    for (property in Object.getOwnPropertyNames(this)) {
      typeof this[property] != 'function' && (this[property] = null);
    }
  };

  $.fn.owlCarousel.Constructor.Plugins.Video = Video;
})(window.Zepto || window.jQuery, window, document);
/**
 * Animate Plugin
 * @version 2.3.4
 * @author Bartosz Wojciechowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */


;

(function ($, window, document, undefined) {
  /**
   * Creates the animate plugin.
   * @class The Navigation Plugin
   * @param {Owl} scope - The Owl Carousel
   */
  var Animate = function (scope) {
    this.core = scope;
    this.core.options = $.extend({}, Animate.Defaults, this.core.options);
    this.swapping = true;
    this.previous = undefined;
    this.next = undefined;
    this.handlers = {
      'change.owl.carousel': $.proxy(function (e) {
        if (e.namespace && e.property.name == 'position') {
          this.previous = this.core.current();
          this.next = e.property.value;
        }
      }, this),
      'drag.owl.carousel dragged.owl.carousel translated.owl.carousel': $.proxy(function (e) {
        if (e.namespace) {
          this.swapping = e.type == 'translated';
        }
      }, this),
      'translate.owl.carousel': $.proxy(function (e) {
        if (e.namespace && this.swapping && (this.core.options.animateOut || this.core.options.animateIn)) {
          this.swap();
        }
      }, this)
    };
    this.core.$element.on(this.handlers);
  };
  /**
   * Default options.
   * @public
   */


  Animate.Defaults = {
    animateOut: false,
    animateIn: false
  };
  /**
   * Toggles the animation classes whenever an translations starts.
   * @protected
   * @returns {Boolean|undefined}
   */

  Animate.prototype.swap = function () {
    if (this.core.settings.items !== 1) {
      return;
    }

    if (!$.support.animation || !$.support.transition) {
      return;
    }

    this.core.speed(0);
    var left,
        clear = $.proxy(this.clear, this),
        previous = this.core.$stage.children().eq(this.previous),
        next = this.core.$stage.children().eq(this.next),
        incoming = this.core.settings.animateIn,
        outgoing = this.core.settings.animateOut;

    if (this.core.current() === this.previous) {
      return;
    }

    if (outgoing) {
      left = this.core.coordinates(this.previous) - this.core.coordinates(this.next);
      previous.one($.support.animation.end, clear).css({
        'left': left + 'px'
      }).addClass('animated owl-animated-out').addClass(outgoing);
    }

    if (incoming) {
      next.one($.support.animation.end, clear).addClass('animated owl-animated-in').addClass(incoming);
    }
  };

  Animate.prototype.clear = function (e) {
    $(e.target).css({
      'left': ''
    }).removeClass('animated owl-animated-out owl-animated-in').removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut);
    this.core.onTransitionEnd();
  };
  /**
   * Destroys the plugin.
   * @public
   */


  Animate.prototype.destroy = function () {
    var handler, property;

    for (handler in this.handlers) {
      this.core.$element.off(handler, this.handlers[handler]);
    }

    for (property in Object.getOwnPropertyNames(this)) {
      typeof this[property] != 'function' && (this[property] = null);
    }
  };

  $.fn.owlCarousel.Constructor.Plugins.Animate = Animate;
})(window.Zepto || window.jQuery, window, document);
/**
 * Autoplay Plugin
 * @version 2.3.4
 * @author Bartosz Wojciechowski
 * @author Artus Kolanowski
 * @author David Deutsch
 * @author Tom De Caluwé
 * @license The MIT License (MIT)
 */


;

(function ($, window, document, undefined) {
  /**
   * Creates the autoplay plugin.
   * @class The Autoplay Plugin
   * @param {Owl} scope - The Owl Carousel
   */
  var Autoplay = function (carousel) {
    /**
     * Reference to the core.
     * @protected
     * @type {Owl}
     */
    this._core = carousel;
    /**
     * The autoplay timeout id.
     * @type {Number}
     */

    this._call = null;
    /**
     * Depending on the state of the plugin, this variable contains either
     * the start time of the timer or the current timer value if it's
     * paused. Since we start in a paused state we initialize the timer
     * value.
     * @type {Number}
     */

    this._time = 0;
    /**
     * Stores the timeout currently used.
     * @type {Number}
     */

    this._timeout = 0;
    /**
     * Indicates whenever the autoplay is paused.
     * @type {Boolean}
     */

    this._paused = true;
    /**
     * All event handlers.
     * @protected
     * @type {Object}
     */

    this._handlers = {
      'changed.owl.carousel': $.proxy(function (e) {
        if (e.namespace && e.property.name === 'settings') {
          if (this._core.settings.autoplay) {
            this.play();
          } else {
            this.stop();
          }
        } else if (e.namespace && e.property.name === 'position' && this._paused) {
          // Reset the timer. This code is triggered when the position
          // of the carousel was changed through user interaction.
          this._time = 0;
        }
      }, this),
      'initialized.owl.carousel': $.proxy(function (e) {
        if (e.namespace && this._core.settings.autoplay) {
          this.play();
        }
      }, this),
      'play.owl.autoplay': $.proxy(function (e, t, s) {
        if (e.namespace) {
          this.play(t, s);
        }
      }, this),
      'stop.owl.autoplay': $.proxy(function (e) {
        if (e.namespace) {
          this.stop();
        }
      }, this),
      'mouseover.owl.autoplay': $.proxy(function () {
        if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {
          this.pause();
        }
      }, this),
      'mouseleave.owl.autoplay': $.proxy(function () {
        if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {
          this.play();
        }
      }, this),
      'touchstart.owl.core': $.proxy(function () {
        if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {
          this.pause();
        }
      }, this),
      'touchend.owl.core': $.proxy(function () {
        if (this._core.settings.autoplayHoverPause) {
          this.play();
        }
      }, this)
    }; // register event handlers

    this._core.$element.on(this._handlers); // set default options


    this._core.options = $.extend({}, Autoplay.Defaults, this._core.options);
  };
  /**
   * Default options.
   * @public
   */


  Autoplay.Defaults = {
    autoplay: false,
    autoplayTimeout: 5000,
    autoplayHoverPause: false,
    autoplaySpeed: false
  };
  /**
   * Transition to the next slide and set a timeout for the next transition.
   * @private
   * @param {Number} [speed] - The animation speed for the animations.
   */

  Autoplay.prototype._next = function (speed) {
    this._call = window.setTimeout($.proxy(this._next, this, speed), this._timeout * (Math.round(this.read() / this._timeout) + 1) - this.read());

    if (this._core.is('interacting') || document.hidden) {
      return;
    }

    this._core.next(speed || this._core.settings.autoplaySpeed);
  };
  /**
   * Reads the current timer value when the timer is playing.
   * @public
   */


  Autoplay.prototype.read = function () {
    return new Date().getTime() - this._time;
  };
  /**
   * Starts the autoplay.
   * @public
   * @param {Number} [timeout] - The interval before the next animation starts.
   * @param {Number} [speed] - The animation speed for the animations.
   */


  Autoplay.prototype.play = function (timeout, speed) {
    var elapsed;

    if (!this._core.is('rotating')) {
      this._core.enter('rotating');
    }

    timeout = timeout || this._core.settings.autoplayTimeout; // Calculate the elapsed time since the last transition. If the carousel
    // wasn't playing this calculation will yield zero.

    elapsed = Math.min(this._time % (this._timeout || timeout), timeout);

    if (this._paused) {
      // Start the clock.
      this._time = this.read();
      this._paused = false;
    } else {
      // Clear the active timeout to allow replacement.
      window.clearTimeout(this._call);
    } // Adjust the origin of the timer to match the new timeout value.


    this._time += this.read() % timeout - elapsed;
    this._timeout = timeout;
    this._call = window.setTimeout($.proxy(this._next, this, speed), timeout - elapsed);
  };
  /**
   * Stops the autoplay.
   * @public
   */


  Autoplay.prototype.stop = function () {
    if (this._core.is('rotating')) {
      // Reset the clock.
      this._time = 0;
      this._paused = true;
      window.clearTimeout(this._call);

      this._core.leave('rotating');
    }
  };
  /**
   * Pauses the autoplay.
   * @public
   */


  Autoplay.prototype.pause = function () {
    if (this._core.is('rotating') && !this._paused) {
      // Pause the clock.
      this._time = this.read();
      this._paused = true;
      window.clearTimeout(this._call);
    }
  };
  /**
   * Destroys the plugin.
   */


  Autoplay.prototype.destroy = function () {
    var handler, property;
    this.stop();

    for (handler in this._handlers) {
      this._core.$element.off(handler, this._handlers[handler]);
    }

    for (property in Object.getOwnPropertyNames(this)) {
      typeof this[property] != 'function' && (this[property] = null);
    }
  };

  $.fn.owlCarousel.Constructor.Plugins.autoplay = Autoplay;
})(window.Zepto || window.jQuery, window, document);
/**
 * Navigation Plugin
 * @version 2.3.4
 * @author Artus Kolanowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */


;

(function ($, window, document, undefined) {
  'use strict';
  /**
   * Creates the navigation plugin.
   * @class The Navigation Plugin
   * @param {Owl} carousel - The Owl Carousel.
   */

  var Navigation = function (carousel) {
    /**
     * Reference to the core.
     * @protected
     * @type {Owl}
     */
    this._core = carousel;
    /**
     * Indicates whether the plugin is initialized or not.
     * @protected
     * @type {Boolean}
     */

    this._initialized = false;
    /**
     * The current paging indexes.
     * @protected
     * @type {Array}
     */

    this._pages = [];
    /**
     * All DOM elements of the user interface.
     * @protected
     * @type {Object}
     */

    this._controls = {};
    /**
     * Markup for an indicator.
     * @protected
     * @type {Array.<String>}
     */

    this._templates = [];
    /**
     * The carousel element.
     * @type {jQuery}
     */

    this.$element = this._core.$element;
    /**
     * Overridden methods of the carousel.
     * @protected
     * @type {Object}
     */

    this._overrides = {
      next: this._core.next,
      prev: this._core.prev,
      to: this._core.to
    };
    /**
     * All event handlers.
     * @protected
     * @type {Object}
     */

    this._handlers = {
      'prepared.owl.carousel': $.proxy(function (e) {
        if (e.namespace && this._core.settings.dotsData) {
          this._templates.push('<div class="' + this._core.settings.dotClass + '">' + $(e.content).find('[data-dot]').addBack('[data-dot]').attr('data-dot') + '</div>');
        }
      }, this),
      'added.owl.carousel': $.proxy(function (e) {
        if (e.namespace && this._core.settings.dotsData) {
          this._templates.splice(e.position, 0, this._templates.pop());
        }
      }, this),
      'remove.owl.carousel': $.proxy(function (e) {
        if (e.namespace && this._core.settings.dotsData) {
          this._templates.splice(e.position, 1);
        }
      }, this),
      'changed.owl.carousel': $.proxy(function (e) {
        if (e.namespace && e.property.name == 'position') {
          this.draw();
        }
      }, this),
      'initialized.owl.carousel': $.proxy(function (e) {
        if (e.namespace && !this._initialized) {
          this._core.trigger('initialize', null, 'navigation');

          this.initialize();
          this.update();
          this.draw();
          this._initialized = true;

          this._core.trigger('initialized', null, 'navigation');
        }
      }, this),
      'refreshed.owl.carousel': $.proxy(function (e) {
        if (e.namespace && this._initialized) {
          this._core.trigger('refresh', null, 'navigation');

          this.update();
          this.draw();

          this._core.trigger('refreshed', null, 'navigation');
        }
      }, this)
    }; // set default options

    this._core.options = $.extend({}, Navigation.Defaults, this._core.options); // register event handlers

    this.$element.on(this._handlers);
  };
  /**
   * Default options.
   * @public
   * @todo Rename `slideBy` to `navBy`
   */


  Navigation.Defaults = {
    nav: false,
    navText: ['<span aria-label="' + 'Previous' + '">&#x2039;</span>', '<span aria-label="' + 'Next' + '">&#x203a;</span>'],
    navSpeed: false,
    navElement: 'button type="button" role="presentation"',
    navContainer: false,
    navContainerClass: 'owl-nav',
    navClass: ['owl-prev', 'owl-next'],
    slideBy: 1,
    dotClass: 'owl-dot',
    dotsClass: 'owl-dots',
    dots: true,
    dotsEach: false,
    dotsData: false,
    dotsSpeed: false,
    dotsContainer: false
  };
  /**
   * Initializes the layout of the plugin and extends the carousel.
   * @protected
   */

  Navigation.prototype.initialize = function () {
    var override,
        settings = this._core.settings; // create DOM structure for relative navigation

    this._controls.$relative = (settings.navContainer ? $(settings.navContainer) : $('<div>').addClass(settings.navContainerClass).appendTo(this.$element)).addClass('disabled');
    this._controls.$previous = $('<' + settings.navElement + '>').addClass(settings.navClass[0]).html(settings.navText[0]).prependTo(this._controls.$relative).on('click', $.proxy(function (e) {
      this.prev(settings.navSpeed);
    }, this));
    this._controls.$next = $('<' + settings.navElement + '>').addClass(settings.navClass[1]).html(settings.navText[1]).appendTo(this._controls.$relative).on('click', $.proxy(function (e) {
      this.next(settings.navSpeed);
    }, this)); // create DOM structure for absolute navigation

    if (!settings.dotsData) {
      this._templates = [$('<button role="button">').addClass(settings.dotClass).append($('<span>')).prop('outerHTML')];
    }

    this._controls.$absolute = (settings.dotsContainer ? $(settings.dotsContainer) : $('<div>').addClass(settings.dotsClass).appendTo(this.$element)).addClass('disabled');

    this._controls.$absolute.on('click', 'button', $.proxy(function (e) {
      var index = $(e.target).parent().is(this._controls.$absolute) ? $(e.target).index() : $(e.target).parent().index();
      e.preventDefault();
      this.to(index, settings.dotsSpeed);
    }, this));
    /*$el.on('focusin', function() {
    	$(document).off(".carousel");
    		$(document).on('keydown.carousel', function(e) {
    		if(e.keyCode == 37) {
    			$el.trigger('prev.owl')
    		}
    		if(e.keyCode == 39) {
    			$el.trigger('next.owl')
    		}
    	});
    });*/
    // override public methods of the carousel


    for (override in this._overrides) {
      this._core[override] = $.proxy(this[override], this);
    }
  };
  /**
   * Destroys the plugin.
   * @protected
   */


  Navigation.prototype.destroy = function () {
    var handler, control, property, override, settings;
    settings = this._core.settings;

    for (handler in this._handlers) {
      this.$element.off(handler, this._handlers[handler]);
    }

    for (control in this._controls) {
      if (control === '$relative' && settings.navContainer) {
        this._controls[control].html('');
      } else {
        this._controls[control].remove();
      }
    }

    for (override in this.overides) {
      this._core[override] = this._overrides[override];
    }

    for (property in Object.getOwnPropertyNames(this)) {
      typeof this[property] != 'function' && (this[property] = null);
    }
  };
  /**
   * Updates the internal state.
   * @protected
   */


  Navigation.prototype.update = function () {
    var i,
        j,
        k,
        lower = this._core.clones().length / 2,
        upper = lower + this._core.items().length,
        maximum = this._core.maximum(true),
        settings = this._core.settings,
        size = settings.center || settings.autoWidth || settings.dotsData ? 1 : settings.dotsEach || settings.items;

    if (settings.slideBy !== 'page') {
      settings.slideBy = Math.min(settings.slideBy, settings.items);
    }

    if (settings.dots || settings.slideBy == 'page') {
      this._pages = [];

      for (i = lower, j = 0, k = 0; i < upper; i++) {
        if (j >= size || j === 0) {
          this._pages.push({
            start: Math.min(maximum, i - lower),
            end: i - lower + size - 1
          });

          if (Math.min(maximum, i - lower) === maximum) {
            break;
          }

          j = 0, ++k;
        }

        j += this._core.mergers(this._core.relative(i));
      }
    }
  };
  /**
   * Draws the user interface.
   * @todo The option `dotsData` wont work.
   * @protected
   */


  Navigation.prototype.draw = function () {
    var difference,
        settings = this._core.settings,
        disabled = this._core.items().length <= settings.items,
        index = this._core.relative(this._core.current()),
        loop = settings.loop || settings.rewind;

    this._controls.$relative.toggleClass('disabled', !settings.nav || disabled);

    if (settings.nav) {
      this._controls.$previous.toggleClass('disabled', !loop && index <= this._core.minimum(true));

      this._controls.$next.toggleClass('disabled', !loop && index >= this._core.maximum(true));
    }

    this._controls.$absolute.toggleClass('disabled', !settings.dots || disabled);

    if (settings.dots) {
      difference = this._pages.length - this._controls.$absolute.children().length;

      if (settings.dotsData && difference !== 0) {
        this._controls.$absolute.html(this._templates.join(''));
      } else if (difference > 0) {
        this._controls.$absolute.append(new Array(difference + 1).join(this._templates[0]));
      } else if (difference < 0) {
        this._controls.$absolute.children().slice(difference).remove();
      }

      this._controls.$absolute.find('.active').removeClass('active');

      this._controls.$absolute.children().eq($.inArray(this.current(), this._pages)).addClass('active');
    }
  };
  /**
   * Extends event data.
   * @protected
   * @param {Event} event - The event object which gets thrown.
   */


  Navigation.prototype.onTrigger = function (event) {
    var settings = this._core.settings;
    event.page = {
      index: $.inArray(this.current(), this._pages),
      count: this._pages.length,
      size: settings && (settings.center || settings.autoWidth || settings.dotsData ? 1 : settings.dotsEach || settings.items)
    };
  };
  /**
   * Gets the current page position of the carousel.
   * @protected
   * @returns {Number}
   */


  Navigation.prototype.current = function () {
    var current = this._core.relative(this._core.current());

    return $.grep(this._pages, $.proxy(function (page, index) {
      return page.start <= current && page.end >= current;
    }, this)).pop();
  };
  /**
   * Gets the current succesor/predecessor position.
   * @protected
   * @returns {Number}
   */


  Navigation.prototype.getPosition = function (successor) {
    var position,
        length,
        settings = this._core.settings;

    if (settings.slideBy == 'page') {
      position = $.inArray(this.current(), this._pages);
      length = this._pages.length;
      successor ? ++position : --position;
      position = this._pages[(position % length + length) % length].start;
    } else {
      position = this._core.relative(this._core.current());
      length = this._core.items().length;
      successor ? position += settings.slideBy : position -= settings.slideBy;
    }

    return position;
  };
  /**
   * Slides to the next item or page.
   * @public
   * @param {Number} [speed=false] - The time in milliseconds for the transition.
   */


  Navigation.prototype.next = function (speed) {
    $.proxy(this._overrides.to, this._core)(this.getPosition(true), speed);
  };
  /**
   * Slides to the previous item or page.
   * @public
   * @param {Number} [speed=false] - The time in milliseconds for the transition.
   */


  Navigation.prototype.prev = function (speed) {
    $.proxy(this._overrides.to, this._core)(this.getPosition(false), speed);
  };
  /**
   * Slides to the specified item or page.
   * @public
   * @param {Number} position - The position of the item or page.
   * @param {Number} [speed] - The time in milliseconds for the transition.
   * @param {Boolean} [standard=false] - Whether to use the standard behaviour or not.
   */


  Navigation.prototype.to = function (position, speed, standard) {
    var length;

    if (!standard && this._pages.length) {
      length = this._pages.length;
      $.proxy(this._overrides.to, this._core)(this._pages[(position % length + length) % length].start, speed);
    } else {
      $.proxy(this._overrides.to, this._core)(position, speed);
    }
  };

  $.fn.owlCarousel.Constructor.Plugins.Navigation = Navigation;
})(window.Zepto || window.jQuery, window, document);
/**
 * Hash Plugin
 * @version 2.3.4
 * @author Artus Kolanowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */


;

(function ($, window, document, undefined) {
  'use strict';
  /**
   * Creates the hash plugin.
   * @class The Hash Plugin
   * @param {Owl} carousel - The Owl Carousel
   */

  var Hash = function (carousel) {
    /**
     * Reference to the core.
     * @protected
     * @type {Owl}
     */
    this._core = carousel;
    /**
     * Hash index for the items.
     * @protected
     * @type {Object}
     */

    this._hashes = {};
    /**
     * The carousel element.
     * @type {jQuery}
     */

    this.$element = this._core.$element;
    /**
     * All event handlers.
     * @protected
     * @type {Object}
     */

    this._handlers = {
      'initialized.owl.carousel': $.proxy(function (e) {
        if (e.namespace && this._core.settings.startPosition === 'URLHash') {
          $(window).trigger('hashchange.owl.navigation');
        }
      }, this),
      'prepared.owl.carousel': $.proxy(function (e) {
        if (e.namespace) {
          var hash = $(e.content).find('[data-hash]').addBack('[data-hash]').attr('data-hash');

          if (!hash) {
            return;
          }

          this._hashes[hash] = e.content;
        }
      }, this),
      'changed.owl.carousel': $.proxy(function (e) {
        if (e.namespace && e.property.name === 'position') {
          var current = this._core.items(this._core.relative(this._core.current())),
              hash = $.map(this._hashes, function (item, hash) {
            return item === current ? hash : null;
          }).join();

          if (!hash || window.location.hash.slice(1) === hash) {
            return;
          }

          window.location.hash = hash;
        }
      }, this)
    }; // set default options

    this._core.options = $.extend({}, Hash.Defaults, this._core.options); // register the event handlers

    this.$element.on(this._handlers); // register event listener for hash navigation

    $(window).on('hashchange.owl.navigation', $.proxy(function (e) {
      var hash = window.location.hash.substring(1),
          items = this._core.$stage.children(),
          position = this._hashes[hash] && items.index(this._hashes[hash]);

      if (position === undefined || position === this._core.current()) {
        return;
      }

      this._core.to(this._core.relative(position), false, true);
    }, this));
  };
  /**
   * Default options.
   * @public
   */


  Hash.Defaults = {
    URLhashListener: false
  };
  /**
   * Destroys the plugin.
   * @public
   */

  Hash.prototype.destroy = function () {
    var handler, property;
    $(window).off('hashchange.owl.navigation');

    for (handler in this._handlers) {
      this._core.$element.off(handler, this._handlers[handler]);
    }

    for (property in Object.getOwnPropertyNames(this)) {
      typeof this[property] != 'function' && (this[property] = null);
    }
  };

  $.fn.owlCarousel.Constructor.Plugins.Hash = Hash;
})(window.Zepto || window.jQuery, window, document);
/**
 * Support Plugin
 *
 * @version 2.3.4
 * @author Vivid Planet Software GmbH
 * @author Artus Kolanowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */


;

(function ($, window, document, undefined) {
  var style = $('<support>').get(0).style,
      prefixes = 'Webkit Moz O ms'.split(' '),
      events = {
    transition: {
      end: {
        WebkitTransition: 'webkitTransitionEnd',
        MozTransition: 'transitionend',
        OTransition: 'oTransitionEnd',
        transition: 'transitionend'
      }
    },
    animation: {
      end: {
        WebkitAnimation: 'webkitAnimationEnd',
        MozAnimation: 'animationend',
        OAnimation: 'oAnimationEnd',
        animation: 'animationend'
      }
    }
  },
      tests = {
    csstransforms: function () {
      return !!test('transform');
    },
    csstransforms3d: function () {
      return !!test('perspective');
    },
    csstransitions: function () {
      return !!test('transition');
    },
    cssanimations: function () {
      return !!test('animation');
    }
  };

  function test(property, prefixed) {
    var result = false,
        upper = property.charAt(0).toUpperCase() + property.slice(1);
    $.each((property + ' ' + prefixes.join(upper + ' ') + upper).split(' '), function (i, property) {
      if (style[property] !== undefined) {
        result = prefixed ? property : true;
        return false;
      }
    });
    return result;
  }

  function prefixed(property) {
    return test(property, true);
  }

  if (tests.csstransitions()) {
    /* jshint -W053 */
    $.support.transition = new String(prefixed('transition'));
    $.support.transition.end = events.transition.end[$.support.transition];
  }

  if (tests.cssanimations()) {
    /* jshint -W053 */
    $.support.animation = new String(prefixed('animation'));
    $.support.animation.end = events.animation.end[$.support.animation];
  }

  if (tests.csstransforms()) {
    /* jshint -W053 */
    $.support.transform = new String(prefixed('transform'));
    $.support.transform3d = tests.csstransforms3d();
  }
})(window.Zepto || window.jQuery, window, document);

/***/ }),

/***/ "./src/assets/js/bundle.js":
/*!*********************************!*\
  !*** ./src/assets/js/bundle.js ***!
  \*********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jQuery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jQuery */ "./node_modules/jQuery/dist/jquery.js");
/* harmony import */ var jQuery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jQuery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _components_slider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/slider */ "./src/assets/js/components/slider.js");
/* harmony import */ var _components_slider__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_components_slider__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _components_navigation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/navigation */ "./src/assets/js/components/navigation.js");
/* harmony import */ var _components_masonry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/masonry */ "./src/assets/js/components/masonry.js");
/* harmony import */ var _components_owl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/owl */ "./src/assets/js/components/owl.js");
/* harmony import */ var _components_send_subscribe__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/send-subscribe */ "./src/assets/js/components/send-subscribe.js");
// import 'jquery'







/***/ }),

/***/ "./src/assets/js/components/masonry.js":
/*!*********************************************!*\
  !*** ./src/assets/js/components/masonry.js ***!
  \*********************************************/
/*! exports provided: runMasonry */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "runMasonry", function() { return runMasonry; });
/* harmony import */ var masonry_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! masonry-layout */ "./node_modules/masonry-layout/masonry.js");
/* harmony import */ var masonry_layout__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(masonry_layout__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var imagesloaded__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! imagesloaded */ "./node_modules/imagesloaded/imagesloaded.js");
/* harmony import */ var imagesloaded__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(imagesloaded__WEBPACK_IMPORTED_MODULE_1__);


var runMasonry = function runMasonry() {
  var elem = document.querySelector('.o-container_masonry');
  imagesloaded__WEBPACK_IMPORTED_MODULE_1___default()(elem, function (instance) {
    var msnry = new masonry_layout__WEBPACK_IMPORTED_MODULE_0___default.a(elem, {
      // options
      itemSelector: '.o-row_column-masonry',
      gutter: 19,
      percentPosition: true
    });
  });
}; // element

imagesloaded__WEBPACK_IMPORTED_MODULE_1___default()(document.querySelector('.o-container_masonry'), function (instance) {
  console.log('all images are loaded');
  runMasonry();
});
document.addEventListener("DOMContentLoaded", function (event) {
  imagesloaded__WEBPACK_IMPORTED_MODULE_1___default()(document.querySelector('.o-container_masonry'), function (instance) {
    runMasonry();
  });
});

/***/ }),

/***/ "./src/assets/js/components/navigation.js":
/*!************************************************!*\
  !*** ./src/assets/js/components/navigation.js ***!
  \************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);

jquery__WEBPACK_IMPORTED_MODULE_0___default()('.c-main-navigation').on('mouseenter', '.menu-item-has-children', function (e) {
  jquery__WEBPACK_IMPORTED_MODULE_0___default()(e.currentTarget).addClass('open');
});
jquery__WEBPACK_IMPORTED_MODULE_0___default()('.c-main-navigation').on('mouseleave', '.menu-item-has-children', function (e) {
  jquery__WEBPACK_IMPORTED_MODULE_0___default()(e.currentTarget).removeClass('open');
}); // mobile search

var mobileSearchTrigger = document.querySelector('.mobile-search__trigger');
var mobileSearchForm = document.querySelector('.mobile-search__form');

if (mobileSearchTrigger && mobileSearchForm) {
  mobileSearchTrigger.onclick = function (event) {
    var el = event.target;

    if (el.dataset.open === 'false') {
      el.dataset.open = true;
      mobileSearchForm.classList.add('open');
    } else {
      el.dataset.open = false;
      mobileSearchForm.classList.remove('open');
    }
  };
}

var desktopMainMenuContainer = document.querySelector('.c-main-navigation--desktop');
var menuItemsContainer = desktopMainMenuContainer && desktopMainMenuContainer.querySelector('ul');
var menuItems = menuItemsContainer && menuItemsContainer.querySelectorAll('li');
var itemsWidths = 0;

if (menuItems && menuItems.length) {
  itemsWidths = Array.from(menuItems).map(function (el) {
    return {
      width: el.getBoundingClientRect().width,
      el: el
    };
  });
}

var viewMoreInMenu = function viewMoreInMenu() {
  // Hide overflowing menu elements behind "More"
  var existingMore = document.querySelector('.js_more-element');
  var mainNavEl = document.querySelector('.js_main-nav');
  var shouldRun = desktopMainMenuContainer && mainNavEl;

  if (existingMore) {
    existingMore.remove();
  }

  if (shouldRun) {
    var menuWidthThreshold = mainNavEl.getBoundingClientRect().width - 300;
    var menusArrays = {
      'visible': [],
      'hidden': []
    };
    var accWidth = 0;
    itemsWidths.forEach(function (elObj) {
      accWidth += elObj.width;

      if (accWidth < menuWidthThreshold) {
        menusArrays['visible'].push(elObj.el);
      } else {
        menusArrays['hidden'].push(elObj.el);
      }
    });
    menuItemsContainer.innerHTML = '';
    Object.keys(menusArrays).forEach(function (key) {
      if (!key) {
        return;
      }

      if (key === 'visible') {
        menusArrays[key].forEach(function (el) {
          menuItemsContainer.appendChild(el);
        });
      } else {
        if (menusArrays[key].length < 1) {
          return;
        }

        var moreEl = document.createElement('li');
        moreEl.classList.add('menu-item', 'js_more-element');
        var textLink = document.createElement('a');

        textLink.onclick = function (e) {
          return e.preventDefault();
        };

        var chevron = document.createElement('i');
        chevron.classList.add('fas', 'fa-chevron-down');
        var text = document.createTextNode('Еще');
        textLink.appendChild(text);
        textLink.appendChild(chevron);
        moreEl.appendChild(textLink);

        if (!moreEl) {
          return;
        }

        moreEl.style.display = 'block';
        var menusHolder = document.createElement('ul');
        moreEl.appendChild(menusHolder);
        moreEl.style.position = 'relative';
        menusArrays[key].forEach(function (el) {
          menusHolder.appendChild(el);
        });
        menusHolder.classList.add('main-dropdown-menu');
        menuItemsContainer.appendChild(moreEl);
        moreEl.addEventListener('mouseenter', function (e) {
          menusHolder.style.visibility = 'visible';
          menusHolder.style.opacity = '1';
        });
        moreEl.addEventListener('mouseleave', function (e) {
          menusHolder.style.visibility = 'hidden';
          menusHolder.style.opacity = '0';
        });
      }
    });
  }
};

viewMoreInMenu();
window.addEventListener('resize', function () {
  viewMoreInMenu();
});

var toggleHamburgerMenu = function toggleHamburgerMenu(clicked) {
  var hamburgerMenuButton = document.querySelector('.js_toggle-hamburger-menu');
  var hamburgerMenuContent = document.querySelector('.js_hamburger-menu-content');
  if (!hamburgerMenuButton || !hamburgerMenuContent) return;
  var isOpen = hamburgerMenuButton.dataset.open === 'true';

  hamburgerMenuButton.onclick = function () {
    toggleHamburgerMenu(true);
  };

  if (!clicked) {
    return;
  }

  if (!isOpen) {
    hamburgerMenuButton.dataset.open = 'true';
    hamburgerMenuContent.style.visibility = 'visible';
  } else {
    hamburgerMenuButton.dataset.open = 'false';
    hamburgerMenuContent.style.visibility = 'hidden';
  }
};

toggleHamburgerMenu();

/***/ }),

/***/ "./src/assets/js/components/owl.js":
/*!*****************************************!*\
  !*** ./src/assets/js/components/owl.js ***!
  \*****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var owl_carousel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! owl.carousel */ "./node_modules/owl.carousel/dist/owl.carousel.js");
/* harmony import */ var owl_carousel__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(owl_carousel__WEBPACK_IMPORTED_MODULE_0__);


var initOwlMenu = function initOwlMenu() {
  var mobileMenu = document.querySelector('.c-main-navigation--mobile');

  if (mobileMenu && mobileMenu.offsetParent !== null) {
    var owlElement = mobileMenu.querySelector('.menu');
    Array.from(owlElement.querySelectorAll('li')).forEach(function (el) {
      var width = el.querySelector('a').offsetWidth;
      el.setAttribute('style', "width: ".concat(width, "px"));
    });
    jQuery(owlElement).owlCarousel({
      margin: 10,
      loop: true,
      autoWidth: true
    });
  }
};

initOwlMenu();
window.addEventListener('resize', function () {
  initOwlMenu();
}); // init home page slider

var homePageSlider = document.querySelector('.js_slider-carousel');

if (homePageSlider) {
  jQuery(homePageSlider).owlCarousel({
    loop: true,
    margin: 20,
    items: 4,
    responsiveClass: true,
    dots: true,
    dotsEach: true,
    responsive: {
      0: {
        items: 1,
        nav: false,
        dots: true
      },
      600: {
        items: 1,
        nav: false,
        dotsEach: true
      },
      1000: {
        items: 4,
        nav: true,
        loop: false,
        dotsEach: true
      }
    }
  });
}

/***/ }),

/***/ "./src/assets/js/components/send-subscribe.js":
/*!****************************************************!*\
  !*** ./src/assets/js/components/send-subscribe.js ***!
  \****************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);

jquery__WEBPACK_IMPORTED_MODULE_0___default()('.js-modal-hide').click(function () {
  jquery__WEBPACK_IMPORTED_MODULE_0___default()('.js-modal-shopify').toggleClass('is-shown--off-flow').toggleClass('is-hidden--off-flow');
});
jquery__WEBPACK_IMPORTED_MODULE_0___default()('.l-modal__close').click(function () {
  jquery__WEBPACK_IMPORTED_MODULE_0___default()('.js-modal-shopify').toggleClass('is-shown--off-flow').toggleClass('is-hidden--off-flow');
});
jquery__WEBPACK_IMPORTED_MODULE_0___default()(".widget_subscribe_widget__form-submit").click(function (e) {
  var reg = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;
  var address = jquery__WEBPACK_IMPORTED_MODULE_0___default()(".widget_subscribe_widget__form-input").val();
  e.preventDefault(); // if the clicked element is a link

  if (reg.test(address) == false) {
    jquery__WEBPACK_IMPORTED_MODULE_0___default()(".с-popup_description-subscribe").html('Введите корректный e-mail адрес.');
    jquery__WEBPACK_IMPORTED_MODULE_0___default()('.js-modal-shopify').toggleClass('is-shown--off-flow').toggleClass('is-hidden--off-flow');
  } else {
    var data = {
      action: 'performance_subscribe_send',
      email: address
    };
    jquery__WEBPACK_IMPORTED_MODULE_0___default.a.post(jquery__WEBPACK_IMPORTED_MODULE_0___default()("#ajax_url").val(), data, function (response) {
      if (response) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(".с-popup_description-subscribe").html('Не удалось отправить запрос.<br> Попробуйте позже.');
        jquery__WEBPACK_IMPORTED_MODULE_0___default()('.js-modal-shopify').toggleClass('is-shown--off-flow').toggleClass('is-hidden--off-flow'); // alert('not');
      } else {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(".с-popup_description-subscribe").html('Запрос успешно отправлен!');
        jquery__WEBPACK_IMPORTED_MODULE_0___default()('.js-modal-shopify').toggleClass('is-shown--off-flow').toggleClass('is-hidden--off-flow'); // alert('yes');
      }
    });
  }
});

/***/ }),

/***/ "./src/assets/js/components/slider.js":
/*!********************************************!*\
  !*** ./src/assets/js/components/slider.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

console.log('SLIDEdsgsadgsdaffsdfgsfgsssRaaa');

/***/ }),

/***/ 0:
/*!***************************************!*\
  !*** multi ./src/assets/js/bundle.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\wamp64\www\performance360\wp-content\themes\performance360\src\assets\js\bundle.js */"./src/assets/js/bundle.js");


/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = jQuery;

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3IvbWF0Y2hlcy1zZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXYtZW1pdHRlci9ldi1lbWl0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9maXp6eS11aS11dGlscy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2V0LXNpemUvZ2V0LXNpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ltYWdlc2xvYWRlZC9pbWFnZXNsb2FkZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pRdWVyeS9kaXN0L2pxdWVyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFzb25yeS1sYXlvdXQvbWFzb25yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3V0bGF5ZXIvaXRlbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3V0bGF5ZXIvb3V0bGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL293bC5jYXJvdXNlbC9kaXN0L293bC5jYXJvdXNlbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL2pzL2J1bmRsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL2pzL2NvbXBvbmVudHMvbWFzb25yeS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL2pzL2NvbXBvbmVudHMvbmF2aWdhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL2pzL2NvbXBvbmVudHMvb3dsLmpzIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvanMvY29tcG9uZW50cy9zZW5kLXN1YnNjcmliZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL2pzL2NvbXBvbmVudHMvc2xpZGVyLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcImpRdWVyeVwiIl0sIm5hbWVzIjpbIndpbmRvdyIsImZhY3RvcnkiLCJkZWZpbmUiLCJtYXRjaGVzTWV0aG9kIiwiRWxlbVByb3RvIiwiRWxlbWVudCIsInByb3RvdHlwZSIsIm1hdGNoZXMiLCJtYXRjaGVzU2VsZWN0b3IiLCJwcmVmaXhlcyIsImkiLCJsZW5ndGgiLCJwcmVmaXgiLCJtZXRob2QiLCJlbGVtIiwic2VsZWN0b3IiLCJnbG9iYWwiLCJFdkVtaXR0ZXIiLCJwcm90byIsIm9uIiwiZXZlbnROYW1lIiwibGlzdGVuZXIiLCJldmVudHMiLCJfZXZlbnRzIiwibGlzdGVuZXJzIiwiaW5kZXhPZiIsInB1c2giLCJvbmNlIiwib25jZUV2ZW50cyIsIl9vbmNlRXZlbnRzIiwib25jZUxpc3RlbmVycyIsIm9mZiIsImluZGV4Iiwic3BsaWNlIiwiZW1pdEV2ZW50IiwiYXJncyIsInNsaWNlIiwiaXNPbmNlIiwiYXBwbHkiLCJhbGxPZmYiLCJ1dGlscyIsImV4dGVuZCIsImEiLCJiIiwicHJvcCIsIm1vZHVsbyIsIm51bSIsImRpdiIsImFycmF5U2xpY2UiLCJBcnJheSIsIm1ha2VBcnJheSIsIm9iaiIsImlzQXJyYXkiLCJ1bmRlZmluZWQiLCJpc0FycmF5TGlrZSIsImNhbGwiLCJyZW1vdmVGcm9tIiwiYXJ5IiwiZ2V0UGFyZW50IiwicGFyZW50Tm9kZSIsImRvY3VtZW50IiwiYm9keSIsImdldFF1ZXJ5RWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJoYW5kbGVFdmVudCIsImV2ZW50IiwidHlwZSIsImZpbHRlckZpbmRFbGVtZW50cyIsImVsZW1zIiwiZmZFbGVtcyIsImZvckVhY2giLCJIVE1MRWxlbWVudCIsImNoaWxkRWxlbXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZGVib3VuY2VNZXRob2QiLCJfY2xhc3MiLCJtZXRob2ROYW1lIiwidGhyZXNob2xkIiwidGltZW91dE5hbWUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiYXJndW1lbnRzIiwiX3RoaXMiLCJzZXRUaW1lb3V0IiwiZG9jUmVhZHkiLCJjYWxsYmFjayIsInJlYWR5U3RhdGUiLCJhZGRFdmVudExpc3RlbmVyIiwidG9EYXNoZWQiLCJzdHIiLCJyZXBsYWNlIiwibWF0Y2giLCIkMSIsIiQyIiwidG9Mb3dlckNhc2UiLCJjb25zb2xlIiwiaHRtbEluaXQiLCJXaWRnZXRDbGFzcyIsIm5hbWVzcGFjZSIsImRhc2hlZE5hbWVzcGFjZSIsImRhdGFBdHRyIiwiZGF0YUF0dHJFbGVtcyIsImpzRGFzaEVsZW1zIiwiY29uY2F0IiwiZGF0YU9wdGlvbnNBdHRyIiwialF1ZXJ5IiwiYXR0ciIsImdldEF0dHJpYnV0ZSIsIm9wdGlvbnMiLCJKU09OIiwicGFyc2UiLCJlcnJvciIsImNsYXNzTmFtZSIsImluc3RhbmNlIiwiZGF0YSIsImdldFN0eWxlU2l6ZSIsInZhbHVlIiwicGFyc2VGbG9hdCIsImlzVmFsaWQiLCJpc05hTiIsIm5vb3AiLCJsb2dFcnJvciIsIm1lc3NhZ2UiLCJtZWFzdXJlbWVudHMiLCJtZWFzdXJlbWVudHNMZW5ndGgiLCJnZXRaZXJvU2l6ZSIsInNpemUiLCJ3aWR0aCIsImhlaWdodCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsIm91dGVyV2lkdGgiLCJvdXRlckhlaWdodCIsIm1lYXN1cmVtZW50IiwiZ2V0U3R5bGUiLCJzdHlsZSIsImdldENvbXB1dGVkU3R5bGUiLCJpc1NldHVwIiwiaXNCb3hTaXplT3V0ZXIiLCJzZXR1cCIsImNyZWF0ZUVsZW1lbnQiLCJwYWRkaW5nIiwiYm9yZGVyU3R5bGUiLCJib3JkZXJXaWR0aCIsImJveFNpemluZyIsImRvY3VtZW50RWxlbWVudCIsImFwcGVuZENoaWxkIiwiTWF0aCIsInJvdW5kIiwiZ2V0U2l6ZSIsInJlbW92ZUNoaWxkIiwibm9kZVR5cGUiLCJkaXNwbGF5Iiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJpc0JvcmRlckJveCIsInBhZGRpbmdXaWR0aCIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ0hlaWdodCIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwibWFyZ2luV2lkdGgiLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJtYXJnaW5IZWlnaHQiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJib3JkZXJMZWZ0V2lkdGgiLCJib3JkZXJSaWdodFdpZHRoIiwiYm9yZGVySGVpZ2h0IiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsImlzQm9yZGVyQm94U2l6ZU91dGVyIiwic3R5bGVXaWR0aCIsInN0eWxlSGVpZ2h0IiwiJCIsIkltYWdlc0xvYWRlZCIsIm9uQWx3YXlzIiwicXVlcnlFbGVtIiwiZWxlbWVudHMiLCJnZXRJbWFnZXMiLCJqcURlZmVycmVkIiwiRGVmZXJyZWQiLCJjaGVjayIsImJpbmQiLCJPYmplY3QiLCJjcmVhdGUiLCJpbWFnZXMiLCJhZGRFbGVtZW50SW1hZ2VzIiwibm9kZU5hbWUiLCJhZGRJbWFnZSIsImJhY2tncm91bmQiLCJhZGRFbGVtZW50QmFja2dyb3VuZEltYWdlcyIsImVsZW1lbnROb2RlVHlwZXMiLCJjaGlsZEltZ3MiLCJpbWciLCJjaGlsZHJlbiIsImNoaWxkIiwicmVVUkwiLCJleGVjIiwiYmFja2dyb3VuZEltYWdlIiwidXJsIiwiYWRkQmFja2dyb3VuZCIsImxvYWRpbmdJbWFnZSIsIkxvYWRpbmdJbWFnZSIsIkJhY2tncm91bmQiLCJwcm9ncmVzc2VkQ291bnQiLCJoYXNBbnlCcm9rZW4iLCJjb21wbGV0ZSIsIm9uUHJvZ3Jlc3MiLCJpbWFnZSIsInByb2dyZXNzIiwiaXNMb2FkZWQiLCJub3RpZnkiLCJkZWJ1ZyIsImxvZyIsImlzQ29tcGxldGUiLCJqcU1ldGhvZCIsImdldElzSW1hZ2VDb21wbGV0ZSIsImNvbmZpcm0iLCJuYXR1cmFsV2lkdGgiLCJwcm94eUltYWdlIiwiSW1hZ2UiLCJzcmMiLCJvbmxvYWQiLCJ1bmJpbmRFdmVudHMiLCJvbmVycm9yIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImVsZW1lbnQiLCJtYWtlSlF1ZXJ5UGx1Z2luIiwiZm4iLCJpbWFnZXNMb2FkZWQiLCJwcm9taXNlIiwibW9kdWxlIiwiZXhwb3J0cyIsInciLCJFcnJvciIsIm5vR2xvYmFsIiwiYXJyIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsImZsYXQiLCJhcnJheSIsImNsYXNzMnR5cGUiLCJ0b1N0cmluZyIsImhhc093biIsImhhc093blByb3BlcnR5IiwiZm5Ub1N0cmluZyIsIk9iamVjdEZ1bmN0aW9uU3RyaW5nIiwic3VwcG9ydCIsImlzRnVuY3Rpb24iLCJpc1dpbmRvdyIsInByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMiLCJub25jZSIsIm5vTW9kdWxlIiwiRE9NRXZhbCIsImNvZGUiLCJub2RlIiwiZG9jIiwidmFsIiwic2NyaXB0IiwidGV4dCIsInNldEF0dHJpYnV0ZSIsImhlYWQiLCJ0b1R5cGUiLCJ2ZXJzaW9uIiwiY29udGV4dCIsImluaXQiLCJqcXVlcnkiLCJjb25zdHJ1Y3RvciIsInRvQXJyYXkiLCJnZXQiLCJwdXNoU3RhY2siLCJyZXQiLCJtZXJnZSIsInByZXZPYmplY3QiLCJlYWNoIiwibWFwIiwiZmlyc3QiLCJlcSIsImxhc3QiLCJldmVuIiwiZ3JlcCIsIl9lbGVtIiwib2RkIiwibGVuIiwiaiIsImVuZCIsInNvcnQiLCJuYW1lIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJ0YXJnZXQiLCJkZWVwIiwiaXNQbGFpbk9iamVjdCIsImV4cGFuZG8iLCJyYW5kb20iLCJpc1JlYWR5IiwibXNnIiwiQ3RvciIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwicmVzdWx0cyIsImluQXJyYXkiLCJzZWNvbmQiLCJpbnZlcnQiLCJjYWxsYmFja0ludmVyc2UiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsImd1aWQiLCJTeW1ib2wiLCJpdGVyYXRvciIsInNwbGl0IiwiX2kiLCJTaXp6bGUiLCJFeHByIiwiZ2V0VGV4dCIsImlzWE1MIiwidG9rZW5pemUiLCJjb21waWxlIiwic2VsZWN0Iiwib3V0ZXJtb3N0Q29udGV4dCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsInNldERvY3VtZW50IiwiZG9jRWxlbSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwicmJ1Z2d5TWF0Y2hlcyIsImNvbnRhaW5zIiwiRGF0ZSIsInByZWZlcnJlZERvYyIsImRpcnJ1bnMiLCJkb25lIiwiY2xhc3NDYWNoZSIsImNyZWF0ZUNhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJub25uYXRpdmVTZWxlY3RvckNhY2hlIiwic29ydE9yZGVyIiwicG9wIiwicHVzaE5hdGl2ZSIsImxpc3QiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsIlJlZ0V4cCIsInJ0cmltIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmRlc2NlbmQiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJyaHRtbCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsImVzY2FwZSIsIm5vbkhleCIsImhpZ2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImNoIiwiYXNDb2RlUG9pbnQiLCJjaGFyQ29kZUF0IiwidW5sb2FkSGFuZGxlciIsImluRGlzYWJsZWRGaWVsZHNldCIsImFkZENvbWJpbmF0b3IiLCJkaXNhYmxlZCIsImRpciIsIm5leHQiLCJjaGlsZE5vZGVzIiwiZSIsImVscyIsInNlZWQiLCJtIiwibmlkIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0Iiwib3duZXJEb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJ0ZXN0IiwidGVzdENvbnRleHQiLCJzY29wZSIsInRvU2VsZWN0b3IiLCJqb2luIiwicXNhRXJyb3IiLCJyZW1vdmVBdHRyaWJ1dGUiLCJrZXlzIiwiY2FjaGUiLCJrZXkiLCJjYWNoZUxlbmd0aCIsInNoaWZ0IiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiZWwiLCJhZGRIYW5kbGUiLCJhdHRycyIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiY3VyIiwiZGlmZiIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiaXNEaXNhYmxlZCIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsIm5hbWVzcGFjZVVSSSIsImhhc0NvbXBhcmUiLCJzdWJXaW5kb3ciLCJkZWZhdWx0VmlldyIsInRvcCIsImF0dGFjaEV2ZW50IiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImZpbHRlciIsImF0dHJJZCIsImZpbmQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwidGFnIiwidG1wIiwiaW5wdXQiLCJpbm5lckhUTUwiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiYWRvd24iLCJidXAiLCJjb21wYXJlIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsInVuc2hpZnQiLCJleHByIiwic3BlY2lmaWVkIiwic2VsIiwidW5pcXVlU29ydCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsInRleHRDb250ZW50IiwiZmlyc3RDaGlsZCIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsInJlbGF0aXZlIiwicHJlRmlsdGVyIiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwicmVzdWx0Iiwid2hhdCIsIl9hcmd1bWVudCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJfY29udGV4dCIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInN0YXJ0IiwicGFyZW50IiwidXNlQ2FjaGUiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkbyIsInNldEZpbHRlcnMiLCJpZHgiLCJtYXRjaGVkIiwibWF0Y2hlciIsInVubWF0Y2hlZCIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJsb2NhdGlvbiIsImFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJfbWF0Y2hJbmRleGVzIiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsInN1Ym1pdCIsInJlc2V0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInRva2VucyIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsImNvbWJpbmF0b3IiLCJiYXNlIiwic2tpcCIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsIm9sZENhY2hlIiwibmV3Q2FjaGUiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwibXVsdGlwbGVDb250ZXh0cyIsImNvbnRleHRzIiwiY29uZGVuc2UiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJ0ZW1wIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsInNldE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJ0b2tlbiIsImNvbXBpbGVkIiwiX25hbWUiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJuIiwicm5lZWRzQ29udGV4dCIsIm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJub3QiLCJzZWxmIiwicm9vdGpRdWVyeSIsInJvb3QiLCJwYXJzZUhUTUwiLCJyZWFkeSIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJjb250ZW50cyIsInByZXYiLCJoYXMiLCJ0YXJnZXRzIiwibCIsImNsb3Nlc3QiLCJwcmV2QWxsIiwiYWRkIiwiYWRkQmFjayIsInNpYmxpbmciLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsImNvbnRlbnQiLCJyZXZlcnNlIiwicm5vdGh0bWx3aGl0ZSIsImNyZWF0ZU9wdGlvbnMiLCJvYmplY3QiLCJfIiwiZmxhZyIsIkNhbGxiYWNrcyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwicXVldWUiLCJmaXJpbmdJbmRleCIsImZpcmUiLCJzdG9wT25GYWxzZSIsInJlbW92ZSIsImVtcHR5IiwiZGlzYWJsZSIsImxvY2siLCJmaXJlV2l0aCIsIklkZW50aXR5IiwidiIsIlRocm93ZXIiLCJleCIsImFkb3B0VmFsdWUiLCJyZXNvbHZlIiwicmVqZWN0Iiwibm9WYWx1ZSIsImZhaWwiLCJ0aGVuIiwiZnVuYyIsInR1cGxlcyIsInN0YXRlIiwiYWx3YXlzIiwiZGVmZXJyZWQiLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIlR5cGVFcnJvciIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzaW5nbGVWYWx1ZSIsInJlbWFpbmluZyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJtYXN0ZXIiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJzdGFjayIsIndhcm4iLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsImNhdGNoIiwicmVhZHlXYWl0Iiwid2FpdCIsImNvbXBsZXRlZCIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiX2tleSIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiX2FsbCIsImxldHRlciIsInRvVXBwZXJDYXNlIiwiY2FtZWxDYXNlIiwic3RyaW5nIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiRGF0YSIsInVpZCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwic2V0IiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZ2V0RGF0YSIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiZGVxdWV1ZSIsInN0YXJ0TGVuZ3RoIiwiaG9va3MiLCJfcXVldWVIb29rcyIsInN0b3AiLCJzZXR0ZXIiLCJjbGVhclF1ZXVlIiwiY291bnQiLCJkZWZlciIsInBudW0iLCJzb3VyY2UiLCJyY3NzTnVtIiwiY3NzRXhwYW5kIiwiaXNBdHRhY2hlZCIsImNvbXBvc2VkIiwiZ2V0Um9vdE5vZGUiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJjc3MiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImRlZmF1bHREaXNwbGF5TWFwIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJoaWRlIiwidG9nZ2xlIiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwib3B0aW9uIiwid3JhcE1hcCIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0IiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwib3B0Z3JvdXAiLCJnZXRBbGwiLCJzZXRHbG9iYWxFdmFsIiwicmVmRWxlbWVudHMiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsInNlbGVjdGlvbiIsImlnbm9yZWQiLCJ3cmFwIiwiYXR0YWNoZWQiLCJub2RlcyIsImNyZWF0ZVRleHROb2RlIiwiaHRtbFByZWZpbHRlciIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJleHBlY3RTeW5jIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJlcnIiLCJ0eXBlcyIsIm9uZSIsIm9yaWdGbiIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJ0IiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZUNvdW50IiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJoYW5kbGVyUXVldWUiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYnV0dG9uIiwiYWRkUHJvcCIsImhvb2siLCJFdmVudCIsImVudW1lcmFibGUiLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJsb2FkIiwibm9CdWJibGUiLCJjbGljayIsImxldmVyYWdlTmF0aXZlIiwidHJpZ2dlciIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwibm90QXN5bmMiLCJzYXZlZCIsImlzVHJpZ2dlciIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInByb3BzIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1NpbXVsYXRlZCIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJ3aGljaCIsImZvY3VzIiwiYmx1ciIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJybm9Jbm5lcmh0bWwiLCJyY2hlY2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwiY2xvbmVDb3B5RXZlbnQiLCJkZXN0IiwicGRhdGFPbGQiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZml4SW5wdXQiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJ2YWx1ZUlzRnVuY3Rpb24iLCJodG1sIiwiX2V2YWxVcmwiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwiYXBwZW5kIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIm9yaWdpbmFsIiwiaW5zZXJ0Iiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwic3dhcCIsIm9sZCIsInJib3hTdHlsZSIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY29udGFpbmVyIiwiY3NzVGV4dCIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsInJvdW5kUGl4ZWxNZWFzdXJlcyIsInJpZ2h0IiwicGl4ZWxCb3hTdHlsZXNWYWwiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsInBvc2l0aW9uIiwic2Nyb2xsYm94U2l6ZVZhbCIsIm1lYXN1cmUiLCJyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbEJveFN0eWxlcyIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJzY3JvbGxib3hTaXplIiwicmVsaWFibGVUckRpbWVuc2lvbnMiLCJ0YWJsZSIsInRyQ2hpbGQiLCJ0clN0eWxlIiwicGFyc2VJbnQiLCJjdXJDU1MiLCJjb21wdXRlZCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJjc3NQcmVmaXhlcyIsImVtcHR5U3R5bGUiLCJ2ZW5kb3JQcm9wcyIsInZlbmRvclByb3BOYW1lIiwiY2FwTmFtZSIsImZpbmFsUHJvcE5hbWUiLCJmaW5hbCIsImNzc1Byb3BzIiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0Iiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsIm1heCIsImJveE1vZGVsQWRqdXN0bWVudCIsImRpbWVuc2lvbiIsImJveCIsInN0eWxlcyIsImNvbXB1dGVkVmFsIiwiZXh0cmEiLCJkZWx0YSIsImNlaWwiLCJnZXRXaWR0aE9ySGVpZ2h0IiwiYm94U2l6aW5nTmVlZGVkIiwidmFsdWVJc0JvcmRlckJveCIsIm9mZnNldFByb3AiLCJnZXRDbGllbnRSZWN0cyIsImNzc0hvb2tzIiwib3BhY2l0eSIsIm9yaWdOYW1lIiwiaXNDdXN0b21Qcm9wIiwic2V0UHJvcGVydHkiLCJpc0Zpbml0ZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNjcm9sbGJveFNpemVCdWdneSIsImxlZnQiLCJtYXJnaW4iLCJib3JkZXIiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsInBhcnRzIiwiVHdlZW4iLCJlYXNpbmciLCJwcm9wSG9va3MiLCJydW4iLCJwZXJjZW50IiwiZWFzZWQiLCJkdXJhdGlvbiIsInBvcyIsInN0ZXAiLCJmeCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJsaW5lYXIiLCJwIiwic3dpbmciLCJjb3MiLCJQSSIsImZ4Tm93IiwiaW5Qcm9ncmVzcyIsInJmeHR5cGVzIiwicnJ1biIsInNjaGVkdWxlIiwiaGlkZGVuIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaW50ZXJ2YWwiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJkZWZhdWx0UHJlZmlsdGVyIiwib3B0cyIsIm9sZGZpcmUiLCJwcm9wVHdlZW4iLCJyZXN0b3JlRGlzcGxheSIsImlzQm94IiwiYW5pbSIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByb3BGaWx0ZXIiLCJzcGVjaWFsRWFzaW5nIiwicHJvcGVydGllcyIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiY3VycmVudFRpbWUiLCJzdGFydFRpbWUiLCJ0d2VlbnMiLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwidGltZXIiLCJ0d2VlbmVyIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJ0byIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZSIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsImJvb2wiLCJhdHRyTmFtZXMiLCJnZXR0ZXIiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInRhYmluZGV4Iiwic3RyaXBBbmRDb2xsYXBzZSIsImdldENsYXNzIiwiY2xhc3Nlc1RvQXJyYXkiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImlzVmFsaWRWYWx1ZSIsImNsYXNzTmFtZXMiLCJoYXNDbGFzcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsImZvY3VzaW4iLCJyZm9jdXNNb3JwaCIsInN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImxhc3RFbGVtZW50IiwiZXZlbnRQYXRoIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImF0dGFjaGVzIiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyYnJhY2tldCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiYnVpbGRQYXJhbXMiLCJ0cmFkaXRpb25hbCIsInBhcmFtIiwicyIsInZhbHVlT3JGdW5jdGlvbiIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwicjIwIiwicmhhc2giLCJyYW50aUNhY2hlIiwicmhlYWRlcnMiLCJybG9jYWxQcm90b2NvbCIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJ0cmFuc3BvcnRzIiwiYWxsVHlwZXMiLCJvcmlnaW5BbmNob3IiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0ZWQiLCJzZWVraW5nVHJhbnNwb3J0IiwiaW5zcGVjdCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJhamF4RXh0ZW5kIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwicmVzcG9uc2VzIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsIm1pbWVUeXBlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJjb252ZXJ0ZXJzIiwiYWpheENvbnZlcnQiLCJyZXNwb25zZSIsImlzU3VjY2VzcyIsImNvbnYyIiwiY3VycmVudCIsImNvbnYiLCJyZXNwb25zZUZpZWxkcyIsImRhdGFGaWx0ZXIiLCJ0aHJvd3MiLCJhY3RpdmUiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImpzb24iLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInRyYW5zcG9ydCIsImNhY2hlVVJMIiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwicmVzcG9uc2VIZWFkZXJzIiwidGltZW91dFRpbWVyIiwidXJsQW5jaG9yIiwiZmlyZUdsb2JhbHMiLCJ1bmNhY2hlZCIsImNhbGxiYWNrQ29udGV4dCIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJzdGF0dXNDb2RlIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib3ZlcnJpZGVNaW1lVHlwZSIsInN0YXR1cyIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJtb2RpZmllZCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJodG1sSXNGdW5jdGlvbiIsInVud3JhcCIsInZpc2libGUiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCJ4aHJTdXBwb3J0ZWQiLCJjb3JzIiwiZXJyb3JDYWxsYmFjayIsIm9wZW4iLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJzY3JpcHRBdHRycyIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjYWxjdWxhdGVQb3NpdGlvbiIsImN1ckVsZW0iLCJ1c2luZyIsInJlY3QiLCJ3aW4iLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsInByb3h5IiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsImlzTnVtZXJpYyIsInRyaW0iLCJfalF1ZXJ5IiwiXyQiLCJub0NvbmZsaWN0IiwiT3V0bGF5ZXIiLCJNYXNvbnJ5IiwiY29tcGF0T3B0aW9ucyIsImZpdFdpZHRoIiwiX3Jlc2V0TGF5b3V0IiwiX2dldE1lYXN1cmVtZW50IiwibWVhc3VyZUNvbHVtbnMiLCJjb2xZcyIsImNvbHMiLCJtYXhZIiwiaG9yaXpvbnRhbENvbEluZGV4IiwiZ2V0Q29udGFpbmVyV2lkdGgiLCJjb2x1bW5XaWR0aCIsImZpcnN0SXRlbSIsIml0ZW1zIiwiZmlyc3RJdGVtRWxlbSIsImNvbnRhaW5lcldpZHRoIiwiZ3V0dGVyIiwibWF0aE1ldGhvZCIsImlzRml0V2lkdGgiLCJfZ2V0T3B0aW9uIiwiX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiIsIml0ZW0iLCJyZW1haW5kZXIiLCJjb2xTcGFuIiwibWluIiwiY29sUG9zTWV0aG9kIiwiaG9yaXpvbnRhbE9yZGVyIiwiY29sUG9zaXRpb24iLCJ4IiwieSIsInNldEhlaWdodCIsInNldE1heCIsIl9nZXRUb3BDb2xQb3NpdGlvbiIsImNvbEdyb3VwIiwiX2dldFRvcENvbEdyb3VwIiwibWluaW11bVkiLCJncm91cENvdW50IiwiX2dldENvbEdyb3VwWSIsImdyb3VwQ29sWXMiLCJfZ2V0SG9yaXpvbnRhbENvbFBvc2l0aW9uIiwiaXNPdmVyIiwiaGFzU2l6ZSIsIl9tYW5hZ2VTdGFtcCIsInN0YW1wIiwic3RhbXBTaXplIiwiX2dldEVsZW1lbnRPZmZzZXQiLCJpc09yaWdpbkxlZnQiLCJmaXJzdFgiLCJsYXN0WCIsImZpcnN0Q29sIiwiZmxvb3IiLCJsYXN0Q29sIiwiaXNPcmlnaW5Ub3AiLCJzdGFtcE1heFkiLCJib3R0b20iLCJfZ2V0Q29udGFpbmVyU2l6ZSIsIl9nZXRDb250YWluZXJGaXRXaWR0aCIsInVudXNlZENvbHMiLCJuZWVkc1Jlc2l6ZUxheW91dCIsInByZXZpb3VzV2lkdGgiLCJpc0VtcHR5T2JqIiwiZG9jRWxlbVN0eWxlIiwidHJhbnNpdGlvblByb3BlcnR5IiwidHJhbnNpdGlvbiIsInRyYW5zZm9ybVByb3BlcnR5IiwidHJhbnNmb3JtIiwidHJhbnNpdGlvbkVuZEV2ZW50IiwiV2Via2l0VHJhbnNpdGlvbiIsInZlbmRvclByb3BlcnRpZXMiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJJdGVtIiwibGF5b3V0IiwiX2NyZWF0ZSIsIl90cmFuc24iLCJpbmdQcm9wZXJ0aWVzIiwiY2xlYW4iLCJvbkVuZCIsImVsZW1TdHlsZSIsInN1cHBvcnRlZFByb3AiLCJnZXRQb3NpdGlvbiIsInhWYWx1ZSIsInlWYWx1ZSIsImxheW91dFNpemUiLCJsYXlvdXRQb3NpdGlvbiIsInhQYWRkaW5nIiwieFByb3BlcnR5IiwieFJlc2V0UHJvcGVydHkiLCJnZXRYVmFsdWUiLCJ5UGFkZGluZyIsInlQcm9wZXJ0eSIsInlSZXNldFByb3BlcnR5IiwiZ2V0WVZhbHVlIiwiaXNIb3Jpem9udGFsIiwicGVyY2VudFBvc2l0aW9uIiwiX3RyYW5zaXRpb25UbyIsImN1clgiLCJjdXJZIiwiZGlkTm90TW92ZSIsInNldFBvc2l0aW9uIiwiaXNUcmFuc2l0aW9uaW5nIiwidHJhbnNYIiwidHJhbnNZIiwidHJhbnNpdGlvblN0eWxlIiwiZ2V0VHJhbnNsYXRlIiwib25UcmFuc2l0aW9uRW5kIiwiaXNDbGVhbmluZyIsImdvVG8iLCJtb3ZlVG8iLCJfbm9uVHJhbnNpdGlvbiIsIl9yZW1vdmVTdHlsZXMiLCJfdHJhbnNpdGlvbiIsImZyb20iLCJoIiwiZW5hYmxlVHJhbnNpdGlvbiIsInRvRGFzaGVkQWxsIiwidHJhbnNpdGlvblByb3BzIiwic3RhZ2dlckRlbGF5Iiwib253ZWJraXRUcmFuc2l0aW9uRW5kIiwib250cmFuc2l0aW9uZW5kIiwib25vdHJhbnNpdGlvbmVuZCIsImRhc2hlZFZlbmRvclByb3BlcnRpZXMiLCJwcm9wZXJ0eU5hbWUiLCJkaXNhYmxlVHJhbnNpdGlvbiIsInJlbW92ZVRyYW5zaXRpb25TdHlsZXMiLCJjbGVhblN0eWxlIiwiY2xlYW5UcmFuc2l0aW9uU3R5bGUiLCJzdGFnZ2VyIiwicmVtb3ZlRWxlbSIsInJldmVhbCIsImlzSGlkZGVuIiwidHJhbnNpdGlvbkVuZFByb3BlcnR5IiwiZ2V0SGlkZVJldmVhbFRyYW5zaXRpb25FbmRQcm9wZXJ0eSIsIm9uUmV2ZWFsVHJhbnNpdGlvbkVuZCIsImhpZGRlblN0eWxlIiwidmlzaWJsZVN0eWxlIiwic3R5bGVQcm9wZXJ0eSIsIm9wdGlvblN0eWxlIiwib25IaWRlVHJhbnNpdGlvbkVuZCIsImRlc3Ryb3kiLCJHVUlEIiwiaW5zdGFuY2VzIiwicXVlcnlFbGVtZW50IiwiJGVsZW1lbnQiLCJkZWZhdWx0cyIsIm91dGxheWVyR1VJRCIsImlzSW5pdExheW91dCIsImNvbnRhaW5lclN0eWxlIiwiaW5pdExheW91dCIsIm9yaWdpbkxlZnQiLCJvcmlnaW5Ub3AiLCJyZXNpemUiLCJyZXNpemVDb250YWluZXIiLCJvbGRPcHRpb24iLCJob3Jpem9udGFsIiwibGF5b3V0SW5zdGFudCIsInJlbG9hZEl0ZW1zIiwic3RhbXBzIiwiY2FuQmluZFJlc2l6ZSIsImJpbmRSZXNpemUiLCJfaXRlbWl6ZSIsIml0ZW1FbGVtcyIsIl9maWx0ZXJGaW5kSXRlbUVsZW1lbnRzIiwiaXRlbVNlbGVjdG9yIiwiZ2V0SXRlbUVsZW1lbnRzIiwiX21hbmFnZVN0YW1wcyIsImlzSW5zdGFudCIsIl9pc0xheW91dEluaXRlZCIsImxheW91dEl0ZW1zIiwiX2luaXQiLCJfZ2V0SXRlbXNGb3JMYXlvdXQiLCJfbGF5b3V0SXRlbXMiLCJfcG9zdExheW91dCIsImlzSWdub3JlZCIsIl9lbWl0Q29tcGxldGVPbkl0ZW1zIiwiaXNMYXlvdXRJbnN0YW50IiwiX3Byb2Nlc3NMYXlvdXRRdWV1ZSIsInVwZGF0ZVN0YWdnZXIiLCJfcG9zaXRpb25JdGVtIiwiZ2V0TWlsbGlzZWNvbmRzIiwiaXNSZXNpemluZ0NvbnRhaW5lciIsIl9zZXRDb250YWluZXJNZWFzdXJlIiwiaXNXaWR0aCIsImVsZW1TaXplIiwib25Db21wbGV0ZSIsImRpc3BhdGNoRXZlbnQiLCJkb25lQ291bnQiLCJlbWl0QXJncyIsIiRldmVudCIsImlnbm9yZSIsImdldEl0ZW0iLCJ1bmlnbm9yZSIsIl9maW5kIiwidW5zdGFtcCIsIl9nZXRCb3VuZGluZ1JlY3QiLCJib3VuZGluZ1JlY3QiLCJfYm91bmRpbmdSZWN0IiwidGhpc1JlY3QiLCJpc1Jlc2l6ZUJvdW5kIiwidW5iaW5kUmVzaXplIiwib25yZXNpemUiLCJoYXNTaXplcyIsImFkZEl0ZW1zIiwiYXBwZW5kZWQiLCJwcmVwZW5kZWQiLCJwcmV2aW91c0l0ZW1zIiwicmV2ZWFsSXRlbUVsZW1lbnRzIiwiZ2V0SXRlbXMiLCJoaWRlSXRlbUVsZW1lbnRzIiwicmVtb3ZlSXRlbXMiLCJMYXlvdXQiLCJzdWJjbGFzcyIsImJyaWRnZXQiLCJQYXJlbnQiLCJTdWJDbGFzcyIsIm1zVW5pdHMiLCJtcyIsIm11bHQiLCJPd2wiLCJEZWZhdWx0cyIsIl9oYW5kbGVycyIsIl9wbHVnaW5zIiwiX3N1cHJlc3MiLCJfY3VycmVudCIsIl9zcGVlZCIsIl9jb29yZGluYXRlcyIsIl9icmVha3BvaW50IiwiX3dpZHRoIiwiX2l0ZW1zIiwiX2Nsb25lcyIsIl9tZXJnZXJzIiwiX3dpZHRocyIsIl9pbnZhbGlkYXRlZCIsIl9waXBlIiwiX2RyYWciLCJwb2ludGVyIiwic3RhZ2UiLCJkaXJlY3Rpb24iLCJfc3RhdGVzIiwidGFncyIsIlBsdWdpbnMiLCJwbHVnaW4iLCJjaGFyQXQiLCJXb3JrZXJzIiwicHJpb3JpdHkiLCJ3b3JrZXIiLCJpbml0aWFsaXplIiwibG9vcCIsImNlbnRlciIsInJld2luZCIsImNoZWNrVmlzaWJpbGl0eSIsIm1vdXNlRHJhZyIsInRvdWNoRHJhZyIsInB1bGxEcmFnIiwiZnJlZURyYWciLCJzdGFnZVBhZGRpbmciLCJtZXJnZUZpdCIsImF1dG9XaWR0aCIsInN0YXJ0UG9zaXRpb24iLCJydGwiLCJzbWFydFNwZWVkIiwiZmx1aWRTcGVlZCIsImRyYWdFbmRTcGVlZCIsInJlc3BvbnNpdmUiLCJyZXNwb25zaXZlUmVmcmVzaFJhdGUiLCJyZXNwb25zaXZlQmFzZUVsZW1lbnQiLCJmYWxsYmFja0Vhc2luZyIsInNsaWRlVHJhbnNpdGlvbiIsImluZm8iLCJuZXN0ZWRJdGVtU2VsZWN0b3IiLCJpdGVtRWxlbWVudCIsInN0YWdlRWxlbWVudCIsInJlZnJlc2hDbGFzcyIsImxvYWRlZENsYXNzIiwibG9hZGluZ0NsYXNzIiwicnRsQ2xhc3MiLCJyZXNwb25zaXZlQ2xhc3MiLCJkcmFnQ2xhc3MiLCJpdGVtQ2xhc3MiLCJzdGFnZUNsYXNzIiwic3RhZ2VPdXRlckNsYXNzIiwiZ3JhYkNsYXNzIiwiRGVmYXVsdCIsIklubmVyIiwiT3V0ZXIiLCJUeXBlIiwiU3RhdGUiLCIkc3RhZ2UiLCJncmlkIiwidG9GaXhlZCIsIndpZHRocyIsImNsb25lcyIsInJlcGVhdCIsIm5vcm1hbGl6ZSIsIm91dGVySFRNTCIsInByZXZpb3VzIiwiY29vcmRpbmF0ZXMiLCJhYnMiLCJtaW5pbXVtIiwibWF4aW11bSIsImJlZ2luIiwiaW5uZXIiLCJvdXRlciIsIm9wIiwiaW5pdGlhbGl6ZVN0YWdlIiwiaW5pdGlhbGl6ZUl0ZW1zIiwiJGl0ZW1zIiwicmVmcmVzaCIsImlzVmlzaWJsZSIsImludmFsaWRhdGUiLCJlbnRlciIsImltZ3MiLCJuZXN0ZWRTZWxlY3RvciIsInByZWxvYWRBdXRvV2lkdGhJbWFnZXMiLCJyZWdpc3RlckV2ZW50SGFuZGxlcnMiLCJsZWF2ZSIsInZpZXdwb3J0Iiwib3ZlcndyaXRlcyIsImJyZWFrcG9pbnQiLCJOdW1iZXIiLCJwcm9wZXJ0eSIsIm9wdGlvbnNMb2dpYyIsInByZXBhcmUiLCJ1cGRhdGUiLCJhbGwiLCJvblRocm90dGxlZFJlc2l6ZSIsInJlc2l6ZVRpbWVyIiwib25SZXNpemUiLCJvbkRyYWdTdGFydCIsIm9uRHJhZ0VuZCIsImdldFRpbWUiLCJkaWZmZXJlbmNlIiwib25EcmFnTW92ZSIsInB1bGwiLCJjb29yZGluYXRlIiwidHJhbnNmb3JtM2QiLCJwYXJ0Iiwic3VwcHJlc3MiLCJyZWxlYXNlIiwicmVjaXByb2NhbEl0ZW1zV2lkdGgiLCJlbGVtZW50V2lkdGgiLCJtZXJnZXJzIiwibXVsdGlwbGllciIsIm5ld1Bvc2l0aW9uIiwiZmFjdG9yIiwicmV2ZXJ0IiwiZGlzdGFuY2UiLCJzcmNFbGVtZW50Iiwib3JpZ2luYWxUYXJnZXQiLCJjbGllbnRXaWR0aCIsIm8iLCJjYXB0dXJlIiwiZGV0YWNoRXZlbnQiLCJvblRyaWdnZXIiLCJyZWdpc3RlciIsIm93bCIsIm51bWJlciIsIm93bENhcm91c2VsIiwiJHRoaXMiLCJDb25zdHJ1Y3RvciIsIlplcHRvIiwiQXV0b1JlZnJlc2giLCJjYXJvdXNlbCIsIl9jb3JlIiwiX2ludGVydmFsIiwiX3Zpc2libGUiLCJhdXRvUmVmcmVzaCIsIndhdGNoIiwiYXV0b1JlZnJlc2hJbnRlcnZhbCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImdldE93blByb3BlcnR5TmFtZXMiLCJMYXp5IiwiX2xvYWRlZCIsImxhenlMb2FkIiwibGF6eUxvYWRFYWdlciIsIiRpdGVtIiwiJGVsZW1lbnRzIiwiZGV2aWNlUGl4ZWxSYXRpbyIsIkF1dG9IZWlnaHQiLCJfcHJldmlvdXNIZWlnaHQiLCJhdXRvSGVpZ2h0IiwiX2ludGVydmFsSWQiLCJyZWZUaGlzIiwiYXV0b0hlaWdodENsYXNzIiwibGF6eUxvYWRFbmFibGVkIiwiaGVpZ2h0cyIsIm1heGhlaWdodCIsIlZpZGVvIiwiX3ZpZGVvcyIsIl9wbGF5aW5nIiwidmlkZW8iLCJpc0luRnVsbFNjcmVlbiIsImZldGNoIiwicGxheSIsInZpZGVvSGVpZ2h0IiwidmlkZW9XaWR0aCIsInRodW1ibmFpbCIsInRuTGluayIsImljb24iLCJwYXRoIiwiZGltZW5zaW9ucyIsImN1c3RvbVRuIiwic3JjVHlwZSIsImxhenlDbGFzcyIsInRodW1ibmFpbF9sYXJnZSIsImZyYW1lZ3JhYl91cmwiLCJpZnJhbWUiLCJmdWxsc2NyZWVuRWxlbWVudCIsIm1vekZ1bGxTY3JlZW5FbGVtZW50Iiwid2Via2l0RnVsbHNjcmVlbkVsZW1lbnQiLCJBbmltYXRlIiwiY29yZSIsInN3YXBwaW5nIiwiYW5pbWF0ZU91dCIsImFuaW1hdGVJbiIsImNsZWFyIiwiaW5jb21pbmciLCJvdXRnb2luZyIsIkF1dG9wbGF5IiwiX2NhbGwiLCJfdGltZSIsIl90aW1lb3V0IiwiX3BhdXNlZCIsImF1dG9wbGF5IiwiYXV0b3BsYXlIb3ZlclBhdXNlIiwicGF1c2UiLCJhdXRvcGxheVRpbWVvdXQiLCJhdXRvcGxheVNwZWVkIiwiX25leHQiLCJyZWFkIiwiZWxhcHNlZCIsIk5hdmlnYXRpb24iLCJfaW5pdGlhbGl6ZWQiLCJfcGFnZXMiLCJfY29udHJvbHMiLCJfdGVtcGxhdGVzIiwiX292ZXJyaWRlcyIsImRvdHNEYXRhIiwiZG90Q2xhc3MiLCJkcmF3IiwibmF2IiwibmF2VGV4dCIsIm5hdlNwZWVkIiwibmF2RWxlbWVudCIsIm5hdkNvbnRhaW5lciIsIm5hdkNvbnRhaW5lckNsYXNzIiwibmF2Q2xhc3MiLCJzbGlkZUJ5IiwiZG90c0NsYXNzIiwiZG90cyIsImRvdHNFYWNoIiwiZG90c1NwZWVkIiwiZG90c0NvbnRhaW5lciIsIm92ZXJyaWRlIiwiJHJlbGF0aXZlIiwiJHByZXZpb3VzIiwiJG5leHQiLCIkYWJzb2x1dGUiLCJjb250cm9sIiwib3ZlcmlkZXMiLCJrIiwibG93ZXIiLCJ1cHBlciIsInBhZ2UiLCJzdWNjZXNzb3IiLCJzdGFuZGFyZCIsIkhhc2giLCJfaGFzaGVzIiwic3Vic3RyaW5nIiwiVVJMaGFzaExpc3RlbmVyIiwiTW96VHJhbnNpdGlvbiIsIk9UcmFuc2l0aW9uIiwiV2Via2l0QW5pbWF0aW9uIiwiTW96QW5pbWF0aW9uIiwiT0FuaW1hdGlvbiIsInRlc3RzIiwiY3NzdHJhbnNmb3JtcyIsImNzc3RyYW5zZm9ybXMzZCIsImNzc3RyYW5zaXRpb25zIiwiY3NzYW5pbWF0aW9ucyIsInByZWZpeGVkIiwicnVuTWFzb25yeSIsIm1zbnJ5IiwibW9iaWxlU2VhcmNoVHJpZ2dlciIsIm1vYmlsZVNlYXJjaEZvcm0iLCJvbmNsaWNrIiwiZGF0YXNldCIsImNsYXNzTGlzdCIsImRlc2t0b3BNYWluTWVudUNvbnRhaW5lciIsIm1lbnVJdGVtc0NvbnRhaW5lciIsIm1lbnVJdGVtcyIsIml0ZW1zV2lkdGhzIiwidmlld01vcmVJbk1lbnUiLCJleGlzdGluZ01vcmUiLCJtYWluTmF2RWwiLCJzaG91bGRSdW4iLCJtZW51V2lkdGhUaHJlc2hvbGQiLCJtZW51c0FycmF5cyIsImFjY1dpZHRoIiwiZWxPYmoiLCJtb3JlRWwiLCJ0ZXh0TGluayIsImNoZXZyb24iLCJtZW51c0hvbGRlciIsInRvZ2dsZUhhbWJ1cmdlck1lbnUiLCJjbGlja2VkIiwiaGFtYnVyZ2VyTWVudUJ1dHRvbiIsImhhbWJ1cmdlck1lbnVDb250ZW50IiwiaXNPcGVuIiwiaW5pdE93bE1lbnUiLCJtb2JpbGVNZW51Iiwib3dsRWxlbWVudCIsImhvbWVQYWdlU2xpZGVyIiwicmVnIiwiYWRkcmVzcyIsImFjdGlvbiIsImVtYWlsIiwicG9zdCJdLCJtYXBwaW5ncyI6IjtRQUFBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBOzs7UUFHQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0EsMENBQTBDLGdDQUFnQztRQUMxRTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLHdEQUF3RCxrQkFBa0I7UUFDMUU7UUFDQSxpREFBaUQsY0FBYztRQUMvRDs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EseUNBQXlDLGlDQUFpQztRQUMxRSxnSEFBZ0gsbUJBQW1CLEVBQUU7UUFDckk7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwyQkFBMkIsMEJBQTBCLEVBQUU7UUFDdkQsaUNBQWlDLGVBQWU7UUFDaEQ7UUFDQTtRQUNBOztRQUVBO1FBQ0Esc0RBQXNELCtEQUErRDs7UUFFckg7UUFDQTs7O1FBR0E7UUFDQTs7Ozs7Ozs7Ozs7O0FDbEZBOzs7Ozs7QUFNQTtBQUVFLFdBQVVBLE1BQVYsRUFBa0JDLE9BQWxCLEVBQTRCO0FBQzVCO0FBQ0EsZUFGNEIsQ0FHNUI7O0FBQ0EsTUFBSyxJQUFMLEVBQWlEO0FBQy9DO0FBQ0FDLHdDQUFRRCxPQUFGO0FBQUE7QUFBQTtBQUFBO0FBQUEsb0dBQU47QUFDRCxHQUhELE1BR08sRUFNTjtBQUVGLENBZkMsRUFlQ0QsTUFmRCxFQWVTLFNBQVNDLE9BQVQsR0FBbUI7QUFDNUI7O0FBRUEsTUFBSUUsYUFBYSxHQUFLLFlBQVc7QUFDL0IsUUFBSUMsU0FBUyxHQUFHSixNQUFNLENBQUNLLE9BQVAsQ0FBZUMsU0FBL0IsQ0FEK0IsQ0FFL0I7O0FBQ0EsUUFBS0YsU0FBUyxDQUFDRyxPQUFmLEVBQXlCO0FBQ3ZCLGFBQU8sU0FBUDtBQUNELEtBTDhCLENBTS9COzs7QUFDQSxRQUFLSCxTQUFTLENBQUNJLGVBQWYsRUFBaUM7QUFDL0IsYUFBTyxpQkFBUDtBQUNELEtBVDhCLENBVS9COzs7QUFDQSxRQUFJQyxRQUFRLEdBQUcsQ0FBRSxRQUFGLEVBQVksS0FBWixFQUFtQixJQUFuQixFQUF5QixHQUF6QixDQUFmOztBQUVBLFNBQU0sSUFBSUMsQ0FBQyxHQUFDLENBQVosRUFBZUEsQ0FBQyxHQUFHRCxRQUFRLENBQUNFLE1BQTVCLEVBQW9DRCxDQUFDLEVBQXJDLEVBQTBDO0FBQ3hDLFVBQUlFLE1BQU0sR0FBR0gsUUFBUSxDQUFDQyxDQUFELENBQXJCO0FBQ0EsVUFBSUcsTUFBTSxHQUFHRCxNQUFNLEdBQUcsaUJBQXRCOztBQUNBLFVBQUtSLFNBQVMsQ0FBRVMsTUFBRixDQUFkLEVBQTJCO0FBQ3pCLGVBQU9BLE1BQVA7QUFDRDtBQUNGO0FBQ0YsR0FwQm1CLEVBQXBCOztBQXNCQSxTQUFPLFNBQVNMLGVBQVQsQ0FBMEJNLElBQTFCLEVBQWdDQyxRQUFoQyxFQUEyQztBQUNoRCxXQUFPRCxJQUFJLENBQUVYLGFBQUYsQ0FBSixDQUF1QlksUUFBdkIsQ0FBUDtBQUNELEdBRkQ7QUFJRCxDQTVDQyxDQUFGLEM7Ozs7Ozs7Ozs7O0FDUkE7Ozs7OztBQU1BO0FBRUUsV0FBVUMsTUFBVixFQUFrQmYsT0FBbEIsRUFBNEI7QUFDNUI7O0FBQ0E7O0FBQTJCO0FBQzNCLE1BQUssSUFBTCxFQUFpRDtBQUMvQztBQUNBQyx3Q0FBUUQsT0FBRjtBQUFBO0FBQUE7QUFBQTtBQUFBLG9HQUFOO0FBQ0QsR0FIRCxNQUdPLEVBTU47QUFFRixDQWRDLEVBY0MsT0FBT0QsTUFBUCxJQUFpQixXQUFqQixHQUErQkEsTUFBL0IsR0FBd0MsSUFkekMsRUFjK0MsWUFBVztBQUU1RDs7QUFFQSxXQUFTaUIsU0FBVCxHQUFxQixDQUFFOztBQUV2QixNQUFJQyxLQUFLLEdBQUdELFNBQVMsQ0FBQ1gsU0FBdEI7O0FBRUFZLE9BQUssQ0FBQ0MsRUFBTixHQUFXLFVBQVVDLFNBQVYsRUFBcUJDLFFBQXJCLEVBQWdDO0FBQ3pDLFFBQUssQ0FBQ0QsU0FBRCxJQUFjLENBQUNDLFFBQXBCLEVBQStCO0FBQzdCO0FBQ0QsS0FId0MsQ0FJekM7OztBQUNBLFFBQUlDLE1BQU0sR0FBRyxLQUFLQyxPQUFMLEdBQWUsS0FBS0EsT0FBTCxJQUFnQixFQUE1QyxDQUx5QyxDQU16Qzs7QUFDQSxRQUFJQyxTQUFTLEdBQUdGLE1BQU0sQ0FBRUYsU0FBRixDQUFOLEdBQXNCRSxNQUFNLENBQUVGLFNBQUYsQ0FBTixJQUF1QixFQUE3RCxDQVB5QyxDQVF6Qzs7QUFDQSxRQUFLSSxTQUFTLENBQUNDLE9BQVYsQ0FBbUJKLFFBQW5CLEtBQWlDLENBQUMsQ0FBdkMsRUFBMkM7QUFDekNHLGVBQVMsQ0FBQ0UsSUFBVixDQUFnQkwsUUFBaEI7QUFDRDs7QUFFRCxXQUFPLElBQVA7QUFDRCxHQWREOztBQWdCQUgsT0FBSyxDQUFDUyxJQUFOLEdBQWEsVUFBVVAsU0FBVixFQUFxQkMsUUFBckIsRUFBZ0M7QUFDM0MsUUFBSyxDQUFDRCxTQUFELElBQWMsQ0FBQ0MsUUFBcEIsRUFBK0I7QUFDN0I7QUFDRCxLQUgwQyxDQUkzQzs7O0FBQ0EsU0FBS0YsRUFBTCxDQUFTQyxTQUFULEVBQW9CQyxRQUFwQixFQUwyQyxDQU0zQztBQUNBOztBQUNBLFFBQUlPLFVBQVUsR0FBRyxLQUFLQyxXQUFMLEdBQW1CLEtBQUtBLFdBQUwsSUFBb0IsRUFBeEQsQ0FSMkMsQ0FTM0M7O0FBQ0EsUUFBSUMsYUFBYSxHQUFHRixVQUFVLENBQUVSLFNBQUYsQ0FBVixHQUEwQlEsVUFBVSxDQUFFUixTQUFGLENBQVYsSUFBMkIsRUFBekUsQ0FWMkMsQ0FXM0M7O0FBQ0FVLGlCQUFhLENBQUVULFFBQUYsQ0FBYixHQUE0QixJQUE1QjtBQUVBLFdBQU8sSUFBUDtBQUNELEdBZkQ7O0FBaUJBSCxPQUFLLENBQUNhLEdBQU4sR0FBWSxVQUFVWCxTQUFWLEVBQXFCQyxRQUFyQixFQUFnQztBQUMxQyxRQUFJRyxTQUFTLEdBQUcsS0FBS0QsT0FBTCxJQUFnQixLQUFLQSxPQUFMLENBQWNILFNBQWQsQ0FBaEM7O0FBQ0EsUUFBSyxDQUFDSSxTQUFELElBQWMsQ0FBQ0EsU0FBUyxDQUFDYixNQUE5QixFQUF1QztBQUNyQztBQUNEOztBQUNELFFBQUlxQixLQUFLLEdBQUdSLFNBQVMsQ0FBQ0MsT0FBVixDQUFtQkosUUFBbkIsQ0FBWjs7QUFDQSxRQUFLVyxLQUFLLElBQUksQ0FBQyxDQUFmLEVBQW1CO0FBQ2pCUixlQUFTLENBQUNTLE1BQVYsQ0FBa0JELEtBQWxCLEVBQXlCLENBQXpCO0FBQ0Q7O0FBRUQsV0FBTyxJQUFQO0FBQ0QsR0FYRDs7QUFhQWQsT0FBSyxDQUFDZ0IsU0FBTixHQUFrQixVQUFVZCxTQUFWLEVBQXFCZSxJQUFyQixFQUE0QjtBQUM1QyxRQUFJWCxTQUFTLEdBQUcsS0FBS0QsT0FBTCxJQUFnQixLQUFLQSxPQUFMLENBQWNILFNBQWQsQ0FBaEM7O0FBQ0EsUUFBSyxDQUFDSSxTQUFELElBQWMsQ0FBQ0EsU0FBUyxDQUFDYixNQUE5QixFQUF1QztBQUNyQztBQUNELEtBSjJDLENBSzVDOzs7QUFDQWEsYUFBUyxHQUFHQSxTQUFTLENBQUNZLEtBQVYsQ0FBZ0IsQ0FBaEIsQ0FBWjtBQUNBRCxRQUFJLEdBQUdBLElBQUksSUFBSSxFQUFmLENBUDRDLENBUTVDOztBQUNBLFFBQUlMLGFBQWEsR0FBRyxLQUFLRCxXQUFMLElBQW9CLEtBQUtBLFdBQUwsQ0FBa0JULFNBQWxCLENBQXhDOztBQUVBLFNBQU0sSUFBSVYsQ0FBQyxHQUFDLENBQVosRUFBZUEsQ0FBQyxHQUFHYyxTQUFTLENBQUNiLE1BQTdCLEVBQXFDRCxDQUFDLEVBQXRDLEVBQTJDO0FBQ3pDLFVBQUlXLFFBQVEsR0FBR0csU0FBUyxDQUFDZCxDQUFELENBQXhCO0FBQ0EsVUFBSTJCLE1BQU0sR0FBR1AsYUFBYSxJQUFJQSxhQUFhLENBQUVULFFBQUYsQ0FBM0M7O0FBQ0EsVUFBS2dCLE1BQUwsRUFBYztBQUNaO0FBQ0E7QUFDQSxhQUFLTixHQUFMLENBQVVYLFNBQVYsRUFBcUJDLFFBQXJCLEVBSFksQ0FJWjs7QUFDQSxlQUFPUyxhQUFhLENBQUVULFFBQUYsQ0FBcEI7QUFDRCxPQVR3QyxDQVV6Qzs7O0FBQ0FBLGNBQVEsQ0FBQ2lCLEtBQVQsQ0FBZ0IsSUFBaEIsRUFBc0JILElBQXRCO0FBQ0Q7O0FBRUQsV0FBTyxJQUFQO0FBQ0QsR0ExQkQ7O0FBNEJBakIsT0FBSyxDQUFDcUIsTUFBTixHQUFlLFlBQVc7QUFDeEIsV0FBTyxLQUFLaEIsT0FBWjtBQUNBLFdBQU8sS0FBS00sV0FBWjtBQUNELEdBSEQ7O0FBS0EsU0FBT1osU0FBUDtBQUVDLENBdkdDLENBQUYsQzs7Ozs7Ozs7Ozs7QUNSQTs7Ozs7QUFLQTtBQUVFLFdBQVVqQixNQUFWLEVBQWtCQyxPQUFsQixFQUE0QjtBQUM1Qjs7QUFDQTs7QUFBMEI7QUFFMUIsTUFBSyxJQUFMLEVBQWlEO0FBQy9DO0FBQ0FDLHFDQUFRLENBQ04scUlBRE0sQ0FBRixtQ0FFSCxVQUFVTSxlQUFWLEVBQTRCO0FBQzdCLGFBQU9QLE9BQU8sQ0FBRUQsTUFBRixFQUFVUSxlQUFWLENBQWQ7QUFDRCxLQUpLO0FBQUEsb0dBQU47QUFLRCxHQVBELE1BT08sRUFZTjtBQUVGLENBekJDLEVBeUJDUixNQXpCRCxFQXlCUyxTQUFTQyxPQUFULENBQWtCRCxNQUFsQixFQUEwQlEsZUFBMUIsRUFBNEM7QUFFdkQ7O0FBRUEsTUFBSWdDLEtBQUssR0FBRyxFQUFaLENBSnVELENBTXZEO0FBRUE7O0FBQ0FBLE9BQUssQ0FBQ0MsTUFBTixHQUFlLFVBQVVDLENBQVYsRUFBYUMsQ0FBYixFQUFpQjtBQUM5QixTQUFNLElBQUlDLElBQVYsSUFBa0JELENBQWxCLEVBQXNCO0FBQ3BCRCxPQUFDLENBQUVFLElBQUYsQ0FBRCxHQUFZRCxDQUFDLENBQUVDLElBQUYsQ0FBYjtBQUNEOztBQUNELFdBQU9GLENBQVA7QUFDRCxHQUxELENBVHVELENBZ0J2RDs7O0FBRUFGLE9BQUssQ0FBQ0ssTUFBTixHQUFlLFVBQVVDLEdBQVYsRUFBZUMsR0FBZixFQUFxQjtBQUNsQyxXQUFPLENBQUlELEdBQUcsR0FBR0MsR0FBUixHQUFnQkEsR0FBbEIsSUFBMEJBLEdBQWpDO0FBQ0QsR0FGRCxDQWxCdUQsQ0FzQnZEOzs7QUFFQSxNQUFJQyxVQUFVLEdBQUdDLEtBQUssQ0FBQzNDLFNBQU4sQ0FBZ0I4QixLQUFqQyxDQXhCdUQsQ0EwQnZEOztBQUNBSSxPQUFLLENBQUNVLFNBQU4sR0FBa0IsVUFBVUMsR0FBVixFQUFnQjtBQUNoQyxRQUFLRixLQUFLLENBQUNHLE9BQU4sQ0FBZUQsR0FBZixDQUFMLEVBQTRCO0FBQzFCO0FBQ0EsYUFBT0EsR0FBUDtBQUNELEtBSitCLENBS2hDOzs7QUFDQSxRQUFLQSxHQUFHLEtBQUssSUFBUixJQUFnQkEsR0FBRyxLQUFLRSxTQUE3QixFQUF5QztBQUN2QyxhQUFPLEVBQVA7QUFDRDs7QUFFRCxRQUFJQyxXQUFXLEdBQUcsT0FBT0gsR0FBUCxJQUFjLFFBQWQsSUFBMEIsT0FBT0EsR0FBRyxDQUFDeEMsTUFBWCxJQUFxQixRQUFqRTs7QUFDQSxRQUFLMkMsV0FBTCxFQUFtQjtBQUNqQjtBQUNBLGFBQU9OLFVBQVUsQ0FBQ08sSUFBWCxDQUFpQkosR0FBakIsQ0FBUDtBQUNELEtBZCtCLENBZ0JoQzs7O0FBQ0EsV0FBTyxDQUFFQSxHQUFGLENBQVA7QUFDRCxHQWxCRCxDQTNCdUQsQ0ErQ3ZEOzs7QUFFQVgsT0FBSyxDQUFDZ0IsVUFBTixHQUFtQixVQUFVQyxHQUFWLEVBQWVOLEdBQWYsRUFBcUI7QUFDdEMsUUFBSW5CLEtBQUssR0FBR3lCLEdBQUcsQ0FBQ2hDLE9BQUosQ0FBYTBCLEdBQWIsQ0FBWjs7QUFDQSxRQUFLbkIsS0FBSyxJQUFJLENBQUMsQ0FBZixFQUFtQjtBQUNqQnlCLFNBQUcsQ0FBQ3hCLE1BQUosQ0FBWUQsS0FBWixFQUFtQixDQUFuQjtBQUNEO0FBQ0YsR0FMRCxDQWpEdUQsQ0F3RHZEOzs7QUFFQVEsT0FBSyxDQUFDa0IsU0FBTixHQUFrQixVQUFVNUMsSUFBVixFQUFnQkMsUUFBaEIsRUFBMkI7QUFDM0MsV0FBUUQsSUFBSSxDQUFDNkMsVUFBTCxJQUFtQjdDLElBQUksSUFBSThDLFFBQVEsQ0FBQ0MsSUFBNUMsRUFBbUQ7QUFDakQvQyxVQUFJLEdBQUdBLElBQUksQ0FBQzZDLFVBQVo7O0FBQ0EsVUFBS25ELGVBQWUsQ0FBRU0sSUFBRixFQUFRQyxRQUFSLENBQXBCLEVBQXlDO0FBQ3ZDLGVBQU9ELElBQVA7QUFDRDtBQUNGO0FBQ0YsR0FQRCxDQTFEdUQsQ0FtRXZEO0FBRUE7OztBQUNBMEIsT0FBSyxDQUFDc0IsZUFBTixHQUF3QixVQUFVaEQsSUFBVixFQUFpQjtBQUN2QyxRQUFLLE9BQU9BLElBQVAsSUFBZSxRQUFwQixFQUErQjtBQUM3QixhQUFPOEMsUUFBUSxDQUFDRyxhQUFULENBQXdCakQsSUFBeEIsQ0FBUDtBQUNEOztBQUNELFdBQU9BLElBQVA7QUFDRCxHQUxELENBdEV1RCxDQTZFdkQ7QUFFQTs7O0FBQ0EwQixPQUFLLENBQUN3QixXQUFOLEdBQW9CLFVBQVVDLEtBQVYsRUFBa0I7QUFDcEMsUUFBSXBELE1BQU0sR0FBRyxPQUFPb0QsS0FBSyxDQUFDQyxJQUExQjs7QUFDQSxRQUFLLEtBQU1yRCxNQUFOLENBQUwsRUFBc0I7QUFDcEIsV0FBTUEsTUFBTixFQUFnQm9ELEtBQWhCO0FBQ0Q7QUFDRixHQUxELENBaEZ1RCxDQXVGdkQ7OztBQUVBekIsT0FBSyxDQUFDMkIsa0JBQU4sR0FBMkIsVUFBVUMsS0FBVixFQUFpQnJELFFBQWpCLEVBQTRCO0FBQ3JEO0FBQ0FxRCxTQUFLLEdBQUc1QixLQUFLLENBQUNVLFNBQU4sQ0FBaUJrQixLQUFqQixDQUFSO0FBQ0EsUUFBSUMsT0FBTyxHQUFHLEVBQWQ7QUFFQUQsU0FBSyxDQUFDRSxPQUFOLENBQWUsVUFBVXhELElBQVYsRUFBaUI7QUFDOUI7QUFDQSxVQUFLLEVBQUdBLElBQUksWUFBWXlELFdBQW5CLENBQUwsRUFBd0M7QUFDdEM7QUFDRCxPQUo2QixDQUs5Qjs7O0FBQ0EsVUFBSyxDQUFDeEQsUUFBTixFQUFpQjtBQUNmc0QsZUFBTyxDQUFDM0MsSUFBUixDQUFjWixJQUFkO0FBQ0E7QUFDRCxPQVQ2QixDQVU5QjtBQUNBOzs7QUFDQSxVQUFLTixlQUFlLENBQUVNLElBQUYsRUFBUUMsUUFBUixDQUFwQixFQUF5QztBQUN2Q3NELGVBQU8sQ0FBQzNDLElBQVIsQ0FBY1osSUFBZDtBQUNELE9BZDZCLENBZTlCOzs7QUFDQSxVQUFJMEQsVUFBVSxHQUFHMUQsSUFBSSxDQUFDMkQsZ0JBQUwsQ0FBdUIxRCxRQUF2QixDQUFqQixDQWhCOEIsQ0FpQjlCOztBQUNBLFdBQU0sSUFBSUwsQ0FBQyxHQUFDLENBQVosRUFBZUEsQ0FBQyxHQUFHOEQsVUFBVSxDQUFDN0QsTUFBOUIsRUFBc0NELENBQUMsRUFBdkMsRUFBNEM7QUFDMUMyRCxlQUFPLENBQUMzQyxJQUFSLENBQWM4QyxVQUFVLENBQUM5RCxDQUFELENBQXhCO0FBQ0Q7QUFDRixLQXJCRDtBQXVCQSxXQUFPMkQsT0FBUDtBQUNELEdBN0JELENBekZ1RCxDQXdIdkQ7OztBQUVBN0IsT0FBSyxDQUFDa0MsY0FBTixHQUF1QixVQUFVQyxNQUFWLEVBQWtCQyxVQUFsQixFQUE4QkMsU0FBOUIsRUFBMEM7QUFDL0RBLGFBQVMsR0FBR0EsU0FBUyxJQUFJLEdBQXpCLENBRCtELENBRS9EOztBQUNBLFFBQUloRSxNQUFNLEdBQUc4RCxNQUFNLENBQUNyRSxTQUFQLENBQWtCc0UsVUFBbEIsQ0FBYjtBQUNBLFFBQUlFLFdBQVcsR0FBR0YsVUFBVSxHQUFHLFNBQS9COztBQUVBRCxVQUFNLENBQUNyRSxTQUFQLENBQWtCc0UsVUFBbEIsSUFBaUMsWUFBVztBQUMxQyxVQUFJRyxPQUFPLEdBQUcsS0FBTUQsV0FBTixDQUFkO0FBQ0FFLGtCQUFZLENBQUVELE9BQUYsQ0FBWjtBQUVBLFVBQUk1QyxJQUFJLEdBQUc4QyxTQUFYOztBQUNBLFVBQUlDLEtBQUssR0FBRyxJQUFaOztBQUNBLFdBQU1KLFdBQU4sSUFBc0JLLFVBQVUsQ0FBRSxZQUFXO0FBQzNDdEUsY0FBTSxDQUFDeUIsS0FBUCxDQUFjNEMsS0FBZCxFQUFxQi9DLElBQXJCO0FBQ0EsZUFBTytDLEtBQUssQ0FBRUosV0FBRixDQUFaO0FBQ0QsT0FIK0IsRUFHN0JELFNBSDZCLENBQWhDO0FBSUQsS0FWRDtBQVdELEdBakJELENBMUh1RCxDQTZJdkQ7OztBQUVBckMsT0FBSyxDQUFDNEMsUUFBTixHQUFpQixVQUFVQyxRQUFWLEVBQXFCO0FBQ3BDLFFBQUlDLFVBQVUsR0FBRzFCLFFBQVEsQ0FBQzBCLFVBQTFCOztBQUNBLFFBQUtBLFVBQVUsSUFBSSxVQUFkLElBQTRCQSxVQUFVLElBQUksYUFBL0MsRUFBK0Q7QUFDN0Q7QUFDQUgsZ0JBQVUsQ0FBRUUsUUFBRixDQUFWO0FBQ0QsS0FIRCxNQUdPO0FBQ0x6QixjQUFRLENBQUMyQixnQkFBVCxDQUEyQixrQkFBM0IsRUFBK0NGLFFBQS9DO0FBQ0Q7QUFDRixHQVJELENBL0l1RCxDQXlKdkQ7QUFFQTs7O0FBQ0E3QyxPQUFLLENBQUNnRCxRQUFOLEdBQWlCLFVBQVVDLEdBQVYsRUFBZ0I7QUFDL0IsV0FBT0EsR0FBRyxDQUFDQyxPQUFKLENBQWEsYUFBYixFQUE0QixVQUFVQyxLQUFWLEVBQWlCQyxFQUFqQixFQUFxQkMsRUFBckIsRUFBMEI7QUFDM0QsYUFBT0QsRUFBRSxHQUFHLEdBQUwsR0FBV0MsRUFBbEI7QUFDRCxLQUZNLEVBRUpDLFdBRkksRUFBUDtBQUdELEdBSkQ7O0FBTUEsTUFBSUMsT0FBTyxHQUFHL0YsTUFBTSxDQUFDK0YsT0FBckI7QUFDQTs7Ozs7O0FBS0F2RCxPQUFLLENBQUN3RCxRQUFOLEdBQWlCLFVBQVVDLFdBQVYsRUFBdUJDLFNBQXZCLEVBQW1DO0FBQ2xEMUQsU0FBSyxDQUFDNEMsUUFBTixDQUFnQixZQUFXO0FBQ3pCLFVBQUllLGVBQWUsR0FBRzNELEtBQUssQ0FBQ2dELFFBQU4sQ0FBZ0JVLFNBQWhCLENBQXRCO0FBQ0EsVUFBSUUsUUFBUSxHQUFHLFVBQVVELGVBQXpCO0FBQ0EsVUFBSUUsYUFBYSxHQUFHekMsUUFBUSxDQUFDYSxnQkFBVCxDQUEyQixNQUFNMkIsUUFBTixHQUFpQixHQUE1QyxDQUFwQjtBQUNBLFVBQUlFLFdBQVcsR0FBRzFDLFFBQVEsQ0FBQ2EsZ0JBQVQsQ0FBMkIsU0FBUzBCLGVBQXBDLENBQWxCO0FBQ0EsVUFBSS9CLEtBQUssR0FBRzVCLEtBQUssQ0FBQ1UsU0FBTixDQUFpQm1ELGFBQWpCLEVBQ1RFLE1BRFMsQ0FDRC9ELEtBQUssQ0FBQ1UsU0FBTixDQUFpQm9ELFdBQWpCLENBREMsQ0FBWjtBQUVBLFVBQUlFLGVBQWUsR0FBR0osUUFBUSxHQUFHLFVBQWpDO0FBQ0EsVUFBSUssTUFBTSxHQUFHekcsTUFBTSxDQUFDeUcsTUFBcEI7QUFFQXJDLFdBQUssQ0FBQ0UsT0FBTixDQUFlLFVBQVV4RCxJQUFWLEVBQWlCO0FBQzlCLFlBQUk0RixJQUFJLEdBQUc1RixJQUFJLENBQUM2RixZQUFMLENBQW1CUCxRQUFuQixLQUNUdEYsSUFBSSxDQUFDNkYsWUFBTCxDQUFtQkgsZUFBbkIsQ0FERjtBQUVBLFlBQUlJLE9BQUo7O0FBQ0EsWUFBSTtBQUNGQSxpQkFBTyxHQUFHRixJQUFJLElBQUlHLElBQUksQ0FBQ0MsS0FBTCxDQUFZSixJQUFaLENBQWxCO0FBQ0QsU0FGRCxDQUVFLE9BQVFLLEtBQVIsRUFBZ0I7QUFDaEI7QUFDQSxjQUFLaEIsT0FBTCxFQUFlO0FBQ2JBLG1CQUFPLENBQUNnQixLQUFSLENBQWUsbUJBQW1CWCxRQUFuQixHQUE4QixNQUE5QixHQUF1Q3RGLElBQUksQ0FBQ2tHLFNBQTVDLEdBQ2YsSUFEZSxHQUNSRCxLQURQO0FBRUQ7O0FBQ0Q7QUFDRCxTQWI2QixDQWM5Qjs7O0FBQ0EsWUFBSUUsUUFBUSxHQUFHLElBQUloQixXQUFKLENBQWlCbkYsSUFBakIsRUFBdUI4RixPQUF2QixDQUFmLENBZjhCLENBZ0I5Qjs7QUFDQSxZQUFLSCxNQUFMLEVBQWM7QUFDWkEsZ0JBQU0sQ0FBQ1MsSUFBUCxDQUFhcEcsSUFBYixFQUFtQm9GLFNBQW5CLEVBQThCZSxRQUE5QjtBQUNEO0FBQ0YsT0FwQkQ7QUFzQkQsS0FoQ0Q7QUFpQ0QsR0FsQ0QsQ0F4S3VELENBNE12RDs7O0FBRUEsU0FBT3pFLEtBQVA7QUFFQyxDQXpPQyxDQUFGLEM7Ozs7Ozs7Ozs7O0FDUEE7Ozs7OztBQU1BOztBQUNBO0FBRUEsQ0FBRSxVQUFVeEMsTUFBVixFQUFrQkMsT0FBbEIsRUFBNEI7QUFDNUI7O0FBQTJCO0FBQzNCLE1BQUssSUFBTCxFQUFpRDtBQUMvQztBQUNBQyx3Q0FBUUQsT0FBRjtBQUFBO0FBQUE7QUFBQTtBQUFBLG9HQUFOO0FBQ0QsR0FIRCxNQUdPLEVBTU47QUFFRixDQWJELEVBYUlELE1BYkosRUFhWSxTQUFTQyxPQUFULEdBQW1CO0FBQy9CLGVBRCtCLENBRy9CO0FBRUE7O0FBQ0EsV0FBU2tILFlBQVQsQ0FBdUJDLEtBQXZCLEVBQStCO0FBQzdCLFFBQUl0RSxHQUFHLEdBQUd1RSxVQUFVLENBQUVELEtBQUYsQ0FBcEIsQ0FENkIsQ0FFN0I7O0FBQ0EsUUFBSUUsT0FBTyxHQUFHRixLQUFLLENBQUMzRixPQUFOLENBQWMsR0FBZCxLQUFzQixDQUFDLENBQXZCLElBQTRCLENBQUM4RixLQUFLLENBQUV6RSxHQUFGLENBQWhEO0FBQ0EsV0FBT3dFLE9BQU8sSUFBSXhFLEdBQWxCO0FBQ0Q7O0FBRUQsV0FBUzBFLElBQVQsR0FBZ0IsQ0FBRTs7QUFFbEIsTUFBSUMsUUFBUSxHQUFHLE9BQU8xQixPQUFQLElBQWtCLFdBQWxCLEdBQWdDeUIsSUFBaEMsR0FDYixVQUFVRSxPQUFWLEVBQW9CO0FBQ2xCM0IsV0FBTyxDQUFDZ0IsS0FBUixDQUFlVyxPQUFmO0FBQ0QsR0FISCxDQWYrQixDQW9CL0I7O0FBRUEsTUFBSUMsWUFBWSxHQUFHLENBQ2pCLGFBRGlCLEVBRWpCLGNBRmlCLEVBR2pCLFlBSGlCLEVBSWpCLGVBSmlCLEVBS2pCLFlBTGlCLEVBTWpCLGFBTmlCLEVBT2pCLFdBUGlCLEVBUWpCLGNBUmlCLEVBU2pCLGlCQVRpQixFQVVqQixrQkFWaUIsRUFXakIsZ0JBWGlCLEVBWWpCLG1CQVppQixDQUFuQjtBQWVBLE1BQUlDLGtCQUFrQixHQUFHRCxZQUFZLENBQUNoSCxNQUF0Qzs7QUFFQSxXQUFTa0gsV0FBVCxHQUF1QjtBQUNyQixRQUFJQyxJQUFJLEdBQUc7QUFDVEMsV0FBSyxFQUFFLENBREU7QUFFVEMsWUFBTSxFQUFFLENBRkM7QUFHVEMsZ0JBQVUsRUFBRSxDQUhIO0FBSVRDLGlCQUFXLEVBQUUsQ0FKSjtBQUtUQyxnQkFBVSxFQUFFLENBTEg7QUFNVEMsaUJBQVcsRUFBRTtBQU5KLEtBQVg7O0FBUUEsU0FBTSxJQUFJMUgsQ0FBQyxHQUFDLENBQVosRUFBZUEsQ0FBQyxHQUFHa0gsa0JBQW5CLEVBQXVDbEgsQ0FBQyxFQUF4QyxFQUE2QztBQUMzQyxVQUFJMkgsV0FBVyxHQUFHVixZQUFZLENBQUNqSCxDQUFELENBQTlCO0FBQ0FvSCxVQUFJLENBQUVPLFdBQUYsQ0FBSixHQUFzQixDQUF0QjtBQUNEOztBQUNELFdBQU9QLElBQVA7QUFDRCxHQXJEOEIsQ0F1RC9COztBQUVBOzs7Ozs7QUFJQSxXQUFTUSxRQUFULENBQW1CeEgsSUFBbkIsRUFBMEI7QUFDeEIsUUFBSXlILEtBQUssR0FBR0MsZ0JBQWdCLENBQUUxSCxJQUFGLENBQTVCOztBQUNBLFFBQUssQ0FBQ3lILEtBQU4sRUFBYztBQUNaZCxjQUFRLENBQUUsb0JBQW9CYyxLQUFwQixHQUNSLDZEQURRLEdBRVIsZ0NBRk0sQ0FBUjtBQUdEOztBQUNELFdBQU9BLEtBQVA7QUFDRCxHQXJFOEIsQ0F1RS9COzs7QUFFQSxNQUFJRSxPQUFPLEdBQUcsS0FBZDtBQUVBLE1BQUlDLGNBQUo7QUFFQTs7Ozs7O0FBS0EsV0FBU0MsS0FBVCxHQUFpQjtBQUNmO0FBQ0EsUUFBS0YsT0FBTCxFQUFlO0FBQ2I7QUFDRDs7QUFDREEsV0FBTyxHQUFHLElBQVYsQ0FMZSxDQU9mOztBQUVBOzs7OztBQUlBLFFBQUkxRixHQUFHLEdBQUdhLFFBQVEsQ0FBQ2dGLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBVjtBQUNBN0YsT0FBRyxDQUFDd0YsS0FBSixDQUFVUixLQUFWLEdBQWtCLE9BQWxCO0FBQ0FoRixPQUFHLENBQUN3RixLQUFKLENBQVVNLE9BQVYsR0FBb0IsaUJBQXBCO0FBQ0E5RixPQUFHLENBQUN3RixLQUFKLENBQVVPLFdBQVYsR0FBd0IsT0FBeEI7QUFDQS9GLE9BQUcsQ0FBQ3dGLEtBQUosQ0FBVVEsV0FBVixHQUF3QixpQkFBeEI7QUFDQWhHLE9BQUcsQ0FBQ3dGLEtBQUosQ0FBVVMsU0FBVixHQUFzQixZQUF0QjtBQUVBLFFBQUluRixJQUFJLEdBQUdELFFBQVEsQ0FBQ0MsSUFBVCxJQUFpQkQsUUFBUSxDQUFDcUYsZUFBckM7QUFDQXBGLFFBQUksQ0FBQ3FGLFdBQUwsQ0FBa0JuRyxHQUFsQjtBQUNBLFFBQUl3RixLQUFLLEdBQUdELFFBQVEsQ0FBRXZGLEdBQUYsQ0FBcEIsQ0F0QmUsQ0F1QmY7O0FBQ0EyRixrQkFBYyxHQUFHUyxJQUFJLENBQUNDLEtBQUwsQ0FBWWpDLFlBQVksQ0FBRW9CLEtBQUssQ0FBQ1IsS0FBUixDQUF4QixLQUE2QyxHQUE5RDtBQUNBc0IsV0FBTyxDQUFDWCxjQUFSLEdBQXlCQSxjQUF6QjtBQUVBN0UsUUFBSSxDQUFDeUYsV0FBTCxDQUFrQnZHLEdBQWxCO0FBQ0QsR0E5RzhCLENBZ0gvQjs7O0FBRUEsV0FBU3NHLE9BQVQsQ0FBa0J2SSxJQUFsQixFQUF5QjtBQUN2QjZILFNBQUssR0FEa0IsQ0FHdkI7O0FBQ0EsUUFBSyxPQUFPN0gsSUFBUCxJQUFlLFFBQXBCLEVBQStCO0FBQzdCQSxVQUFJLEdBQUc4QyxRQUFRLENBQUNHLGFBQVQsQ0FBd0JqRCxJQUF4QixDQUFQO0FBQ0QsS0FOc0IsQ0FRdkI7OztBQUNBLFFBQUssQ0FBQ0EsSUFBRCxJQUFTLE9BQU9BLElBQVAsSUFBZSxRQUF4QixJQUFvQyxDQUFDQSxJQUFJLENBQUN5SSxRQUEvQyxFQUEwRDtBQUN4RDtBQUNEOztBQUVELFFBQUloQixLQUFLLEdBQUdELFFBQVEsQ0FBRXhILElBQUYsQ0FBcEIsQ0FidUIsQ0FldkI7O0FBQ0EsUUFBS3lILEtBQUssQ0FBQ2lCLE9BQU4sSUFBaUIsTUFBdEIsRUFBK0I7QUFDN0IsYUFBTzNCLFdBQVcsRUFBbEI7QUFDRDs7QUFFRCxRQUFJQyxJQUFJLEdBQUcsRUFBWDtBQUNBQSxRQUFJLENBQUNDLEtBQUwsR0FBYWpILElBQUksQ0FBQzJJLFdBQWxCO0FBQ0EzQixRQUFJLENBQUNFLE1BQUwsR0FBY2xILElBQUksQ0FBQzRJLFlBQW5CO0FBRUEsUUFBSUMsV0FBVyxHQUFHN0IsSUFBSSxDQUFDNkIsV0FBTCxHQUFtQnBCLEtBQUssQ0FBQ1MsU0FBTixJQUFtQixZQUF4RCxDQXhCdUIsQ0EwQnZCOztBQUNBLFNBQU0sSUFBSXRJLENBQUMsR0FBQyxDQUFaLEVBQWVBLENBQUMsR0FBR2tILGtCQUFuQixFQUF1Q2xILENBQUMsRUFBeEMsRUFBNkM7QUFDM0MsVUFBSTJILFdBQVcsR0FBR1YsWUFBWSxDQUFDakgsQ0FBRCxDQUE5QjtBQUNBLFVBQUkwRyxLQUFLLEdBQUdtQixLQUFLLENBQUVGLFdBQUYsQ0FBakI7QUFDQSxVQUFJdkYsR0FBRyxHQUFHdUUsVUFBVSxDQUFFRCxLQUFGLENBQXBCLENBSDJDLENBSTNDOztBQUNBVSxVQUFJLENBQUVPLFdBQUYsQ0FBSixHQUFzQixDQUFDZCxLQUFLLENBQUV6RSxHQUFGLENBQU4sR0FBZ0JBLEdBQWhCLEdBQXNCLENBQTVDO0FBQ0Q7O0FBRUQsUUFBSThHLFlBQVksR0FBRzlCLElBQUksQ0FBQytCLFdBQUwsR0FBbUIvQixJQUFJLENBQUNnQyxZQUEzQztBQUNBLFFBQUlDLGFBQWEsR0FBR2pDLElBQUksQ0FBQ2tDLFVBQUwsR0FBa0JsQyxJQUFJLENBQUNtQyxhQUEzQztBQUNBLFFBQUlDLFdBQVcsR0FBR3BDLElBQUksQ0FBQ3FDLFVBQUwsR0FBa0JyQyxJQUFJLENBQUNzQyxXQUF6QztBQUNBLFFBQUlDLFlBQVksR0FBR3ZDLElBQUksQ0FBQ3dDLFNBQUwsR0FBaUJ4QyxJQUFJLENBQUN5QyxZQUF6QztBQUNBLFFBQUl4QixXQUFXLEdBQUdqQixJQUFJLENBQUMwQyxlQUFMLEdBQXVCMUMsSUFBSSxDQUFDMkMsZ0JBQTlDO0FBQ0EsUUFBSUMsWUFBWSxHQUFHNUMsSUFBSSxDQUFDNkMsY0FBTCxHQUFzQjdDLElBQUksQ0FBQzhDLGlCQUE5QztBQUVBLFFBQUlDLG9CQUFvQixHQUFHbEIsV0FBVyxJQUFJakIsY0FBMUMsQ0ExQ3VCLENBNEN2Qjs7QUFDQSxRQUFJb0MsVUFBVSxHQUFHM0QsWUFBWSxDQUFFb0IsS0FBSyxDQUFDUixLQUFSLENBQTdCOztBQUNBLFFBQUsrQyxVQUFVLEtBQUssS0FBcEIsRUFBNEI7QUFDMUJoRCxVQUFJLENBQUNDLEtBQUwsR0FBYStDLFVBQVUsS0FDckI7QUFDRUQsMEJBQW9CLEdBQUcsQ0FBSCxHQUFPakIsWUFBWSxHQUFHYixXQUZ2QixDQUF2QjtBQUdEOztBQUVELFFBQUlnQyxXQUFXLEdBQUc1RCxZQUFZLENBQUVvQixLQUFLLENBQUNQLE1BQVIsQ0FBOUI7O0FBQ0EsUUFBSytDLFdBQVcsS0FBSyxLQUFyQixFQUE2QjtBQUMzQmpELFVBQUksQ0FBQ0UsTUFBTCxHQUFjK0MsV0FBVyxLQUN2QjtBQUNFRiwwQkFBb0IsR0FBRyxDQUFILEdBQU9kLGFBQWEsR0FBR1csWUFGdEIsQ0FBekI7QUFHRDs7QUFFRDVDLFFBQUksQ0FBQ0csVUFBTCxHQUFrQkgsSUFBSSxDQUFDQyxLQUFMLElBQWU2QixZQUFZLEdBQUdiLFdBQTlCLENBQWxCO0FBQ0FqQixRQUFJLENBQUNJLFdBQUwsR0FBbUJKLElBQUksQ0FBQ0UsTUFBTCxJQUFnQitCLGFBQWEsR0FBR1csWUFBaEMsQ0FBbkI7QUFFQTVDLFFBQUksQ0FBQ0ssVUFBTCxHQUFrQkwsSUFBSSxDQUFDQyxLQUFMLEdBQWFtQyxXQUEvQjtBQUNBcEMsUUFBSSxDQUFDTSxXQUFMLEdBQW1CTixJQUFJLENBQUNFLE1BQUwsR0FBY3FDLFlBQWpDO0FBRUEsV0FBT3ZDLElBQVA7QUFDRDs7QUFFRCxTQUFPdUIsT0FBUDtBQUVDLENBck1ELEU7Ozs7Ozs7Ozs7O0FDVEE7Ozs7O0FBTUEsQ0FBRSxVQUFVckosTUFBVixFQUFrQkMsT0FBbEIsRUFBNEI7QUFBRSxlQUFGLENBQzVCOztBQUVBOztBQUVBLE1BQUssSUFBTCxFQUFpRDtBQUMvQztBQUNBQyxxQ0FBUSxDQUNOLDJGQURNLENBQUYsbUNBRUgsVUFBVWUsU0FBVixFQUFzQjtBQUN2QixhQUFPaEIsT0FBTyxDQUFFRCxNQUFGLEVBQVVpQixTQUFWLENBQWQ7QUFDRCxLQUpLO0FBQUEsb0dBQU47QUFLRCxHQVBELE1BT08sRUFZTjtBQUVGLENBMUJELEVBMEJJLE9BQU9qQixNQUFQLEtBQWtCLFdBQWxCLEdBQWdDQSxNQUFoQyxHQUF5QyxJQTFCN0MsRUE0QkE7QUFFQSxTQUFTQyxPQUFULENBQWtCRCxNQUFsQixFQUEwQmlCLFNBQTFCLEVBQXNDO0FBRXRDOztBQUVBLE1BQUkrSixDQUFDLEdBQUdoTCxNQUFNLENBQUN5RyxNQUFmO0FBQ0EsTUFBSVYsT0FBTyxHQUFHL0YsTUFBTSxDQUFDK0YsT0FBckIsQ0FMc0MsQ0FPdEM7QUFFQTs7QUFDQSxXQUFTdEQsTUFBVCxDQUFpQkMsQ0FBakIsRUFBb0JDLENBQXBCLEVBQXdCO0FBQ3RCLFNBQU0sSUFBSUMsSUFBVixJQUFrQkQsQ0FBbEIsRUFBc0I7QUFDcEJELE9BQUMsQ0FBRUUsSUFBRixDQUFELEdBQVlELENBQUMsQ0FBRUMsSUFBRixDQUFiO0FBQ0Q7O0FBQ0QsV0FBT0YsQ0FBUDtBQUNEOztBQUVELE1BQUlNLFVBQVUsR0FBR0MsS0FBSyxDQUFDM0MsU0FBTixDQUFnQjhCLEtBQWpDLENBakJzQyxDQW1CdEM7O0FBQ0EsV0FBU2MsU0FBVCxDQUFvQkMsR0FBcEIsRUFBMEI7QUFDeEIsUUFBS0YsS0FBSyxDQUFDRyxPQUFOLENBQWVELEdBQWYsQ0FBTCxFQUE0QjtBQUMxQjtBQUNBLGFBQU9BLEdBQVA7QUFDRDs7QUFFRCxRQUFJRyxXQUFXLEdBQUcsT0FBT0gsR0FBUCxJQUFjLFFBQWQsSUFBMEIsT0FBT0EsR0FBRyxDQUFDeEMsTUFBWCxJQUFxQixRQUFqRTs7QUFDQSxRQUFLMkMsV0FBTCxFQUFtQjtBQUNqQjtBQUNBLGFBQU9OLFVBQVUsQ0FBQ08sSUFBWCxDQUFpQkosR0FBakIsQ0FBUDtBQUNELEtBVnVCLENBWXhCOzs7QUFDQSxXQUFPLENBQUVBLEdBQUYsQ0FBUDtBQUNELEdBbENxQyxDQW9DdEM7O0FBRUE7Ozs7Ozs7QUFLQSxXQUFTOEgsWUFBVCxDQUF1Qm5LLElBQXZCLEVBQTZCOEYsT0FBN0IsRUFBc0NzRSxRQUF0QyxFQUFpRDtBQUMvQztBQUNBLFFBQUssRUFBRyxnQkFBZ0JELFlBQW5CLENBQUwsRUFBeUM7QUFDdkMsYUFBTyxJQUFJQSxZQUFKLENBQWtCbkssSUFBbEIsRUFBd0I4RixPQUF4QixFQUFpQ3NFLFFBQWpDLENBQVA7QUFDRCxLQUo4QyxDQUsvQzs7O0FBQ0EsUUFBSUMsU0FBUyxHQUFHckssSUFBaEI7O0FBQ0EsUUFBSyxPQUFPQSxJQUFQLElBQWUsUUFBcEIsRUFBK0I7QUFDN0JxSyxlQUFTLEdBQUd2SCxRQUFRLENBQUNhLGdCQUFULENBQTJCM0QsSUFBM0IsQ0FBWjtBQUNELEtBVDhDLENBVS9DOzs7QUFDQSxRQUFLLENBQUNxSyxTQUFOLEVBQWtCO0FBQ2hCcEYsYUFBTyxDQUFDZ0IsS0FBUixDQUFlLG1DQUFvQ29FLFNBQVMsSUFBSXJLLElBQWpELENBQWY7QUFDQTtBQUNEOztBQUVELFNBQUtzSyxRQUFMLEdBQWdCbEksU0FBUyxDQUFFaUksU0FBRixDQUF6QjtBQUNBLFNBQUt2RSxPQUFMLEdBQWVuRSxNQUFNLENBQUUsRUFBRixFQUFNLEtBQUttRSxPQUFYLENBQXJCLENBakIrQyxDQWtCL0M7O0FBQ0EsUUFBSyxPQUFPQSxPQUFQLElBQWtCLFVBQXZCLEVBQW9DO0FBQ2xDc0UsY0FBUSxHQUFHdEUsT0FBWDtBQUNELEtBRkQsTUFFTztBQUNMbkUsWUFBTSxDQUFFLEtBQUttRSxPQUFQLEVBQWdCQSxPQUFoQixDQUFOO0FBQ0Q7O0FBRUQsUUFBS3NFLFFBQUwsRUFBZ0I7QUFDZCxXQUFLL0osRUFBTCxDQUFTLFFBQVQsRUFBbUIrSixRQUFuQjtBQUNEOztBQUVELFNBQUtHLFNBQUw7O0FBRUEsUUFBS0wsQ0FBTCxFQUFTO0FBQ1A7QUFDQSxXQUFLTSxVQUFMLEdBQWtCLElBQUlOLENBQUMsQ0FBQ08sUUFBTixFQUFsQjtBQUNELEtBbEM4QyxDQW9DL0M7OztBQUNBcEcsY0FBVSxDQUFFLEtBQUtxRyxLQUFMLENBQVdDLElBQVgsQ0FBaUIsSUFBakIsQ0FBRixDQUFWO0FBQ0Q7O0FBRURSLGNBQVksQ0FBQzNLLFNBQWIsR0FBeUJvTCxNQUFNLENBQUNDLE1BQVAsQ0FBZTFLLFNBQVMsQ0FBQ1gsU0FBekIsQ0FBekI7QUFFQTJLLGNBQVksQ0FBQzNLLFNBQWIsQ0FBdUJzRyxPQUF2QixHQUFpQyxFQUFqQzs7QUFFQXFFLGNBQVksQ0FBQzNLLFNBQWIsQ0FBdUIrSyxTQUF2QixHQUFtQyxZQUFXO0FBQzVDLFNBQUtPLE1BQUwsR0FBYyxFQUFkLENBRDRDLENBRzVDOztBQUNBLFNBQUtSLFFBQUwsQ0FBYzlHLE9BQWQsQ0FBdUIsS0FBS3VILGdCQUE1QixFQUE4QyxJQUE5QztBQUNELEdBTEQ7QUFPQTs7Ozs7QUFHQVosY0FBWSxDQUFDM0ssU0FBYixDQUF1QnVMLGdCQUF2QixHQUEwQyxVQUFVL0ssSUFBVixFQUFpQjtBQUN6RDtBQUNBLFFBQUtBLElBQUksQ0FBQ2dMLFFBQUwsSUFBaUIsS0FBdEIsRUFBOEI7QUFDNUIsV0FBS0MsUUFBTCxDQUFlakwsSUFBZjtBQUNELEtBSndELENBS3pEOzs7QUFDQSxRQUFLLEtBQUs4RixPQUFMLENBQWFvRixVQUFiLEtBQTRCLElBQWpDLEVBQXdDO0FBQ3RDLFdBQUtDLDBCQUFMLENBQWlDbkwsSUFBakM7QUFDRCxLQVJ3RCxDQVV6RDtBQUNBOzs7QUFDQSxRQUFJeUksUUFBUSxHQUFHekksSUFBSSxDQUFDeUksUUFBcEI7O0FBQ0EsUUFBSyxDQUFDQSxRQUFELElBQWEsQ0FBQzJDLGdCQUFnQixDQUFFM0MsUUFBRixDQUFuQyxFQUFrRDtBQUNoRDtBQUNEOztBQUNELFFBQUk0QyxTQUFTLEdBQUdyTCxJQUFJLENBQUMyRCxnQkFBTCxDQUFzQixLQUF0QixDQUFoQixDQWhCeUQsQ0FpQnpEOztBQUNBLFNBQU0sSUFBSS9ELENBQUMsR0FBQyxDQUFaLEVBQWVBLENBQUMsR0FBR3lMLFNBQVMsQ0FBQ3hMLE1BQTdCLEVBQXFDRCxDQUFDLEVBQXRDLEVBQTJDO0FBQ3pDLFVBQUkwTCxHQUFHLEdBQUdELFNBQVMsQ0FBQ3pMLENBQUQsQ0FBbkI7QUFDQSxXQUFLcUwsUUFBTCxDQUFlSyxHQUFmO0FBQ0QsS0FyQndELENBdUJ6RDs7O0FBQ0EsUUFBSyxPQUFPLEtBQUt4RixPQUFMLENBQWFvRixVQUFwQixJQUFrQyxRQUF2QyxFQUFrRDtBQUNoRCxVQUFJSyxRQUFRLEdBQUd2TCxJQUFJLENBQUMyRCxnQkFBTCxDQUF1QixLQUFLbUMsT0FBTCxDQUFhb0YsVUFBcEMsQ0FBZjs7QUFDQSxXQUFNdEwsQ0FBQyxHQUFDLENBQVIsRUFBV0EsQ0FBQyxHQUFHMkwsUUFBUSxDQUFDMUwsTUFBeEIsRUFBZ0NELENBQUMsRUFBakMsRUFBc0M7QUFDcEMsWUFBSTRMLEtBQUssR0FBR0QsUUFBUSxDQUFDM0wsQ0FBRCxDQUFwQjtBQUNBLGFBQUt1TCwwQkFBTCxDQUFpQ0ssS0FBakM7QUFDRDtBQUNGO0FBQ0YsR0EvQkQ7O0FBaUNBLE1BQUlKLGdCQUFnQixHQUFHO0FBQ3JCLE9BQUcsSUFEa0I7QUFFckIsT0FBRyxJQUZrQjtBQUdyQixRQUFJO0FBSGlCLEdBQXZCOztBQU1BakIsY0FBWSxDQUFDM0ssU0FBYixDQUF1QjJMLDBCQUF2QixHQUFvRCxVQUFVbkwsSUFBVixFQUFpQjtBQUNuRSxRQUFJeUgsS0FBSyxHQUFHQyxnQkFBZ0IsQ0FBRTFILElBQUYsQ0FBNUI7O0FBQ0EsUUFBSyxDQUFDeUgsS0FBTixFQUFjO0FBQ1o7QUFDQTtBQUNELEtBTGtFLENBTW5FOzs7QUFDQSxRQUFJZ0UsS0FBSyxHQUFHLHlCQUFaO0FBQ0EsUUFBSWhNLE9BQU8sR0FBR2dNLEtBQUssQ0FBQ0MsSUFBTixDQUFZakUsS0FBSyxDQUFDa0UsZUFBbEIsQ0FBZDs7QUFDQSxXQUFRbE0sT0FBTyxLQUFLLElBQXBCLEVBQTJCO0FBQ3pCLFVBQUltTSxHQUFHLEdBQUduTSxPQUFPLElBQUlBLE9BQU8sQ0FBQyxDQUFELENBQTVCOztBQUNBLFVBQUttTSxHQUFMLEVBQVc7QUFDVCxhQUFLQyxhQUFMLENBQW9CRCxHQUFwQixFQUF5QjVMLElBQXpCO0FBQ0Q7O0FBQ0RQLGFBQU8sR0FBR2dNLEtBQUssQ0FBQ0MsSUFBTixDQUFZakUsS0FBSyxDQUFDa0UsZUFBbEIsQ0FBVjtBQUNEO0FBQ0YsR0FoQkQ7QUFrQkE7Ozs7O0FBR0F4QixjQUFZLENBQUMzSyxTQUFiLENBQXVCeUwsUUFBdkIsR0FBa0MsVUFBVUssR0FBVixFQUFnQjtBQUNoRCxRQUFJUSxZQUFZLEdBQUcsSUFBSUMsWUFBSixDQUFrQlQsR0FBbEIsQ0FBbkI7QUFDQSxTQUFLUixNQUFMLENBQVlsSyxJQUFaLENBQWtCa0wsWUFBbEI7QUFDRCxHQUhEOztBQUtBM0IsY0FBWSxDQUFDM0ssU0FBYixDQUF1QnFNLGFBQXZCLEdBQXVDLFVBQVVELEdBQVYsRUFBZTVMLElBQWYsRUFBc0I7QUFDM0QsUUFBSWtMLFVBQVUsR0FBRyxJQUFJYyxVQUFKLENBQWdCSixHQUFoQixFQUFxQjVMLElBQXJCLENBQWpCO0FBQ0EsU0FBSzhLLE1BQUwsQ0FBWWxLLElBQVosQ0FBa0JzSyxVQUFsQjtBQUNELEdBSEQ7O0FBS0FmLGNBQVksQ0FBQzNLLFNBQWIsQ0FBdUJrTCxLQUF2QixHQUErQixZQUFXO0FBQ3hDLFFBQUl0RyxLQUFLLEdBQUcsSUFBWjs7QUFDQSxTQUFLNkgsZUFBTCxHQUF1QixDQUF2QjtBQUNBLFNBQUtDLFlBQUwsR0FBb0IsS0FBcEIsQ0FId0MsQ0FJeEM7O0FBQ0EsUUFBSyxDQUFDLEtBQUtwQixNQUFMLENBQVlqTCxNQUFsQixFQUEyQjtBQUN6QixXQUFLc00sUUFBTDtBQUNBO0FBQ0Q7O0FBRUQsYUFBU0MsVUFBVCxDQUFxQkMsS0FBckIsRUFBNEJyTSxJQUE1QixFQUFrQzRHLE9BQWxDLEVBQTRDO0FBQzFDO0FBQ0F2QyxnQkFBVSxDQUFFLFlBQVc7QUFDckJELGFBQUssQ0FBQ2tJLFFBQU4sQ0FBZ0JELEtBQWhCLEVBQXVCck0sSUFBdkIsRUFBNkI0RyxPQUE3QjtBQUNELE9BRlMsQ0FBVjtBQUdEOztBQUVELFNBQUtrRSxNQUFMLENBQVl0SCxPQUFaLENBQXFCLFVBQVVzSSxZQUFWLEVBQXlCO0FBQzVDQSxrQkFBWSxDQUFDakwsSUFBYixDQUFtQixVQUFuQixFQUErQnVMLFVBQS9CO0FBQ0FOLGtCQUFZLENBQUNwQixLQUFiO0FBQ0QsS0FIRDtBQUlELEdBckJEOztBQXVCQVAsY0FBWSxDQUFDM0ssU0FBYixDQUF1QjhNLFFBQXZCLEdBQWtDLFVBQVVELEtBQVYsRUFBaUJyTSxJQUFqQixFQUF1QjRHLE9BQXZCLEVBQWlDO0FBQ2pFLFNBQUtxRixlQUFMO0FBQ0EsU0FBS0MsWUFBTCxHQUFvQixLQUFLQSxZQUFMLElBQXFCLENBQUNHLEtBQUssQ0FBQ0UsUUFBaEQsQ0FGaUUsQ0FHakU7O0FBQ0EsU0FBS25MLFNBQUwsQ0FBZ0IsVUFBaEIsRUFBNEIsQ0FBRSxJQUFGLEVBQVFpTCxLQUFSLEVBQWVyTSxJQUFmLENBQTVCOztBQUNBLFFBQUssS0FBS3dLLFVBQUwsSUFBbUIsS0FBS0EsVUFBTCxDQUFnQmdDLE1BQXhDLEVBQWlEO0FBQy9DLFdBQUtoQyxVQUFMLENBQWdCZ0MsTUFBaEIsQ0FBd0IsSUFBeEIsRUFBOEJILEtBQTlCO0FBQ0QsS0FQZ0UsQ0FRakU7OztBQUNBLFFBQUssS0FBS0osZUFBTCxJQUF3QixLQUFLbkIsTUFBTCxDQUFZakwsTUFBekMsRUFBa0Q7QUFDaEQsV0FBS3NNLFFBQUw7QUFDRDs7QUFFRCxRQUFLLEtBQUtyRyxPQUFMLENBQWEyRyxLQUFiLElBQXNCeEgsT0FBM0IsRUFBcUM7QUFDbkNBLGFBQU8sQ0FBQ3lILEdBQVIsQ0FBYSxlQUFlOUYsT0FBNUIsRUFBcUN5RixLQUFyQyxFQUE0Q3JNLElBQTVDO0FBQ0Q7QUFDRixHQWhCRDs7QUFrQkFtSyxjQUFZLENBQUMzSyxTQUFiLENBQXVCMk0sUUFBdkIsR0FBa0MsWUFBVztBQUMzQyxRQUFJN0wsU0FBUyxHQUFHLEtBQUs0TCxZQUFMLEdBQW9CLE1BQXBCLEdBQTZCLE1BQTdDO0FBQ0EsU0FBS1MsVUFBTCxHQUFrQixJQUFsQjtBQUNBLFNBQUt2TCxTQUFMLENBQWdCZCxTQUFoQixFQUEyQixDQUFFLElBQUYsQ0FBM0I7QUFDQSxTQUFLYyxTQUFMLENBQWdCLFFBQWhCLEVBQTBCLENBQUUsSUFBRixDQUExQjs7QUFDQSxRQUFLLEtBQUtvSixVQUFWLEVBQXVCO0FBQ3JCLFVBQUlvQyxRQUFRLEdBQUcsS0FBS1YsWUFBTCxHQUFvQixRQUFwQixHQUErQixTQUE5QztBQUNBLFdBQUsxQixVQUFMLENBQWlCb0MsUUFBakIsRUFBNkIsSUFBN0I7QUFDRDtBQUNGLEdBVEQsQ0FoTnNDLENBMk50Qzs7O0FBRUEsV0FBU2IsWUFBVCxDQUF1QlQsR0FBdkIsRUFBNkI7QUFDM0IsU0FBS0EsR0FBTCxHQUFXQSxHQUFYO0FBQ0Q7O0FBRURTLGNBQVksQ0FBQ3ZNLFNBQWIsR0FBeUJvTCxNQUFNLENBQUNDLE1BQVAsQ0FBZTFLLFNBQVMsQ0FBQ1gsU0FBekIsQ0FBekI7O0FBRUF1TSxjQUFZLENBQUN2TSxTQUFiLENBQXVCa0wsS0FBdkIsR0FBK0IsWUFBVztBQUN4QztBQUNBO0FBQ0EsUUFBSWlDLFVBQVUsR0FBRyxLQUFLRSxrQkFBTCxFQUFqQjs7QUFDQSxRQUFLRixVQUFMLEVBQWtCO0FBQ2hCO0FBQ0EsV0FBS0csT0FBTCxDQUFjLEtBQUt4QixHQUFMLENBQVN5QixZQUFULEtBQTBCLENBQXhDLEVBQTJDLGNBQTNDO0FBQ0E7QUFDRCxLQVJ1QyxDQVV4Qzs7O0FBQ0EsU0FBS0MsVUFBTCxHQUFrQixJQUFJQyxLQUFKLEVBQWxCO0FBQ0EsU0FBS0QsVUFBTCxDQUFnQnZJLGdCQUFoQixDQUFrQyxNQUFsQyxFQUEwQyxJQUExQztBQUNBLFNBQUt1SSxVQUFMLENBQWdCdkksZ0JBQWhCLENBQWtDLE9BQWxDLEVBQTJDLElBQTNDLEVBYndDLENBY3hDOztBQUNBLFNBQUs2RyxHQUFMLENBQVM3RyxnQkFBVCxDQUEyQixNQUEzQixFQUFtQyxJQUFuQztBQUNBLFNBQUs2RyxHQUFMLENBQVM3RyxnQkFBVCxDQUEyQixPQUEzQixFQUFvQyxJQUFwQztBQUNBLFNBQUt1SSxVQUFMLENBQWdCRSxHQUFoQixHQUFzQixLQUFLNUIsR0FBTCxDQUFTNEIsR0FBL0I7QUFDRCxHQWxCRDs7QUFvQkFuQixjQUFZLENBQUN2TSxTQUFiLENBQXVCcU4sa0JBQXZCLEdBQTRDLFlBQVc7QUFDckQ7QUFDQTtBQUNBLFdBQU8sS0FBS3ZCLEdBQUwsQ0FBU2EsUUFBVCxJQUFxQixLQUFLYixHQUFMLENBQVN5QixZQUFyQztBQUNELEdBSkQ7O0FBTUFoQixjQUFZLENBQUN2TSxTQUFiLENBQXVCc04sT0FBdkIsR0FBaUMsVUFBVVAsUUFBVixFQUFvQjNGLE9BQXBCLEVBQThCO0FBQzdELFNBQUsyRixRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLFNBQUtuTCxTQUFMLENBQWdCLFVBQWhCLEVBQTRCLENBQUUsSUFBRixFQUFRLEtBQUtrSyxHQUFiLEVBQWtCMUUsT0FBbEIsQ0FBNUI7QUFDRCxHQUhELENBN1BzQyxDQWtRdEM7QUFFQTs7O0FBQ0FtRixjQUFZLENBQUN2TSxTQUFiLENBQXVCMEQsV0FBdkIsR0FBcUMsVUFBVUMsS0FBVixFQUFrQjtBQUNyRCxRQUFJcEQsTUFBTSxHQUFHLE9BQU9vRCxLQUFLLENBQUNDLElBQTFCOztBQUNBLFFBQUssS0FBTXJELE1BQU4sQ0FBTCxFQUFzQjtBQUNwQixXQUFNQSxNQUFOLEVBQWdCb0QsS0FBaEI7QUFDRDtBQUNGLEdBTEQ7O0FBT0E0SSxjQUFZLENBQUN2TSxTQUFiLENBQXVCMk4sTUFBdkIsR0FBZ0MsWUFBVztBQUN6QyxTQUFLTCxPQUFMLENBQWMsSUFBZCxFQUFvQixRQUFwQjtBQUNBLFNBQUtNLFlBQUw7QUFDRCxHQUhEOztBQUtBckIsY0FBWSxDQUFDdk0sU0FBYixDQUF1QjZOLE9BQXZCLEdBQWlDLFlBQVc7QUFDMUMsU0FBS1AsT0FBTCxDQUFjLEtBQWQsRUFBcUIsU0FBckI7QUFDQSxTQUFLTSxZQUFMO0FBQ0QsR0FIRDs7QUFLQXJCLGNBQVksQ0FBQ3ZNLFNBQWIsQ0FBdUI0TixZQUF2QixHQUFzQyxZQUFXO0FBQy9DLFNBQUtKLFVBQUwsQ0FBZ0JNLG1CQUFoQixDQUFxQyxNQUFyQyxFQUE2QyxJQUE3QztBQUNBLFNBQUtOLFVBQUwsQ0FBZ0JNLG1CQUFoQixDQUFxQyxPQUFyQyxFQUE4QyxJQUE5QztBQUNBLFNBQUtoQyxHQUFMLENBQVNnQyxtQkFBVCxDQUE4QixNQUE5QixFQUFzQyxJQUF0QztBQUNBLFNBQUtoQyxHQUFMLENBQVNnQyxtQkFBVCxDQUE4QixPQUE5QixFQUF1QyxJQUF2QztBQUNELEdBTEQsQ0F0UnNDLENBNlJ0Qzs7O0FBRUEsV0FBU3RCLFVBQVQsQ0FBcUJKLEdBQXJCLEVBQTBCMkIsT0FBMUIsRUFBb0M7QUFDbEMsU0FBSzNCLEdBQUwsR0FBV0EsR0FBWDtBQUNBLFNBQUsyQixPQUFMLEdBQWVBLE9BQWY7QUFDQSxTQUFLakMsR0FBTCxHQUFXLElBQUkyQixLQUFKLEVBQVg7QUFDRCxHQW5TcUMsQ0FxU3RDOzs7QUFDQWpCLFlBQVUsQ0FBQ3hNLFNBQVgsR0FBdUJvTCxNQUFNLENBQUNDLE1BQVAsQ0FBZWtCLFlBQVksQ0FBQ3ZNLFNBQTVCLENBQXZCOztBQUVBd00sWUFBVSxDQUFDeE0sU0FBWCxDQUFxQmtMLEtBQXJCLEdBQTZCLFlBQVc7QUFDdEMsU0FBS1ksR0FBTCxDQUFTN0csZ0JBQVQsQ0FBMkIsTUFBM0IsRUFBbUMsSUFBbkM7QUFDQSxTQUFLNkcsR0FBTCxDQUFTN0csZ0JBQVQsQ0FBMkIsT0FBM0IsRUFBb0MsSUFBcEM7QUFDQSxTQUFLNkcsR0FBTCxDQUFTNEIsR0FBVCxHQUFlLEtBQUt0QixHQUFwQixDQUhzQyxDQUl0Qzs7QUFDQSxRQUFJZSxVQUFVLEdBQUcsS0FBS0Usa0JBQUwsRUFBakI7O0FBQ0EsUUFBS0YsVUFBTCxFQUFrQjtBQUNoQixXQUFLRyxPQUFMLENBQWMsS0FBS3hCLEdBQUwsQ0FBU3lCLFlBQVQsS0FBMEIsQ0FBeEMsRUFBMkMsY0FBM0M7QUFDQSxXQUFLSyxZQUFMO0FBQ0Q7QUFDRixHQVZEOztBQVlBcEIsWUFBVSxDQUFDeE0sU0FBWCxDQUFxQjROLFlBQXJCLEdBQW9DLFlBQVc7QUFDN0MsU0FBSzlCLEdBQUwsQ0FBU2dDLG1CQUFULENBQThCLE1BQTlCLEVBQXNDLElBQXRDO0FBQ0EsU0FBS2hDLEdBQUwsQ0FBU2dDLG1CQUFULENBQThCLE9BQTlCLEVBQXVDLElBQXZDO0FBQ0QsR0FIRDs7QUFLQXRCLFlBQVUsQ0FBQ3hNLFNBQVgsQ0FBcUJzTixPQUFyQixHQUErQixVQUFVUCxRQUFWLEVBQW9CM0YsT0FBcEIsRUFBOEI7QUFDM0QsU0FBSzJGLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0EsU0FBS25MLFNBQUwsQ0FBZ0IsVUFBaEIsRUFBNEIsQ0FBRSxJQUFGLEVBQVEsS0FBS21NLE9BQWIsRUFBc0IzRyxPQUF0QixDQUE1QjtBQUNELEdBSEQsQ0F6VHNDLENBOFR0Qzs7O0FBRUF1RCxjQUFZLENBQUNxRCxnQkFBYixHQUFnQyxVQUFVN0gsTUFBVixFQUFtQjtBQUNqREEsVUFBTSxHQUFHQSxNQUFNLElBQUl6RyxNQUFNLENBQUN5RyxNQUExQjs7QUFDQSxRQUFLLENBQUNBLE1BQU4sRUFBZTtBQUNiO0FBQ0QsS0FKZ0QsQ0FLakQ7OztBQUNBdUUsS0FBQyxHQUFHdkUsTUFBSixDQU5pRCxDQU9qRDs7QUFDQXVFLEtBQUMsQ0FBQ3VELEVBQUYsQ0FBS0MsWUFBTCxHQUFvQixVQUFVNUgsT0FBVixFQUFtQnZCLFFBQW5CLEVBQThCO0FBQ2hELFVBQUk0QixRQUFRLEdBQUcsSUFBSWdFLFlBQUosQ0FBa0IsSUFBbEIsRUFBd0JyRSxPQUF4QixFQUFpQ3ZCLFFBQWpDLENBQWY7QUFDQSxhQUFPNEIsUUFBUSxDQUFDcUUsVUFBVCxDQUFvQm1ELE9BQXBCLENBQTZCekQsQ0FBQyxDQUFDLElBQUQsQ0FBOUIsQ0FBUDtBQUNELEtBSEQ7QUFJRCxHQVpELENBaFVzQyxDQTZVdEM7OztBQUNBQyxjQUFZLENBQUNxRCxnQkFBYixHQTlVc0MsQ0FnVnRDOztBQUVBLFNBQU9yRCxZQUFQO0FBRUMsQ0FsWEQsRTs7Ozs7Ozs7Ozs7QUNOQTs7Ozs7Ozs7Ozs7OztBQWFBLENBQUUsVUFBVWpLLE1BQVYsRUFBa0JmLE9BQWxCLEVBQTRCO0FBRTdCOztBQUVBLE1BQUssU0FBOEIsT0FBT3lPLE1BQU0sQ0FBQ0MsT0FBZCxLQUEwQixRQUE3RCxFQUF3RTtBQUV2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBRCxVQUFNLENBQUNDLE9BQVAsR0FBaUIzTixNQUFNLENBQUM0QyxRQUFQLEdBQ2hCM0QsT0FBTyxDQUFFZSxNQUFGLEVBQVUsSUFBVixDQURTLEdBRWhCLFVBQVU0TixDQUFWLEVBQWM7QUFDYixVQUFLLENBQUNBLENBQUMsQ0FBQ2hMLFFBQVIsRUFBbUI7QUFDbEIsY0FBTSxJQUFJaUwsS0FBSixDQUFXLDBDQUFYLENBQU47QUFDQTs7QUFDRCxhQUFPNU8sT0FBTyxDQUFFMk8sQ0FBRixDQUFkO0FBQ0EsS0FQRjtBQVFBLEdBakJELE1BaUJPO0FBQ04zTyxXQUFPLENBQUVlLE1BQUYsQ0FBUDtBQUNBLEdBdkI0QixDQXlCOUI7O0FBQ0MsQ0ExQkQsRUEwQkssT0FBT2hCLE1BQVAsS0FBa0IsV0FBbEIsR0FBZ0NBLE1BQWhDLEdBQXlDLElBMUI5QyxFQTBCb0QsVUFBVUEsTUFBVixFQUFrQjhPLFFBQWxCLEVBQTZCO0FBRWpGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBSUMsR0FBRyxHQUFHLEVBQVY7QUFFQSxNQUFJQyxRQUFRLEdBQUd0RCxNQUFNLENBQUN1RCxjQUF0QjtBQUVBLE1BQUk3TSxLQUFLLEdBQUcyTSxHQUFHLENBQUMzTSxLQUFoQjtBQUVBLE1BQUk4TSxJQUFJLEdBQUdILEdBQUcsQ0FBQ0csSUFBSixHQUFXLFVBQVVDLEtBQVYsRUFBa0I7QUFDdkMsV0FBT0osR0FBRyxDQUFDRyxJQUFKLENBQVMzTCxJQUFULENBQWU0TCxLQUFmLENBQVA7QUFDQSxHQUZVLEdBRVAsVUFBVUEsS0FBVixFQUFrQjtBQUNyQixXQUFPSixHQUFHLENBQUN4SSxNQUFKLENBQVdqRSxLQUFYLENBQWtCLEVBQWxCLEVBQXNCNk0sS0FBdEIsQ0FBUDtBQUNBLEdBSkQ7QUFPQSxNQUFJek4sSUFBSSxHQUFHcU4sR0FBRyxDQUFDck4sSUFBZjtBQUVBLE1BQUlELE9BQU8sR0FBR3NOLEdBQUcsQ0FBQ3ROLE9BQWxCO0FBRUEsTUFBSTJOLFVBQVUsR0FBRyxFQUFqQjtBQUVBLE1BQUlDLFFBQVEsR0FBR0QsVUFBVSxDQUFDQyxRQUExQjtBQUVBLE1BQUlDLE1BQU0sR0FBR0YsVUFBVSxDQUFDRyxjQUF4QjtBQUVBLE1BQUlDLFVBQVUsR0FBR0YsTUFBTSxDQUFDRCxRQUF4QjtBQUVBLE1BQUlJLG9CQUFvQixHQUFHRCxVQUFVLENBQUNqTSxJQUFYLENBQWlCbUksTUFBakIsQ0FBM0I7QUFFQSxNQUFJZ0UsT0FBTyxHQUFHLEVBQWQ7O0FBRUEsTUFBSUMsVUFBVSxHQUFHLFNBQVNBLFVBQVQsQ0FBcUJ4TSxHQUFyQixFQUEyQjtBQUV0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQU8sT0FBT0EsR0FBUCxLQUFlLFVBQWYsSUFBNkIsT0FBT0EsR0FBRyxDQUFDb0csUUFBWCxLQUF3QixRQUE1RDtBQUNILEdBUEg7O0FBVUEsTUFBSXFHLFFBQVEsR0FBRyxTQUFTQSxRQUFULENBQW1Cek0sR0FBbkIsRUFBeUI7QUFDdEMsV0FBT0EsR0FBRyxJQUFJLElBQVAsSUFBZUEsR0FBRyxLQUFLQSxHQUFHLENBQUNuRCxNQUFsQztBQUNBLEdBRkY7O0FBS0EsTUFBSTRELFFBQVEsR0FBRzVELE1BQU0sQ0FBQzRELFFBQXRCO0FBSUMsTUFBSWlNLHlCQUF5QixHQUFHO0FBQy9CM0wsUUFBSSxFQUFFLElBRHlCO0FBRS9COEosT0FBRyxFQUFFLElBRjBCO0FBRy9COEIsU0FBSyxFQUFFLElBSHdCO0FBSS9CQyxZQUFRLEVBQUU7QUFKcUIsR0FBaEM7O0FBT0EsV0FBU0MsT0FBVCxDQUFrQkMsSUFBbEIsRUFBd0JDLElBQXhCLEVBQThCQyxHQUE5QixFQUFvQztBQUNuQ0EsT0FBRyxHQUFHQSxHQUFHLElBQUl2TSxRQUFiO0FBRUEsUUFBSWxELENBQUo7QUFBQSxRQUFPMFAsR0FBUDtBQUFBLFFBQ0NDLE1BQU0sR0FBR0YsR0FBRyxDQUFDdkgsYUFBSixDQUFtQixRQUFuQixDQURWO0FBR0F5SCxVQUFNLENBQUNDLElBQVAsR0FBY0wsSUFBZDs7QUFDQSxRQUFLQyxJQUFMLEVBQVk7QUFDWCxXQUFNeFAsQ0FBTixJQUFXbVAseUJBQVgsRUFBdUM7QUFFdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQU8sV0FBRyxHQUFHRixJQUFJLENBQUV4UCxDQUFGLENBQUosSUFBYXdQLElBQUksQ0FBQ3ZKLFlBQUwsSUFBcUJ1SixJQUFJLENBQUN2SixZQUFMLENBQW1CakcsQ0FBbkIsQ0FBeEM7O0FBQ0EsWUFBSzBQLEdBQUwsRUFBVztBQUNWQyxnQkFBTSxDQUFDRSxZQUFQLENBQXFCN1AsQ0FBckIsRUFBd0IwUCxHQUF4QjtBQUNBO0FBQ0Q7QUFDRDs7QUFDREQsT0FBRyxDQUFDSyxJQUFKLENBQVN0SCxXQUFULENBQXNCbUgsTUFBdEIsRUFBK0IxTSxVQUEvQixDQUEwQzJGLFdBQTFDLENBQXVEK0csTUFBdkQ7QUFDQTs7QUFHRixXQUFTSSxNQUFULENBQWlCdE4sR0FBakIsRUFBdUI7QUFDdEIsUUFBS0EsR0FBRyxJQUFJLElBQVosRUFBbUI7QUFDbEIsYUFBT0EsR0FBRyxHQUFHLEVBQWI7QUFDQSxLQUhxQixDQUt0Qjs7O0FBQ0EsV0FBTyxPQUFPQSxHQUFQLEtBQWUsUUFBZixJQUEyQixPQUFPQSxHQUFQLEtBQWUsVUFBMUMsR0FDTmlNLFVBQVUsQ0FBRUMsUUFBUSxDQUFDOUwsSUFBVCxDQUFlSixHQUFmLENBQUYsQ0FBVixJQUFzQyxRQURoQyxHQUVOLE9BQU9BLEdBRlI7QUFHQTtBQUNEO0FBQ0E7QUFDQTs7O0FBSUEsTUFDQ3VOLE9BQU8sR0FBRyxPQURYO0FBQUEsTUFHQztBQUNBakssUUFBTSxHQUFHLFVBQVUxRixRQUFWLEVBQW9CNFAsT0FBcEIsRUFBOEI7QUFFdEM7QUFDQTtBQUNBLFdBQU8sSUFBSWxLLE1BQU0sQ0FBQzhILEVBQVAsQ0FBVXFDLElBQWQsQ0FBb0I3UCxRQUFwQixFQUE4QjRQLE9BQTlCLENBQVA7QUFDQSxHQVRGOztBQVdBbEssUUFBTSxDQUFDOEgsRUFBUCxHQUFZOUgsTUFBTSxDQUFDbkcsU0FBUCxHQUFtQjtBQUU5QjtBQUNBdVEsVUFBTSxFQUFFSCxPQUhzQjtBQUs5QkksZUFBVyxFQUFFckssTUFMaUI7QUFPOUI7QUFDQTlGLFVBQU0sRUFBRSxDQVJzQjtBQVU5Qm9RLFdBQU8sRUFBRSxZQUFXO0FBQ25CLGFBQU8zTyxLQUFLLENBQUNtQixJQUFOLENBQVksSUFBWixDQUFQO0FBQ0EsS0FaNkI7QUFjOUI7QUFDQTtBQUNBeU4sT0FBRyxFQUFFLFVBQVVsTyxHQUFWLEVBQWdCO0FBRXBCO0FBQ0EsVUFBS0EsR0FBRyxJQUFJLElBQVosRUFBbUI7QUFDbEIsZUFBT1YsS0FBSyxDQUFDbUIsSUFBTixDQUFZLElBQVosQ0FBUDtBQUNBLE9BTG1CLENBT3BCOzs7QUFDQSxhQUFPVCxHQUFHLEdBQUcsQ0FBTixHQUFVLEtBQU1BLEdBQUcsR0FBRyxLQUFLbkMsTUFBakIsQ0FBVixHQUFzQyxLQUFNbUMsR0FBTixDQUE3QztBQUNBLEtBekI2QjtBQTJCOUI7QUFDQTtBQUNBbU8sYUFBUyxFQUFFLFVBQVU3TSxLQUFWLEVBQWtCO0FBRTVCO0FBQ0EsVUFBSThNLEdBQUcsR0FBR3pLLE1BQU0sQ0FBQzBLLEtBQVAsQ0FBYyxLQUFLTCxXQUFMLEVBQWQsRUFBa0MxTSxLQUFsQyxDQUFWLENBSDRCLENBSzVCOztBQUNBOE0sU0FBRyxDQUFDRSxVQUFKLEdBQWlCLElBQWpCLENBTjRCLENBUTVCOztBQUNBLGFBQU9GLEdBQVA7QUFDQSxLQXZDNkI7QUF5QzlCO0FBQ0FHLFFBQUksRUFBRSxVQUFVaE0sUUFBVixFQUFxQjtBQUMxQixhQUFPb0IsTUFBTSxDQUFDNEssSUFBUCxDQUFhLElBQWIsRUFBbUJoTSxRQUFuQixDQUFQO0FBQ0EsS0E1QzZCO0FBOEM5QmlNLE9BQUcsRUFBRSxVQUFVak0sUUFBVixFQUFxQjtBQUN6QixhQUFPLEtBQUs0TCxTQUFMLENBQWdCeEssTUFBTSxDQUFDNkssR0FBUCxDQUFZLElBQVosRUFBa0IsVUFBVXhRLElBQVYsRUFBZ0JKLENBQWhCLEVBQW9CO0FBQzVELGVBQU8yRSxRQUFRLENBQUM5QixJQUFULENBQWV6QyxJQUFmLEVBQXFCSixDQUFyQixFQUF3QkksSUFBeEIsQ0FBUDtBQUNBLE9BRnNCLENBQWhCLENBQVA7QUFHQSxLQWxENkI7QUFvRDlCc0IsU0FBSyxFQUFFLFlBQVc7QUFDakIsYUFBTyxLQUFLNk8sU0FBTCxDQUFnQjdPLEtBQUssQ0FBQ0UsS0FBTixDQUFhLElBQWIsRUFBbUIyQyxTQUFuQixDQUFoQixDQUFQO0FBQ0EsS0F0RDZCO0FBd0Q5QnNNLFNBQUssRUFBRSxZQUFXO0FBQ2pCLGFBQU8sS0FBS0MsRUFBTCxDQUFTLENBQVQsQ0FBUDtBQUNBLEtBMUQ2QjtBQTREOUJDLFFBQUksRUFBRSxZQUFXO0FBQ2hCLGFBQU8sS0FBS0QsRUFBTCxDQUFTLENBQUMsQ0FBVixDQUFQO0FBQ0EsS0E5RDZCO0FBZ0U5QkUsUUFBSSxFQUFFLFlBQVc7QUFDaEIsYUFBTyxLQUFLVCxTQUFMLENBQWdCeEssTUFBTSxDQUFDa0wsSUFBUCxDQUFhLElBQWIsRUFBbUIsVUFBVUMsS0FBVixFQUFpQmxSLENBQWpCLEVBQXFCO0FBQzlELGVBQU8sQ0FBRUEsQ0FBQyxHQUFHLENBQU4sSUFBWSxDQUFuQjtBQUNBLE9BRnNCLENBQWhCLENBQVA7QUFHQSxLQXBFNkI7QUFzRTlCbVIsT0FBRyxFQUFFLFlBQVc7QUFDZixhQUFPLEtBQUtaLFNBQUwsQ0FBZ0J4SyxNQUFNLENBQUNrTCxJQUFQLENBQWEsSUFBYixFQUFtQixVQUFVQyxLQUFWLEVBQWlCbFIsQ0FBakIsRUFBcUI7QUFDOUQsZUFBT0EsQ0FBQyxHQUFHLENBQVg7QUFDQSxPQUZzQixDQUFoQixDQUFQO0FBR0EsS0ExRTZCO0FBNEU5QjhRLE1BQUUsRUFBRSxVQUFVOVEsQ0FBVixFQUFjO0FBQ2pCLFVBQUlvUixHQUFHLEdBQUcsS0FBS25SLE1BQWY7QUFBQSxVQUNDb1IsQ0FBQyxHQUFHLENBQUNyUixDQUFELElBQU9BLENBQUMsR0FBRyxDQUFKLEdBQVFvUixHQUFSLEdBQWMsQ0FBckIsQ0FETDtBQUVBLGFBQU8sS0FBS2IsU0FBTCxDQUFnQmMsQ0FBQyxJQUFJLENBQUwsSUFBVUEsQ0FBQyxHQUFHRCxHQUFkLEdBQW9CLENBQUUsS0FBTUMsQ0FBTixDQUFGLENBQXBCLEdBQW9DLEVBQXBELENBQVA7QUFDQSxLQWhGNkI7QUFrRjlCQyxPQUFHLEVBQUUsWUFBVztBQUNmLGFBQU8sS0FBS1osVUFBTCxJQUFtQixLQUFLTixXQUFMLEVBQTFCO0FBQ0EsS0FwRjZCO0FBc0Y5QjtBQUNBO0FBQ0FwUCxRQUFJLEVBQUVBLElBeEZ3QjtBQXlGOUJ1USxRQUFJLEVBQUVsRCxHQUFHLENBQUNrRCxJQXpGb0I7QUEwRjlCaFEsVUFBTSxFQUFFOE0sR0FBRyxDQUFDOU07QUExRmtCLEdBQS9COztBQTZGQXdFLFFBQU0sQ0FBQ2hFLE1BQVAsR0FBZ0JnRSxNQUFNLENBQUM4SCxFQUFQLENBQVU5TCxNQUFWLEdBQW1CLFlBQVc7QUFDN0MsUUFBSW1FLE9BQUo7QUFBQSxRQUFhc0wsSUFBYjtBQUFBLFFBQW1CbEUsR0FBbkI7QUFBQSxRQUF3Qm1FLElBQXhCO0FBQUEsUUFBOEJDLFdBQTlCO0FBQUEsUUFBMkNDLEtBQTNDO0FBQUEsUUFDQ0MsTUFBTSxHQUFHck4sU0FBUyxDQUFFLENBQUYsQ0FBVCxJQUFrQixFQUQ1QjtBQUFBLFFBRUN2RSxDQUFDLEdBQUcsQ0FGTDtBQUFBLFFBR0NDLE1BQU0sR0FBR3NFLFNBQVMsQ0FBQ3RFLE1BSHBCO0FBQUEsUUFJQzRSLElBQUksR0FBRyxLQUpSLENBRDZDLENBTzdDOztBQUNBLFFBQUssT0FBT0QsTUFBUCxLQUFrQixTQUF2QixFQUFtQztBQUNsQ0MsVUFBSSxHQUFHRCxNQUFQLENBRGtDLENBR2xDOztBQUNBQSxZQUFNLEdBQUdyTixTQUFTLENBQUV2RSxDQUFGLENBQVQsSUFBa0IsRUFBM0I7QUFDQUEsT0FBQztBQUNELEtBZDRDLENBZ0I3Qzs7O0FBQ0EsUUFBSyxPQUFPNFIsTUFBUCxLQUFrQixRQUFsQixJQUE4QixDQUFDM0MsVUFBVSxDQUFFMkMsTUFBRixDQUE5QyxFQUEyRDtBQUMxREEsWUFBTSxHQUFHLEVBQVQ7QUFDQSxLQW5CNEMsQ0FxQjdDOzs7QUFDQSxRQUFLNVIsQ0FBQyxLQUFLQyxNQUFYLEVBQW9CO0FBQ25CMlIsWUFBTSxHQUFHLElBQVQ7QUFDQTVSLE9BQUM7QUFDRDs7QUFFRCxXQUFRQSxDQUFDLEdBQUdDLE1BQVosRUFBb0JELENBQUMsRUFBckIsRUFBMEI7QUFFekI7QUFDQSxVQUFLLENBQUVrRyxPQUFPLEdBQUczQixTQUFTLENBQUV2RSxDQUFGLENBQXJCLEtBQWdDLElBQXJDLEVBQTRDO0FBRTNDO0FBQ0EsYUFBTXdSLElBQU4sSUFBY3RMLE9BQWQsRUFBd0I7QUFDdkJ1TCxjQUFJLEdBQUd2TCxPQUFPLENBQUVzTCxJQUFGLENBQWQsQ0FEdUIsQ0FHdkI7QUFDQTs7QUFDQSxjQUFLQSxJQUFJLEtBQUssV0FBVCxJQUF3QkksTUFBTSxLQUFLSCxJQUF4QyxFQUErQztBQUM5QztBQUNBLFdBUHNCLENBU3ZCOzs7QUFDQSxjQUFLSSxJQUFJLElBQUlKLElBQVIsS0FBa0IxTCxNQUFNLENBQUMrTCxhQUFQLENBQXNCTCxJQUF0QixNQUNwQkMsV0FBVyxHQUFHblAsS0FBSyxDQUFDRyxPQUFOLENBQWUrTyxJQUFmLENBRE0sQ0FBbEIsQ0FBTCxFQUM2QztBQUM1Q25FLGVBQUcsR0FBR3NFLE1BQU0sQ0FBRUosSUFBRixDQUFaLENBRDRDLENBRzVDOztBQUNBLGdCQUFLRSxXQUFXLElBQUksQ0FBQ25QLEtBQUssQ0FBQ0csT0FBTixDQUFlNEssR0FBZixDQUFyQixFQUE0QztBQUMzQ3FFLG1CQUFLLEdBQUcsRUFBUjtBQUNBLGFBRkQsTUFFTyxJQUFLLENBQUNELFdBQUQsSUFBZ0IsQ0FBQzNMLE1BQU0sQ0FBQytMLGFBQVAsQ0FBc0J4RSxHQUF0QixDQUF0QixFQUFvRDtBQUMxRHFFLG1CQUFLLEdBQUcsRUFBUjtBQUNBLGFBRk0sTUFFQTtBQUNOQSxtQkFBSyxHQUFHckUsR0FBUjtBQUNBOztBQUNEb0UsdUJBQVcsR0FBRyxLQUFkLENBWDRDLENBYTVDOztBQUNBRSxrQkFBTSxDQUFFSixJQUFGLENBQU4sR0FBaUJ6TCxNQUFNLENBQUNoRSxNQUFQLENBQWU4UCxJQUFmLEVBQXFCRixLQUFyQixFQUE0QkYsSUFBNUIsQ0FBakIsQ0FkNEMsQ0FnQjdDO0FBQ0MsV0FsQkQsTUFrQk8sSUFBS0EsSUFBSSxLQUFLOU8sU0FBZCxFQUEwQjtBQUNoQ2lQLGtCQUFNLENBQUVKLElBQUYsQ0FBTixHQUFpQkMsSUFBakI7QUFDQTtBQUNEO0FBQ0Q7QUFDRCxLQWxFNEMsQ0FvRTdDOzs7QUFDQSxXQUFPRyxNQUFQO0FBQ0EsR0F0RUQ7O0FBd0VBN0wsUUFBTSxDQUFDaEUsTUFBUCxDQUFlO0FBRWQ7QUFDQWdRLFdBQU8sRUFBRSxXQUFXLENBQUUvQixPQUFPLEdBQUd2SCxJQUFJLENBQUN1SixNQUFMLEVBQVosRUFBNEJoTixPQUE1QixDQUFxQyxLQUFyQyxFQUE0QyxFQUE1QyxDQUhOO0FBS2Q7QUFDQWlOLFdBQU8sRUFBRSxJQU5LO0FBUWQ1TCxTQUFLLEVBQUUsVUFBVTZMLEdBQVYsRUFBZ0I7QUFDdEIsWUFBTSxJQUFJL0QsS0FBSixDQUFXK0QsR0FBWCxDQUFOO0FBQ0EsS0FWYTtBQVlkcEwsUUFBSSxFQUFFLFlBQVcsQ0FBRSxDQVpMO0FBY2RnTCxpQkFBYSxFQUFFLFVBQVVyUCxHQUFWLEVBQWdCO0FBQzlCLFVBQUlqQyxLQUFKLEVBQVcyUixJQUFYLENBRDhCLENBRzlCO0FBQ0E7O0FBQ0EsVUFBSyxDQUFDMVAsR0FBRCxJQUFRa00sUUFBUSxDQUFDOUwsSUFBVCxDQUFlSixHQUFmLE1BQXlCLGlCQUF0QyxFQUEwRDtBQUN6RCxlQUFPLEtBQVA7QUFDQTs7QUFFRGpDLFdBQUssR0FBRzhOLFFBQVEsQ0FBRTdMLEdBQUYsQ0FBaEIsQ0FUOEIsQ0FXOUI7O0FBQ0EsVUFBSyxDQUFDakMsS0FBTixFQUFjO0FBQ2IsZUFBTyxJQUFQO0FBQ0EsT0FkNkIsQ0FnQjlCOzs7QUFDQTJSLFVBQUksR0FBR3ZELE1BQU0sQ0FBQy9MLElBQVAsQ0FBYXJDLEtBQWIsRUFBb0IsYUFBcEIsS0FBdUNBLEtBQUssQ0FBQzRQLFdBQXBEO0FBQ0EsYUFBTyxPQUFPK0IsSUFBUCxLQUFnQixVQUFoQixJQUE4QnJELFVBQVUsQ0FBQ2pNLElBQVgsQ0FBaUJzUCxJQUFqQixNQUE0QnBELG9CQUFqRTtBQUNBLEtBakNhO0FBbUNkcUQsaUJBQWEsRUFBRSxVQUFVM1AsR0FBVixFQUFnQjtBQUM5QixVQUFJK08sSUFBSjs7QUFFQSxXQUFNQSxJQUFOLElBQWMvTyxHQUFkLEVBQW9CO0FBQ25CLGVBQU8sS0FBUDtBQUNBOztBQUNELGFBQU8sSUFBUDtBQUNBLEtBMUNhO0FBNENkO0FBQ0E7QUFDQTRQLGNBQVUsRUFBRSxVQUFVOUMsSUFBVixFQUFnQnJKLE9BQWhCLEVBQXlCdUosR0FBekIsRUFBK0I7QUFDMUNILGFBQU8sQ0FBRUMsSUFBRixFQUFRO0FBQUVILGFBQUssRUFBRWxKLE9BQU8sSUFBSUEsT0FBTyxDQUFDa0o7QUFBNUIsT0FBUixFQUE2Q0ssR0FBN0MsQ0FBUDtBQUNBLEtBaERhO0FBa0Rka0IsUUFBSSxFQUFFLFVBQVVsTyxHQUFWLEVBQWVrQyxRQUFmLEVBQTBCO0FBQy9CLFVBQUkxRSxNQUFKO0FBQUEsVUFBWUQsQ0FBQyxHQUFHLENBQWhCOztBQUVBLFVBQUs0QyxXQUFXLENBQUVILEdBQUYsQ0FBaEIsRUFBMEI7QUFDekJ4QyxjQUFNLEdBQUd3QyxHQUFHLENBQUN4QyxNQUFiOztBQUNBLGVBQVFELENBQUMsR0FBR0MsTUFBWixFQUFvQkQsQ0FBQyxFQUFyQixFQUEwQjtBQUN6QixjQUFLMkUsUUFBUSxDQUFDOUIsSUFBVCxDQUFlSixHQUFHLENBQUV6QyxDQUFGLENBQWxCLEVBQXlCQSxDQUF6QixFQUE0QnlDLEdBQUcsQ0FBRXpDLENBQUYsQ0FBL0IsTUFBMkMsS0FBaEQsRUFBd0Q7QUFDdkQ7QUFDQTtBQUNEO0FBQ0QsT0FQRCxNQU9PO0FBQ04sYUFBTUEsQ0FBTixJQUFXeUMsR0FBWCxFQUFpQjtBQUNoQixjQUFLa0MsUUFBUSxDQUFDOUIsSUFBVCxDQUFlSixHQUFHLENBQUV6QyxDQUFGLENBQWxCLEVBQXlCQSxDQUF6QixFQUE0QnlDLEdBQUcsQ0FBRXpDLENBQUYsQ0FBL0IsTUFBMkMsS0FBaEQsRUFBd0Q7QUFDdkQ7QUFDQTtBQUNEO0FBQ0Q7O0FBRUQsYUFBT3lDLEdBQVA7QUFDQSxLQXJFYTtBQXVFZDtBQUNBRCxhQUFTLEVBQUUsVUFBVTZMLEdBQVYsRUFBZWlFLE9BQWYsRUFBeUI7QUFDbkMsVUFBSTlCLEdBQUcsR0FBRzhCLE9BQU8sSUFBSSxFQUFyQjs7QUFFQSxVQUFLakUsR0FBRyxJQUFJLElBQVosRUFBbUI7QUFDbEIsWUFBS3pMLFdBQVcsQ0FBRW9JLE1BQU0sQ0FBRXFELEdBQUYsQ0FBUixDQUFoQixFQUFvQztBQUNuQ3RJLGdCQUFNLENBQUMwSyxLQUFQLENBQWNELEdBQWQsRUFDQyxPQUFPbkMsR0FBUCxLQUFlLFFBQWYsR0FDQSxDQUFFQSxHQUFGLENBREEsR0FDVUEsR0FGWDtBQUlBLFNBTEQsTUFLTztBQUNOck4sY0FBSSxDQUFDNkIsSUFBTCxDQUFXMk4sR0FBWCxFQUFnQm5DLEdBQWhCO0FBQ0E7QUFDRDs7QUFFRCxhQUFPbUMsR0FBUDtBQUNBLEtBdkZhO0FBeUZkK0IsV0FBTyxFQUFFLFVBQVVuUyxJQUFWLEVBQWdCaU8sR0FBaEIsRUFBcUJyTyxDQUFyQixFQUF5QjtBQUNqQyxhQUFPcU8sR0FBRyxJQUFJLElBQVAsR0FBYyxDQUFDLENBQWYsR0FBbUJ0TixPQUFPLENBQUM4QixJQUFSLENBQWN3TCxHQUFkLEVBQW1Cak8sSUFBbkIsRUFBeUJKLENBQXpCLENBQTFCO0FBQ0EsS0EzRmE7QUE2RmQ7QUFDQTtBQUNBeVEsU0FBSyxFQUFFLFVBQVVJLEtBQVYsRUFBaUIyQixNQUFqQixFQUEwQjtBQUNoQyxVQUFJcEIsR0FBRyxHQUFHLENBQUNvQixNQUFNLENBQUN2UyxNQUFsQjtBQUFBLFVBQ0NvUixDQUFDLEdBQUcsQ0FETDtBQUFBLFVBRUNyUixDQUFDLEdBQUc2USxLQUFLLENBQUM1USxNQUZYOztBQUlBLGFBQVFvUixDQUFDLEdBQUdELEdBQVosRUFBaUJDLENBQUMsRUFBbEIsRUFBdUI7QUFDdEJSLGFBQUssQ0FBRTdRLENBQUMsRUFBSCxDQUFMLEdBQWV3UyxNQUFNLENBQUVuQixDQUFGLENBQXJCO0FBQ0E7O0FBRURSLFdBQUssQ0FBQzVRLE1BQU4sR0FBZUQsQ0FBZjtBQUVBLGFBQU82USxLQUFQO0FBQ0EsS0EzR2E7QUE2R2RJLFFBQUksRUFBRSxVQUFVdk4sS0FBVixFQUFpQmlCLFFBQWpCLEVBQTJCOE4sTUFBM0IsRUFBb0M7QUFDekMsVUFBSUMsZUFBSjtBQUFBLFVBQ0M3UyxPQUFPLEdBQUcsRUFEWDtBQUFBLFVBRUNHLENBQUMsR0FBRyxDQUZMO0FBQUEsVUFHQ0MsTUFBTSxHQUFHeUQsS0FBSyxDQUFDekQsTUFIaEI7QUFBQSxVQUlDMFMsY0FBYyxHQUFHLENBQUNGLE1BSm5CLENBRHlDLENBT3pDO0FBQ0E7O0FBQ0EsYUFBUXpTLENBQUMsR0FBR0MsTUFBWixFQUFvQkQsQ0FBQyxFQUFyQixFQUEwQjtBQUN6QjBTLHVCQUFlLEdBQUcsQ0FBQy9OLFFBQVEsQ0FBRWpCLEtBQUssQ0FBRTFELENBQUYsQ0FBUCxFQUFjQSxDQUFkLENBQTNCOztBQUNBLFlBQUswUyxlQUFlLEtBQUtDLGNBQXpCLEVBQTBDO0FBQ3pDOVMsaUJBQU8sQ0FBQ21CLElBQVIsQ0FBYzBDLEtBQUssQ0FBRTFELENBQUYsQ0FBbkI7QUFDQTtBQUNEOztBQUVELGFBQU9ILE9BQVA7QUFDQSxLQTlIYTtBQWdJZDtBQUNBK1EsT0FBRyxFQUFFLFVBQVVsTixLQUFWLEVBQWlCaUIsUUFBakIsRUFBMkJpTyxHQUEzQixFQUFpQztBQUNyQyxVQUFJM1MsTUFBSjtBQUFBLFVBQVl5RyxLQUFaO0FBQUEsVUFDQzFHLENBQUMsR0FBRyxDQURMO0FBQUEsVUFFQ3dRLEdBQUcsR0FBRyxFQUZQLENBRHFDLENBS3JDOztBQUNBLFVBQUs1TixXQUFXLENBQUVjLEtBQUYsQ0FBaEIsRUFBNEI7QUFDM0J6RCxjQUFNLEdBQUd5RCxLQUFLLENBQUN6RCxNQUFmOztBQUNBLGVBQVFELENBQUMsR0FBR0MsTUFBWixFQUFvQkQsQ0FBQyxFQUFyQixFQUEwQjtBQUN6QjBHLGVBQUssR0FBRy9CLFFBQVEsQ0FBRWpCLEtBQUssQ0FBRTFELENBQUYsQ0FBUCxFQUFjQSxDQUFkLEVBQWlCNFMsR0FBakIsQ0FBaEI7O0FBRUEsY0FBS2xNLEtBQUssSUFBSSxJQUFkLEVBQXFCO0FBQ3BCOEosZUFBRyxDQUFDeFAsSUFBSixDQUFVMEYsS0FBVjtBQUNBO0FBQ0QsU0FSMEIsQ0FVNUI7O0FBQ0MsT0FYRCxNQVdPO0FBQ04sYUFBTTFHLENBQU4sSUFBVzBELEtBQVgsRUFBbUI7QUFDbEJnRCxlQUFLLEdBQUcvQixRQUFRLENBQUVqQixLQUFLLENBQUUxRCxDQUFGLENBQVAsRUFBY0EsQ0FBZCxFQUFpQjRTLEdBQWpCLENBQWhCOztBQUVBLGNBQUtsTSxLQUFLLElBQUksSUFBZCxFQUFxQjtBQUNwQjhKLGVBQUcsQ0FBQ3hQLElBQUosQ0FBVTBGLEtBQVY7QUFDQTtBQUNEO0FBQ0QsT0F6Qm9DLENBMkJyQzs7O0FBQ0EsYUFBTzhILElBQUksQ0FBRWdDLEdBQUYsQ0FBWDtBQUNBLEtBOUphO0FBZ0tkO0FBQ0FxQyxRQUFJLEVBQUUsQ0FqS1E7QUFtS2Q7QUFDQTtBQUNBN0QsV0FBTyxFQUFFQTtBQXJLSyxHQUFmOztBQXdLQSxNQUFLLE9BQU84RCxNQUFQLEtBQWtCLFVBQXZCLEVBQW9DO0FBQ25DL00sVUFBTSxDQUFDOEgsRUFBUCxDQUFXaUYsTUFBTSxDQUFDQyxRQUFsQixJQUErQjFFLEdBQUcsQ0FBRXlFLE1BQU0sQ0FBQ0MsUUFBVCxDQUFsQztBQUNBLEdBdmNnRixDQXljakY7OztBQUNBaE4sUUFBTSxDQUFDNEssSUFBUCxDQUFhLHVFQUF1RXFDLEtBQXZFLENBQThFLEdBQTlFLENBQWIsRUFDQSxVQUFVQyxFQUFWLEVBQWN6QixJQUFkLEVBQXFCO0FBQ3BCOUMsY0FBVSxDQUFFLGFBQWE4QyxJQUFiLEdBQW9CLEdBQXRCLENBQVYsR0FBd0NBLElBQUksQ0FBQ3BNLFdBQUwsRUFBeEM7QUFDQSxHQUhEOztBQUtBLFdBQVN4QyxXQUFULENBQXNCSCxHQUF0QixFQUE0QjtBQUUzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQUl4QyxNQUFNLEdBQUcsQ0FBQyxDQUFDd0MsR0FBRixJQUFTLFlBQVlBLEdBQXJCLElBQTRCQSxHQUFHLENBQUN4QyxNQUE3QztBQUFBLFFBQ0N1RCxJQUFJLEdBQUd1TSxNQUFNLENBQUV0TixHQUFGLENBRGQ7O0FBR0EsUUFBS3dNLFVBQVUsQ0FBRXhNLEdBQUYsQ0FBVixJQUFxQnlNLFFBQVEsQ0FBRXpNLEdBQUYsQ0FBbEMsRUFBNEM7QUFDM0MsYUFBTyxLQUFQO0FBQ0E7O0FBRUQsV0FBT2UsSUFBSSxLQUFLLE9BQVQsSUFBb0J2RCxNQUFNLEtBQUssQ0FBL0IsSUFDTixPQUFPQSxNQUFQLEtBQWtCLFFBQWxCLElBQThCQSxNQUFNLEdBQUcsQ0FBdkMsSUFBOENBLE1BQU0sR0FBRyxDQUFYLElBQWtCd0MsR0FEL0Q7QUFFQTs7QUFDRCxNQUFJeVEsTUFBTTtBQUNWOzs7Ozs7Ozs7O0FBVUUsWUFBVTVULE1BQVYsRUFBbUI7QUFDckIsUUFBSVUsQ0FBSjtBQUFBLFFBQ0NnUCxPQUREO0FBQUEsUUFFQ21FLElBRkQ7QUFBQSxRQUdDQyxPQUhEO0FBQUEsUUFJQ0MsS0FKRDtBQUFBLFFBS0NDLFFBTEQ7QUFBQSxRQU1DQyxPQU5EO0FBQUEsUUFPQ0MsTUFQRDtBQUFBLFFBUUNDLGdCQVJEO0FBQUEsUUFTQ0MsU0FURDtBQUFBLFFBVUNDLFlBVkQ7QUFBQSxRQVlDO0FBQ0FDLGVBYkQ7QUFBQSxRQWNDMVEsUUFkRDtBQUFBLFFBZUMyUSxPQWZEO0FBQUEsUUFnQkNDLGNBaEJEO0FBQUEsUUFpQkNDLFNBakJEO0FBQUEsUUFrQkNDLGFBbEJEO0FBQUEsUUFtQkNuVSxPQW5CRDtBQUFBLFFBb0JDb1UsUUFwQkQ7QUFBQSxRQXNCQztBQUNBbEMsV0FBTyxHQUFHLFdBQVcsSUFBSSxJQUFJbUMsSUFBSixFQXZCMUI7QUFBQSxRQXdCQ0MsWUFBWSxHQUFHN1UsTUFBTSxDQUFDNEQsUUF4QnZCO0FBQUEsUUF5QkNrUixPQUFPLEdBQUcsQ0F6Qlg7QUFBQSxRQTBCQ0MsSUFBSSxHQUFHLENBMUJSO0FBQUEsUUEyQkNDLFVBQVUsR0FBR0MsV0FBVyxFQTNCekI7QUFBQSxRQTRCQ0MsVUFBVSxHQUFHRCxXQUFXLEVBNUJ6QjtBQUFBLFFBNkJDRSxhQUFhLEdBQUdGLFdBQVcsRUE3QjVCO0FBQUEsUUE4QkNHLHNCQUFzQixHQUFHSCxXQUFXLEVBOUJyQztBQUFBLFFBK0JDSSxTQUFTLEdBQUcsVUFBVTNTLENBQVYsRUFBYUMsQ0FBYixFQUFpQjtBQUM1QixVQUFLRCxDQUFDLEtBQUtDLENBQVgsRUFBZTtBQUNkMFIsb0JBQVksR0FBRyxJQUFmO0FBQ0E7O0FBQ0QsYUFBTyxDQUFQO0FBQ0EsS0FwQ0Y7QUFBQSxRQXNDQztBQUNBL0UsVUFBTSxHQUFLLEVBQUYsQ0FBT0MsY0F2Q2pCO0FBQUEsUUF3Q0NSLEdBQUcsR0FBRyxFQXhDUDtBQUFBLFFBeUNDdUcsR0FBRyxHQUFHdkcsR0FBRyxDQUFDdUcsR0F6Q1g7QUFBQSxRQTBDQ0MsVUFBVSxHQUFHeEcsR0FBRyxDQUFDck4sSUExQ2xCO0FBQUEsUUEyQ0NBLElBQUksR0FBR3FOLEdBQUcsQ0FBQ3JOLElBM0NaO0FBQUEsUUE0Q0NVLEtBQUssR0FBRzJNLEdBQUcsQ0FBQzNNLEtBNUNiO0FBQUEsUUE4Q0M7QUFDQTtBQUNBWCxXQUFPLEdBQUcsVUFBVStULElBQVYsRUFBZ0IxVSxJQUFoQixFQUF1QjtBQUNoQyxVQUFJSixDQUFDLEdBQUcsQ0FBUjtBQUFBLFVBQ0NvUixHQUFHLEdBQUcwRCxJQUFJLENBQUM3VSxNQURaOztBQUVBLGFBQVFELENBQUMsR0FBR29SLEdBQVosRUFBaUJwUixDQUFDLEVBQWxCLEVBQXVCO0FBQ3RCLFlBQUs4VSxJQUFJLENBQUU5VSxDQUFGLENBQUosS0FBY0ksSUFBbkIsRUFBMEI7QUFDekIsaUJBQU9KLENBQVA7QUFDQTtBQUNEOztBQUNELGFBQU8sQ0FBQyxDQUFSO0FBQ0EsS0F6REY7QUFBQSxRQTJEQytVLFFBQVEsR0FBRyw4RUFDVixtREE1REY7QUFBQSxRQThEQztBQUVBO0FBQ0FDLGNBQVUsR0FBRyxxQkFqRWQ7QUFBQSxRQW1FQztBQUNBQyxjQUFVLEdBQUcsNEJBQTRCRCxVQUE1QixHQUNaLHlDQXJFRjtBQUFBLFFBdUVDO0FBQ0FFLGNBQVUsR0FBRyxRQUFRRixVQUFSLEdBQXFCLElBQXJCLEdBQTRCQyxVQUE1QixHQUF5QyxNQUF6QyxHQUFrREQsVUFBbEQsR0FFWjtBQUNBLG1CQUhZLEdBR01BLFVBSE4sR0FLWjtBQUNBO0FBQ0EsOERBUFksR0FPaURDLFVBUGpELEdBTzhELE1BUDlELEdBUVpELFVBUlksR0FRQyxNQWhGZjtBQUFBLFFBa0ZDRyxPQUFPLEdBQUcsT0FBT0YsVUFBUCxHQUFvQixVQUFwQixHQUVUO0FBQ0E7QUFDQSwyREFKUyxHQU1UO0FBQ0EsOEJBUFMsR0FPb0JDLFVBUHBCLEdBT2lDLE1BUGpDLEdBU1Q7QUFDQSxRQVZTLEdBV1QsUUE3RkY7QUFBQSxRQStGQztBQUNBRSxlQUFXLEdBQUcsSUFBSUMsTUFBSixDQUFZTCxVQUFVLEdBQUcsR0FBekIsRUFBOEIsR0FBOUIsQ0FoR2Y7QUFBQSxRQWlHQ00sS0FBSyxHQUFHLElBQUlELE1BQUosQ0FBWSxNQUFNTCxVQUFOLEdBQW1CLDZCQUFuQixHQUNuQkEsVUFEbUIsR0FDTixJQUROLEVBQ1ksR0FEWixDQWpHVDtBQUFBLFFBb0dDTyxNQUFNLEdBQUcsSUFBSUYsTUFBSixDQUFZLE1BQU1MLFVBQU4sR0FBbUIsSUFBbkIsR0FBMEJBLFVBQTFCLEdBQXVDLEdBQW5ELENBcEdWO0FBQUEsUUFxR0NRLFlBQVksR0FBRyxJQUFJSCxNQUFKLENBQVksTUFBTUwsVUFBTixHQUFtQixVQUFuQixHQUFnQ0EsVUFBaEMsR0FBNkMsR0FBN0MsR0FBbURBLFVBQW5ELEdBQzFCLEdBRGMsQ0FyR2hCO0FBQUEsUUF1R0NTLFFBQVEsR0FBRyxJQUFJSixNQUFKLENBQVlMLFVBQVUsR0FBRyxJQUF6QixDQXZHWjtBQUFBLFFBeUdDVSxPQUFPLEdBQUcsSUFBSUwsTUFBSixDQUFZRixPQUFaLENBekdYO0FBQUEsUUEwR0NRLFdBQVcsR0FBRyxJQUFJTixNQUFKLENBQVksTUFBTUosVUFBTixHQUFtQixHQUEvQixDQTFHZjtBQUFBLFFBNEdDVyxTQUFTLEdBQUc7QUFDWCxZQUFNLElBQUlQLE1BQUosQ0FBWSxRQUFRSixVQUFSLEdBQXFCLEdBQWpDLENBREs7QUFFWCxlQUFTLElBQUlJLE1BQUosQ0FBWSxVQUFVSixVQUFWLEdBQXVCLEdBQW5DLENBRkU7QUFHWCxhQUFPLElBQUlJLE1BQUosQ0FBWSxPQUFPSixVQUFQLEdBQW9CLE9BQWhDLENBSEk7QUFJWCxjQUFRLElBQUlJLE1BQUosQ0FBWSxNQUFNSCxVQUFsQixDQUpHO0FBS1gsZ0JBQVUsSUFBSUcsTUFBSixDQUFZLE1BQU1GLE9BQWxCLENBTEM7QUFNWCxlQUFTLElBQUlFLE1BQUosQ0FBWSwyREFDcEJMLFVBRG9CLEdBQ1AsOEJBRE8sR0FDMEJBLFVBRDFCLEdBQ3VDLGFBRHZDLEdBRXBCQSxVQUZvQixHQUVQLFlBRk8sR0FFUUEsVUFGUixHQUVxQixRQUZqQyxFQUUyQyxHQUYzQyxDQU5FO0FBU1gsY0FBUSxJQUFJSyxNQUFKLENBQVksU0FBU04sUUFBVCxHQUFvQixJQUFoQyxFQUFzQyxHQUF0QyxDQVRHO0FBV1g7QUFDQTtBQUNBLHNCQUFnQixJQUFJTSxNQUFKLENBQVksTUFBTUwsVUFBTixHQUMzQixrREFEMkIsR0FDMEJBLFVBRDFCLEdBRTNCLGtCQUYyQixHQUVOQSxVQUZNLEdBRU8sa0JBRm5CLEVBRXVDLEdBRnZDO0FBYkwsS0E1R2I7QUFBQSxRQThIQ2EsS0FBSyxHQUFHLFFBOUhUO0FBQUEsUUErSENDLE9BQU8sR0FBRyxxQ0EvSFg7QUFBQSxRQWdJQ0MsT0FBTyxHQUFHLFFBaElYO0FBQUEsUUFrSUNDLE9BQU8sR0FBRyx3QkFsSVg7QUFBQSxRQW9JQztBQUNBQyxjQUFVLEdBQUcsa0NBcklkO0FBQUEsUUF1SUNDLFFBQVEsR0FBRyxNQXZJWjtBQUFBLFFBeUlDO0FBQ0E7QUFDQUMsYUFBUyxHQUFHLElBQUlkLE1BQUosQ0FBWSx5QkFBeUJMLFVBQXpCLEdBQXNDLHNCQUFsRCxFQUEwRSxHQUExRSxDQTNJYjtBQUFBLFFBNElDb0IsU0FBUyxHQUFHLFVBQVVDLE1BQVYsRUFBa0JDLE1BQWxCLEVBQTJCO0FBQ3RDLFVBQUlDLElBQUksR0FBRyxPQUFPRixNQUFNLENBQUMzVSxLQUFQLENBQWMsQ0FBZCxDQUFQLEdBQTJCLE9BQXRDO0FBRUEsYUFBTzRVLE1BQU0sR0FFWjtBQUNBQSxZQUhZLEdBS1o7QUFDQTtBQUNBO0FBQ0E7QUFDQUMsVUFBSSxHQUFHLENBQVAsR0FDQ0MsTUFBTSxDQUFDQyxZQUFQLENBQXFCRixJQUFJLEdBQUcsT0FBNUIsQ0FERCxHQUVDQyxNQUFNLENBQUNDLFlBQVAsQ0FBcUJGLElBQUksSUFBSSxFQUFSLEdBQWEsTUFBbEMsRUFBMENBLElBQUksR0FBRyxLQUFQLEdBQWUsTUFBekQsQ0FYRjtBQVlBLEtBM0pGO0FBQUEsUUE2SkM7QUFDQTtBQUNBRyxjQUFVLEdBQUcscURBL0pkO0FBQUEsUUFnS0NDLFVBQVUsR0FBRyxVQUFVQyxFQUFWLEVBQWNDLFdBQWQsRUFBNEI7QUFDeEMsVUFBS0EsV0FBTCxFQUFtQjtBQUVsQjtBQUNBLFlBQUtELEVBQUUsS0FBSyxJQUFaLEVBQW1CO0FBQ2xCLGlCQUFPLFFBQVA7QUFDQSxTQUxpQixDQU9sQjs7O0FBQ0EsZUFBT0EsRUFBRSxDQUFDbFYsS0FBSCxDQUFVLENBQVYsRUFBYSxDQUFDLENBQWQsSUFBb0IsSUFBcEIsR0FDTmtWLEVBQUUsQ0FBQ0UsVUFBSCxDQUFlRixFQUFFLENBQUMzVyxNQUFILEdBQVksQ0FBM0IsRUFBK0IwTyxRQUEvQixDQUF5QyxFQUF6QyxDQURNLEdBQzBDLEdBRGpEO0FBRUEsT0FYdUMsQ0FheEM7OztBQUNBLGFBQU8sT0FBT2lJLEVBQWQ7QUFDQSxLQS9LRjtBQUFBLFFBaUxDO0FBQ0E7QUFDQTtBQUNBO0FBQ0FHLGlCQUFhLEdBQUcsWUFBVztBQUMxQm5ELGlCQUFXO0FBQ1gsS0F2TEY7QUFBQSxRQXlMQ29ELGtCQUFrQixHQUFHQyxhQUFhLENBQ2pDLFVBQVU3VyxJQUFWLEVBQWlCO0FBQ2hCLGFBQU9BLElBQUksQ0FBQzhXLFFBQUwsS0FBa0IsSUFBbEIsSUFBMEI5VyxJQUFJLENBQUNnTCxRQUFMLENBQWNoRyxXQUFkLE9BQWdDLFVBQWpFO0FBQ0EsS0FIZ0MsRUFJakM7QUFBRStSLFNBQUcsRUFBRSxZQUFQO0FBQXFCQyxVQUFJLEVBQUU7QUFBM0IsS0FKaUMsQ0F6TG5DLENBRHFCLENBaU1yQjs7O0FBQ0EsUUFBSTtBQUNIcFcsVUFBSSxDQUFDWSxLQUFMLENBQ0d5TSxHQUFHLEdBQUczTSxLQUFLLENBQUNtQixJQUFOLENBQVlzUixZQUFZLENBQUNrRCxVQUF6QixDQURULEVBRUNsRCxZQUFZLENBQUNrRCxVQUZkLEVBREcsQ0FNSDtBQUNBO0FBQ0E7O0FBQ0FoSixTQUFHLENBQUU4RixZQUFZLENBQUNrRCxVQUFiLENBQXdCcFgsTUFBMUIsQ0FBSCxDQUFzQzRJLFFBQXRDO0FBQ0EsS0FWRCxDQVVFLE9BQVF5TyxDQUFSLEVBQVk7QUFDYnRXLFVBQUksR0FBRztBQUFFWSxhQUFLLEVBQUV5TSxHQUFHLENBQUNwTyxNQUFKLEdBRWY7QUFDQSxrQkFBVTJSLE1BQVYsRUFBa0IyRixHQUFsQixFQUF3QjtBQUN2QjFDLG9CQUFVLENBQUNqVCxLQUFYLENBQWtCZ1EsTUFBbEIsRUFBMEJsUSxLQUFLLENBQUNtQixJQUFOLENBQVkwVSxHQUFaLENBQTFCO0FBQ0EsU0FMYyxHQU9mO0FBQ0E7QUFDQSxrQkFBVTNGLE1BQVYsRUFBa0IyRixHQUFsQixFQUF3QjtBQUN2QixjQUFJbEcsQ0FBQyxHQUFHTyxNQUFNLENBQUMzUixNQUFmO0FBQUEsY0FDQ0QsQ0FBQyxHQUFHLENBREwsQ0FEdUIsQ0FJdkI7O0FBQ0EsaUJBQVU0UixNQUFNLENBQUVQLENBQUMsRUFBSCxDQUFOLEdBQWdCa0csR0FBRyxDQUFFdlgsQ0FBQyxFQUFILENBQTdCLEVBQXlDLENBQUU7O0FBQzNDNFIsZ0JBQU0sQ0FBQzNSLE1BQVAsR0FBZ0JvUixDQUFDLEdBQUcsQ0FBcEI7QUFDQTtBQWhCSyxPQUFQO0FBa0JBOztBQUVELGFBQVM2QixNQUFULENBQWlCN1MsUUFBakIsRUFBMkI0UCxPQUEzQixFQUFvQ3FDLE9BQXBDLEVBQTZDa0YsSUFBN0MsRUFBb0Q7QUFDbkQsVUFBSUMsQ0FBSjtBQUFBLFVBQU96WCxDQUFQO0FBQUEsVUFBVUksSUFBVjtBQUFBLFVBQWdCc1gsR0FBaEI7QUFBQSxVQUFxQnpTLEtBQXJCO0FBQUEsVUFBNEIwUyxNQUE1QjtBQUFBLFVBQW9DQyxXQUFwQztBQUFBLFVBQ0NDLFVBQVUsR0FBRzVILE9BQU8sSUFBSUEsT0FBTyxDQUFDNkgsYUFEakM7QUFBQSxVQUdDO0FBQ0FqUCxjQUFRLEdBQUdvSCxPQUFPLEdBQUdBLE9BQU8sQ0FBQ3BILFFBQVgsR0FBc0IsQ0FKekM7QUFNQXlKLGFBQU8sR0FBR0EsT0FBTyxJQUFJLEVBQXJCLENBUG1ELENBU25EOztBQUNBLFVBQUssT0FBT2pTLFFBQVAsS0FBb0IsUUFBcEIsSUFBZ0MsQ0FBQ0EsUUFBakMsSUFDSndJLFFBQVEsS0FBSyxDQUFiLElBQWtCQSxRQUFRLEtBQUssQ0FBL0IsSUFBb0NBLFFBQVEsS0FBSyxFQURsRCxFQUN1RDtBQUV0RCxlQUFPeUosT0FBUDtBQUNBLE9BZGtELENBZ0JuRDs7O0FBQ0EsVUFBSyxDQUFDa0YsSUFBTixFQUFhO0FBQ1o1RCxtQkFBVyxDQUFFM0QsT0FBRixDQUFYO0FBQ0FBLGVBQU8sR0FBR0EsT0FBTyxJQUFJL00sUUFBckI7O0FBRUEsWUFBSzRRLGNBQUwsRUFBc0I7QUFFckI7QUFDQTtBQUNBLGNBQUtqTCxRQUFRLEtBQUssRUFBYixLQUFxQjVELEtBQUssR0FBR2dSLFVBQVUsQ0FBQ25LLElBQVgsQ0FBaUJ6TCxRQUFqQixDQUE3QixDQUFMLEVBQWtFO0FBRWpFO0FBQ0EsZ0JBQU9vWCxDQUFDLEdBQUd4UyxLQUFLLENBQUUsQ0FBRixDQUFoQixFQUEwQjtBQUV6QjtBQUNBLGtCQUFLNEQsUUFBUSxLQUFLLENBQWxCLEVBQXNCO0FBQ3JCLG9CQUFPekksSUFBSSxHQUFHNlAsT0FBTyxDQUFDOEgsY0FBUixDQUF3Qk4sQ0FBeEIsQ0FBZCxFQUE4QztBQUU3QztBQUNBO0FBQ0E7QUFDQSxzQkFBS3JYLElBQUksQ0FBQzRYLEVBQUwsS0FBWVAsQ0FBakIsRUFBcUI7QUFDcEJuRiwyQkFBTyxDQUFDdFIsSUFBUixDQUFjWixJQUFkO0FBQ0EsMkJBQU9rUyxPQUFQO0FBQ0E7QUFDRCxpQkFURCxNQVNPO0FBQ04seUJBQU9BLE9BQVA7QUFDQSxpQkFab0IsQ0FjdEI7O0FBQ0MsZUFmRCxNQWVPO0FBRU47QUFDQTtBQUNBO0FBQ0Esb0JBQUt1RixVQUFVLEtBQU16WCxJQUFJLEdBQUd5WCxVQUFVLENBQUNFLGNBQVgsQ0FBMkJOLENBQTNCLENBQWIsQ0FBVixJQUNKeEQsUUFBUSxDQUFFaEUsT0FBRixFQUFXN1AsSUFBWCxDQURKLElBRUpBLElBQUksQ0FBQzRYLEVBQUwsS0FBWVAsQ0FGYixFQUVpQjtBQUVoQm5GLHlCQUFPLENBQUN0UixJQUFSLENBQWNaLElBQWQ7QUFDQSx5QkFBT2tTLE9BQVA7QUFDQTtBQUNELGVBOUJ3QixDQWdDMUI7O0FBQ0MsYUFqQ0QsTUFpQ08sSUFBS3JOLEtBQUssQ0FBRSxDQUFGLENBQVYsRUFBa0I7QUFDeEJqRSxrQkFBSSxDQUFDWSxLQUFMLENBQVkwUSxPQUFaLEVBQXFCckMsT0FBTyxDQUFDZ0ksb0JBQVIsQ0FBOEI1WCxRQUE5QixDQUFyQjtBQUNBLHFCQUFPaVMsT0FBUCxDQUZ3QixDQUl6QjtBQUNDLGFBTE0sTUFLQSxJQUFLLENBQUVtRixDQUFDLEdBQUd4UyxLQUFLLENBQUUsQ0FBRixDQUFYLEtBQXNCK0osT0FBTyxDQUFDa0osc0JBQTlCLElBQ1hqSSxPQUFPLENBQUNpSSxzQkFERixFQUMyQjtBQUVqQ2xYLGtCQUFJLENBQUNZLEtBQUwsQ0FBWTBRLE9BQVosRUFBcUJyQyxPQUFPLENBQUNpSSxzQkFBUixDQUFnQ1QsQ0FBaEMsQ0FBckI7QUFDQSxxQkFBT25GLE9BQVA7QUFDQTtBQUNELFdBbkRvQixDQXFEckI7OztBQUNBLGNBQUt0RCxPQUFPLENBQUNtSixHQUFSLElBQ0osQ0FBQ3pELHNCQUFzQixDQUFFclUsUUFBUSxHQUFHLEdBQWIsQ0FEbkIsS0FFRixDQUFDMFQsU0FBRCxJQUFjLENBQUNBLFNBQVMsQ0FBQ3FFLElBQVYsQ0FBZ0IvWCxRQUFoQixDQUZiLE9BSUo7QUFDQTtBQUNFd0ksa0JBQVEsS0FBSyxDQUFiLElBQWtCb0gsT0FBTyxDQUFDN0UsUUFBUixDQUFpQmhHLFdBQWpCLE9BQW1DLFFBTm5ELENBQUwsRUFNcUU7QUFFcEV3Uyx1QkFBVyxHQUFHdlgsUUFBZDtBQUNBd1gsc0JBQVUsR0FBRzVILE9BQWIsQ0FIb0UsQ0FLcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsZ0JBQUtwSCxRQUFRLEtBQUssQ0FBYixLQUNGNE0sUUFBUSxDQUFDMkMsSUFBVCxDQUFlL1gsUUFBZixLQUE2Qm1WLFlBQVksQ0FBQzRDLElBQWIsQ0FBbUIvWCxRQUFuQixDQUQzQixDQUFMLEVBQ2tFO0FBRWpFO0FBQ0F3WCx3QkFBVSxHQUFHM0IsUUFBUSxDQUFDa0MsSUFBVCxDQUFlL1gsUUFBZixLQUE2QmdZLFdBQVcsQ0FBRXBJLE9BQU8sQ0FBQ2hOLFVBQVYsQ0FBeEMsSUFDWmdOLE9BREQsQ0FIaUUsQ0FNakU7QUFDQTs7QUFDQSxrQkFBSzRILFVBQVUsS0FBSzVILE9BQWYsSUFBMEIsQ0FBQ2pCLE9BQU8sQ0FBQ3NKLEtBQXhDLEVBQWdEO0FBRS9DO0FBQ0Esb0JBQU9aLEdBQUcsR0FBR3pILE9BQU8sQ0FBQ2hLLFlBQVIsQ0FBc0IsSUFBdEIsQ0FBYixFQUE4QztBQUM3Q3lSLHFCQUFHLEdBQUdBLEdBQUcsQ0FBQzFTLE9BQUosQ0FBYTBSLFVBQWIsRUFBeUJDLFVBQXpCLENBQU47QUFDQSxpQkFGRCxNQUVPO0FBQ04xRyx5QkFBTyxDQUFDSixZQUFSLENBQXNCLElBQXRCLEVBQThCNkgsR0FBRyxHQUFHM0YsT0FBcEM7QUFDQTtBQUNELGVBaEJnRSxDQWtCakU7OztBQUNBNEYsb0JBQU0sR0FBR3JFLFFBQVEsQ0FBRWpULFFBQUYsQ0FBakI7QUFDQUwsZUFBQyxHQUFHMlgsTUFBTSxDQUFDMVgsTUFBWDs7QUFDQSxxQkFBUUQsQ0FBQyxFQUFULEVBQWM7QUFDYjJYLHNCQUFNLENBQUUzWCxDQUFGLENBQU4sR0FBYyxDQUFFMFgsR0FBRyxHQUFHLE1BQU1BLEdBQVQsR0FBZSxRQUFwQixJQUFpQyxHQUFqQyxHQUNiYSxVQUFVLENBQUVaLE1BQU0sQ0FBRTNYLENBQUYsQ0FBUixDQURYO0FBRUE7O0FBQ0Q0WCx5QkFBVyxHQUFHRCxNQUFNLENBQUNhLElBQVAsQ0FBYSxHQUFiLENBQWQ7QUFDQTs7QUFFRCxnQkFBSTtBQUNIeFgsa0JBQUksQ0FBQ1ksS0FBTCxDQUFZMFEsT0FBWixFQUNDdUYsVUFBVSxDQUFDOVQsZ0JBQVgsQ0FBNkI2VCxXQUE3QixDQUREO0FBR0EscUJBQU90RixPQUFQO0FBQ0EsYUFMRCxDQUtFLE9BQVFtRyxRQUFSLEVBQW1CO0FBQ3BCL0Qsb0NBQXNCLENBQUVyVSxRQUFGLEVBQVksSUFBWixDQUF0QjtBQUNBLGFBUEQsU0FPVTtBQUNULGtCQUFLcVgsR0FBRyxLQUFLM0YsT0FBYixFQUF1QjtBQUN0QjlCLHVCQUFPLENBQUN5SSxlQUFSLENBQXlCLElBQXpCO0FBQ0E7QUFDRDtBQUNEO0FBQ0Q7QUFDRCxPQXhJa0QsQ0EwSW5EOzs7QUFDQSxhQUFPbEYsTUFBTSxDQUFFblQsUUFBUSxDQUFDMkUsT0FBVCxDQUFrQnNRLEtBQWxCLEVBQXlCLElBQXpCLENBQUYsRUFBbUNyRixPQUFuQyxFQUE0Q3FDLE9BQTVDLEVBQXFEa0YsSUFBckQsQ0FBYjtBQUNBO0FBRUQ7Ozs7Ozs7O0FBTUEsYUFBU2pELFdBQVQsR0FBdUI7QUFDdEIsVUFBSW9FLElBQUksR0FBRyxFQUFYOztBQUVBLGVBQVNDLEtBQVQsQ0FBZ0JDLEdBQWhCLEVBQXFCblMsS0FBckIsRUFBNkI7QUFFNUI7QUFDQSxZQUFLaVMsSUFBSSxDQUFDM1gsSUFBTCxDQUFXNlgsR0FBRyxHQUFHLEdBQWpCLElBQXlCMUYsSUFBSSxDQUFDMkYsV0FBbkMsRUFBaUQ7QUFFaEQ7QUFDQSxpQkFBT0YsS0FBSyxDQUFFRCxJQUFJLENBQUNJLEtBQUwsRUFBRixDQUFaO0FBQ0E7O0FBQ0QsZUFBU0gsS0FBSyxDQUFFQyxHQUFHLEdBQUcsR0FBUixDQUFMLEdBQXFCblMsS0FBOUI7QUFDQTs7QUFDRCxhQUFPa1MsS0FBUDtBQUNBO0FBRUQ7Ozs7OztBQUlBLGFBQVNJLFlBQVQsQ0FBdUJuTCxFQUF2QixFQUE0QjtBQUMzQkEsUUFBRSxDQUFFa0UsT0FBRixDQUFGLEdBQWdCLElBQWhCO0FBQ0EsYUFBT2xFLEVBQVA7QUFDQTtBQUVEOzs7Ozs7QUFJQSxhQUFTb0wsTUFBVCxDQUFpQnBMLEVBQWpCLEVBQXNCO0FBQ3JCLFVBQUlxTCxFQUFFLEdBQUdoVyxRQUFRLENBQUNnRixhQUFULENBQXdCLFVBQXhCLENBQVQ7O0FBRUEsVUFBSTtBQUNILGVBQU8sQ0FBQyxDQUFDMkYsRUFBRSxDQUFFcUwsRUFBRixDQUFYO0FBQ0EsT0FGRCxDQUVFLE9BQVE1QixDQUFSLEVBQVk7QUFDYixlQUFPLEtBQVA7QUFDQSxPQUpELFNBSVU7QUFFVDtBQUNBLFlBQUs0QixFQUFFLENBQUNqVyxVQUFSLEVBQXFCO0FBQ3BCaVcsWUFBRSxDQUFDalcsVUFBSCxDQUFjMkYsV0FBZCxDQUEyQnNRLEVBQTNCO0FBQ0EsU0FMUSxDQU9UOzs7QUFDQUEsVUFBRSxHQUFHLElBQUw7QUFDQTtBQUNEO0FBRUQ7Ozs7Ozs7QUFLQSxhQUFTQyxTQUFULENBQW9CQyxLQUFwQixFQUEyQkMsT0FBM0IsRUFBcUM7QUFDcEMsVUFBSWhMLEdBQUcsR0FBRytLLEtBQUssQ0FBQ3BHLEtBQU4sQ0FBYSxHQUFiLENBQVY7QUFBQSxVQUNDaFQsQ0FBQyxHQUFHcU8sR0FBRyxDQUFDcE8sTUFEVDs7QUFHQSxhQUFRRCxDQUFDLEVBQVQsRUFBYztBQUNibVQsWUFBSSxDQUFDbUcsVUFBTCxDQUFpQmpMLEdBQUcsQ0FBRXJPLENBQUYsQ0FBcEIsSUFBOEJxWixPQUE5QjtBQUNBO0FBQ0Q7QUFFRDs7Ozs7Ozs7QUFNQSxhQUFTRSxZQUFULENBQXVCdlgsQ0FBdkIsRUFBMEJDLENBQTFCLEVBQThCO0FBQzdCLFVBQUl1WCxHQUFHLEdBQUd2WCxDQUFDLElBQUlELENBQWY7QUFBQSxVQUNDeVgsSUFBSSxHQUFHRCxHQUFHLElBQUl4WCxDQUFDLENBQUM2RyxRQUFGLEtBQWUsQ0FBdEIsSUFBMkI1RyxDQUFDLENBQUM0RyxRQUFGLEtBQWUsQ0FBMUMsSUFDTjdHLENBQUMsQ0FBQzBYLFdBQUYsR0FBZ0J6WCxDQUFDLENBQUN5WCxXQUZwQixDQUQ2QixDQUs3Qjs7QUFDQSxVQUFLRCxJQUFMLEVBQVk7QUFDWCxlQUFPQSxJQUFQO0FBQ0EsT0FSNEIsQ0FVN0I7OztBQUNBLFVBQUtELEdBQUwsRUFBVztBQUNWLGVBQVVBLEdBQUcsR0FBR0EsR0FBRyxDQUFDRyxXQUFwQixFQUFvQztBQUNuQyxjQUFLSCxHQUFHLEtBQUt2WCxDQUFiLEVBQWlCO0FBQ2hCLG1CQUFPLENBQUMsQ0FBUjtBQUNBO0FBQ0Q7QUFDRDs7QUFFRCxhQUFPRCxDQUFDLEdBQUcsQ0FBSCxHQUFPLENBQUMsQ0FBaEI7QUFDQTtBQUVEOzs7Ozs7QUFJQSxhQUFTNFgsaUJBQVQsQ0FBNEJwVyxJQUE1QixFQUFtQztBQUNsQyxhQUFPLFVBQVVwRCxJQUFWLEVBQWlCO0FBQ3ZCLFlBQUlvUixJQUFJLEdBQUdwUixJQUFJLENBQUNnTCxRQUFMLENBQWNoRyxXQUFkLEVBQVg7QUFDQSxlQUFPb00sSUFBSSxLQUFLLE9BQVQsSUFBb0JwUixJQUFJLENBQUNvRCxJQUFMLEtBQWNBLElBQXpDO0FBQ0EsT0FIRDtBQUlBO0FBRUQ7Ozs7OztBQUlBLGFBQVNxVyxrQkFBVCxDQUE2QnJXLElBQTdCLEVBQW9DO0FBQ25DLGFBQU8sVUFBVXBELElBQVYsRUFBaUI7QUFDdkIsWUFBSW9SLElBQUksR0FBR3BSLElBQUksQ0FBQ2dMLFFBQUwsQ0FBY2hHLFdBQWQsRUFBWDtBQUNBLGVBQU8sQ0FBRW9NLElBQUksS0FBSyxPQUFULElBQW9CQSxJQUFJLEtBQUssUUFBL0IsS0FBNkNwUixJQUFJLENBQUNvRCxJQUFMLEtBQWNBLElBQWxFO0FBQ0EsT0FIRDtBQUlBO0FBRUQ7Ozs7OztBQUlBLGFBQVNzVyxvQkFBVCxDQUErQjVDLFFBQS9CLEVBQTBDO0FBRXpDO0FBQ0EsYUFBTyxVQUFVOVcsSUFBVixFQUFpQjtBQUV2QjtBQUNBO0FBQ0E7QUFDQSxZQUFLLFVBQVVBLElBQWYsRUFBc0I7QUFFckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFLQSxJQUFJLENBQUM2QyxVQUFMLElBQW1CN0MsSUFBSSxDQUFDOFcsUUFBTCxLQUFrQixLQUExQyxFQUFrRDtBQUVqRDtBQUNBLGdCQUFLLFdBQVc5VyxJQUFoQixFQUF1QjtBQUN0QixrQkFBSyxXQUFXQSxJQUFJLENBQUM2QyxVQUFyQixFQUFrQztBQUNqQyx1QkFBTzdDLElBQUksQ0FBQzZDLFVBQUwsQ0FBZ0JpVSxRQUFoQixLQUE2QkEsUUFBcEM7QUFDQSxlQUZELE1BRU87QUFDTix1QkFBTzlXLElBQUksQ0FBQzhXLFFBQUwsS0FBa0JBLFFBQXpCO0FBQ0E7QUFDRCxhQVRnRCxDQVdqRDtBQUNBOzs7QUFDQSxtQkFBTzlXLElBQUksQ0FBQzJaLFVBQUwsS0FBb0I3QyxRQUFwQixJQUVOOztBQUNBO0FBQ0E5VyxnQkFBSSxDQUFDMlosVUFBTCxLQUFvQixDQUFDN0MsUUFBckIsSUFDQUYsa0JBQWtCLENBQUU1VyxJQUFGLENBQWxCLEtBQStCOFcsUUFMaEM7QUFNQTs7QUFFRCxpQkFBTzlXLElBQUksQ0FBQzhXLFFBQUwsS0FBa0JBLFFBQXpCLENBOUJxQixDQWdDdEI7QUFDQTtBQUNBO0FBQ0MsU0FuQ0QsTUFtQ08sSUFBSyxXQUFXOVcsSUFBaEIsRUFBdUI7QUFDN0IsaUJBQU9BLElBQUksQ0FBQzhXLFFBQUwsS0FBa0JBLFFBQXpCO0FBQ0EsU0ExQ3NCLENBNEN2Qjs7O0FBQ0EsZUFBTyxLQUFQO0FBQ0EsT0E5Q0Q7QUErQ0E7QUFFRDs7Ozs7O0FBSUEsYUFBUzhDLHNCQUFULENBQWlDbk0sRUFBakMsRUFBc0M7QUFDckMsYUFBT21MLFlBQVksQ0FBRSxVQUFVaUIsUUFBVixFQUFxQjtBQUN6Q0EsZ0JBQVEsR0FBRyxDQUFDQSxRQUFaO0FBQ0EsZUFBT2pCLFlBQVksQ0FBRSxVQUFVeEIsSUFBVixFQUFnQjNYLE9BQWhCLEVBQTBCO0FBQzlDLGNBQUl3UixDQUFKO0FBQUEsY0FDQzZJLFlBQVksR0FBR3JNLEVBQUUsQ0FBRSxFQUFGLEVBQU0ySixJQUFJLENBQUN2WCxNQUFYLEVBQW1CZ2EsUUFBbkIsQ0FEbEI7QUFBQSxjQUVDamEsQ0FBQyxHQUFHa2EsWUFBWSxDQUFDamEsTUFGbEIsQ0FEOEMsQ0FLOUM7O0FBQ0EsaUJBQVFELENBQUMsRUFBVCxFQUFjO0FBQ2IsZ0JBQUt3WCxJQUFJLENBQUluRyxDQUFDLEdBQUc2SSxZQUFZLENBQUVsYSxDQUFGLENBQXBCLENBQVQsRUFBeUM7QUFDeEN3WCxrQkFBSSxDQUFFbkcsQ0FBRixDQUFKLEdBQVksRUFBR3hSLE9BQU8sQ0FBRXdSLENBQUYsQ0FBUCxHQUFlbUcsSUFBSSxDQUFFbkcsQ0FBRixDQUF0QixDQUFaO0FBQ0E7QUFDRDtBQUNELFNBWGtCLENBQW5CO0FBWUEsT0Fka0IsQ0FBbkI7QUFlQTtBQUVEOzs7Ozs7O0FBS0EsYUFBU2dILFdBQVQsQ0FBc0JwSSxPQUF0QixFQUFnQztBQUMvQixhQUFPQSxPQUFPLElBQUksT0FBT0EsT0FBTyxDQUFDZ0ksb0JBQWYsS0FBd0MsV0FBbkQsSUFBa0VoSSxPQUF6RTtBQUNBLEtBMWpCb0IsQ0E0akJyQjs7O0FBQ0FqQixXQUFPLEdBQUdrRSxNQUFNLENBQUNsRSxPQUFQLEdBQWlCLEVBQTNCO0FBRUE7Ozs7OztBQUtBcUUsU0FBSyxHQUFHSCxNQUFNLENBQUNHLEtBQVAsR0FBZSxVQUFValQsSUFBVixFQUFpQjtBQUN2QyxVQUFJb0YsU0FBUyxHQUFHcEYsSUFBSSxDQUFDK1osWUFBckI7QUFBQSxVQUNDdEcsT0FBTyxHQUFHLENBQUV6VCxJQUFJLENBQUMwWCxhQUFMLElBQXNCMVgsSUFBeEIsRUFBK0JtSSxlQUQxQyxDQUR1QyxDQUl2QztBQUNBO0FBQ0E7O0FBQ0EsYUFBTyxDQUFDc04sS0FBSyxDQUFDdUMsSUFBTixDQUFZNVMsU0FBUyxJQUFJcU8sT0FBTyxJQUFJQSxPQUFPLENBQUN6SSxRQUFoQyxJQUE0QyxNQUF4RCxDQUFSO0FBQ0EsS0FSRDtBQVVBOzs7Ozs7O0FBS0F3SSxlQUFXLEdBQUdWLE1BQU0sQ0FBQ1UsV0FBUCxHQUFxQixVQUFVcEUsSUFBVixFQUFpQjtBQUNuRCxVQUFJNEssVUFBSjtBQUFBLFVBQWdCQyxTQUFoQjtBQUFBLFVBQ0M1SyxHQUFHLEdBQUdELElBQUksR0FBR0EsSUFBSSxDQUFDc0ksYUFBTCxJQUFzQnRJLElBQXpCLEdBQWdDMkUsWUFEM0MsQ0FEbUQsQ0FJbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxVQUFLMUUsR0FBRyxJQUFJdk0sUUFBUCxJQUFtQnVNLEdBQUcsQ0FBQzVHLFFBQUosS0FBaUIsQ0FBcEMsSUFBeUMsQ0FBQzRHLEdBQUcsQ0FBQ2xILGVBQW5ELEVBQXFFO0FBQ3BFLGVBQU9yRixRQUFQO0FBQ0EsT0FYa0QsQ0FhbkQ7OztBQUNBQSxjQUFRLEdBQUd1TSxHQUFYO0FBQ0FvRSxhQUFPLEdBQUczUSxRQUFRLENBQUNxRixlQUFuQjtBQUNBdUwsb0JBQWMsR0FBRyxDQUFDVCxLQUFLLENBQUVuUSxRQUFGLENBQXZCLENBaEJtRCxDQWtCbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFVBQUtpUixZQUFZLElBQUlqUixRQUFoQixLQUNGbVgsU0FBUyxHQUFHblgsUUFBUSxDQUFDb1gsV0FEbkIsS0FDb0NELFNBQVMsQ0FBQ0UsR0FBVixLQUFrQkYsU0FEM0QsRUFDdUU7QUFFdEU7QUFDQSxZQUFLQSxTQUFTLENBQUN4VixnQkFBZixFQUFrQztBQUNqQ3dWLG1CQUFTLENBQUN4VixnQkFBVixDQUE0QixRQUE1QixFQUFzQ2tTLGFBQXRDLEVBQXFELEtBQXJELEVBRGlDLENBR2xDO0FBQ0MsU0FKRCxNQUlPLElBQUtzRCxTQUFTLENBQUNHLFdBQWYsRUFBNkI7QUFDbkNILG1CQUFTLENBQUNHLFdBQVYsQ0FBdUIsVUFBdkIsRUFBbUN6RCxhQUFuQztBQUNBO0FBQ0QsT0FuQ2tELENBcUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQS9ILGFBQU8sQ0FBQ3NKLEtBQVIsR0FBZ0JXLE1BQU0sQ0FBRSxVQUFVQyxFQUFWLEVBQWU7QUFDdENyRixlQUFPLENBQUNyTCxXQUFSLENBQXFCMFEsRUFBckIsRUFBMEIxUSxXQUExQixDQUF1Q3RGLFFBQVEsQ0FBQ2dGLGFBQVQsQ0FBd0IsS0FBeEIsQ0FBdkM7QUFDQSxlQUFPLE9BQU9nUixFQUFFLENBQUNuVixnQkFBVixLQUErQixXQUEvQixJQUNOLENBQUNtVixFQUFFLENBQUNuVixnQkFBSCxDQUFxQixxQkFBckIsRUFBNkM5RCxNQUQvQztBQUVBLE9BSnFCLENBQXRCO0FBTUE7O0FBR0E7QUFDQTtBQUNBOztBQUNBK08sYUFBTyxDQUFDa0csVUFBUixHQUFxQitELE1BQU0sQ0FBRSxVQUFVQyxFQUFWLEVBQWU7QUFDM0NBLFVBQUUsQ0FBQzVTLFNBQUgsR0FBZSxHQUFmO0FBQ0EsZUFBTyxDQUFDNFMsRUFBRSxDQUFDalQsWUFBSCxDQUFpQixXQUFqQixDQUFSO0FBQ0EsT0FIMEIsQ0FBM0I7QUFLQTs7QUFHQTs7QUFDQStJLGFBQU8sQ0FBQ2lKLG9CQUFSLEdBQStCZ0IsTUFBTSxDQUFFLFVBQVVDLEVBQVYsRUFBZTtBQUNyREEsVUFBRSxDQUFDMVEsV0FBSCxDQUFnQnRGLFFBQVEsQ0FBQ3VYLGFBQVQsQ0FBd0IsRUFBeEIsQ0FBaEI7QUFDQSxlQUFPLENBQUN2QixFQUFFLENBQUNqQixvQkFBSCxDQUF5QixHQUF6QixFQUErQmhZLE1BQXZDO0FBQ0EsT0FIb0MsQ0FBckMsQ0EvRG1ELENBb0VuRDs7QUFDQStPLGFBQU8sQ0FBQ2tKLHNCQUFSLEdBQWlDbEMsT0FBTyxDQUFDb0MsSUFBUixDQUFjbFYsUUFBUSxDQUFDZ1Ysc0JBQXZCLENBQWpDLENBckVtRCxDQXVFbkQ7QUFDQTtBQUNBO0FBQ0E7O0FBQ0FsSixhQUFPLENBQUMwTCxPQUFSLEdBQWtCekIsTUFBTSxDQUFFLFVBQVVDLEVBQVYsRUFBZTtBQUN4Q3JGLGVBQU8sQ0FBQ3JMLFdBQVIsQ0FBcUIwUSxFQUFyQixFQUEwQmxCLEVBQTFCLEdBQStCakcsT0FBL0I7QUFDQSxlQUFPLENBQUM3TyxRQUFRLENBQUN5WCxpQkFBVixJQUErQixDQUFDelgsUUFBUSxDQUFDeVgsaUJBQVQsQ0FBNEI1SSxPQUE1QixFQUFzQzlSLE1BQTdFO0FBQ0EsT0FIdUIsQ0FBeEIsQ0EzRW1ELENBZ0ZuRDs7QUFDQSxVQUFLK08sT0FBTyxDQUFDMEwsT0FBYixFQUF1QjtBQUN0QnZILFlBQUksQ0FBQ3lILE1BQUwsQ0FBYSxJQUFiLElBQXNCLFVBQVU1QyxFQUFWLEVBQWU7QUFDcEMsY0FBSTZDLE1BQU0sR0FBRzdDLEVBQUUsQ0FBQ2hULE9BQUgsQ0FBWW1SLFNBQVosRUFBdUJDLFNBQXZCLENBQWI7QUFDQSxpQkFBTyxVQUFVaFcsSUFBVixFQUFpQjtBQUN2QixtQkFBT0EsSUFBSSxDQUFDNkYsWUFBTCxDQUFtQixJQUFuQixNQUE4QjRVLE1BQXJDO0FBQ0EsV0FGRDtBQUdBLFNBTEQ7O0FBTUExSCxZQUFJLENBQUMySCxJQUFMLENBQVcsSUFBWCxJQUFvQixVQUFVOUMsRUFBVixFQUFjL0gsT0FBZCxFQUF3QjtBQUMzQyxjQUFLLE9BQU9BLE9BQU8sQ0FBQzhILGNBQWYsS0FBa0MsV0FBbEMsSUFBaURqRSxjQUF0RCxFQUF1RTtBQUN0RSxnQkFBSTFULElBQUksR0FBRzZQLE9BQU8sQ0FBQzhILGNBQVIsQ0FBd0JDLEVBQXhCLENBQVg7QUFDQSxtQkFBTzVYLElBQUksR0FBRyxDQUFFQSxJQUFGLENBQUgsR0FBYyxFQUF6QjtBQUNBO0FBQ0QsU0FMRDtBQU1BLE9BYkQsTUFhTztBQUNOK1MsWUFBSSxDQUFDeUgsTUFBTCxDQUFhLElBQWIsSUFBdUIsVUFBVTVDLEVBQVYsRUFBZTtBQUNyQyxjQUFJNkMsTUFBTSxHQUFHN0MsRUFBRSxDQUFDaFQsT0FBSCxDQUFZbVIsU0FBWixFQUF1QkMsU0FBdkIsQ0FBYjtBQUNBLGlCQUFPLFVBQVVoVyxJQUFWLEVBQWlCO0FBQ3ZCLGdCQUFJb1AsSUFBSSxHQUFHLE9BQU9wUCxJQUFJLENBQUMyYSxnQkFBWixLQUFpQyxXQUFqQyxJQUNWM2EsSUFBSSxDQUFDMmEsZ0JBQUwsQ0FBdUIsSUFBdkIsQ0FERDtBQUVBLG1CQUFPdkwsSUFBSSxJQUFJQSxJQUFJLENBQUM5SSxLQUFMLEtBQWVtVSxNQUE5QjtBQUNBLFdBSkQ7QUFLQSxTQVBELENBRE0sQ0FVTjtBQUNBOzs7QUFDQTFILFlBQUksQ0FBQzJILElBQUwsQ0FBVyxJQUFYLElBQW9CLFVBQVU5QyxFQUFWLEVBQWMvSCxPQUFkLEVBQXdCO0FBQzNDLGNBQUssT0FBT0EsT0FBTyxDQUFDOEgsY0FBZixLQUFrQyxXQUFsQyxJQUFpRGpFLGNBQXRELEVBQXVFO0FBQ3RFLGdCQUFJdEUsSUFBSjtBQUFBLGdCQUFVeFAsQ0FBVjtBQUFBLGdCQUFhMEQsS0FBYjtBQUFBLGdCQUNDdEQsSUFBSSxHQUFHNlAsT0FBTyxDQUFDOEgsY0FBUixDQUF3QkMsRUFBeEIsQ0FEUjs7QUFHQSxnQkFBSzVYLElBQUwsRUFBWTtBQUVYO0FBQ0FvUCxrQkFBSSxHQUFHcFAsSUFBSSxDQUFDMmEsZ0JBQUwsQ0FBdUIsSUFBdkIsQ0FBUDs7QUFDQSxrQkFBS3ZMLElBQUksSUFBSUEsSUFBSSxDQUFDOUksS0FBTCxLQUFlc1IsRUFBNUIsRUFBaUM7QUFDaEMsdUJBQU8sQ0FBRTVYLElBQUYsQ0FBUDtBQUNBLGVBTlUsQ0FRWDs7O0FBQ0FzRCxtQkFBSyxHQUFHdU0sT0FBTyxDQUFDMEssaUJBQVIsQ0FBMkIzQyxFQUEzQixDQUFSO0FBQ0FoWSxlQUFDLEdBQUcsQ0FBSjs7QUFDQSxxQkFBVUksSUFBSSxHQUFHc0QsS0FBSyxDQUFFMUQsQ0FBQyxFQUFILENBQXRCLEVBQWtDO0FBQ2pDd1Asb0JBQUksR0FBR3BQLElBQUksQ0FBQzJhLGdCQUFMLENBQXVCLElBQXZCLENBQVA7O0FBQ0Esb0JBQUt2TCxJQUFJLElBQUlBLElBQUksQ0FBQzlJLEtBQUwsS0FBZXNSLEVBQTVCLEVBQWlDO0FBQ2hDLHlCQUFPLENBQUU1WCxJQUFGLENBQVA7QUFDQTtBQUNEO0FBQ0Q7O0FBRUQsbUJBQU8sRUFBUDtBQUNBO0FBQ0QsU0ExQkQ7QUEyQkEsT0FySWtELENBdUluRDs7O0FBQ0ErUyxVQUFJLENBQUMySCxJQUFMLENBQVcsS0FBWCxJQUFxQjlMLE9BQU8sQ0FBQ2lKLG9CQUFSLEdBQ3BCLFVBQVUrQyxHQUFWLEVBQWUvSyxPQUFmLEVBQXlCO0FBQ3hCLFlBQUssT0FBT0EsT0FBTyxDQUFDZ0ksb0JBQWYsS0FBd0MsV0FBN0MsRUFBMkQ7QUFDMUQsaUJBQU9oSSxPQUFPLENBQUNnSSxvQkFBUixDQUE4QitDLEdBQTlCLENBQVAsQ0FEMEQsQ0FHM0Q7QUFDQyxTQUpELE1BSU8sSUFBS2hNLE9BQU8sQ0FBQ21KLEdBQWIsRUFBbUI7QUFDekIsaUJBQU9sSSxPQUFPLENBQUNsTSxnQkFBUixDQUEwQmlYLEdBQTFCLENBQVA7QUFDQTtBQUNELE9BVG1CLEdBV3BCLFVBQVVBLEdBQVYsRUFBZS9LLE9BQWYsRUFBeUI7QUFDeEIsWUFBSTdQLElBQUo7QUFBQSxZQUNDNmEsR0FBRyxHQUFHLEVBRFA7QUFBQSxZQUVDamIsQ0FBQyxHQUFHLENBRkw7QUFBQSxZQUlDO0FBQ0FzUyxlQUFPLEdBQUdyQyxPQUFPLENBQUNnSSxvQkFBUixDQUE4QitDLEdBQTlCLENBTFgsQ0FEd0IsQ0FReEI7O0FBQ0EsWUFBS0EsR0FBRyxLQUFLLEdBQWIsRUFBbUI7QUFDbEIsaUJBQVU1YSxJQUFJLEdBQUdrUyxPQUFPLENBQUV0UyxDQUFDLEVBQUgsQ0FBeEIsRUFBb0M7QUFDbkMsZ0JBQUtJLElBQUksQ0FBQ3lJLFFBQUwsS0FBa0IsQ0FBdkIsRUFBMkI7QUFDMUJvUyxpQkFBRyxDQUFDamEsSUFBSixDQUFVWixJQUFWO0FBQ0E7QUFDRDs7QUFFRCxpQkFBTzZhLEdBQVA7QUFDQTs7QUFDRCxlQUFPM0ksT0FBUDtBQUNBLE9BOUJGLENBeEltRCxDQXdLbkQ7O0FBQ0FhLFVBQUksQ0FBQzJILElBQUwsQ0FBVyxPQUFYLElBQXVCOUwsT0FBTyxDQUFDa0osc0JBQVIsSUFBa0MsVUFBVTVSLFNBQVYsRUFBcUIySixPQUFyQixFQUErQjtBQUN2RixZQUFLLE9BQU9BLE9BQU8sQ0FBQ2lJLHNCQUFmLEtBQTBDLFdBQTFDLElBQXlEcEUsY0FBOUQsRUFBK0U7QUFDOUUsaUJBQU83RCxPQUFPLENBQUNpSSxzQkFBUixDQUFnQzVSLFNBQWhDLENBQVA7QUFDQTtBQUNELE9BSkQ7QUFNQTs7QUFHQTtBQUVBOzs7QUFDQTBOLG1CQUFhLEdBQUcsRUFBaEIsQ0FyTG1ELENBdUxuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBRCxlQUFTLEdBQUcsRUFBWjs7QUFFQSxVQUFPL0UsT0FBTyxDQUFDbUosR0FBUixHQUFjbkMsT0FBTyxDQUFDb0MsSUFBUixDQUFjbFYsUUFBUSxDQUFDYSxnQkFBdkIsQ0FBckIsRUFBbUU7QUFFbEU7QUFDQTtBQUNBa1YsY0FBTSxDQUFFLFVBQVVDLEVBQVYsRUFBZTtBQUV0QixjQUFJZ0MsS0FBSixDQUZzQixDQUl0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBckgsaUJBQU8sQ0FBQ3JMLFdBQVIsQ0FBcUIwUSxFQUFyQixFQUEwQmlDLFNBQTFCLEdBQXNDLFlBQVlwSixPQUFaLEdBQXNCLFFBQXRCLEdBQ3JDLGNBRHFDLEdBQ3BCQSxPQURvQixHQUNWLDJCQURVLEdBRXJDLHdDQUZELENBVHNCLENBYXRCO0FBQ0E7QUFDQTtBQUNBOztBQUNBLGNBQUttSCxFQUFFLENBQUNuVixnQkFBSCxDQUFxQixzQkFBckIsRUFBOEM5RCxNQUFuRCxFQUE0RDtBQUMzRDhULHFCQUFTLENBQUMvUyxJQUFWLENBQWdCLFdBQVdnVSxVQUFYLEdBQXdCLGNBQXhDO0FBQ0EsV0FuQnFCLENBcUJ0QjtBQUNBOzs7QUFDQSxjQUFLLENBQUNrRSxFQUFFLENBQUNuVixnQkFBSCxDQUFxQixZQUFyQixFQUFvQzlELE1BQTFDLEVBQW1EO0FBQ2xEOFQscUJBQVMsQ0FBQy9TLElBQVYsQ0FBZ0IsUUFBUWdVLFVBQVIsR0FBcUIsWUFBckIsR0FBb0NELFFBQXBDLEdBQStDLEdBQS9EO0FBQ0EsV0F6QnFCLENBMkJ0Qjs7O0FBQ0EsY0FBSyxDQUFDbUUsRUFBRSxDQUFDblYsZ0JBQUgsQ0FBcUIsVUFBVWdPLE9BQVYsR0FBb0IsSUFBekMsRUFBZ0Q5UixNQUF0RCxFQUErRDtBQUM5RDhULHFCQUFTLENBQUMvUyxJQUFWLENBQWdCLElBQWhCO0FBQ0EsV0E5QnFCLENBZ0N0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQWthLGVBQUssR0FBR2hZLFFBQVEsQ0FBQ2dGLGFBQVQsQ0FBd0IsT0FBeEIsQ0FBUjtBQUNBZ1QsZUFBSyxDQUFDckwsWUFBTixDQUFvQixNQUFwQixFQUE0QixFQUE1QjtBQUNBcUosWUFBRSxDQUFDMVEsV0FBSCxDQUFnQjBTLEtBQWhCOztBQUNBLGNBQUssQ0FBQ2hDLEVBQUUsQ0FBQ25WLGdCQUFILENBQXFCLFdBQXJCLEVBQW1DOUQsTUFBekMsRUFBa0Q7QUFDakQ4VCxxQkFBUyxDQUFDL1MsSUFBVixDQUFnQixRQUFRZ1UsVUFBUixHQUFxQixPQUFyQixHQUErQkEsVUFBL0IsR0FBNEMsSUFBNUMsR0FDZkEsVUFEZSxHQUNGLGNBRGQ7QUFFQSxXQTNDcUIsQ0E2Q3RCO0FBQ0E7QUFDQTs7O0FBQ0EsY0FBSyxDQUFDa0UsRUFBRSxDQUFDblYsZ0JBQUgsQ0FBcUIsVUFBckIsRUFBa0M5RCxNQUF4QyxFQUFpRDtBQUNoRDhULHFCQUFTLENBQUMvUyxJQUFWLENBQWdCLFVBQWhCO0FBQ0EsV0FsRHFCLENBb0R0QjtBQUNBO0FBQ0E7OztBQUNBLGNBQUssQ0FBQ2tZLEVBQUUsQ0FBQ25WLGdCQUFILENBQXFCLE9BQU9nTyxPQUFQLEdBQWlCLElBQXRDLEVBQTZDOVIsTUFBbkQsRUFBNEQ7QUFDM0Q4VCxxQkFBUyxDQUFDL1MsSUFBVixDQUFnQixVQUFoQjtBQUNBLFdBekRxQixDQTJEdEI7QUFDQTs7O0FBQ0FrWSxZQUFFLENBQUNuVixnQkFBSCxDQUFxQixNQUFyQjtBQUNBZ1EsbUJBQVMsQ0FBQy9TLElBQVYsQ0FBZ0IsYUFBaEI7QUFDQSxTQS9ESyxDQUFOO0FBaUVBaVksY0FBTSxDQUFFLFVBQVVDLEVBQVYsRUFBZTtBQUN0QkEsWUFBRSxDQUFDaUMsU0FBSCxHQUFlLHdDQUNkLGdEQURELENBRHNCLENBSXRCO0FBQ0E7O0FBQ0EsY0FBSUQsS0FBSyxHQUFHaFksUUFBUSxDQUFDZ0YsYUFBVCxDQUF3QixPQUF4QixDQUFaO0FBQ0FnVCxlQUFLLENBQUNyTCxZQUFOLENBQW9CLE1BQXBCLEVBQTRCLFFBQTVCO0FBQ0FxSixZQUFFLENBQUMxUSxXQUFILENBQWdCMFMsS0FBaEIsRUFBd0JyTCxZQUF4QixDQUFzQyxNQUF0QyxFQUE4QyxHQUE5QyxFQVJzQixDQVV0QjtBQUNBOztBQUNBLGNBQUtxSixFQUFFLENBQUNuVixnQkFBSCxDQUFxQixVQUFyQixFQUFrQzlELE1BQXZDLEVBQWdEO0FBQy9DOFQscUJBQVMsQ0FBQy9TLElBQVYsQ0FBZ0IsU0FBU2dVLFVBQVQsR0FBc0IsYUFBdEM7QUFDQSxXQWRxQixDQWdCdEI7QUFDQTs7O0FBQ0EsY0FBS2tFLEVBQUUsQ0FBQ25WLGdCQUFILENBQXFCLFVBQXJCLEVBQWtDOUQsTUFBbEMsS0FBNkMsQ0FBbEQsRUFBc0Q7QUFDckQ4VCxxQkFBUyxDQUFDL1MsSUFBVixDQUFnQixVQUFoQixFQUE0QixXQUE1QjtBQUNBLFdBcEJxQixDQXNCdEI7QUFDQTs7O0FBQ0E2UyxpQkFBTyxDQUFDckwsV0FBUixDQUFxQjBRLEVBQXJCLEVBQTBCaEMsUUFBMUIsR0FBcUMsSUFBckM7O0FBQ0EsY0FBS2dDLEVBQUUsQ0FBQ25WLGdCQUFILENBQXFCLFdBQXJCLEVBQW1DOUQsTUFBbkMsS0FBOEMsQ0FBbkQsRUFBdUQ7QUFDdEQ4VCxxQkFBUyxDQUFDL1MsSUFBVixDQUFnQixVQUFoQixFQUE0QixXQUE1QjtBQUNBLFdBM0JxQixDQTZCdEI7QUFDQTs7O0FBQ0FrWSxZQUFFLENBQUNuVixnQkFBSCxDQUFxQixNQUFyQjtBQUNBZ1EsbUJBQVMsQ0FBQy9TLElBQVYsQ0FBZ0IsTUFBaEI7QUFDQSxTQWpDSyxDQUFOO0FBa0NBOztBQUVELFVBQU9nTyxPQUFPLENBQUNsUCxlQUFSLEdBQTBCa1csT0FBTyxDQUFDb0MsSUFBUixDQUFnQnZZLE9BQU8sR0FBR2dVLE9BQU8sQ0FBQ2hVLE9BQVIsSUFDMURnVSxPQUFPLENBQUN1SCxxQkFEa0QsSUFFMUR2SCxPQUFPLENBQUN3SCxrQkFGa0QsSUFHMUR4SCxPQUFPLENBQUN5SCxnQkFIa0QsSUFJMUR6SCxPQUFPLENBQUMwSCxpQkFKd0IsQ0FBakMsRUFJbUM7QUFFbEN0QyxjQUFNLENBQUUsVUFBVUMsRUFBVixFQUFlO0FBRXRCO0FBQ0E7QUFDQWxLLGlCQUFPLENBQUN3TSxpQkFBUixHQUE0QjNiLE9BQU8sQ0FBQ2dELElBQVIsQ0FBY3FXLEVBQWQsRUFBa0IsR0FBbEIsQ0FBNUIsQ0FKc0IsQ0FNdEI7QUFDQTs7QUFDQXJaLGlCQUFPLENBQUNnRCxJQUFSLENBQWNxVyxFQUFkLEVBQWtCLFdBQWxCO0FBQ0FsRix1QkFBYSxDQUFDaFQsSUFBZCxDQUFvQixJQUFwQixFQUEwQm1VLE9BQTFCO0FBQ0EsU0FWSyxDQUFOO0FBV0E7O0FBRURwQixlQUFTLEdBQUdBLFNBQVMsQ0FBQzlULE1BQVYsSUFBb0IsSUFBSW9WLE1BQUosQ0FBWXRCLFNBQVMsQ0FBQ3lFLElBQVYsQ0FBZ0IsR0FBaEIsQ0FBWixDQUFoQztBQUNBeEUsbUJBQWEsR0FBR0EsYUFBYSxDQUFDL1QsTUFBZCxJQUF3QixJQUFJb1YsTUFBSixDQUFZckIsYUFBYSxDQUFDd0UsSUFBZCxDQUFvQixHQUFwQixDQUFaLENBQXhDO0FBRUE7OztBQUVBNEIsZ0JBQVUsR0FBR3BFLE9BQU8sQ0FBQ29DLElBQVIsQ0FBY3ZFLE9BQU8sQ0FBQzRILHVCQUF0QixDQUFiLENBL1RtRCxDQWlVbkQ7QUFDQTtBQUNBOztBQUNBeEgsY0FBUSxHQUFHbUcsVUFBVSxJQUFJcEUsT0FBTyxDQUFDb0MsSUFBUixDQUFjdkUsT0FBTyxDQUFDSSxRQUF0QixDQUFkLEdBQ1YsVUFBVWpTLENBQVYsRUFBYUMsQ0FBYixFQUFpQjtBQUNoQixZQUFJeVosS0FBSyxHQUFHMVosQ0FBQyxDQUFDNkcsUUFBRixLQUFlLENBQWYsR0FBbUI3RyxDQUFDLENBQUN1RyxlQUFyQixHQUF1Q3ZHLENBQW5EO0FBQUEsWUFDQzJaLEdBQUcsR0FBRzFaLENBQUMsSUFBSUEsQ0FBQyxDQUFDZ0IsVUFEZDtBQUVBLGVBQU9qQixDQUFDLEtBQUsyWixHQUFOLElBQWEsQ0FBQyxFQUFHQSxHQUFHLElBQUlBLEdBQUcsQ0FBQzlTLFFBQUosS0FBaUIsQ0FBeEIsS0FDdkI2UyxLQUFLLENBQUN6SCxRQUFOLEdBQ0N5SCxLQUFLLENBQUN6SCxRQUFOLENBQWdCMEgsR0FBaEIsQ0FERCxHQUVDM1osQ0FBQyxDQUFDeVosdUJBQUYsSUFBNkJ6WixDQUFDLENBQUN5Wix1QkFBRixDQUEyQkUsR0FBM0IsSUFBbUMsRUFIMUMsQ0FBSCxDQUFyQjtBQUtBLE9BVFMsR0FVVixVQUFVM1osQ0FBVixFQUFhQyxDQUFiLEVBQWlCO0FBQ2hCLFlBQUtBLENBQUwsRUFBUztBQUNSLGlCQUFVQSxDQUFDLEdBQUdBLENBQUMsQ0FBQ2dCLFVBQWhCLEVBQStCO0FBQzlCLGdCQUFLaEIsQ0FBQyxLQUFLRCxDQUFYLEVBQWU7QUFDZCxxQkFBTyxJQUFQO0FBQ0E7QUFDRDtBQUNEOztBQUNELGVBQU8sS0FBUDtBQUNBLE9BbkJGO0FBcUJBOztBQUdBOztBQUNBMlMsZUFBUyxHQUFHeUYsVUFBVSxHQUN0QixVQUFVcFksQ0FBVixFQUFhQyxDQUFiLEVBQWlCO0FBRWhCO0FBQ0EsWUFBS0QsQ0FBQyxLQUFLQyxDQUFYLEVBQWU7QUFDZDBSLHNCQUFZLEdBQUcsSUFBZjtBQUNBLGlCQUFPLENBQVA7QUFDQSxTQU5lLENBUWhCOzs7QUFDQSxZQUFJaUksT0FBTyxHQUFHLENBQUM1WixDQUFDLENBQUN5Wix1QkFBSCxHQUE2QixDQUFDeFosQ0FBQyxDQUFDd1osdUJBQTlDOztBQUNBLFlBQUtHLE9BQUwsRUFBZTtBQUNkLGlCQUFPQSxPQUFQO0FBQ0EsU0FaZSxDQWNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQUEsZUFBTyxHQUFHLENBQUU1WixDQUFDLENBQUM4VixhQUFGLElBQW1COVYsQ0FBckIsTUFBOEJDLENBQUMsQ0FBQzZWLGFBQUYsSUFBbUI3VixDQUFqRCxJQUNURCxDQUFDLENBQUN5Wix1QkFBRixDQUEyQnhaLENBQTNCLENBRFMsR0FHVDtBQUNBLFNBSkQsQ0FuQmdCLENBeUJoQjs7QUFDQSxZQUFLMlosT0FBTyxHQUFHLENBQVYsSUFDRixDQUFDNU0sT0FBTyxDQUFDNk0sWUFBVCxJQUF5QjVaLENBQUMsQ0FBQ3daLHVCQUFGLENBQTJCelosQ0FBM0IsTUFBbUM0WixPQUQvRCxFQUMyRTtBQUUxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBSzVaLENBQUMsSUFBSWtCLFFBQUwsSUFBaUJsQixDQUFDLENBQUM4VixhQUFGLElBQW1CM0QsWUFBbkIsSUFDckJGLFFBQVEsQ0FBRUUsWUFBRixFQUFnQm5TLENBQWhCLENBRFQsRUFDK0I7QUFDOUIsbUJBQU8sQ0FBQyxDQUFSO0FBQ0EsV0FWeUUsQ0FZMUU7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLGNBQUtDLENBQUMsSUFBSWlCLFFBQUwsSUFBaUJqQixDQUFDLENBQUM2VixhQUFGLElBQW1CM0QsWUFBbkIsSUFDckJGLFFBQVEsQ0FBRUUsWUFBRixFQUFnQmxTLENBQWhCLENBRFQsRUFDK0I7QUFDOUIsbUJBQU8sQ0FBUDtBQUNBLFdBbkJ5RSxDQXFCMUU7OztBQUNBLGlCQUFPeVIsU0FBUyxHQUNiM1MsT0FBTyxDQUFFMlMsU0FBRixFQUFhMVIsQ0FBYixDQUFQLEdBQTBCakIsT0FBTyxDQUFFMlMsU0FBRixFQUFhelIsQ0FBYixDQURwQixHQUVmLENBRkQ7QUFHQTs7QUFFRCxlQUFPMlosT0FBTyxHQUFHLENBQVYsR0FBYyxDQUFDLENBQWYsR0FBbUIsQ0FBMUI7QUFDQSxPQXhEcUIsR0F5RHRCLFVBQVU1WixDQUFWLEVBQWFDLENBQWIsRUFBaUI7QUFFaEI7QUFDQSxZQUFLRCxDQUFDLEtBQUtDLENBQVgsRUFBZTtBQUNkMFIsc0JBQVksR0FBRyxJQUFmO0FBQ0EsaUJBQU8sQ0FBUDtBQUNBOztBQUVELFlBQUk2RixHQUFKO0FBQUEsWUFDQ3haLENBQUMsR0FBRyxDQURMO0FBQUEsWUFFQzhiLEdBQUcsR0FBRzlaLENBQUMsQ0FBQ2lCLFVBRlQ7QUFBQSxZQUdDMFksR0FBRyxHQUFHMVosQ0FBQyxDQUFDZ0IsVUFIVDtBQUFBLFlBSUM4WSxFQUFFLEdBQUcsQ0FBRS9aLENBQUYsQ0FKTjtBQUFBLFlBS0NnYSxFQUFFLEdBQUcsQ0FBRS9aLENBQUYsQ0FMTixDQVJnQixDQWVoQjs7QUFDQSxZQUFLLENBQUM2WixHQUFELElBQVEsQ0FBQ0gsR0FBZCxFQUFvQjtBQUVuQjtBQUNBO0FBQ0E7O0FBQ0E7QUFDQSxpQkFBTzNaLENBQUMsSUFBSWtCLFFBQUwsR0FBZ0IsQ0FBQyxDQUFqQixHQUNOakIsQ0FBQyxJQUFJaUIsUUFBTCxHQUFnQixDQUFoQjtBQUNBO0FBQ0E0WSxhQUFHLEdBQUcsQ0FBQyxDQUFKLEdBQ0hILEdBQUcsR0FBRyxDQUFILEdBQ0hqSSxTQUFTLEdBQ1AzUyxPQUFPLENBQUUyUyxTQUFGLEVBQWExUixDQUFiLENBQVAsR0FBMEJqQixPQUFPLENBQUUyUyxTQUFGLEVBQWF6UixDQUFiLENBRDFCLEdBRVQsQ0FQRCxDQU5tQixDQWVwQjtBQUNDLFNBaEJELE1BZ0JPLElBQUs2WixHQUFHLEtBQUtILEdBQWIsRUFBbUI7QUFDekIsaUJBQU9wQyxZQUFZLENBQUV2WCxDQUFGLEVBQUtDLENBQUwsQ0FBbkI7QUFDQSxTQWxDZSxDQW9DaEI7OztBQUNBdVgsV0FBRyxHQUFHeFgsQ0FBTjs7QUFDQSxlQUFVd1gsR0FBRyxHQUFHQSxHQUFHLENBQUN2VyxVQUFwQixFQUFtQztBQUNsQzhZLFlBQUUsQ0FBQ0UsT0FBSCxDQUFZekMsR0FBWjtBQUNBOztBQUNEQSxXQUFHLEdBQUd2WCxDQUFOOztBQUNBLGVBQVV1WCxHQUFHLEdBQUdBLEdBQUcsQ0FBQ3ZXLFVBQXBCLEVBQW1DO0FBQ2xDK1ksWUFBRSxDQUFDQyxPQUFILENBQVl6QyxHQUFaO0FBQ0EsU0E1Q2UsQ0E4Q2hCOzs7QUFDQSxlQUFRdUMsRUFBRSxDQUFFL2IsQ0FBRixDQUFGLEtBQVlnYyxFQUFFLENBQUVoYyxDQUFGLENBQXRCLEVBQThCO0FBQzdCQSxXQUFDO0FBQ0Q7O0FBRUQsZUFBT0EsQ0FBQyxHQUVQO0FBQ0F1WixvQkFBWSxDQUFFd0MsRUFBRSxDQUFFL2IsQ0FBRixDQUFKLEVBQVdnYyxFQUFFLENBQUVoYyxDQUFGLENBQWIsQ0FITCxHQUtQO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0ErYixVQUFFLENBQUUvYixDQUFGLENBQUYsSUFBV21VLFlBQVgsR0FBMEIsQ0FBQyxDQUEzQixHQUNBNkgsRUFBRSxDQUFFaGMsQ0FBRixDQUFGLElBQVdtVSxZQUFYLEdBQTBCLENBQTFCO0FBQ0E7QUFDQSxTQWJEO0FBY0EsT0ExSEQ7QUE0SEEsYUFBT2pSLFFBQVA7QUFDQSxLQTFkRDs7QUE0ZEFnUSxVQUFNLENBQUNyVCxPQUFQLEdBQWlCLFVBQVVxYyxJQUFWLEVBQWdCeFIsUUFBaEIsRUFBMkI7QUFDM0MsYUFBT3dJLE1BQU0sQ0FBRWdKLElBQUYsRUFBUSxJQUFSLEVBQWMsSUFBZCxFQUFvQnhSLFFBQXBCLENBQWI7QUFDQSxLQUZEOztBQUlBd0ksVUFBTSxDQUFDcFQsZUFBUCxHQUF5QixVQUFVTSxJQUFWLEVBQWdCOGIsSUFBaEIsRUFBdUI7QUFDL0N0SSxpQkFBVyxDQUFFeFQsSUFBRixDQUFYOztBQUVBLFVBQUs0TyxPQUFPLENBQUNsUCxlQUFSLElBQTJCZ1UsY0FBM0IsSUFDSixDQUFDWSxzQkFBc0IsQ0FBRXdILElBQUksR0FBRyxHQUFULENBRG5CLEtBRUYsQ0FBQ2xJLGFBQUQsSUFBa0IsQ0FBQ0EsYUFBYSxDQUFDb0UsSUFBZCxDQUFvQjhELElBQXBCLENBRmpCLE1BR0YsQ0FBQ25JLFNBQUQsSUFBa0IsQ0FBQ0EsU0FBUyxDQUFDcUUsSUFBVixDQUFnQjhELElBQWhCLENBSGpCLENBQUwsRUFHaUQ7QUFFaEQsWUFBSTtBQUNILGNBQUkxTCxHQUFHLEdBQUczUSxPQUFPLENBQUNnRCxJQUFSLENBQWN6QyxJQUFkLEVBQW9COGIsSUFBcEIsQ0FBVixDQURHLENBR0g7O0FBQ0EsY0FBSzFMLEdBQUcsSUFBSXhCLE9BQU8sQ0FBQ3dNLGlCQUFmLElBRUo7QUFDQTtBQUNBcGIsY0FBSSxDQUFDOEMsUUFBTCxJQUFpQjlDLElBQUksQ0FBQzhDLFFBQUwsQ0FBYzJGLFFBQWQsS0FBMkIsRUFKN0MsRUFJa0Q7QUFDakQsbUJBQU8ySCxHQUFQO0FBQ0E7QUFDRCxTQVhELENBV0UsT0FBUThHLENBQVIsRUFBWTtBQUNiNUMsZ0NBQXNCLENBQUV3SCxJQUFGLEVBQVEsSUFBUixDQUF0QjtBQUNBO0FBQ0Q7O0FBRUQsYUFBT2hKLE1BQU0sQ0FBRWdKLElBQUYsRUFBUWhaLFFBQVIsRUFBa0IsSUFBbEIsRUFBd0IsQ0FBRTlDLElBQUYsQ0FBeEIsQ0FBTixDQUF5Q0gsTUFBekMsR0FBa0QsQ0FBekQ7QUFDQSxLQXpCRDs7QUEyQkFpVCxVQUFNLENBQUNlLFFBQVAsR0FBa0IsVUFBVWhFLE9BQVYsRUFBbUI3UCxJQUFuQixFQUEwQjtBQUUzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBSyxDQUFFNlAsT0FBTyxDQUFDNkgsYUFBUixJQUF5QjdILE9BQTNCLEtBQXdDL00sUUFBN0MsRUFBd0Q7QUFDdkQwUSxtQkFBVyxDQUFFM0QsT0FBRixDQUFYO0FBQ0E7O0FBQ0QsYUFBT2dFLFFBQVEsQ0FBRWhFLE9BQUYsRUFBVzdQLElBQVgsQ0FBZjtBQUNBLEtBWEQ7O0FBYUE4UyxVQUFNLENBQUNsTixJQUFQLEdBQWMsVUFBVTVGLElBQVYsRUFBZ0JvUixJQUFoQixFQUF1QjtBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBSyxDQUFFcFIsSUFBSSxDQUFDMFgsYUFBTCxJQUFzQjFYLElBQXhCLEtBQWtDOEMsUUFBdkMsRUFBa0Q7QUFDakQwUSxtQkFBVyxDQUFFeFQsSUFBRixDQUFYO0FBQ0E7O0FBRUQsVUFBSXlOLEVBQUUsR0FBR3NGLElBQUksQ0FBQ21HLFVBQUwsQ0FBaUI5SCxJQUFJLENBQUNwTSxXQUFMLEVBQWpCLENBQVQ7QUFBQSxVQUVDO0FBQ0FzSyxTQUFHLEdBQUc3QixFQUFFLElBQUllLE1BQU0sQ0FBQy9MLElBQVAsQ0FBYXNRLElBQUksQ0FBQ21HLFVBQWxCLEVBQThCOUgsSUFBSSxDQUFDcE0sV0FBTCxFQUE5QixDQUFOLEdBQ0x5SSxFQUFFLENBQUV6TixJQUFGLEVBQVFvUixJQUFSLEVBQWMsQ0FBQ3NDLGNBQWYsQ0FERyxHQUVMblIsU0FMRjtBQU9BLGFBQU8rTSxHQUFHLEtBQUsvTSxTQUFSLEdBQ04rTSxHQURNLEdBRU5WLE9BQU8sQ0FBQ2tHLFVBQVIsSUFBc0IsQ0FBQ3BCLGNBQXZCLEdBQ0MxVCxJQUFJLENBQUM2RixZQUFMLENBQW1CdUwsSUFBbkIsQ0FERCxHQUVDLENBQUU5QixHQUFHLEdBQUd0UCxJQUFJLENBQUMyYSxnQkFBTCxDQUF1QnZKLElBQXZCLENBQVIsS0FBMkM5QixHQUFHLENBQUN5TSxTQUEvQyxHQUNDek0sR0FBRyxDQUFDaEosS0FETCxHQUVDLElBTkg7QUFPQSxLQXpCRDs7QUEyQkF3TSxVQUFNLENBQUNtRCxNQUFQLEdBQWdCLFVBQVUrRixHQUFWLEVBQWdCO0FBQy9CLGFBQU8sQ0FBRUEsR0FBRyxHQUFHLEVBQVIsRUFBYXBYLE9BQWIsQ0FBc0IwUixVQUF0QixFQUFrQ0MsVUFBbEMsQ0FBUDtBQUNBLEtBRkQ7O0FBSUF6RCxVQUFNLENBQUM3TSxLQUFQLEdBQWUsVUFBVTZMLEdBQVYsRUFBZ0I7QUFDOUIsWUFBTSxJQUFJL0QsS0FBSixDQUFXLDRDQUE0QytELEdBQXZELENBQU47QUFDQSxLQUZEO0FBSUE7Ozs7OztBQUlBZ0IsVUFBTSxDQUFDbUosVUFBUCxHQUFvQixVQUFVL0osT0FBVixFQUFvQjtBQUN2QyxVQUFJbFMsSUFBSjtBQUFBLFVBQ0NrYyxVQUFVLEdBQUcsRUFEZDtBQUFBLFVBRUNqTCxDQUFDLEdBQUcsQ0FGTDtBQUFBLFVBR0NyUixDQUFDLEdBQUcsQ0FITCxDQUR1QyxDQU12Qzs7QUFDQTJULGtCQUFZLEdBQUcsQ0FBQzNFLE9BQU8sQ0FBQ3VOLGdCQUF4QjtBQUNBN0ksZUFBUyxHQUFHLENBQUMxRSxPQUFPLENBQUN3TixVQUFULElBQXVCbEssT0FBTyxDQUFDNVEsS0FBUixDQUFlLENBQWYsQ0FBbkM7QUFDQTRRLGFBQU8sQ0FBQ2YsSUFBUixDQUFjb0QsU0FBZDs7QUFFQSxVQUFLaEIsWUFBTCxFQUFvQjtBQUNuQixlQUFVdlQsSUFBSSxHQUFHa1MsT0FBTyxDQUFFdFMsQ0FBQyxFQUFILENBQXhCLEVBQW9DO0FBQ25DLGNBQUtJLElBQUksS0FBS2tTLE9BQU8sQ0FBRXRTLENBQUYsQ0FBckIsRUFBNkI7QUFDNUJxUixhQUFDLEdBQUdpTCxVQUFVLENBQUN0YixJQUFYLENBQWlCaEIsQ0FBakIsQ0FBSjtBQUNBO0FBQ0Q7O0FBQ0QsZUFBUXFSLENBQUMsRUFBVCxFQUFjO0FBQ2JpQixpQkFBTyxDQUFDL1EsTUFBUixDQUFnQithLFVBQVUsQ0FBRWpMLENBQUYsQ0FBMUIsRUFBaUMsQ0FBakM7QUFDQTtBQUNELE9BcEJzQyxDQXNCdkM7QUFDQTs7O0FBQ0FxQyxlQUFTLEdBQUcsSUFBWjtBQUVBLGFBQU9wQixPQUFQO0FBQ0EsS0EzQkQ7QUE2QkE7Ozs7OztBQUlBYyxXQUFPLEdBQUdGLE1BQU0sQ0FBQ0UsT0FBUCxHQUFpQixVQUFVaFQsSUFBVixFQUFpQjtBQUMzQyxVQUFJb1AsSUFBSjtBQUFBLFVBQ0NnQixHQUFHLEdBQUcsRUFEUDtBQUFBLFVBRUN4USxDQUFDLEdBQUcsQ0FGTDtBQUFBLFVBR0M2SSxRQUFRLEdBQUd6SSxJQUFJLENBQUN5SSxRQUhqQjs7QUFLQSxVQUFLLENBQUNBLFFBQU4sRUFBaUI7QUFFaEI7QUFDQSxlQUFVMkcsSUFBSSxHQUFHcFAsSUFBSSxDQUFFSixDQUFDLEVBQUgsQ0FBckIsRUFBaUM7QUFFaEM7QUFDQXdRLGFBQUcsSUFBSTRDLE9BQU8sQ0FBRTVELElBQUYsQ0FBZDtBQUNBO0FBQ0QsT0FSRCxNQVFPLElBQUszRyxRQUFRLEtBQUssQ0FBYixJQUFrQkEsUUFBUSxLQUFLLENBQS9CLElBQW9DQSxRQUFRLEtBQUssRUFBdEQsRUFBMkQ7QUFFakU7QUFDQTtBQUNBLFlBQUssT0FBT3pJLElBQUksQ0FBQ3FjLFdBQVosS0FBNEIsUUFBakMsRUFBNEM7QUFDM0MsaUJBQU9yYyxJQUFJLENBQUNxYyxXQUFaO0FBQ0EsU0FGRCxNQUVPO0FBRU47QUFDQSxlQUFNcmMsSUFBSSxHQUFHQSxJQUFJLENBQUNzYyxVQUFsQixFQUE4QnRjLElBQTlCLEVBQW9DQSxJQUFJLEdBQUdBLElBQUksQ0FBQ3VaLFdBQWhELEVBQThEO0FBQzdEbkosZUFBRyxJQUFJNEMsT0FBTyxDQUFFaFQsSUFBRixDQUFkO0FBQ0E7QUFDRDtBQUNELE9BYk0sTUFhQSxJQUFLeUksUUFBUSxLQUFLLENBQWIsSUFBa0JBLFFBQVEsS0FBSyxDQUFwQyxFQUF3QztBQUM5QyxlQUFPekksSUFBSSxDQUFDdWMsU0FBWjtBQUNBLE9BN0IwQyxDQStCM0M7OztBQUVBLGFBQU9uTSxHQUFQO0FBQ0EsS0FsQ0Q7O0FBb0NBMkMsUUFBSSxHQUFHRCxNQUFNLENBQUMwSixTQUFQLEdBQW1CO0FBRXpCO0FBQ0E5RCxpQkFBVyxFQUFFLEVBSFk7QUFLekIrRCxrQkFBWSxFQUFFN0QsWUFMVztBQU96Qi9ULFdBQUssRUFBRTJRLFNBUGtCO0FBU3pCMEQsZ0JBQVUsRUFBRSxFQVRhO0FBV3pCd0IsVUFBSSxFQUFFLEVBWG1CO0FBYXpCZ0MsY0FBUSxFQUFFO0FBQ1QsYUFBSztBQUFFM0YsYUFBRyxFQUFFLFlBQVA7QUFBcUJ0RyxlQUFLLEVBQUU7QUFBNUIsU0FESTtBQUVULGFBQUs7QUFBRXNHLGFBQUcsRUFBRTtBQUFQLFNBRkk7QUFHVCxhQUFLO0FBQUVBLGFBQUcsRUFBRSxpQkFBUDtBQUEwQnRHLGVBQUssRUFBRTtBQUFqQyxTQUhJO0FBSVQsYUFBSztBQUFFc0csYUFBRyxFQUFFO0FBQVA7QUFKSSxPQWJlO0FBb0J6QjRGLGVBQVMsRUFBRTtBQUNWLGdCQUFRLFVBQVU5WCxLQUFWLEVBQWtCO0FBQ3pCQSxlQUFLLENBQUUsQ0FBRixDQUFMLEdBQWFBLEtBQUssQ0FBRSxDQUFGLENBQUwsQ0FBV0QsT0FBWCxDQUFvQm1SLFNBQXBCLEVBQStCQyxTQUEvQixDQUFiLENBRHlCLENBR3pCOztBQUNBblIsZUFBSyxDQUFFLENBQUYsQ0FBTCxHQUFhLENBQUVBLEtBQUssQ0FBRSxDQUFGLENBQUwsSUFBY0EsS0FBSyxDQUFFLENBQUYsQ0FBbkIsSUFDZEEsS0FBSyxDQUFFLENBQUYsQ0FEUyxJQUNBLEVBREYsRUFDT0QsT0FEUCxDQUNnQm1SLFNBRGhCLEVBQzJCQyxTQUQzQixDQUFiOztBQUdBLGNBQUtuUixLQUFLLENBQUUsQ0FBRixDQUFMLEtBQWUsSUFBcEIsRUFBMkI7QUFDMUJBLGlCQUFLLENBQUUsQ0FBRixDQUFMLEdBQWEsTUFBTUEsS0FBSyxDQUFFLENBQUYsQ0FBWCxHQUFtQixHQUFoQztBQUNBOztBQUVELGlCQUFPQSxLQUFLLENBQUN2RCxLQUFOLENBQWEsQ0FBYixFQUFnQixDQUFoQixDQUFQO0FBQ0EsU0FiUztBQWVWLGlCQUFTLFVBQVV1RCxLQUFWLEVBQWtCO0FBRTFCOzs7Ozs7Ozs7O0FBVUFBLGVBQUssQ0FBRSxDQUFGLENBQUwsR0FBYUEsS0FBSyxDQUFFLENBQUYsQ0FBTCxDQUFXRyxXQUFYLEVBQWI7O0FBRUEsY0FBS0gsS0FBSyxDQUFFLENBQUYsQ0FBTCxDQUFXdkQsS0FBWCxDQUFrQixDQUFsQixFQUFxQixDQUFyQixNQUE2QixLQUFsQyxFQUEwQztBQUV6QztBQUNBLGdCQUFLLENBQUN1RCxLQUFLLENBQUUsQ0FBRixDQUFYLEVBQW1CO0FBQ2xCaU8sb0JBQU0sQ0FBQzdNLEtBQVAsQ0FBY3BCLEtBQUssQ0FBRSxDQUFGLENBQW5CO0FBQ0EsYUFMd0MsQ0FPekM7QUFDQTs7O0FBQ0FBLGlCQUFLLENBQUUsQ0FBRixDQUFMLEdBQWEsRUFBR0EsS0FBSyxDQUFFLENBQUYsQ0FBTCxHQUNmQSxLQUFLLENBQUUsQ0FBRixDQUFMLElBQWVBLEtBQUssQ0FBRSxDQUFGLENBQUwsSUFBYyxDQUE3QixDQURlLEdBRWYsS0FBTUEsS0FBSyxDQUFFLENBQUYsQ0FBTCxLQUFlLE1BQWYsSUFBeUJBLEtBQUssQ0FBRSxDQUFGLENBQUwsS0FBZSxLQUE5QyxDQUZZLENBQWI7QUFHQUEsaUJBQUssQ0FBRSxDQUFGLENBQUwsR0FBYSxFQUFLQSxLQUFLLENBQUUsQ0FBRixDQUFMLEdBQWFBLEtBQUssQ0FBRSxDQUFGLENBQXBCLElBQStCQSxLQUFLLENBQUUsQ0FBRixDQUFMLEtBQWUsS0FBakQsQ0FBYixDQVp5QyxDQWN6QztBQUNBLFdBZkQsTUFlTyxJQUFLQSxLQUFLLENBQUUsQ0FBRixDQUFWLEVBQWtCO0FBQ3hCaU8sa0JBQU0sQ0FBQzdNLEtBQVAsQ0FBY3BCLEtBQUssQ0FBRSxDQUFGLENBQW5CO0FBQ0E7O0FBRUQsaUJBQU9BLEtBQVA7QUFDQSxTQWpEUztBQW1EVixrQkFBVSxVQUFVQSxLQUFWLEVBQWtCO0FBQzNCLGNBQUkrWCxNQUFKO0FBQUEsY0FDQ0MsUUFBUSxHQUFHLENBQUNoWSxLQUFLLENBQUUsQ0FBRixDQUFOLElBQWVBLEtBQUssQ0FBRSxDQUFGLENBRGhDOztBQUdBLGNBQUsyUSxTQUFTLENBQUUsT0FBRixDQUFULENBQXFCd0MsSUFBckIsQ0FBMkJuVCxLQUFLLENBQUUsQ0FBRixDQUFoQyxDQUFMLEVBQStDO0FBQzlDLG1CQUFPLElBQVA7QUFDQSxXQU4wQixDQVEzQjs7O0FBQ0EsY0FBS0EsS0FBSyxDQUFFLENBQUYsQ0FBVixFQUFrQjtBQUNqQkEsaUJBQUssQ0FBRSxDQUFGLENBQUwsR0FBYUEsS0FBSyxDQUFFLENBQUYsQ0FBTCxJQUFjQSxLQUFLLENBQUUsQ0FBRixDQUFuQixJQUE0QixFQUF6QyxDQURpQixDQUdsQjtBQUNDLFdBSkQsTUFJTyxJQUFLZ1ksUUFBUSxJQUFJdkgsT0FBTyxDQUFDMEMsSUFBUixDQUFjNkUsUUFBZCxDQUFaLE1BRVg7QUFDRUQsZ0JBQU0sR0FBRzFKLFFBQVEsQ0FBRTJKLFFBQUYsRUFBWSxJQUFaLENBSFIsT0FLWDtBQUNFRCxnQkFBTSxHQUFHQyxRQUFRLENBQUNsYyxPQUFULENBQWtCLEdBQWxCLEVBQXVCa2MsUUFBUSxDQUFDaGQsTUFBVCxHQUFrQitjLE1BQXpDLElBQW9EQyxRQUFRLENBQUNoZCxNQU43RCxDQUFMLEVBTTZFO0FBRW5GO0FBQ0FnRixpQkFBSyxDQUFFLENBQUYsQ0FBTCxHQUFhQSxLQUFLLENBQUUsQ0FBRixDQUFMLENBQVd2RCxLQUFYLENBQWtCLENBQWxCLEVBQXFCc2IsTUFBckIsQ0FBYjtBQUNBL1gsaUJBQUssQ0FBRSxDQUFGLENBQUwsR0FBYWdZLFFBQVEsQ0FBQ3ZiLEtBQVQsQ0FBZ0IsQ0FBaEIsRUFBbUJzYixNQUFuQixDQUFiO0FBQ0EsV0F4QjBCLENBMEIzQjs7O0FBQ0EsaUJBQU8vWCxLQUFLLENBQUN2RCxLQUFOLENBQWEsQ0FBYixFQUFnQixDQUFoQixDQUFQO0FBQ0E7QUEvRVMsT0FwQmM7QUFzR3pCa1osWUFBTSxFQUFFO0FBRVAsZUFBTyxVQUFVc0MsZ0JBQVYsRUFBNkI7QUFDbkMsY0FBSTlSLFFBQVEsR0FBRzhSLGdCQUFnQixDQUFDbFksT0FBakIsQ0FBMEJtUixTQUExQixFQUFxQ0MsU0FBckMsRUFBaURoUixXQUFqRCxFQUFmO0FBQ0EsaUJBQU84WCxnQkFBZ0IsS0FBSyxHQUFyQixHQUNOLFlBQVc7QUFDVixtQkFBTyxJQUFQO0FBQ0EsV0FISyxHQUlOLFVBQVU5YyxJQUFWLEVBQWlCO0FBQ2hCLG1CQUFPQSxJQUFJLENBQUNnTCxRQUFMLElBQWlCaEwsSUFBSSxDQUFDZ0wsUUFBTCxDQUFjaEcsV0FBZCxPQUFnQ2dHLFFBQXhEO0FBQ0EsV0FORjtBQU9BLFNBWE07QUFhUCxpQkFBUyxVQUFVOUUsU0FBVixFQUFzQjtBQUM5QixjQUFJNlcsT0FBTyxHQUFHN0ksVUFBVSxDQUFFaE8sU0FBUyxHQUFHLEdBQWQsQ0FBeEI7QUFFQSxpQkFBTzZXLE9BQU8sSUFDYixDQUFFQSxPQUFPLEdBQUcsSUFBSTlILE1BQUosQ0FBWSxRQUFRTCxVQUFSLEdBQ3ZCLEdBRHVCLEdBQ2pCMU8sU0FEaUIsR0FDTCxHQURLLEdBQ0MwTyxVQURELEdBQ2MsS0FEMUIsQ0FBWixLQUNtRFYsVUFBVSxDQUMzRGhPLFNBRDJELEVBQ2hELFVBQVVsRyxJQUFWLEVBQWlCO0FBQzNCLG1CQUFPK2MsT0FBTyxDQUFDL0UsSUFBUixDQUNOLE9BQU9oWSxJQUFJLENBQUNrRyxTQUFaLEtBQTBCLFFBQTFCLElBQXNDbEcsSUFBSSxDQUFDa0csU0FBM0MsSUFDQSxPQUFPbEcsSUFBSSxDQUFDNkYsWUFBWixLQUE2QixXQUE3QixJQUNDN0YsSUFBSSxDQUFDNkYsWUFBTCxDQUFtQixPQUFuQixDQUZELElBR0EsRUFKTSxDQUFQO0FBTUYsV0FSNEQsQ0FGOUQ7QUFXQSxTQTNCTTtBQTZCUCxnQkFBUSxVQUFVdUwsSUFBVixFQUFnQjRMLFFBQWhCLEVBQTBCdFMsS0FBMUIsRUFBa0M7QUFDekMsaUJBQU8sVUFBVTFLLElBQVYsRUFBaUI7QUFDdkIsZ0JBQUlpZCxNQUFNLEdBQUduSyxNQUFNLENBQUNsTixJQUFQLENBQWE1RixJQUFiLEVBQW1Cb1IsSUFBbkIsQ0FBYjs7QUFFQSxnQkFBSzZMLE1BQU0sSUFBSSxJQUFmLEVBQXNCO0FBQ3JCLHFCQUFPRCxRQUFRLEtBQUssSUFBcEI7QUFDQTs7QUFDRCxnQkFBSyxDQUFDQSxRQUFOLEVBQWlCO0FBQ2hCLHFCQUFPLElBQVA7QUFDQTs7QUFFREMsa0JBQU0sSUFBSSxFQUFWO0FBRUE7O0FBRUEsbUJBQU9ELFFBQVEsS0FBSyxHQUFiLEdBQW1CQyxNQUFNLEtBQUt2UyxLQUE5QixHQUNOc1MsUUFBUSxLQUFLLElBQWIsR0FBb0JDLE1BQU0sS0FBS3ZTLEtBQS9CLEdBQ0FzUyxRQUFRLEtBQUssSUFBYixHQUFvQnRTLEtBQUssSUFBSXVTLE1BQU0sQ0FBQ3RjLE9BQVAsQ0FBZ0IrSixLQUFoQixNQUE0QixDQUF6RCxHQUNBc1MsUUFBUSxLQUFLLElBQWIsR0FBb0J0UyxLQUFLLElBQUl1UyxNQUFNLENBQUN0YyxPQUFQLENBQWdCK0osS0FBaEIsSUFBMEIsQ0FBQyxDQUF4RCxHQUNBc1MsUUFBUSxLQUFLLElBQWIsR0FBb0J0UyxLQUFLLElBQUl1UyxNQUFNLENBQUMzYixLQUFQLENBQWMsQ0FBQ29KLEtBQUssQ0FBQzdLLE1BQXJCLE1BQWtDNkssS0FBL0QsR0FDQXNTLFFBQVEsS0FBSyxJQUFiLEdBQW9CLENBQUUsTUFBTUMsTUFBTSxDQUFDclksT0FBUCxDQUFnQm9RLFdBQWhCLEVBQTZCLEdBQTdCLENBQU4sR0FBMkMsR0FBN0MsRUFBbURyVSxPQUFuRCxDQUE0RCtKLEtBQTVELElBQXNFLENBQUMsQ0FBM0YsR0FDQXNTLFFBQVEsS0FBSyxJQUFiLEdBQW9CQyxNQUFNLEtBQUt2UyxLQUFYLElBQW9CdVMsTUFBTSxDQUFDM2IsS0FBUCxDQUFjLENBQWQsRUFBaUJvSixLQUFLLENBQUM3SyxNQUFOLEdBQWUsQ0FBaEMsTUFBd0M2SyxLQUFLLEdBQUcsR0FBeEYsR0FDQSxLQVBEO0FBUUE7QUFFQSxXQXhCRDtBQXlCQSxTQXZETTtBQXlEUCxpQkFBUyxVQUFVdEgsSUFBVixFQUFnQjhaLElBQWhCLEVBQXNCQyxTQUF0QixFQUFpQzFNLEtBQWpDLEVBQXdDRSxJQUF4QyxFQUErQztBQUN2RCxjQUFJeU0sTUFBTSxHQUFHaGEsSUFBSSxDQUFDOUIsS0FBTCxDQUFZLENBQVosRUFBZSxDQUFmLE1BQXVCLEtBQXBDO0FBQUEsY0FDQytiLE9BQU8sR0FBR2phLElBQUksQ0FBQzlCLEtBQUwsQ0FBWSxDQUFDLENBQWIsTUFBcUIsTUFEaEM7QUFBQSxjQUVDZ2MsTUFBTSxHQUFHSixJQUFJLEtBQUssU0FGbkI7QUFJQSxpQkFBT3pNLEtBQUssS0FBSyxDQUFWLElBQWVFLElBQUksS0FBSyxDQUF4QixHQUVOO0FBQ0Esb0JBQVUzUSxJQUFWLEVBQWlCO0FBQ2hCLG1CQUFPLENBQUMsQ0FBQ0EsSUFBSSxDQUFDNkMsVUFBZDtBQUNBLFdBTEssR0FPTixVQUFVN0MsSUFBVixFQUFnQnVkLFFBQWhCLEVBQTBCQyxHQUExQixFQUFnQztBQUMvQixnQkFBSWhGLEtBQUo7QUFBQSxnQkFBV2lGLFdBQVg7QUFBQSxnQkFBd0JDLFVBQXhCO0FBQUEsZ0JBQW9DdE8sSUFBcEM7QUFBQSxnQkFBMEN1TyxTQUExQztBQUFBLGdCQUFxREMsS0FBckQ7QUFBQSxnQkFDQzdHLEdBQUcsR0FBR3FHLE1BQU0sS0FBS0MsT0FBWCxHQUFxQixhQUFyQixHQUFxQyxpQkFENUM7QUFBQSxnQkFFQ1EsTUFBTSxHQUFHN2QsSUFBSSxDQUFDNkMsVUFGZjtBQUFBLGdCQUdDdU8sSUFBSSxHQUFHa00sTUFBTSxJQUFJdGQsSUFBSSxDQUFDZ0wsUUFBTCxDQUFjaEcsV0FBZCxFQUhsQjtBQUFBLGdCQUlDOFksUUFBUSxHQUFHLENBQUNOLEdBQUQsSUFBUSxDQUFDRixNQUpyQjtBQUFBLGdCQUtDakUsSUFBSSxHQUFHLEtBTFI7O0FBT0EsZ0JBQUt3RSxNQUFMLEVBQWM7QUFFYjtBQUNBLGtCQUFLVCxNQUFMLEVBQWM7QUFDYix1QkFBUXJHLEdBQVIsRUFBYztBQUNiM0gsc0JBQUksR0FBR3BQLElBQVA7O0FBQ0EseUJBQVVvUCxJQUFJLEdBQUdBLElBQUksQ0FBRTJILEdBQUYsQ0FBckIsRUFBaUM7QUFDaEMsd0JBQUt1RyxNQUFNLEdBQ1ZsTyxJQUFJLENBQUNwRSxRQUFMLENBQWNoRyxXQUFkLE9BQWdDb00sSUFEdEIsR0FFVmhDLElBQUksQ0FBQzNHLFFBQUwsS0FBa0IsQ0FGbkIsRUFFdUI7QUFFdEIsNkJBQU8sS0FBUDtBQUNBO0FBQ0QsbUJBVFksQ0FXYjs7O0FBQ0FtVix1QkFBSyxHQUFHN0csR0FBRyxHQUFHM1QsSUFBSSxLQUFLLE1BQVQsSUFBbUIsQ0FBQ3dhLEtBQXBCLElBQTZCLGFBQTNDO0FBQ0E7O0FBQ0QsdUJBQU8sSUFBUDtBQUNBOztBQUVEQSxtQkFBSyxHQUFHLENBQUVQLE9BQU8sR0FBR1EsTUFBTSxDQUFDdkIsVUFBVixHQUF1QnVCLE1BQU0sQ0FBQ0UsU0FBdkMsQ0FBUixDQXJCYSxDQXVCYjs7QUFDQSxrQkFBS1YsT0FBTyxJQUFJUyxRQUFoQixFQUEyQjtBQUUxQjtBQUVBO0FBQ0ExTyxvQkFBSSxHQUFHeU8sTUFBUDtBQUNBSCwwQkFBVSxHQUFHdE8sSUFBSSxDQUFFdUMsT0FBRixDQUFKLEtBQXFCdkMsSUFBSSxDQUFFdUMsT0FBRixDQUFKLEdBQWtCLEVBQXZDLENBQWIsQ0FOMEIsQ0FRMUI7QUFDQTs7QUFDQThMLDJCQUFXLEdBQUdDLFVBQVUsQ0FBRXRPLElBQUksQ0FBQzRPLFFBQVAsQ0FBVixLQUNYTixVQUFVLENBQUV0TyxJQUFJLENBQUM0TyxRQUFQLENBQVYsR0FBOEIsRUFEbkIsQ0FBZDtBQUdBeEYscUJBQUssR0FBR2lGLFdBQVcsQ0FBRXJhLElBQUYsQ0FBWCxJQUF1QixFQUEvQjtBQUNBdWEseUJBQVMsR0FBR25GLEtBQUssQ0FBRSxDQUFGLENBQUwsS0FBZXhFLE9BQWYsSUFBMEJ3RSxLQUFLLENBQUUsQ0FBRixDQUEzQztBQUNBYSxvQkFBSSxHQUFHc0UsU0FBUyxJQUFJbkYsS0FBSyxDQUFFLENBQUYsQ0FBekI7QUFDQXBKLG9CQUFJLEdBQUd1TyxTQUFTLElBQUlFLE1BQU0sQ0FBQzVHLFVBQVAsQ0FBbUIwRyxTQUFuQixDQUFwQjs7QUFFQSx1QkFBVXZPLElBQUksR0FBRyxFQUFFdU8sU0FBRixJQUFldk8sSUFBZixJQUF1QkEsSUFBSSxDQUFFMkgsR0FBRixDQUEzQixNQUVoQjtBQUNFc0Msb0JBQUksR0FBR3NFLFNBQVMsR0FBRyxDQUhMLEtBR1lDLEtBQUssQ0FBQ3BKLEdBQU4sRUFIN0IsRUFHNkM7QUFFNUM7QUFDQSxzQkFBS3BGLElBQUksQ0FBQzNHLFFBQUwsS0FBa0IsQ0FBbEIsSUFBdUIsRUFBRTRRLElBQXpCLElBQWlDakssSUFBSSxLQUFLcFAsSUFBL0MsRUFBc0Q7QUFDckR5ZCwrQkFBVyxDQUFFcmEsSUFBRixDQUFYLEdBQXNCLENBQUU0USxPQUFGLEVBQVcySixTQUFYLEVBQXNCdEUsSUFBdEIsQ0FBdEI7QUFDQTtBQUNBO0FBQ0Q7QUFFRCxlQTlCRCxNQThCTztBQUVOO0FBQ0Esb0JBQUt5RSxRQUFMLEVBQWdCO0FBRWY7QUFDQTFPLHNCQUFJLEdBQUdwUCxJQUFQO0FBQ0EwZCw0QkFBVSxHQUFHdE8sSUFBSSxDQUFFdUMsT0FBRixDQUFKLEtBQXFCdkMsSUFBSSxDQUFFdUMsT0FBRixDQUFKLEdBQWtCLEVBQXZDLENBQWIsQ0FKZSxDQU1mO0FBQ0E7O0FBQ0E4TCw2QkFBVyxHQUFHQyxVQUFVLENBQUV0TyxJQUFJLENBQUM0TyxRQUFQLENBQVYsS0FDWE4sVUFBVSxDQUFFdE8sSUFBSSxDQUFDNE8sUUFBUCxDQUFWLEdBQThCLEVBRG5CLENBQWQ7QUFHQXhGLHVCQUFLLEdBQUdpRixXQUFXLENBQUVyYSxJQUFGLENBQVgsSUFBdUIsRUFBL0I7QUFDQXVhLDJCQUFTLEdBQUduRixLQUFLLENBQUUsQ0FBRixDQUFMLEtBQWV4RSxPQUFmLElBQTBCd0UsS0FBSyxDQUFFLENBQUYsQ0FBM0M7QUFDQWEsc0JBQUksR0FBR3NFLFNBQVA7QUFDQSxpQkFqQkssQ0FtQk47QUFDQTs7O0FBQ0Esb0JBQUt0RSxJQUFJLEtBQUssS0FBZCxFQUFzQjtBQUVyQjtBQUNBLHlCQUFVakssSUFBSSxHQUFHLEVBQUV1TyxTQUFGLElBQWV2TyxJQUFmLElBQXVCQSxJQUFJLENBQUUySCxHQUFGLENBQTNCLEtBQ2RzQyxJQUFJLEdBQUdzRSxTQUFTLEdBQUcsQ0FETCxLQUNZQyxLQUFLLENBQUNwSixHQUFOLEVBRDdCLEVBQzZDO0FBRTVDLHdCQUFLLENBQUU4SSxNQUFNLEdBQ1psTyxJQUFJLENBQUNwRSxRQUFMLENBQWNoRyxXQUFkLE9BQWdDb00sSUFEcEIsR0FFWmhDLElBQUksQ0FBQzNHLFFBQUwsS0FBa0IsQ0FGZCxLQUdKLEVBQUU0USxJQUhILEVBR1U7QUFFVDtBQUNBLDBCQUFLeUUsUUFBTCxFQUFnQjtBQUNmSixrQ0FBVSxHQUFHdE8sSUFBSSxDQUFFdUMsT0FBRixDQUFKLEtBQ1Z2QyxJQUFJLENBQUV1QyxPQUFGLENBQUosR0FBa0IsRUFEUixDQUFiLENBRGUsQ0FJZjtBQUNBOztBQUNBOEwsbUNBQVcsR0FBR0MsVUFBVSxDQUFFdE8sSUFBSSxDQUFDNE8sUUFBUCxDQUFWLEtBQ1hOLFVBQVUsQ0FBRXRPLElBQUksQ0FBQzRPLFFBQVAsQ0FBVixHQUE4QixFQURuQixDQUFkO0FBR0FQLG1DQUFXLENBQUVyYSxJQUFGLENBQVgsR0FBc0IsQ0FBRTRRLE9BQUYsRUFBV3FGLElBQVgsQ0FBdEI7QUFDQTs7QUFFRCwwQkFBS2pLLElBQUksS0FBS3BQLElBQWQsRUFBcUI7QUFDcEI7QUFDQTtBQUNEO0FBQ0Q7QUFDRDtBQUNELGVBekdZLENBMkdiOzs7QUFDQXFaLGtCQUFJLElBQUkxSSxJQUFSO0FBQ0EscUJBQU8wSSxJQUFJLEtBQUs1SSxLQUFULElBQW9CNEksSUFBSSxHQUFHNUksS0FBUCxLQUFpQixDQUFqQixJQUFzQjRJLElBQUksR0FBRzVJLEtBQVAsSUFBZ0IsQ0FBakU7QUFDQTtBQUNELFdBOUhGO0FBK0hBLFNBN0xNO0FBK0xQLGtCQUFVLFVBQVV3TixNQUFWLEVBQWtCcEUsUUFBbEIsRUFBNkI7QUFFdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFJeFksSUFBSjtBQUFBLGNBQ0NvTSxFQUFFLEdBQUdzRixJQUFJLENBQUNnQyxPQUFMLENBQWNrSixNQUFkLEtBQTBCbEwsSUFBSSxDQUFDbUwsVUFBTCxDQUFpQkQsTUFBTSxDQUFDalosV0FBUCxFQUFqQixDQUExQixJQUNKOE4sTUFBTSxDQUFDN00sS0FBUCxDQUFjLHlCQUF5QmdZLE1BQXZDLENBRkYsQ0FOc0MsQ0FVdEM7QUFDQTtBQUNBOztBQUNBLGNBQUt4USxFQUFFLENBQUVrRSxPQUFGLENBQVAsRUFBcUI7QUFDcEIsbUJBQU9sRSxFQUFFLENBQUVvTSxRQUFGLENBQVQ7QUFDQSxXQWZxQyxDQWlCdEM7OztBQUNBLGNBQUtwTSxFQUFFLENBQUM1TixNQUFILEdBQVksQ0FBakIsRUFBcUI7QUFDcEJ3QixnQkFBSSxHQUFHLENBQUU0YyxNQUFGLEVBQVVBLE1BQVYsRUFBa0IsRUFBbEIsRUFBc0JwRSxRQUF0QixDQUFQO0FBQ0EsbUJBQU85RyxJQUFJLENBQUNtTCxVQUFMLENBQWdCelAsY0FBaEIsQ0FBZ0N3UCxNQUFNLENBQUNqWixXQUFQLEVBQWhDLElBQ040VCxZQUFZLENBQUUsVUFBVXhCLElBQVYsRUFBZ0IzWCxPQUFoQixFQUEwQjtBQUN2QyxrQkFBSTBlLEdBQUo7QUFBQSxrQkFDQ0MsT0FBTyxHQUFHM1EsRUFBRSxDQUFFMkosSUFBRixFQUFReUMsUUFBUixDQURiO0FBQUEsa0JBRUNqYSxDQUFDLEdBQUd3ZSxPQUFPLENBQUN2ZSxNQUZiOztBQUdBLHFCQUFRRCxDQUFDLEVBQVQsRUFBYztBQUNidWUsbUJBQUcsR0FBR3hkLE9BQU8sQ0FBRXlXLElBQUYsRUFBUWdILE9BQU8sQ0FBRXhlLENBQUYsQ0FBZixDQUFiO0FBQ0F3WCxvQkFBSSxDQUFFK0csR0FBRixDQUFKLEdBQWMsRUFBRzFlLE9BQU8sQ0FBRTBlLEdBQUYsQ0FBUCxHQUFpQkMsT0FBTyxDQUFFeGUsQ0FBRixDQUEzQixDQUFkO0FBQ0E7QUFDRCxhQVJXLENBRE4sR0FVTixVQUFVSSxJQUFWLEVBQWlCO0FBQ2hCLHFCQUFPeU4sRUFBRSxDQUFFek4sSUFBRixFQUFRLENBQVIsRUFBV3FCLElBQVgsQ0FBVDtBQUNBLGFBWkY7QUFhQTs7QUFFRCxpQkFBT29NLEVBQVA7QUFDQTtBQW5PTSxPQXRHaUI7QUE0VXpCc0gsYUFBTyxFQUFFO0FBRVI7QUFDQSxlQUFPNkQsWUFBWSxDQUFFLFVBQVUzWSxRQUFWLEVBQXFCO0FBRXpDO0FBQ0E7QUFDQTtBQUNBLGNBQUk2YSxLQUFLLEdBQUcsRUFBWjtBQUFBLGNBQ0M1SSxPQUFPLEdBQUcsRUFEWDtBQUFBLGNBRUNtTSxPQUFPLEdBQUdsTCxPQUFPLENBQUVsVCxRQUFRLENBQUMyRSxPQUFULENBQWtCc1EsS0FBbEIsRUFBeUIsSUFBekIsQ0FBRixDQUZsQjtBQUlBLGlCQUFPbUosT0FBTyxDQUFFMU0sT0FBRixDQUFQLEdBQ05pSCxZQUFZLENBQUUsVUFBVXhCLElBQVYsRUFBZ0IzWCxPQUFoQixFQUF5QjhkLFFBQXpCLEVBQW1DQyxHQUFuQyxFQUF5QztBQUN0RCxnQkFBSXhkLElBQUo7QUFBQSxnQkFDQ3NlLFNBQVMsR0FBR0QsT0FBTyxDQUFFakgsSUFBRixFQUFRLElBQVIsRUFBY29HLEdBQWQsRUFBbUIsRUFBbkIsQ0FEcEI7QUFBQSxnQkFFQzVkLENBQUMsR0FBR3dYLElBQUksQ0FBQ3ZYLE1BRlYsQ0FEc0QsQ0FLdEQ7O0FBQ0EsbUJBQVFELENBQUMsRUFBVCxFQUFjO0FBQ2Isa0JBQU9JLElBQUksR0FBR3NlLFNBQVMsQ0FBRTFlLENBQUYsQ0FBdkIsRUFBaUM7QUFDaEN3WCxvQkFBSSxDQUFFeFgsQ0FBRixDQUFKLEdBQVksRUFBR0gsT0FBTyxDQUFFRyxDQUFGLENBQVAsR0FBZUksSUFBbEIsQ0FBWjtBQUNBO0FBQ0Q7QUFDRCxXQVhXLENBRE4sR0FhTixVQUFVQSxJQUFWLEVBQWdCdWQsUUFBaEIsRUFBMEJDLEdBQTFCLEVBQWdDO0FBQy9CMUMsaUJBQUssQ0FBRSxDQUFGLENBQUwsR0FBYTlhLElBQWI7QUFDQXFlLG1CQUFPLENBQUV2RCxLQUFGLEVBQVMsSUFBVCxFQUFlMEMsR0FBZixFQUFvQnRMLE9BQXBCLENBQVAsQ0FGK0IsQ0FJL0I7O0FBQ0E0SSxpQkFBSyxDQUFFLENBQUYsQ0FBTCxHQUFhLElBQWI7QUFDQSxtQkFBTyxDQUFDNUksT0FBTyxDQUFDc0MsR0FBUixFQUFSO0FBQ0EsV0FwQkY7QUFxQkEsU0E5QmtCLENBSFg7QUFtQ1IsZUFBT29FLFlBQVksQ0FBRSxVQUFVM1ksUUFBVixFQUFxQjtBQUN6QyxpQkFBTyxVQUFVRCxJQUFWLEVBQWlCO0FBQ3ZCLG1CQUFPOFMsTUFBTSxDQUFFN1MsUUFBRixFQUFZRCxJQUFaLENBQU4sQ0FBeUJILE1BQXpCLEdBQWtDLENBQXpDO0FBQ0EsV0FGRDtBQUdBLFNBSmtCLENBbkNYO0FBeUNSLG9CQUFZK1ksWUFBWSxDQUFFLFVBQVVwSixJQUFWLEVBQWlCO0FBQzFDQSxjQUFJLEdBQUdBLElBQUksQ0FBQzVLLE9BQUwsQ0FBY21SLFNBQWQsRUFBeUJDLFNBQXpCLENBQVA7QUFDQSxpQkFBTyxVQUFVaFcsSUFBVixFQUFpQjtBQUN2QixtQkFBTyxDQUFFQSxJQUFJLENBQUNxYyxXQUFMLElBQW9CckosT0FBTyxDQUFFaFQsSUFBRixDQUE3QixFQUF3Q1csT0FBeEMsQ0FBaUQ2TyxJQUFqRCxJQUEwRCxDQUFDLENBQWxFO0FBQ0EsV0FGRDtBQUdBLFNBTHVCLENBekNoQjtBQWdEUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFRb0osWUFBWSxDQUFFLFVBQVUyRixJQUFWLEVBQWlCO0FBRXRDO0FBQ0EsY0FBSyxDQUFDaEosV0FBVyxDQUFDeUMsSUFBWixDQUFrQnVHLElBQUksSUFBSSxFQUExQixDQUFOLEVBQXVDO0FBQ3RDekwsa0JBQU0sQ0FBQzdNLEtBQVAsQ0FBYyx1QkFBdUJzWSxJQUFyQztBQUNBOztBQUNEQSxjQUFJLEdBQUdBLElBQUksQ0FBQzNaLE9BQUwsQ0FBY21SLFNBQWQsRUFBeUJDLFNBQXpCLEVBQXFDaFIsV0FBckMsRUFBUDtBQUNBLGlCQUFPLFVBQVVoRixJQUFWLEVBQWlCO0FBQ3ZCLGdCQUFJd2UsUUFBSjs7QUFDQSxlQUFHO0FBQ0Ysa0JBQU9BLFFBQVEsR0FBRzlLLGNBQWMsR0FDL0IxVCxJQUFJLENBQUN1ZSxJQUQwQixHQUUvQnZlLElBQUksQ0FBQzZGLFlBQUwsQ0FBbUIsVUFBbkIsS0FBbUM3RixJQUFJLENBQUM2RixZQUFMLENBQW1CLE1BQW5CLENBRnBDLEVBRW9FO0FBRW5FMlksd0JBQVEsR0FBR0EsUUFBUSxDQUFDeFosV0FBVCxFQUFYO0FBQ0EsdUJBQU93WixRQUFRLEtBQUtELElBQWIsSUFBcUJDLFFBQVEsQ0FBQzdkLE9BQVQsQ0FBa0I0ZCxJQUFJLEdBQUcsR0FBekIsTUFBbUMsQ0FBL0Q7QUFDQTtBQUNELGFBUkQsUUFRVSxDQUFFdmUsSUFBSSxHQUFHQSxJQUFJLENBQUM2QyxVQUFkLEtBQThCN0MsSUFBSSxDQUFDeUksUUFBTCxLQUFrQixDQVIxRDs7QUFTQSxtQkFBTyxLQUFQO0FBQ0EsV0FaRDtBQWFBLFNBcEJtQixDQXZEWjtBQTZFUjtBQUNBLGtCQUFVLFVBQVV6SSxJQUFWLEVBQWlCO0FBQzFCLGNBQUl5ZSxJQUFJLEdBQUd2ZixNQUFNLENBQUN3ZixRQUFQLElBQW1CeGYsTUFBTSxDQUFDd2YsUUFBUCxDQUFnQkQsSUFBOUM7QUFDQSxpQkFBT0EsSUFBSSxJQUFJQSxJQUFJLENBQUNuZCxLQUFMLENBQVksQ0FBWixNQUFvQnRCLElBQUksQ0FBQzRYLEVBQXhDO0FBQ0EsU0FqRk87QUFtRlIsZ0JBQVEsVUFBVTVYLElBQVYsRUFBaUI7QUFDeEIsaUJBQU9BLElBQUksS0FBS3lULE9BQWhCO0FBQ0EsU0FyRk87QUF1RlIsaUJBQVMsVUFBVXpULElBQVYsRUFBaUI7QUFDekIsaUJBQU9BLElBQUksS0FBSzhDLFFBQVEsQ0FBQzZiLGFBQWxCLEtBQ0osQ0FBQzdiLFFBQVEsQ0FBQzhiLFFBQVYsSUFBc0I5YixRQUFRLENBQUM4YixRQUFULEVBRGxCLEtBRU4sQ0FBQyxFQUFHNWUsSUFBSSxDQUFDb0QsSUFBTCxJQUFhcEQsSUFBSSxDQUFDNmUsSUFBbEIsSUFBMEIsQ0FBQzdlLElBQUksQ0FBQzhlLFFBQW5DLENBRkY7QUFHQSxTQTNGTztBQTZGUjtBQUNBLG1CQUFXcEYsb0JBQW9CLENBQUUsS0FBRixDQTlGdkI7QUErRlIsb0JBQVlBLG9CQUFvQixDQUFFLElBQUYsQ0EvRnhCO0FBaUdSLG1CQUFXLFVBQVUxWixJQUFWLEVBQWlCO0FBRTNCO0FBQ0E7QUFDQSxjQUFJZ0wsUUFBUSxHQUFHaEwsSUFBSSxDQUFDZ0wsUUFBTCxDQUFjaEcsV0FBZCxFQUFmO0FBQ0EsaUJBQVNnRyxRQUFRLEtBQUssT0FBYixJQUF3QixDQUFDLENBQUNoTCxJQUFJLENBQUMrZSxPQUFqQyxJQUNKL1QsUUFBUSxLQUFLLFFBQWIsSUFBeUIsQ0FBQyxDQUFDaEwsSUFBSSxDQUFDZ2YsUUFEbkM7QUFFQSxTQXhHTztBQTBHUixvQkFBWSxVQUFVaGYsSUFBVixFQUFpQjtBQUU1QjtBQUNBO0FBQ0EsY0FBS0EsSUFBSSxDQUFDNkMsVUFBVixFQUF1QjtBQUN0QjtBQUNBN0MsZ0JBQUksQ0FBQzZDLFVBQUwsQ0FBZ0JvYyxhQUFoQjtBQUNBOztBQUVELGlCQUFPamYsSUFBSSxDQUFDZ2YsUUFBTCxLQUFrQixJQUF6QjtBQUNBLFNBcEhPO0FBc0hSO0FBQ0EsaUJBQVMsVUFBVWhmLElBQVYsRUFBaUI7QUFFekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFNQSxJQUFJLEdBQUdBLElBQUksQ0FBQ3NjLFVBQWxCLEVBQThCdGMsSUFBOUIsRUFBb0NBLElBQUksR0FBR0EsSUFBSSxDQUFDdVosV0FBaEQsRUFBOEQ7QUFDN0QsZ0JBQUt2WixJQUFJLENBQUN5SSxRQUFMLEdBQWdCLENBQXJCLEVBQXlCO0FBQ3hCLHFCQUFPLEtBQVA7QUFDQTtBQUNEOztBQUNELGlCQUFPLElBQVA7QUFDQSxTQW5JTztBQXFJUixrQkFBVSxVQUFVekksSUFBVixFQUFpQjtBQUMxQixpQkFBTyxDQUFDK1MsSUFBSSxDQUFDZ0MsT0FBTCxDQUFjLE9BQWQsRUFBeUIvVSxJQUF6QixDQUFSO0FBQ0EsU0F2SU87QUF5SVI7QUFDQSxrQkFBVSxVQUFVQSxJQUFWLEVBQWlCO0FBQzFCLGlCQUFPMlYsT0FBTyxDQUFDcUMsSUFBUixDQUFjaFksSUFBSSxDQUFDZ0wsUUFBbkIsQ0FBUDtBQUNBLFNBNUlPO0FBOElSLGlCQUFTLFVBQVVoTCxJQUFWLEVBQWlCO0FBQ3pCLGlCQUFPMFYsT0FBTyxDQUFDc0MsSUFBUixDQUFjaFksSUFBSSxDQUFDZ0wsUUFBbkIsQ0FBUDtBQUNBLFNBaEpPO0FBa0pSLGtCQUFVLFVBQVVoTCxJQUFWLEVBQWlCO0FBQzFCLGNBQUlvUixJQUFJLEdBQUdwUixJQUFJLENBQUNnTCxRQUFMLENBQWNoRyxXQUFkLEVBQVg7QUFDQSxpQkFBT29NLElBQUksS0FBSyxPQUFULElBQW9CcFIsSUFBSSxDQUFDb0QsSUFBTCxLQUFjLFFBQWxDLElBQThDZ08sSUFBSSxLQUFLLFFBQTlEO0FBQ0EsU0FySk87QUF1SlIsZ0JBQVEsVUFBVXBSLElBQVYsRUFBaUI7QUFDeEIsY0FBSTRGLElBQUo7QUFDQSxpQkFBTzVGLElBQUksQ0FBQ2dMLFFBQUwsQ0FBY2hHLFdBQWQsT0FBZ0MsT0FBaEMsSUFDTmhGLElBQUksQ0FBQ29ELElBQUwsS0FBYyxNQURSLE1BR047QUFDQTtBQUNFLFdBQUV3QyxJQUFJLEdBQUc1RixJQUFJLENBQUM2RixZQUFMLENBQW1CLE1BQW5CLENBQVQsS0FBMEMsSUFBMUMsSUFDREQsSUFBSSxDQUFDWixXQUFMLE9BQXVCLE1BTmxCLENBQVA7QUFPQSxTQWhLTztBQWtLUjtBQUNBLGlCQUFTNFUsc0JBQXNCLENBQUUsWUFBVztBQUMzQyxpQkFBTyxDQUFFLENBQUYsQ0FBUDtBQUNBLFNBRjhCLENBbkt2QjtBQXVLUixnQkFBUUEsc0JBQXNCLENBQUUsVUFBVXNGLGFBQVYsRUFBeUJyZixNQUF6QixFQUFrQztBQUNqRSxpQkFBTyxDQUFFQSxNQUFNLEdBQUcsQ0FBWCxDQUFQO0FBQ0EsU0FGNkIsQ0F2S3RCO0FBMktSLGNBQU0rWixzQkFBc0IsQ0FBRSxVQUFVc0YsYUFBVixFQUF5QnJmLE1BQXpCLEVBQWlDZ2EsUUFBakMsRUFBNEM7QUFDekUsaUJBQU8sQ0FBRUEsUUFBUSxHQUFHLENBQVgsR0FBZUEsUUFBUSxHQUFHaGEsTUFBMUIsR0FBbUNnYSxRQUFyQyxDQUFQO0FBQ0EsU0FGMkIsQ0EzS3BCO0FBK0tSLGdCQUFRRCxzQkFBc0IsQ0FBRSxVQUFVRSxZQUFWLEVBQXdCamEsTUFBeEIsRUFBaUM7QUFDaEUsY0FBSUQsQ0FBQyxHQUFHLENBQVI7O0FBQ0EsaUJBQVFBLENBQUMsR0FBR0MsTUFBWixFQUFvQkQsQ0FBQyxJQUFJLENBQXpCLEVBQTZCO0FBQzVCa2Esd0JBQVksQ0FBQ2xaLElBQWIsQ0FBbUJoQixDQUFuQjtBQUNBOztBQUNELGlCQUFPa2EsWUFBUDtBQUNBLFNBTjZCLENBL0t0QjtBQXVMUixlQUFPRixzQkFBc0IsQ0FBRSxVQUFVRSxZQUFWLEVBQXdCamEsTUFBeEIsRUFBaUM7QUFDL0QsY0FBSUQsQ0FBQyxHQUFHLENBQVI7O0FBQ0EsaUJBQVFBLENBQUMsR0FBR0MsTUFBWixFQUFvQkQsQ0FBQyxJQUFJLENBQXpCLEVBQTZCO0FBQzVCa2Esd0JBQVksQ0FBQ2xaLElBQWIsQ0FBbUJoQixDQUFuQjtBQUNBOztBQUNELGlCQUFPa2EsWUFBUDtBQUNBLFNBTjRCLENBdkxyQjtBQStMUixjQUFNRixzQkFBc0IsQ0FBRSxVQUFVRSxZQUFWLEVBQXdCamEsTUFBeEIsRUFBZ0NnYSxRQUFoQyxFQUEyQztBQUN4RSxjQUFJamEsQ0FBQyxHQUFHaWEsUUFBUSxHQUFHLENBQVgsR0FDUEEsUUFBUSxHQUFHaGEsTUFESixHQUVQZ2EsUUFBUSxHQUFHaGEsTUFBWCxHQUNDQSxNQURELEdBRUNnYSxRQUpGOztBQUtBLGlCQUFRLEVBQUVqYSxDQUFGLElBQU8sQ0FBZixHQUFvQjtBQUNuQmthLHdCQUFZLENBQUNsWixJQUFiLENBQW1CaEIsQ0FBbkI7QUFDQTs7QUFDRCxpQkFBT2thLFlBQVA7QUFDQSxTQVYyQixDQS9McEI7QUEyTVIsY0FBTUYsc0JBQXNCLENBQUUsVUFBVUUsWUFBVixFQUF3QmphLE1BQXhCLEVBQWdDZ2EsUUFBaEMsRUFBMkM7QUFDeEUsY0FBSWphLENBQUMsR0FBR2lhLFFBQVEsR0FBRyxDQUFYLEdBQWVBLFFBQVEsR0FBR2hhLE1BQTFCLEdBQW1DZ2EsUUFBM0M7O0FBQ0EsaUJBQVEsRUFBRWphLENBQUYsR0FBTUMsTUFBZCxHQUF3QjtBQUN2QmlhLHdCQUFZLENBQUNsWixJQUFiLENBQW1CaEIsQ0FBbkI7QUFDQTs7QUFDRCxpQkFBT2thLFlBQVA7QUFDQSxTQU4yQjtBQTNNcEI7QUE1VWdCLEtBQTFCO0FBaWlCQS9HLFFBQUksQ0FBQ2dDLE9BQUwsQ0FBYyxLQUFkLElBQXdCaEMsSUFBSSxDQUFDZ0MsT0FBTCxDQUFjLElBQWQsQ0FBeEIsQ0F4dURxQixDQTB1RHJCOztBQUNBLFNBQU1uVixDQUFOLElBQVc7QUFBRXVmLFdBQUssRUFBRSxJQUFUO0FBQWVDLGNBQVEsRUFBRSxJQUF6QjtBQUErQkMsVUFBSSxFQUFFLElBQXJDO0FBQTJDQyxjQUFRLEVBQUUsSUFBckQ7QUFBMkRqVCxXQUFLLEVBQUU7QUFBbEUsS0FBWCxFQUFzRjtBQUNyRjBHLFVBQUksQ0FBQ2dDLE9BQUwsQ0FBY25WLENBQWQsSUFBb0I0WixpQkFBaUIsQ0FBRTVaLENBQUYsQ0FBckM7QUFDQTs7QUFDRCxTQUFNQSxDQUFOLElBQVc7QUFBRTJmLFlBQU0sRUFBRSxJQUFWO0FBQWdCQyxXQUFLLEVBQUU7QUFBdkIsS0FBWCxFQUEyQztBQUMxQ3pNLFVBQUksQ0FBQ2dDLE9BQUwsQ0FBY25WLENBQWQsSUFBb0I2WixrQkFBa0IsQ0FBRTdaLENBQUYsQ0FBdEM7QUFDQSxLQWh2RG9CLENBa3ZEckI7OztBQUNBLGFBQVNzZSxVQUFULEdBQXNCLENBQUU7O0FBQ3hCQSxjQUFVLENBQUMxZSxTQUFYLEdBQXVCdVQsSUFBSSxDQUFDME0sT0FBTCxHQUFlMU0sSUFBSSxDQUFDZ0MsT0FBM0M7QUFDQWhDLFFBQUksQ0FBQ21MLFVBQUwsR0FBa0IsSUFBSUEsVUFBSixFQUFsQjs7QUFFQWhMLFlBQVEsR0FBR0osTUFBTSxDQUFDSSxRQUFQLEdBQWtCLFVBQVVqVCxRQUFWLEVBQW9CeWYsU0FBcEIsRUFBZ0M7QUFDNUQsVUFBSXRCLE9BQUo7QUFBQSxVQUFhdlosS0FBYjtBQUFBLFVBQW9COGEsTUFBcEI7QUFBQSxVQUE0QnZjLElBQTVCO0FBQUEsVUFDQ3djLEtBREQ7QUFBQSxVQUNRckksTUFEUjtBQUFBLFVBQ2dCc0ksVUFEaEI7QUFBQSxVQUVDQyxNQUFNLEdBQUcxTCxVQUFVLENBQUVuVSxRQUFRLEdBQUcsR0FBYixDQUZwQjs7QUFJQSxVQUFLNmYsTUFBTCxFQUFjO0FBQ2IsZUFBT0osU0FBUyxHQUFHLENBQUgsR0FBT0ksTUFBTSxDQUFDeGUsS0FBUCxDQUFjLENBQWQsQ0FBdkI7QUFDQTs7QUFFRHNlLFdBQUssR0FBRzNmLFFBQVI7QUFDQXNYLFlBQU0sR0FBRyxFQUFUO0FBQ0FzSSxnQkFBVSxHQUFHOU0sSUFBSSxDQUFDNEosU0FBbEI7O0FBRUEsYUFBUWlELEtBQVIsRUFBZ0I7QUFFZjtBQUNBLFlBQUssQ0FBQ3hCLE9BQUQsS0FBY3ZaLEtBQUssR0FBR3NRLE1BQU0sQ0FBQ3pKLElBQVAsQ0FBYWtVLEtBQWIsQ0FBdEIsQ0FBTCxFQUFvRDtBQUNuRCxjQUFLL2EsS0FBTCxFQUFhO0FBRVo7QUFDQSthLGlCQUFLLEdBQUdBLEtBQUssQ0FBQ3RlLEtBQU4sQ0FBYXVELEtBQUssQ0FBRSxDQUFGLENBQUwsQ0FBV2hGLE1BQXhCLEtBQW9DK2YsS0FBNUM7QUFDQTs7QUFDRHJJLGdCQUFNLENBQUMzVyxJQUFQLENBQWUrZSxNQUFNLEdBQUcsRUFBeEI7QUFDQTs7QUFFRHZCLGVBQU8sR0FBRyxLQUFWLENBWmUsQ0FjZjs7QUFDQSxZQUFPdlosS0FBSyxHQUFHdVEsWUFBWSxDQUFDMUosSUFBYixDQUFtQmtVLEtBQW5CLENBQWYsRUFBOEM7QUFDN0N4QixpQkFBTyxHQUFHdlosS0FBSyxDQUFDOFQsS0FBTixFQUFWO0FBQ0FnSCxnQkFBTSxDQUFDL2UsSUFBUCxDQUFhO0FBQ1owRixpQkFBSyxFQUFFOFgsT0FESztBQUdaO0FBQ0FoYixnQkFBSSxFQUFFeUIsS0FBSyxDQUFFLENBQUYsQ0FBTCxDQUFXRCxPQUFYLENBQW9Cc1EsS0FBcEIsRUFBMkIsR0FBM0I7QUFKTSxXQUFiO0FBTUEwSyxlQUFLLEdBQUdBLEtBQUssQ0FBQ3RlLEtBQU4sQ0FBYThjLE9BQU8sQ0FBQ3ZlLE1BQXJCLENBQVI7QUFDQSxTQXhCYyxDQTBCZjs7O0FBQ0EsYUFBTXVELElBQU4sSUFBYzJQLElBQUksQ0FBQ3lILE1BQW5CLEVBQTRCO0FBQzNCLGNBQUssQ0FBRTNWLEtBQUssR0FBRzJRLFNBQVMsQ0FBRXBTLElBQUYsQ0FBVCxDQUFrQnNJLElBQWxCLENBQXdCa1UsS0FBeEIsQ0FBVixNQUFpRCxDQUFDQyxVQUFVLENBQUV6YyxJQUFGLENBQVgsS0FDbkR5QixLQUFLLEdBQUdnYixVQUFVLENBQUV6YyxJQUFGLENBQVYsQ0FBb0J5QixLQUFwQixDQUQyQyxDQUFqRCxDQUFMLEVBQzZDO0FBQzVDdVosbUJBQU8sR0FBR3ZaLEtBQUssQ0FBQzhULEtBQU4sRUFBVjtBQUNBZ0gsa0JBQU0sQ0FBQy9lLElBQVAsQ0FBYTtBQUNaMEYsbUJBQUssRUFBRThYLE9BREs7QUFFWmhiLGtCQUFJLEVBQUVBLElBRk07QUFHWjNELHFCQUFPLEVBQUVvRjtBQUhHLGFBQWI7QUFLQSthLGlCQUFLLEdBQUdBLEtBQUssQ0FBQ3RlLEtBQU4sQ0FBYThjLE9BQU8sQ0FBQ3ZlLE1BQXJCLENBQVI7QUFDQTtBQUNEOztBQUVELFlBQUssQ0FBQ3VlLE9BQU4sRUFBZ0I7QUFDZjtBQUNBO0FBQ0QsT0F4RDJELENBMEQ1RDtBQUNBO0FBQ0E7OztBQUNBLGFBQU9zQixTQUFTLEdBQ2ZFLEtBQUssQ0FBQy9mLE1BRFMsR0FFZitmLEtBQUssR0FDSjlNLE1BQU0sQ0FBQzdNLEtBQVAsQ0FBY2hHLFFBQWQsQ0FESSxHQUdKO0FBQ0FtVSxnQkFBVSxDQUFFblUsUUFBRixFQUFZc1gsTUFBWixDQUFWLENBQStCalcsS0FBL0IsQ0FBc0MsQ0FBdEMsQ0FORjtBQU9BLEtBcEVEOztBQXNFQSxhQUFTNlcsVUFBVCxDQUFxQndILE1BQXJCLEVBQThCO0FBQzdCLFVBQUkvZixDQUFDLEdBQUcsQ0FBUjtBQUFBLFVBQ0NvUixHQUFHLEdBQUcyTyxNQUFNLENBQUM5ZixNQURkO0FBQUEsVUFFQ0ksUUFBUSxHQUFHLEVBRlo7O0FBR0EsYUFBUUwsQ0FBQyxHQUFHb1IsR0FBWixFQUFpQnBSLENBQUMsRUFBbEIsRUFBdUI7QUFDdEJLLGdCQUFRLElBQUkwZixNQUFNLENBQUUvZixDQUFGLENBQU4sQ0FBWTBHLEtBQXhCO0FBQ0E7O0FBQ0QsYUFBT3JHLFFBQVA7QUFDQTs7QUFFRCxhQUFTNFcsYUFBVCxDQUF3QndILE9BQXhCLEVBQWlDMEIsVUFBakMsRUFBNkNDLElBQTdDLEVBQW9EO0FBQ25ELFVBQUlqSixHQUFHLEdBQUdnSixVQUFVLENBQUNoSixHQUFyQjtBQUFBLFVBQ0NrSixJQUFJLEdBQUdGLFVBQVUsQ0FBQy9JLElBRG5CO0FBQUEsVUFFQ3lCLEdBQUcsR0FBR3dILElBQUksSUFBSWxKLEdBRmY7QUFBQSxVQUdDbUosZ0JBQWdCLEdBQUdGLElBQUksSUFBSXZILEdBQUcsS0FBSyxZQUhwQztBQUFBLFVBSUMwSCxRQUFRLEdBQUdsTSxJQUFJLEVBSmhCO0FBTUEsYUFBTzhMLFVBQVUsQ0FBQ3RQLEtBQVgsR0FFTjtBQUNBLGdCQUFVelEsSUFBVixFQUFnQjZQLE9BQWhCLEVBQXlCMk4sR0FBekIsRUFBK0I7QUFDOUIsZUFBVXhkLElBQUksR0FBR0EsSUFBSSxDQUFFK1csR0FBRixDQUFyQixFQUFpQztBQUNoQyxjQUFLL1csSUFBSSxDQUFDeUksUUFBTCxLQUFrQixDQUFsQixJQUF1QnlYLGdCQUE1QixFQUErQztBQUM5QyxtQkFBTzdCLE9BQU8sQ0FBRXJlLElBQUYsRUFBUTZQLE9BQVIsRUFBaUIyTixHQUFqQixDQUFkO0FBQ0E7QUFDRDs7QUFDRCxlQUFPLEtBQVA7QUFDQSxPQVZLLEdBWU47QUFDQSxnQkFBVXhkLElBQVYsRUFBZ0I2UCxPQUFoQixFQUF5QjJOLEdBQXpCLEVBQStCO0FBQzlCLFlBQUk0QyxRQUFKO0FBQUEsWUFBYzNDLFdBQWQ7QUFBQSxZQUEyQkMsVUFBM0I7QUFBQSxZQUNDMkMsUUFBUSxHQUFHLENBQUVyTSxPQUFGLEVBQVdtTSxRQUFYLENBRFosQ0FEOEIsQ0FJOUI7O0FBQ0EsWUFBSzNDLEdBQUwsRUFBVztBQUNWLGlCQUFVeGQsSUFBSSxHQUFHQSxJQUFJLENBQUUrVyxHQUFGLENBQXJCLEVBQWlDO0FBQ2hDLGdCQUFLL1csSUFBSSxDQUFDeUksUUFBTCxLQUFrQixDQUFsQixJQUF1QnlYLGdCQUE1QixFQUErQztBQUM5QyxrQkFBSzdCLE9BQU8sQ0FBRXJlLElBQUYsRUFBUTZQLE9BQVIsRUFBaUIyTixHQUFqQixDQUFaLEVBQXFDO0FBQ3BDLHVCQUFPLElBQVA7QUFDQTtBQUNEO0FBQ0Q7QUFDRCxTQVJELE1BUU87QUFDTixpQkFBVXhkLElBQUksR0FBR0EsSUFBSSxDQUFFK1csR0FBRixDQUFyQixFQUFpQztBQUNoQyxnQkFBSy9XLElBQUksQ0FBQ3lJLFFBQUwsS0FBa0IsQ0FBbEIsSUFBdUJ5WCxnQkFBNUIsRUFBK0M7QUFDOUN4Qyx3QkFBVSxHQUFHMWQsSUFBSSxDQUFFMlIsT0FBRixDQUFKLEtBQXFCM1IsSUFBSSxDQUFFMlIsT0FBRixDQUFKLEdBQWtCLEVBQXZDLENBQWIsQ0FEOEMsQ0FHOUM7QUFDQTs7QUFDQThMLHlCQUFXLEdBQUdDLFVBQVUsQ0FBRTFkLElBQUksQ0FBQ2dlLFFBQVAsQ0FBVixLQUNYTixVQUFVLENBQUUxZCxJQUFJLENBQUNnZSxRQUFQLENBQVYsR0FBOEIsRUFEbkIsQ0FBZDs7QUFHQSxrQkFBS2lDLElBQUksSUFBSUEsSUFBSSxLQUFLamdCLElBQUksQ0FBQ2dMLFFBQUwsQ0FBY2hHLFdBQWQsRUFBdEIsRUFBb0Q7QUFDbkRoRixvQkFBSSxHQUFHQSxJQUFJLENBQUUrVyxHQUFGLENBQUosSUFBZS9XLElBQXRCO0FBQ0EsZUFGRCxNQUVPLElBQUssQ0FBRW9nQixRQUFRLEdBQUczQyxXQUFXLENBQUVoRixHQUFGLENBQXhCLEtBQ1gySCxRQUFRLENBQUUsQ0FBRixDQUFSLEtBQWtCcE0sT0FEUCxJQUNrQm9NLFFBQVEsQ0FBRSxDQUFGLENBQVIsS0FBa0JELFFBRHpDLEVBQ29EO0FBRTFEO0FBQ0EsdUJBQVNFLFFBQVEsQ0FBRSxDQUFGLENBQVIsR0FBZ0JELFFBQVEsQ0FBRSxDQUFGLENBQWpDO0FBQ0EsZUFMTSxNQUtBO0FBRU47QUFDQTNDLDJCQUFXLENBQUVoRixHQUFGLENBQVgsR0FBcUI0SCxRQUFyQixDQUhNLENBS047O0FBQ0Esb0JBQU9BLFFBQVEsQ0FBRSxDQUFGLENBQVIsR0FBZ0JoQyxPQUFPLENBQUVyZSxJQUFGLEVBQVE2UCxPQUFSLEVBQWlCMk4sR0FBakIsQ0FBOUIsRUFBeUQ7QUFDeEQseUJBQU8sSUFBUDtBQUNBO0FBQ0Q7QUFDRDtBQUNEO0FBQ0Q7O0FBQ0QsZUFBTyxLQUFQO0FBQ0EsT0F6REY7QUEwREE7O0FBRUQsYUFBUzhDLGNBQVQsQ0FBeUJDLFFBQXpCLEVBQW9DO0FBQ25DLGFBQU9BLFFBQVEsQ0FBQzFnQixNQUFULEdBQWtCLENBQWxCLEdBQ04sVUFBVUcsSUFBVixFQUFnQjZQLE9BQWhCLEVBQXlCMk4sR0FBekIsRUFBK0I7QUFDOUIsWUFBSTVkLENBQUMsR0FBRzJnQixRQUFRLENBQUMxZ0IsTUFBakI7O0FBQ0EsZUFBUUQsQ0FBQyxFQUFULEVBQWM7QUFDYixjQUFLLENBQUMyZ0IsUUFBUSxDQUFFM2dCLENBQUYsQ0FBUixDQUFlSSxJQUFmLEVBQXFCNlAsT0FBckIsRUFBOEIyTixHQUE5QixDQUFOLEVBQTRDO0FBQzNDLG1CQUFPLEtBQVA7QUFDQTtBQUNEOztBQUNELGVBQU8sSUFBUDtBQUNBLE9BVEssR0FVTitDLFFBQVEsQ0FBRSxDQUFGLENBVlQ7QUFXQTs7QUFFRCxhQUFTQyxnQkFBVCxDQUEyQnZnQixRQUEzQixFQUFxQ3dnQixRQUFyQyxFQUErQ3ZPLE9BQS9DLEVBQXlEO0FBQ3hELFVBQUl0UyxDQUFDLEdBQUcsQ0FBUjtBQUFBLFVBQ0NvUixHQUFHLEdBQUd5UCxRQUFRLENBQUM1Z0IsTUFEaEI7O0FBRUEsYUFBUUQsQ0FBQyxHQUFHb1IsR0FBWixFQUFpQnBSLENBQUMsRUFBbEIsRUFBdUI7QUFDdEJrVCxjQUFNLENBQUU3UyxRQUFGLEVBQVl3Z0IsUUFBUSxDQUFFN2dCLENBQUYsQ0FBcEIsRUFBMkJzUyxPQUEzQixDQUFOO0FBQ0E7O0FBQ0QsYUFBT0EsT0FBUDtBQUNBOztBQUVELGFBQVN3TyxRQUFULENBQW1CcEMsU0FBbkIsRUFBOEI5TixHQUE5QixFQUFtQ2dLLE1BQW5DLEVBQTJDM0ssT0FBM0MsRUFBb0QyTixHQUFwRCxFQUEwRDtBQUN6RCxVQUFJeGQsSUFBSjtBQUFBLFVBQ0MyZ0IsWUFBWSxHQUFHLEVBRGhCO0FBQUEsVUFFQy9nQixDQUFDLEdBQUcsQ0FGTDtBQUFBLFVBR0NvUixHQUFHLEdBQUdzTixTQUFTLENBQUN6ZSxNQUhqQjtBQUFBLFVBSUMrZ0IsTUFBTSxHQUFHcFEsR0FBRyxJQUFJLElBSmpCOztBQU1BLGFBQVE1USxDQUFDLEdBQUdvUixHQUFaLEVBQWlCcFIsQ0FBQyxFQUFsQixFQUF1QjtBQUN0QixZQUFPSSxJQUFJLEdBQUdzZSxTQUFTLENBQUUxZSxDQUFGLENBQXZCLEVBQWlDO0FBQ2hDLGNBQUssQ0FBQzRhLE1BQUQsSUFBV0EsTUFBTSxDQUFFeGEsSUFBRixFQUFRNlAsT0FBUixFQUFpQjJOLEdBQWpCLENBQXRCLEVBQStDO0FBQzlDbUQsd0JBQVksQ0FBQy9mLElBQWIsQ0FBbUJaLElBQW5COztBQUNBLGdCQUFLNGdCLE1BQUwsRUFBYztBQUNicFEsaUJBQUcsQ0FBQzVQLElBQUosQ0FBVWhCLENBQVY7QUFDQTtBQUNEO0FBQ0Q7QUFDRDs7QUFFRCxhQUFPK2dCLFlBQVA7QUFDQTs7QUFFRCxhQUFTRSxVQUFULENBQXFCbEUsU0FBckIsRUFBZ0MxYyxRQUFoQyxFQUEwQ29lLE9BQTFDLEVBQW1EeUMsVUFBbkQsRUFBK0RDLFVBQS9ELEVBQTJFQyxZQUEzRSxFQUEwRjtBQUN6RixVQUFLRixVQUFVLElBQUksQ0FBQ0EsVUFBVSxDQUFFblAsT0FBRixDQUE5QixFQUE0QztBQUMzQ21QLGtCQUFVLEdBQUdELFVBQVUsQ0FBRUMsVUFBRixDQUF2QjtBQUNBOztBQUNELFVBQUtDLFVBQVUsSUFBSSxDQUFDQSxVQUFVLENBQUVwUCxPQUFGLENBQTlCLEVBQTRDO0FBQzNDb1Asa0JBQVUsR0FBR0YsVUFBVSxDQUFFRSxVQUFGLEVBQWNDLFlBQWQsQ0FBdkI7QUFDQTs7QUFDRCxhQUFPcEksWUFBWSxDQUFFLFVBQVV4QixJQUFWLEVBQWdCbEYsT0FBaEIsRUFBeUJyQyxPQUF6QixFQUFrQzJOLEdBQWxDLEVBQXdDO0FBQzVELFlBQUl5RCxJQUFKO0FBQUEsWUFBVXJoQixDQUFWO0FBQUEsWUFBYUksSUFBYjtBQUFBLFlBQ0NraEIsTUFBTSxHQUFHLEVBRFY7QUFBQSxZQUVDQyxPQUFPLEdBQUcsRUFGWDtBQUFBLFlBR0NDLFdBQVcsR0FBR2xQLE9BQU8sQ0FBQ3JTLE1BSHZCO0FBQUEsWUFLQztBQUNBeUQsYUFBSyxHQUFHOFQsSUFBSSxJQUFJb0osZ0JBQWdCLENBQy9CdmdCLFFBQVEsSUFBSSxHQURtQixFQUUvQjRQLE9BQU8sQ0FBQ3BILFFBQVIsR0FBbUIsQ0FBRW9ILE9BQUYsQ0FBbkIsR0FBaUNBLE9BRkYsRUFHL0IsRUFIK0IsQ0FOakM7QUFBQSxZQVlDO0FBQ0F3UixpQkFBUyxHQUFHMUUsU0FBUyxLQUFNdkYsSUFBSSxJQUFJLENBQUNuWCxRQUFmLENBQVQsR0FDWHlnQixRQUFRLENBQUVwZCxLQUFGLEVBQVM0ZCxNQUFULEVBQWlCdkUsU0FBakIsRUFBNEI5TSxPQUE1QixFQUFxQzJOLEdBQXJDLENBREcsR0FFWGxhLEtBZkY7QUFBQSxZQWlCQ2dlLFVBQVUsR0FBR2pELE9BQU8sR0FFbkI7QUFDQTBDLGtCQUFVLEtBQU0zSixJQUFJLEdBQUd1RixTQUFILEdBQWV5RSxXQUFXLElBQUlOLFVBQXhDLENBQVYsR0FFQztBQUNBLFVBSEQsR0FLQztBQUNBNU8sZUFUa0IsR0FVbkJtUCxTQTNCRixDQUQ0RCxDQThCNUQ7O0FBQ0EsWUFBS2hELE9BQUwsRUFBZTtBQUNkQSxpQkFBTyxDQUFFZ0QsU0FBRixFQUFhQyxVQUFiLEVBQXlCelIsT0FBekIsRUFBa0MyTixHQUFsQyxDQUFQO0FBQ0EsU0FqQzJELENBbUM1RDs7O0FBQ0EsWUFBS3NELFVBQUwsRUFBa0I7QUFDakJHLGNBQUksR0FBR1AsUUFBUSxDQUFFWSxVQUFGLEVBQWNILE9BQWQsQ0FBZjtBQUNBTCxvQkFBVSxDQUFFRyxJQUFGLEVBQVEsRUFBUixFQUFZcFIsT0FBWixFQUFxQjJOLEdBQXJCLENBQVYsQ0FGaUIsQ0FJakI7O0FBQ0E1ZCxXQUFDLEdBQUdxaEIsSUFBSSxDQUFDcGhCLE1BQVQ7O0FBQ0EsaUJBQVFELENBQUMsRUFBVCxFQUFjO0FBQ2IsZ0JBQU9JLElBQUksR0FBR2loQixJQUFJLENBQUVyaEIsQ0FBRixDQUFsQixFQUE0QjtBQUMzQjBoQix3QkFBVSxDQUFFSCxPQUFPLENBQUV2aEIsQ0FBRixDQUFULENBQVYsR0FBNkIsRUFBR3loQixTQUFTLENBQUVGLE9BQU8sQ0FBRXZoQixDQUFGLENBQVQsQ0FBVCxHQUE0QkksSUFBL0IsQ0FBN0I7QUFDQTtBQUNEO0FBQ0Q7O0FBRUQsWUFBS29YLElBQUwsRUFBWTtBQUNYLGNBQUsySixVQUFVLElBQUlwRSxTQUFuQixFQUErQjtBQUM5QixnQkFBS29FLFVBQUwsRUFBa0I7QUFFakI7QUFDQUUsa0JBQUksR0FBRyxFQUFQO0FBQ0FyaEIsZUFBQyxHQUFHMGhCLFVBQVUsQ0FBQ3poQixNQUFmOztBQUNBLHFCQUFRRCxDQUFDLEVBQVQsRUFBYztBQUNiLG9CQUFPSSxJQUFJLEdBQUdzaEIsVUFBVSxDQUFFMWhCLENBQUYsQ0FBeEIsRUFBa0M7QUFFakM7QUFDQXFoQixzQkFBSSxDQUFDcmdCLElBQUwsQ0FBYXlnQixTQUFTLENBQUV6aEIsQ0FBRixDQUFULEdBQWlCSSxJQUE5QjtBQUNBO0FBQ0Q7O0FBQ0QrZ0Isd0JBQVUsQ0FBRSxJQUFGLEVBQVVPLFVBQVUsR0FBRyxFQUF2QixFQUE2QkwsSUFBN0IsRUFBbUN6RCxHQUFuQyxDQUFWO0FBQ0EsYUFkNkIsQ0FnQjlCOzs7QUFDQTVkLGFBQUMsR0FBRzBoQixVQUFVLENBQUN6aEIsTUFBZjs7QUFDQSxtQkFBUUQsQ0FBQyxFQUFULEVBQWM7QUFDYixrQkFBSyxDQUFFSSxJQUFJLEdBQUdzaEIsVUFBVSxDQUFFMWhCLENBQUYsQ0FBbkIsS0FDSixDQUFFcWhCLElBQUksR0FBR0YsVUFBVSxHQUFHcGdCLE9BQU8sQ0FBRXlXLElBQUYsRUFBUXBYLElBQVIsQ0FBVixHQUEyQmtoQixNQUFNLENBQUV0aEIsQ0FBRixDQUFwRCxJQUE4RCxDQUFDLENBRGhFLEVBQ29FO0FBRW5Fd1gsb0JBQUksQ0FBRTZKLElBQUYsQ0FBSixHQUFlLEVBQUcvTyxPQUFPLENBQUUrTyxJQUFGLENBQVAsR0FBa0JqaEIsSUFBckIsQ0FBZjtBQUNBO0FBQ0Q7QUFDRCxXQTFCVSxDQTRCWjs7QUFDQyxTQTdCRCxNQTZCTztBQUNOc2hCLG9CQUFVLEdBQUdaLFFBQVEsQ0FDcEJZLFVBQVUsS0FBS3BQLE9BQWYsR0FDQ29QLFVBQVUsQ0FBQ25nQixNQUFYLENBQW1CaWdCLFdBQW5CLEVBQWdDRSxVQUFVLENBQUN6aEIsTUFBM0MsQ0FERCxHQUVDeWhCLFVBSG1CLENBQXJCOztBQUtBLGNBQUtQLFVBQUwsRUFBa0I7QUFDakJBLHNCQUFVLENBQUUsSUFBRixFQUFRN08sT0FBUixFQUFpQm9QLFVBQWpCLEVBQTZCOUQsR0FBN0IsQ0FBVjtBQUNBLFdBRkQsTUFFTztBQUNONWMsZ0JBQUksQ0FBQ1ksS0FBTCxDQUFZMFEsT0FBWixFQUFxQm9QLFVBQXJCO0FBQ0E7QUFDRDtBQUNELE9BMUZrQixDQUFuQjtBQTJGQTs7QUFFRCxhQUFTQyxpQkFBVCxDQUE0QjVCLE1BQTVCLEVBQXFDO0FBQ3BDLFVBQUk2QixZQUFKO0FBQUEsVUFBa0JuRCxPQUFsQjtBQUFBLFVBQTJCcE4sQ0FBM0I7QUFBQSxVQUNDRCxHQUFHLEdBQUcyTyxNQUFNLENBQUM5ZixNQURkO0FBQUEsVUFFQzRoQixlQUFlLEdBQUcxTyxJQUFJLENBQUMySixRQUFMLENBQWVpRCxNQUFNLENBQUUsQ0FBRixDQUFOLENBQVl2YyxJQUEzQixDQUZuQjtBQUFBLFVBR0NzZSxnQkFBZ0IsR0FBR0QsZUFBZSxJQUFJMU8sSUFBSSxDQUFDMkosUUFBTCxDQUFlLEdBQWYsQ0FIdkM7QUFBQSxVQUlDOWMsQ0FBQyxHQUFHNmhCLGVBQWUsR0FBRyxDQUFILEdBQU8sQ0FKM0I7QUFBQSxVQU1DO0FBQ0FFLGtCQUFZLEdBQUc5SyxhQUFhLENBQUUsVUFBVTdXLElBQVYsRUFBaUI7QUFDOUMsZUFBT0EsSUFBSSxLQUFLd2hCLFlBQWhCO0FBQ0EsT0FGMkIsRUFFekJFLGdCQUZ5QixFQUVQLElBRk8sQ0FQN0I7QUFBQSxVQVVDRSxlQUFlLEdBQUcvSyxhQUFhLENBQUUsVUFBVTdXLElBQVYsRUFBaUI7QUFDakQsZUFBT1csT0FBTyxDQUFFNmdCLFlBQUYsRUFBZ0J4aEIsSUFBaEIsQ0FBUCxHQUFnQyxDQUFDLENBQXhDO0FBQ0EsT0FGOEIsRUFFNUIwaEIsZ0JBRjRCLEVBRVYsSUFGVSxDQVZoQztBQUFBLFVBYUNuQixRQUFRLEdBQUcsQ0FBRSxVQUFVdmdCLElBQVYsRUFBZ0I2UCxPQUFoQixFQUF5QjJOLEdBQXpCLEVBQStCO0FBQzNDLFlBQUlwTixHQUFHLEdBQUssQ0FBQ3FSLGVBQUQsS0FBc0JqRSxHQUFHLElBQUkzTixPQUFPLEtBQUt3RCxnQkFBekMsQ0FBRixLQUNULENBQUVtTyxZQUFZLEdBQUczUixPQUFqQixFQUEyQnBILFFBQTNCLEdBQ0NrWixZQUFZLENBQUUzaEIsSUFBRixFQUFRNlAsT0FBUixFQUFpQjJOLEdBQWpCLENBRGIsR0FFQ29FLGVBQWUsQ0FBRTVoQixJQUFGLEVBQVE2UCxPQUFSLEVBQWlCMk4sR0FBakIsQ0FIUCxDQUFWLENBRDJDLENBTTNDOztBQUNBZ0Usb0JBQVksR0FBRyxJQUFmO0FBQ0EsZUFBT3BSLEdBQVA7QUFDQSxPQVRVLENBYlo7O0FBd0JBLGFBQVF4USxDQUFDLEdBQUdvUixHQUFaLEVBQWlCcFIsQ0FBQyxFQUFsQixFQUF1QjtBQUN0QixZQUFPeWUsT0FBTyxHQUFHdEwsSUFBSSxDQUFDMkosUUFBTCxDQUFlaUQsTUFBTSxDQUFFL2YsQ0FBRixDQUFOLENBQVl3RCxJQUEzQixDQUFqQixFQUF1RDtBQUN0RG1kLGtCQUFRLEdBQUcsQ0FBRTFKLGFBQWEsQ0FBRXlKLGNBQWMsQ0FBRUMsUUFBRixDQUFoQixFQUE4QmxDLE9BQTlCLENBQWYsQ0FBWDtBQUNBLFNBRkQsTUFFTztBQUNOQSxpQkFBTyxHQUFHdEwsSUFBSSxDQUFDeUgsTUFBTCxDQUFhbUYsTUFBTSxDQUFFL2YsQ0FBRixDQUFOLENBQVl3RCxJQUF6QixFQUFnQzVCLEtBQWhDLENBQXVDLElBQXZDLEVBQTZDbWUsTUFBTSxDQUFFL2YsQ0FBRixDQUFOLENBQVlILE9BQXpELENBQVYsQ0FETSxDQUdOOztBQUNBLGNBQUs0ZSxPQUFPLENBQUUxTSxPQUFGLENBQVosRUFBMEI7QUFFekI7QUFDQVYsYUFBQyxHQUFHLEVBQUVyUixDQUFOOztBQUNBLG1CQUFRcVIsQ0FBQyxHQUFHRCxHQUFaLEVBQWlCQyxDQUFDLEVBQWxCLEVBQXVCO0FBQ3RCLGtCQUFLOEIsSUFBSSxDQUFDMkosUUFBTCxDQUFlaUQsTUFBTSxDQUFFMU8sQ0FBRixDQUFOLENBQVk3TixJQUEzQixDQUFMLEVBQXlDO0FBQ3hDO0FBQ0E7QUFDRDs7QUFDRCxtQkFBT3lkLFVBQVUsQ0FDaEJqaEIsQ0FBQyxHQUFHLENBQUosSUFBUzBnQixjQUFjLENBQUVDLFFBQUYsQ0FEUCxFQUVoQjNnQixDQUFDLEdBQUcsQ0FBSixJQUFTdVksVUFBVSxFQUVuQjtBQUNBd0gsa0JBQU0sQ0FDSnJlLEtBREYsQ0FDUyxDQURULEVBQ1kxQixDQUFDLEdBQUcsQ0FEaEIsRUFFRTZGLE1BRkYsQ0FFVTtBQUFFYSxtQkFBSyxFQUFFcVosTUFBTSxDQUFFL2YsQ0FBQyxHQUFHLENBQU4sQ0FBTixDQUFnQndELElBQWhCLEtBQXlCLEdBQXpCLEdBQStCLEdBQS9CLEdBQXFDO0FBQTlDLGFBRlYsQ0FIbUIsQ0FBVixDQU1Qd0IsT0FOTyxDQU1Fc1EsS0FORixFQU1TLElBTlQsQ0FGTyxFQVNoQm1KLE9BVGdCLEVBVWhCemUsQ0FBQyxHQUFHcVIsQ0FBSixJQUFTc1EsaUJBQWlCLENBQUU1QixNQUFNLENBQUNyZSxLQUFQLENBQWMxQixDQUFkLEVBQWlCcVIsQ0FBakIsQ0FBRixDQVZWLEVBV2hCQSxDQUFDLEdBQUdELEdBQUosSUFBV3VRLGlCQUFpQixDQUFJNUIsTUFBTSxHQUFHQSxNQUFNLENBQUNyZSxLQUFQLENBQWMyUCxDQUFkLENBQWIsQ0FYWixFQVloQkEsQ0FBQyxHQUFHRCxHQUFKLElBQVdtSCxVQUFVLENBQUV3SCxNQUFGLENBWkwsQ0FBakI7QUFjQTs7QUFDRFksa0JBQVEsQ0FBQzNmLElBQVQsQ0FBZXlkLE9BQWY7QUFDQTtBQUNEOztBQUVELGFBQU9pQyxjQUFjLENBQUVDLFFBQUYsQ0FBckI7QUFDQTs7QUFFRCxhQUFTc0Isd0JBQVQsQ0FBbUNDLGVBQW5DLEVBQW9EQyxXQUFwRCxFQUFrRTtBQUNqRSxVQUFJQyxLQUFLLEdBQUdELFdBQVcsQ0FBQ2xpQixNQUFaLEdBQXFCLENBQWpDO0FBQUEsVUFDQ29pQixTQUFTLEdBQUdILGVBQWUsQ0FBQ2ppQixNQUFoQixHQUF5QixDQUR0QztBQUFBLFVBRUNxaUIsWUFBWSxHQUFHLFVBQVU5SyxJQUFWLEVBQWdCdkgsT0FBaEIsRUFBeUIyTixHQUF6QixFQUE4QnRMLE9BQTlCLEVBQXVDaVEsU0FBdkMsRUFBbUQ7QUFDakUsWUFBSW5pQixJQUFKO0FBQUEsWUFBVWlSLENBQVY7QUFBQSxZQUFhb04sT0FBYjtBQUFBLFlBQ0MrRCxZQUFZLEdBQUcsQ0FEaEI7QUFBQSxZQUVDeGlCLENBQUMsR0FBRyxHQUZMO0FBQUEsWUFHQzBlLFNBQVMsR0FBR2xILElBQUksSUFBSSxFQUhyQjtBQUFBLFlBSUNpTCxVQUFVLEdBQUcsRUFKZDtBQUFBLFlBS0NDLGFBQWEsR0FBR2pQLGdCQUxqQjtBQUFBLFlBT0M7QUFDQS9QLGFBQUssR0FBRzhULElBQUksSUFBSTZLLFNBQVMsSUFBSWxQLElBQUksQ0FBQzJILElBQUwsQ0FBVyxLQUFYLEVBQW9CLEdBQXBCLEVBQXlCeUgsU0FBekIsQ0FSOUI7QUFBQSxZQVVDO0FBQ0FJLHFCQUFhLEdBQUt2TyxPQUFPLElBQUlzTyxhQUFhLElBQUksSUFBakIsR0FBd0IsQ0FBeEIsR0FBNEJqYSxJQUFJLENBQUN1SixNQUFMLE1BQWlCLEdBWDNFO0FBQUEsWUFZQ1osR0FBRyxHQUFHMU4sS0FBSyxDQUFDekQsTUFaYjs7QUFjQSxZQUFLc2lCLFNBQUwsRUFBaUI7QUFFaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTlPLDBCQUFnQixHQUFHeEQsT0FBTyxJQUFJL00sUUFBWCxJQUF1QitNLE9BQXZCLElBQWtDc1MsU0FBckQ7QUFDQSxTQXRCZ0UsQ0F3QmpFO0FBQ0E7QUFDQTs7O0FBQ0EsZUFBUXZpQixDQUFDLEtBQUtvUixHQUFOLElBQWEsQ0FBRWhSLElBQUksR0FBR3NELEtBQUssQ0FBRTFELENBQUYsQ0FBZCxLQUF5QixJQUE5QyxFQUFvREEsQ0FBQyxFQUFyRCxFQUEwRDtBQUN6RCxjQUFLcWlCLFNBQVMsSUFBSWppQixJQUFsQixFQUF5QjtBQUN4QmlSLGFBQUMsR0FBRyxDQUFKLENBRHdCLENBR3hCO0FBQ0E7QUFDQTtBQUNBOztBQUNBLGdCQUFLLENBQUNwQixPQUFELElBQVk3UCxJQUFJLENBQUMwWCxhQUFMLElBQXNCNVUsUUFBdkMsRUFBa0Q7QUFDakQwUSx5QkFBVyxDQUFFeFQsSUFBRixDQUFYO0FBQ0F3ZCxpQkFBRyxHQUFHLENBQUM5SixjQUFQO0FBQ0E7O0FBQ0QsbUJBQVUySyxPQUFPLEdBQUd5RCxlQUFlLENBQUU3USxDQUFDLEVBQUgsQ0FBbkMsRUFBK0M7QUFDOUMsa0JBQUtvTixPQUFPLENBQUVyZSxJQUFGLEVBQVE2UCxPQUFPLElBQUkvTSxRQUFuQixFQUE2QjBhLEdBQTdCLENBQVosRUFBaUQ7QUFDaER0TCx1QkFBTyxDQUFDdFIsSUFBUixDQUFjWixJQUFkO0FBQ0E7QUFDQTtBQUNEOztBQUNELGdCQUFLbWlCLFNBQUwsRUFBaUI7QUFDaEJuTyxxQkFBTyxHQUFHdU8sYUFBVjtBQUNBO0FBQ0QsV0FyQndELENBdUJ6RDs7O0FBQ0EsY0FBS1AsS0FBTCxFQUFhO0FBRVo7QUFDQSxnQkFBT2hpQixJQUFJLEdBQUcsQ0FBQ3FlLE9BQUQsSUFBWXJlLElBQTFCLEVBQW1DO0FBQ2xDb2lCLDBCQUFZO0FBQ1osYUFMVyxDQU9aOzs7QUFDQSxnQkFBS2hMLElBQUwsRUFBWTtBQUNYa0gsdUJBQVMsQ0FBQzFkLElBQVYsQ0FBZ0JaLElBQWhCO0FBQ0E7QUFDRDtBQUNELFNBL0RnRSxDQWlFakU7QUFDQTs7O0FBQ0FvaUIsb0JBQVksSUFBSXhpQixDQUFoQixDQW5FaUUsQ0FxRWpFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFlBQUtvaUIsS0FBSyxJQUFJcGlCLENBQUMsS0FBS3dpQixZQUFwQixFQUFtQztBQUNsQ25SLFdBQUMsR0FBRyxDQUFKOztBQUNBLGlCQUFVb04sT0FBTyxHQUFHMEQsV0FBVyxDQUFFOVEsQ0FBQyxFQUFILENBQS9CLEVBQTJDO0FBQzFDb04sbUJBQU8sQ0FBRUMsU0FBRixFQUFhK0QsVUFBYixFQUF5QnhTLE9BQXpCLEVBQWtDMk4sR0FBbEMsQ0FBUDtBQUNBOztBQUVELGNBQUtwRyxJQUFMLEVBQVk7QUFFWDtBQUNBLGdCQUFLZ0wsWUFBWSxHQUFHLENBQXBCLEVBQXdCO0FBQ3ZCLHFCQUFReGlCLENBQUMsRUFBVCxFQUFjO0FBQ2Isb0JBQUssRUFBRzBlLFNBQVMsQ0FBRTFlLENBQUYsQ0FBVCxJQUFrQnlpQixVQUFVLENBQUV6aUIsQ0FBRixDQUEvQixDQUFMLEVBQThDO0FBQzdDeWlCLDRCQUFVLENBQUV6aUIsQ0FBRixDQUFWLEdBQWtCNFUsR0FBRyxDQUFDL1IsSUFBSixDQUFVeVAsT0FBVixDQUFsQjtBQUNBO0FBQ0Q7QUFDRCxhQVRVLENBV1g7OztBQUNBbVEsc0JBQVUsR0FBRzNCLFFBQVEsQ0FBRTJCLFVBQUYsQ0FBckI7QUFDQSxXQW5CaUMsQ0FxQmxDOzs7QUFDQXpoQixjQUFJLENBQUNZLEtBQUwsQ0FBWTBRLE9BQVosRUFBcUJtUSxVQUFyQixFQXRCa0MsQ0F3QmxDOztBQUNBLGNBQUtGLFNBQVMsSUFBSSxDQUFDL0ssSUFBZCxJQUFzQmlMLFVBQVUsQ0FBQ3hpQixNQUFYLEdBQW9CLENBQTFDLElBQ0Z1aUIsWUFBWSxHQUFHTCxXQUFXLENBQUNsaUIsTUFBN0IsR0FBd0MsQ0FEekMsRUFDNkM7QUFFNUNpVCxrQkFBTSxDQUFDbUosVUFBUCxDQUFtQi9KLE9BQW5CO0FBQ0E7QUFDRCxTQTFHZ0UsQ0E0R2pFOzs7QUFDQSxZQUFLaVEsU0FBTCxFQUFpQjtBQUNoQm5PLGlCQUFPLEdBQUd1TyxhQUFWO0FBQ0FsUCwwQkFBZ0IsR0FBR2lQLGFBQW5CO0FBQ0E7O0FBRUQsZUFBT2hFLFNBQVA7QUFDQSxPQXJIRjs7QUF1SEEsYUFBTzBELEtBQUssR0FDWHBKLFlBQVksQ0FBRXNKLFlBQUYsQ0FERCxHQUVYQSxZQUZEO0FBR0E7O0FBRUQvTyxXQUFPLEdBQUdMLE1BQU0sQ0FBQ0ssT0FBUCxHQUFpQixVQUFVbFQsUUFBVixFQUFvQjRFO0FBQU07QUFBMUIsTUFBb0Q7QUFDOUUsVUFBSWpGLENBQUo7QUFBQSxVQUNDbWlCLFdBQVcsR0FBRyxFQURmO0FBQUEsVUFFQ0QsZUFBZSxHQUFHLEVBRm5CO0FBQUEsVUFHQ2hDLE1BQU0sR0FBR3pMLGFBQWEsQ0FBRXBVLFFBQVEsR0FBRyxHQUFiLENBSHZCOztBQUtBLFVBQUssQ0FBQzZmLE1BQU4sRUFBZTtBQUVkO0FBQ0EsWUFBSyxDQUFDamIsS0FBTixFQUFjO0FBQ2JBLGVBQUssR0FBR3FPLFFBQVEsQ0FBRWpULFFBQUYsQ0FBaEI7QUFDQTs7QUFDREwsU0FBQyxHQUFHaUYsS0FBSyxDQUFDaEYsTUFBVjs7QUFDQSxlQUFRRCxDQUFDLEVBQVQsRUFBYztBQUNia2dCLGdCQUFNLEdBQUd5QixpQkFBaUIsQ0FBRTFjLEtBQUssQ0FBRWpGLENBQUYsQ0FBUCxDQUExQjs7QUFDQSxjQUFLa2dCLE1BQU0sQ0FBRW5PLE9BQUYsQ0FBWCxFQUF5QjtBQUN4Qm9RLHVCQUFXLENBQUNuaEIsSUFBWixDQUFrQmtmLE1BQWxCO0FBQ0EsV0FGRCxNQUVPO0FBQ05nQywyQkFBZSxDQUFDbGhCLElBQWhCLENBQXNCa2YsTUFBdEI7QUFDQTtBQUNELFNBZGEsQ0FnQmQ7OztBQUNBQSxjQUFNLEdBQUd6TCxhQUFhLENBQ3JCcFUsUUFEcUIsRUFFckI0aEIsd0JBQXdCLENBQUVDLGVBQUYsRUFBbUJDLFdBQW5CLENBRkgsQ0FBdEIsQ0FqQmMsQ0FzQmQ7O0FBQ0FqQyxjQUFNLENBQUM3ZixRQUFQLEdBQWtCQSxRQUFsQjtBQUNBOztBQUNELGFBQU82ZixNQUFQO0FBQ0EsS0FoQ0Q7QUFrQ0E7Ozs7Ozs7Ozs7O0FBU0ExTSxVQUFNLEdBQUdOLE1BQU0sQ0FBQ00sTUFBUCxHQUFnQixVQUFVblQsUUFBVixFQUFvQjRQLE9BQXBCLEVBQTZCcUMsT0FBN0IsRUFBc0NrRixJQUF0QyxFQUE2QztBQUNyRSxVQUFJeFgsQ0FBSjtBQUFBLFVBQU8rZixNQUFQO0FBQUEsVUFBZTZDLEtBQWY7QUFBQSxVQUFzQnBmLElBQXRCO0FBQUEsVUFBNEJzWCxJQUE1QjtBQUFBLFVBQ0MrSCxRQUFRLEdBQUcsT0FBT3hpQixRQUFQLEtBQW9CLFVBQXBCLElBQWtDQSxRQUQ5QztBQUFBLFVBRUM0RSxLQUFLLEdBQUcsQ0FBQ3VTLElBQUQsSUFBU2xFLFFBQVEsQ0FBSWpULFFBQVEsR0FBR3dpQixRQUFRLENBQUN4aUIsUUFBVCxJQUFxQkEsUUFBcEMsQ0FGMUI7QUFJQWlTLGFBQU8sR0FBR0EsT0FBTyxJQUFJLEVBQXJCLENBTHFFLENBT3JFO0FBQ0E7O0FBQ0EsVUFBS3JOLEtBQUssQ0FBQ2hGLE1BQU4sS0FBaUIsQ0FBdEIsRUFBMEI7QUFFekI7QUFDQThmLGNBQU0sR0FBRzlhLEtBQUssQ0FBRSxDQUFGLENBQUwsR0FBYUEsS0FBSyxDQUFFLENBQUYsQ0FBTCxDQUFXdkQsS0FBWCxDQUFrQixDQUFsQixDQUF0Qjs7QUFDQSxZQUFLcWUsTUFBTSxDQUFDOWYsTUFBUCxHQUFnQixDQUFoQixJQUFxQixDQUFFMmlCLEtBQUssR0FBRzdDLE1BQU0sQ0FBRSxDQUFGLENBQWhCLEVBQXdCdmMsSUFBeEIsS0FBaUMsSUFBdEQsSUFDSnlNLE9BQU8sQ0FBQ3BILFFBQVIsS0FBcUIsQ0FEakIsSUFDc0JpTCxjQUR0QixJQUN3Q1gsSUFBSSxDQUFDMkosUUFBTCxDQUFlaUQsTUFBTSxDQUFFLENBQUYsQ0FBTixDQUFZdmMsSUFBM0IsQ0FEN0MsRUFDaUY7QUFFaEZ5TSxpQkFBTyxHQUFHLENBQUVrRCxJQUFJLENBQUMySCxJQUFMLENBQVcsSUFBWCxFQUFtQjhILEtBQUssQ0FBQy9pQixPQUFOLENBQWUsQ0FBZixFQUM3Qm1GLE9BRDZCLENBQ3BCbVIsU0FEb0IsRUFDVEMsU0FEUyxDQUFuQixFQUN1Qm5HLE9BRHZCLEtBQ29DLEVBRHRDLEVBQzRDLENBRDVDLENBQVY7O0FBRUEsY0FBSyxDQUFDQSxPQUFOLEVBQWdCO0FBQ2YsbUJBQU9xQyxPQUFQLENBRGUsQ0FHaEI7QUFDQyxXQUpELE1BSU8sSUFBS3VRLFFBQUwsRUFBZ0I7QUFDdEI1UyxtQkFBTyxHQUFHQSxPQUFPLENBQUNoTixVQUFsQjtBQUNBOztBQUVENUMsa0JBQVEsR0FBR0EsUUFBUSxDQUFDcUIsS0FBVCxDQUFnQnFlLE1BQU0sQ0FBQ2hILEtBQVAsR0FBZXJTLEtBQWYsQ0FBcUJ6RyxNQUFyQyxDQUFYO0FBQ0EsU0FsQndCLENBb0J6Qjs7O0FBQ0FELFNBQUMsR0FBRzRWLFNBQVMsQ0FBRSxjQUFGLENBQVQsQ0FBNEJ3QyxJQUE1QixDQUFrQy9YLFFBQWxDLElBQStDLENBQS9DLEdBQW1EMGYsTUFBTSxDQUFDOWYsTUFBOUQ7O0FBQ0EsZUFBUUQsQ0FBQyxFQUFULEVBQWM7QUFDYjRpQixlQUFLLEdBQUc3QyxNQUFNLENBQUUvZixDQUFGLENBQWQsQ0FEYSxDQUdiOztBQUNBLGNBQUttVCxJQUFJLENBQUMySixRQUFMLENBQWlCdFosSUFBSSxHQUFHb2YsS0FBSyxDQUFDcGYsSUFBOUIsQ0FBTCxFQUE4QztBQUM3QztBQUNBOztBQUNELGNBQU9zWCxJQUFJLEdBQUczSCxJQUFJLENBQUMySCxJQUFMLENBQVd0WCxJQUFYLENBQWQsRUFBb0M7QUFFbkM7QUFDQSxnQkFBT2dVLElBQUksR0FBR3NELElBQUksQ0FDakI4SCxLQUFLLENBQUMvaUIsT0FBTixDQUFlLENBQWYsRUFBbUJtRixPQUFuQixDQUE0Qm1SLFNBQTVCLEVBQXVDQyxTQUF2QyxDQURpQixFQUVqQkYsUUFBUSxDQUFDa0MsSUFBVCxDQUFlMkgsTUFBTSxDQUFFLENBQUYsQ0FBTixDQUFZdmMsSUFBM0IsS0FBcUM2VSxXQUFXLENBQUVwSSxPQUFPLENBQUNoTixVQUFWLENBQWhELElBQ0NnTixPQUhnQixDQUFsQixFQUlNO0FBRUw7QUFDQThQLG9CQUFNLENBQUN4ZSxNQUFQLENBQWV2QixDQUFmLEVBQWtCLENBQWxCO0FBQ0FLLHNCQUFRLEdBQUdtWCxJQUFJLENBQUN2WCxNQUFMLElBQWVzWSxVQUFVLENBQUV3SCxNQUFGLENBQXBDOztBQUNBLGtCQUFLLENBQUMxZixRQUFOLEVBQWlCO0FBQ2hCVyxvQkFBSSxDQUFDWSxLQUFMLENBQVkwUSxPQUFaLEVBQXFCa0YsSUFBckI7QUFDQSx1QkFBT2xGLE9BQVA7QUFDQTs7QUFFRDtBQUNBO0FBQ0Q7QUFDRDtBQUNELE9BM0RvRSxDQTZEckU7QUFDQTs7O0FBQ0EsT0FBRXVRLFFBQVEsSUFBSXRQLE9BQU8sQ0FBRWxULFFBQUYsRUFBWTRFLEtBQVosQ0FBckIsRUFDQ3VTLElBREQsRUFFQ3ZILE9BRkQsRUFHQyxDQUFDNkQsY0FIRixFQUlDeEIsT0FKRCxFQUtDLENBQUNyQyxPQUFELElBQVlpRyxRQUFRLENBQUNrQyxJQUFULENBQWUvWCxRQUFmLEtBQTZCZ1ksV0FBVyxDQUFFcEksT0FBTyxDQUFDaE4sVUFBVixDQUFwRCxJQUE4RWdOLE9BTC9FO0FBT0EsYUFBT3FDLE9BQVA7QUFDQSxLQXZFRCxDQWp3RXFCLENBMDBFckI7QUFFQTs7O0FBQ0F0RCxXQUFPLENBQUN3TixVQUFSLEdBQXFCekssT0FBTyxDQUFDaUIsS0FBUixDQUFlLEVBQWYsRUFBb0J6QixJQUFwQixDQUEwQm9ELFNBQTFCLEVBQXNDNkQsSUFBdEMsQ0FBNEMsRUFBNUMsTUFBcUR6RyxPQUExRSxDQTcwRXFCLENBKzBFckI7QUFDQTs7QUFDQS9DLFdBQU8sQ0FBQ3VOLGdCQUFSLEdBQTJCLENBQUMsQ0FBQzVJLFlBQTdCLENBajFFcUIsQ0FtMUVyQjs7QUFDQUMsZUFBVyxHQXAxRVUsQ0FzMUVyQjtBQUNBOztBQUNBNUUsV0FBTyxDQUFDNk0sWUFBUixHQUF1QjVDLE1BQU0sQ0FBRSxVQUFVQyxFQUFWLEVBQWU7QUFFN0M7QUFDQSxhQUFPQSxFQUFFLENBQUN1Qyx1QkFBSCxDQUE0QnZZLFFBQVEsQ0FBQ2dGLGFBQVQsQ0FBd0IsVUFBeEIsQ0FBNUIsSUFBcUUsQ0FBNUU7QUFDQSxLQUo0QixDQUE3QixDQXgxRXFCLENBODFFckI7QUFDQTtBQUNBOztBQUNBLFFBQUssQ0FBQytRLE1BQU0sQ0FBRSxVQUFVQyxFQUFWLEVBQWU7QUFDNUJBLFFBQUUsQ0FBQ2lDLFNBQUgsR0FBZSxrQkFBZjtBQUNBLGFBQU9qQyxFQUFFLENBQUN3RCxVQUFILENBQWN6VyxZQUFkLENBQTRCLE1BQTVCLE1BQXlDLEdBQWhEO0FBQ0EsS0FIVyxDQUFaLEVBR007QUFDTGtULGVBQVMsQ0FBRSx3QkFBRixFQUE0QixVQUFVL1ksSUFBVixFQUFnQm9SLElBQWhCLEVBQXNCNkIsS0FBdEIsRUFBOEI7QUFDbEUsWUFBSyxDQUFDQSxLQUFOLEVBQWM7QUFDYixpQkFBT2pULElBQUksQ0FBQzZGLFlBQUwsQ0FBbUJ1TCxJQUFuQixFQUF5QkEsSUFBSSxDQUFDcE0sV0FBTCxPQUF1QixNQUF2QixHQUFnQyxDQUFoQyxHQUFvQyxDQUE3RCxDQUFQO0FBQ0E7QUFDRCxPQUpRLENBQVQ7QUFLQSxLQTEyRW9CLENBNDJFckI7QUFDQTs7O0FBQ0EsUUFBSyxDQUFDNEosT0FBTyxDQUFDa0csVUFBVCxJQUF1QixDQUFDK0QsTUFBTSxDQUFFLFVBQVVDLEVBQVYsRUFBZTtBQUNuREEsUUFBRSxDQUFDaUMsU0FBSCxHQUFlLFVBQWY7QUFDQWpDLFFBQUUsQ0FBQ3dELFVBQUgsQ0FBYzdNLFlBQWQsQ0FBNEIsT0FBNUIsRUFBcUMsRUFBckM7QUFDQSxhQUFPcUosRUFBRSxDQUFDd0QsVUFBSCxDQUFjelcsWUFBZCxDQUE0QixPQUE1QixNQUEwQyxFQUFqRDtBQUNBLEtBSmtDLENBQW5DLEVBSU07QUFDTGtULGVBQVMsQ0FBRSxPQUFGLEVBQVcsVUFBVS9ZLElBQVYsRUFBZ0IwaUIsS0FBaEIsRUFBdUJ6UCxLQUF2QixFQUErQjtBQUNsRCxZQUFLLENBQUNBLEtBQUQsSUFBVWpULElBQUksQ0FBQ2dMLFFBQUwsQ0FBY2hHLFdBQWQsT0FBZ0MsT0FBL0MsRUFBeUQ7QUFDeEQsaUJBQU9oRixJQUFJLENBQUMyaUIsWUFBWjtBQUNBO0FBQ0QsT0FKUSxDQUFUO0FBS0EsS0F4M0VvQixDQTAzRXJCO0FBQ0E7OztBQUNBLFFBQUssQ0FBQzlKLE1BQU0sQ0FBRSxVQUFVQyxFQUFWLEVBQWU7QUFDNUIsYUFBT0EsRUFBRSxDQUFDalQsWUFBSCxDQUFpQixVQUFqQixLQUFpQyxJQUF4QztBQUNBLEtBRlcsQ0FBWixFQUVNO0FBQ0xrVCxlQUFTLENBQUVwRSxRQUFGLEVBQVksVUFBVTNVLElBQVYsRUFBZ0JvUixJQUFoQixFQUFzQjZCLEtBQXRCLEVBQThCO0FBQ2xELFlBQUkzRCxHQUFKOztBQUNBLFlBQUssQ0FBQzJELEtBQU4sRUFBYztBQUNiLGlCQUFPalQsSUFBSSxDQUFFb1IsSUFBRixDQUFKLEtBQWlCLElBQWpCLEdBQXdCQSxJQUFJLENBQUNwTSxXQUFMLEVBQXhCLEdBQ04sQ0FBRXNLLEdBQUcsR0FBR3RQLElBQUksQ0FBQzJhLGdCQUFMLENBQXVCdkosSUFBdkIsQ0FBUixLQUEyQzlCLEdBQUcsQ0FBQ3lNLFNBQS9DLEdBQ0N6TSxHQUFHLENBQUNoSixLQURMLEdBRUMsSUFIRjtBQUlBO0FBQ0QsT0FSUSxDQUFUO0FBU0E7O0FBRUQsV0FBT3dNLE1BQVA7QUFFQyxHQTU0RUQsQ0E0NEVLNVQsTUE1NEVMLENBWEE7O0FBMjVFQXlHLFFBQU0sQ0FBQytVLElBQVAsR0FBYzVILE1BQWQ7QUFDQW5OLFFBQU0sQ0FBQ21XLElBQVAsR0FBY2hKLE1BQU0sQ0FBQzBKLFNBQXJCLENBMzNGaUYsQ0E2M0ZqRjs7QUFDQTdXLFFBQU0sQ0FBQ21XLElBQVAsQ0FBYSxHQUFiLElBQXFCblcsTUFBTSxDQUFDbVcsSUFBUCxDQUFZL0csT0FBakM7QUFDQXBQLFFBQU0sQ0FBQ3NXLFVBQVAsR0FBb0J0VyxNQUFNLENBQUNpZCxNQUFQLEdBQWdCOVAsTUFBTSxDQUFDbUosVUFBM0M7QUFDQXRXLFFBQU0sQ0FBQzZKLElBQVAsR0FBY3NELE1BQU0sQ0FBQ0UsT0FBckI7QUFDQXJOLFFBQU0sQ0FBQ2tkLFFBQVAsR0FBa0IvUCxNQUFNLENBQUNHLEtBQXpCO0FBQ0F0TixRQUFNLENBQUNrTyxRQUFQLEdBQWtCZixNQUFNLENBQUNlLFFBQXpCO0FBQ0FsTyxRQUFNLENBQUNtZCxjQUFQLEdBQXdCaFEsTUFBTSxDQUFDbUQsTUFBL0I7O0FBS0EsTUFBSWMsR0FBRyxHQUFHLFVBQVUvVyxJQUFWLEVBQWdCK1csR0FBaEIsRUFBcUJnTSxLQUFyQixFQUE2QjtBQUN0QyxRQUFJM0UsT0FBTyxHQUFHLEVBQWQ7QUFBQSxRQUNDNEUsUUFBUSxHQUFHRCxLQUFLLEtBQUt4Z0IsU0FEdEI7O0FBR0EsV0FBUSxDQUFFdkMsSUFBSSxHQUFHQSxJQUFJLENBQUUrVyxHQUFGLENBQWIsS0FBMEIvVyxJQUFJLENBQUN5SSxRQUFMLEtBQWtCLENBQXBELEVBQXdEO0FBQ3ZELFVBQUt6SSxJQUFJLENBQUN5SSxRQUFMLEtBQWtCLENBQXZCLEVBQTJCO0FBQzFCLFlBQUt1YSxRQUFRLElBQUlyZCxNQUFNLENBQUUzRixJQUFGLENBQU4sQ0FBZWlqQixFQUFmLENBQW1CRixLQUFuQixDQUFqQixFQUE4QztBQUM3QztBQUNBOztBQUNEM0UsZUFBTyxDQUFDeGQsSUFBUixDQUFjWixJQUFkO0FBQ0E7QUFDRDs7QUFDRCxXQUFPb2UsT0FBUDtBQUNBLEdBYkQ7O0FBZ0JBLE1BQUk4RSxRQUFRLEdBQUcsVUFBVUMsQ0FBVixFQUFhbmpCLElBQWIsRUFBb0I7QUFDbEMsUUFBSW9lLE9BQU8sR0FBRyxFQUFkOztBQUVBLFdBQVErRSxDQUFSLEVBQVdBLENBQUMsR0FBR0EsQ0FBQyxDQUFDNUosV0FBakIsRUFBK0I7QUFDOUIsVUFBSzRKLENBQUMsQ0FBQzFhLFFBQUYsS0FBZSxDQUFmLElBQW9CMGEsQ0FBQyxLQUFLbmpCLElBQS9CLEVBQXNDO0FBQ3JDb2UsZUFBTyxDQUFDeGQsSUFBUixDQUFjdWlCLENBQWQ7QUFDQTtBQUNEOztBQUVELFdBQU8vRSxPQUFQO0FBQ0EsR0FWRDs7QUFhQSxNQUFJZ0YsYUFBYSxHQUFHemQsTUFBTSxDQUFDbVcsSUFBUCxDQUFZalgsS0FBWixDQUFrQndlLFlBQXRDOztBQUlBLFdBQVNyWSxRQUFULENBQW1CaEwsSUFBbkIsRUFBeUJvUixJQUF6QixFQUFnQztBQUU5QixXQUFPcFIsSUFBSSxDQUFDZ0wsUUFBTCxJQUFpQmhMLElBQUksQ0FBQ2dMLFFBQUwsQ0FBY2hHLFdBQWQsT0FBZ0NvTSxJQUFJLENBQUNwTSxXQUFMLEVBQXhEO0FBRUQ7O0FBQUE7QUFDRCxNQUFJc2UsVUFBVSxHQUFLLGlFQUFuQixDQTk2RmlGLENBazdGakY7O0FBQ0EsV0FBU0MsTUFBVCxDQUFpQmpaLFFBQWpCLEVBQTJCa1osU0FBM0IsRUFBc0NDLEdBQXRDLEVBQTRDO0FBQzNDLFFBQUs1VSxVQUFVLENBQUUyVSxTQUFGLENBQWYsRUFBK0I7QUFDOUIsYUFBTzdkLE1BQU0sQ0FBQ2tMLElBQVAsQ0FBYXZHLFFBQWIsRUFBdUIsVUFBVXRLLElBQVYsRUFBZ0JKLENBQWhCLEVBQW9CO0FBQ2pELGVBQU8sQ0FBQyxDQUFDNGpCLFNBQVMsQ0FBQy9nQixJQUFWLENBQWdCekMsSUFBaEIsRUFBc0JKLENBQXRCLEVBQXlCSSxJQUF6QixDQUFGLEtBQXNDeWpCLEdBQTdDO0FBQ0EsT0FGTSxDQUFQO0FBR0EsS0FMMEMsQ0FPM0M7OztBQUNBLFFBQUtELFNBQVMsQ0FBQy9hLFFBQWYsRUFBMEI7QUFDekIsYUFBTzlDLE1BQU0sQ0FBQ2tMLElBQVAsQ0FBYXZHLFFBQWIsRUFBdUIsVUFBVXRLLElBQVYsRUFBaUI7QUFDOUMsZUFBU0EsSUFBSSxLQUFLd2pCLFNBQVgsS0FBMkJDLEdBQWxDO0FBQ0EsT0FGTSxDQUFQO0FBR0EsS0FaMEMsQ0FjM0M7OztBQUNBLFFBQUssT0FBT0QsU0FBUCxLQUFxQixRQUExQixFQUFxQztBQUNwQyxhQUFPN2QsTUFBTSxDQUFDa0wsSUFBUCxDQUFhdkcsUUFBYixFQUF1QixVQUFVdEssSUFBVixFQUFpQjtBQUM5QyxlQUFTVyxPQUFPLENBQUM4QixJQUFSLENBQWMrZ0IsU0FBZCxFQUF5QnhqQixJQUF6QixJQUFrQyxDQUFDLENBQXJDLEtBQTZDeWpCLEdBQXBEO0FBQ0EsT0FGTSxDQUFQO0FBR0EsS0FuQjBDLENBcUIzQzs7O0FBQ0EsV0FBTzlkLE1BQU0sQ0FBQzZVLE1BQVAsQ0FBZWdKLFNBQWYsRUFBMEJsWixRQUExQixFQUFvQ21aLEdBQXBDLENBQVA7QUFDQTs7QUFFRDlkLFFBQU0sQ0FBQzZVLE1BQVAsR0FBZ0IsVUFBVXNCLElBQVYsRUFBZ0J4WSxLQUFoQixFQUF1Qm1nQixHQUF2QixFQUE2QjtBQUM1QyxRQUFJempCLElBQUksR0FBR3NELEtBQUssQ0FBRSxDQUFGLENBQWhCOztBQUVBLFFBQUttZ0IsR0FBTCxFQUFXO0FBQ1YzSCxVQUFJLEdBQUcsVUFBVUEsSUFBVixHQUFpQixHQUF4QjtBQUNBOztBQUVELFFBQUt4WSxLQUFLLENBQUN6RCxNQUFOLEtBQWlCLENBQWpCLElBQXNCRyxJQUFJLENBQUN5SSxRQUFMLEtBQWtCLENBQTdDLEVBQWlEO0FBQ2hELGFBQU85QyxNQUFNLENBQUMrVSxJQUFQLENBQVloYixlQUFaLENBQTZCTSxJQUE3QixFQUFtQzhiLElBQW5DLElBQTRDLENBQUU5YixJQUFGLENBQTVDLEdBQXVELEVBQTlEO0FBQ0E7O0FBRUQsV0FBTzJGLE1BQU0sQ0FBQytVLElBQVAsQ0FBWWpiLE9BQVosQ0FBcUJxYyxJQUFyQixFQUEyQm5XLE1BQU0sQ0FBQ2tMLElBQVAsQ0FBYXZOLEtBQWIsRUFBb0IsVUFBVXRELElBQVYsRUFBaUI7QUFDdEUsYUFBT0EsSUFBSSxDQUFDeUksUUFBTCxLQUFrQixDQUF6QjtBQUNBLEtBRmlDLENBQTNCLENBQVA7QUFHQSxHQWREOztBQWdCQTlDLFFBQU0sQ0FBQzhILEVBQVAsQ0FBVTlMLE1BQVYsQ0FBa0I7QUFDakIrWSxRQUFJLEVBQUUsVUFBVXphLFFBQVYsRUFBcUI7QUFDMUIsVUFBSUwsQ0FBSjtBQUFBLFVBQU93USxHQUFQO0FBQUEsVUFDQ1ksR0FBRyxHQUFHLEtBQUtuUixNQURaO0FBQUEsVUFFQzZqQixJQUFJLEdBQUcsSUFGUjs7QUFJQSxVQUFLLE9BQU96akIsUUFBUCxLQUFvQixRQUF6QixFQUFvQztBQUNuQyxlQUFPLEtBQUtrUSxTQUFMLENBQWdCeEssTUFBTSxDQUFFMUYsUUFBRixDQUFOLENBQW1CdWEsTUFBbkIsQ0FBMkIsWUFBVztBQUM1RCxlQUFNNWEsQ0FBQyxHQUFHLENBQVYsRUFBYUEsQ0FBQyxHQUFHb1IsR0FBakIsRUFBc0JwUixDQUFDLEVBQXZCLEVBQTRCO0FBQzNCLGdCQUFLK0YsTUFBTSxDQUFDa08sUUFBUCxDQUFpQjZQLElBQUksQ0FBRTlqQixDQUFGLENBQXJCLEVBQTRCLElBQTVCLENBQUwsRUFBMEM7QUFDekMscUJBQU8sSUFBUDtBQUNBO0FBQ0Q7QUFDRCxTQU5zQixDQUFoQixDQUFQO0FBT0E7O0FBRUR3USxTQUFHLEdBQUcsS0FBS0QsU0FBTCxDQUFnQixFQUFoQixDQUFOOztBQUVBLFdBQU12USxDQUFDLEdBQUcsQ0FBVixFQUFhQSxDQUFDLEdBQUdvUixHQUFqQixFQUFzQnBSLENBQUMsRUFBdkIsRUFBNEI7QUFDM0IrRixjQUFNLENBQUMrVSxJQUFQLENBQWF6YSxRQUFiLEVBQXVCeWpCLElBQUksQ0FBRTlqQixDQUFGLENBQTNCLEVBQWtDd1EsR0FBbEM7QUFDQTs7QUFFRCxhQUFPWSxHQUFHLEdBQUcsQ0FBTixHQUFVckwsTUFBTSxDQUFDc1csVUFBUCxDQUFtQjdMLEdBQW5CLENBQVYsR0FBcUNBLEdBQTVDO0FBQ0EsS0F2QmdCO0FBd0JqQm9LLFVBQU0sRUFBRSxVQUFVdmEsUUFBVixFQUFxQjtBQUM1QixhQUFPLEtBQUtrUSxTQUFMLENBQWdCb1QsTUFBTSxDQUFFLElBQUYsRUFBUXRqQixRQUFRLElBQUksRUFBcEIsRUFBd0IsS0FBeEIsQ0FBdEIsQ0FBUDtBQUNBLEtBMUJnQjtBQTJCakJ3akIsT0FBRyxFQUFFLFVBQVV4akIsUUFBVixFQUFxQjtBQUN6QixhQUFPLEtBQUtrUSxTQUFMLENBQWdCb1QsTUFBTSxDQUFFLElBQUYsRUFBUXRqQixRQUFRLElBQUksRUFBcEIsRUFBd0IsSUFBeEIsQ0FBdEIsQ0FBUDtBQUNBLEtBN0JnQjtBQThCakJnakIsTUFBRSxFQUFFLFVBQVVoakIsUUFBVixFQUFxQjtBQUN4QixhQUFPLENBQUMsQ0FBQ3NqQixNQUFNLENBQ2QsSUFEYyxFQUdkO0FBQ0E7QUFDQSxhQUFPdGpCLFFBQVAsS0FBb0IsUUFBcEIsSUFBZ0NtakIsYUFBYSxDQUFDcEwsSUFBZCxDQUFvQi9YLFFBQXBCLENBQWhDLEdBQ0MwRixNQUFNLENBQUUxRixRQUFGLENBRFAsR0FFQ0EsUUFBUSxJQUFJLEVBUEMsRUFRZCxLQVJjLENBQU4sQ0FTUEosTUFURjtBQVVBO0FBekNnQixHQUFsQixFQTU5RmlGLENBeWdHakY7QUFHQTs7QUFDQSxNQUFJOGpCLFVBQUo7QUFBQSxNQUVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E5TixZQUFVLEdBQUcscUNBTmQ7QUFBQSxNQVFDL0YsSUFBSSxHQUFHbkssTUFBTSxDQUFDOEgsRUFBUCxDQUFVcUMsSUFBVixHQUFpQixVQUFVN1AsUUFBVixFQUFvQjRQLE9BQXBCLEVBQTZCK1QsSUFBN0IsRUFBb0M7QUFDM0QsUUFBSS9lLEtBQUosRUFBVzdFLElBQVgsQ0FEMkQsQ0FHM0Q7O0FBQ0EsUUFBSyxDQUFDQyxRQUFOLEVBQWlCO0FBQ2hCLGFBQU8sSUFBUDtBQUNBLEtBTjBELENBUTNEO0FBQ0E7OztBQUNBMmpCLFFBQUksR0FBR0EsSUFBSSxJQUFJRCxVQUFmLENBVjJELENBWTNEOztBQUNBLFFBQUssT0FBTzFqQixRQUFQLEtBQW9CLFFBQXpCLEVBQW9DO0FBQ25DLFVBQUtBLFFBQVEsQ0FBRSxDQUFGLENBQVIsS0FBa0IsR0FBbEIsSUFDSkEsUUFBUSxDQUFFQSxRQUFRLENBQUNKLE1BQVQsR0FBa0IsQ0FBcEIsQ0FBUixLQUFvQyxHQURoQyxJQUVKSSxRQUFRLENBQUNKLE1BQVQsSUFBbUIsQ0FGcEIsRUFFd0I7QUFFdkI7QUFDQWdGLGFBQUssR0FBRyxDQUFFLElBQUYsRUFBUTVFLFFBQVIsRUFBa0IsSUFBbEIsQ0FBUjtBQUVBLE9BUEQsTUFPTztBQUNONEUsYUFBSyxHQUFHZ1IsVUFBVSxDQUFDbkssSUFBWCxDQUFpQnpMLFFBQWpCLENBQVI7QUFDQSxPQVZrQyxDQVluQzs7O0FBQ0EsVUFBSzRFLEtBQUssS0FBTUEsS0FBSyxDQUFFLENBQUYsQ0FBTCxJQUFjLENBQUNnTCxPQUFyQixDQUFWLEVBQTJDO0FBRTFDO0FBQ0EsWUFBS2hMLEtBQUssQ0FBRSxDQUFGLENBQVYsRUFBa0I7QUFDakJnTCxpQkFBTyxHQUFHQSxPQUFPLFlBQVlsSyxNQUFuQixHQUE0QmtLLE9BQU8sQ0FBRSxDQUFGLENBQW5DLEdBQTJDQSxPQUFyRCxDQURpQixDQUdqQjtBQUNBOztBQUNBbEssZ0JBQU0sQ0FBQzBLLEtBQVAsQ0FBYyxJQUFkLEVBQW9CMUssTUFBTSxDQUFDa2UsU0FBUCxDQUNuQmhmLEtBQUssQ0FBRSxDQUFGLENBRGMsRUFFbkJnTCxPQUFPLElBQUlBLE9BQU8sQ0FBQ3BILFFBQW5CLEdBQThCb0gsT0FBTyxDQUFDNkgsYUFBUixJQUF5QjdILE9BQXZELEdBQWlFL00sUUFGOUMsRUFHbkIsSUFIbUIsQ0FBcEIsRUFMaUIsQ0FXakI7O0FBQ0EsY0FBS3dnQixVQUFVLENBQUN0TCxJQUFYLENBQWlCblQsS0FBSyxDQUFFLENBQUYsQ0FBdEIsS0FBaUNjLE1BQU0sQ0FBQytMLGFBQVAsQ0FBc0I3QixPQUF0QixDQUF0QyxFQUF3RTtBQUN2RSxpQkFBTWhMLEtBQU4sSUFBZWdMLE9BQWYsRUFBeUI7QUFFeEI7QUFDQSxrQkFBS2hCLFVBQVUsQ0FBRSxLQUFNaEssS0FBTixDQUFGLENBQWYsRUFBbUM7QUFDbEMscUJBQU1BLEtBQU4sRUFBZWdMLE9BQU8sQ0FBRWhMLEtBQUYsQ0FBdEIsRUFEa0MsQ0FHbkM7QUFDQyxlQUpELE1BSU87QUFDTixxQkFBS2UsSUFBTCxDQUFXZixLQUFYLEVBQWtCZ0wsT0FBTyxDQUFFaEwsS0FBRixDQUF6QjtBQUNBO0FBQ0Q7QUFDRDs7QUFFRCxpQkFBTyxJQUFQLENBMUJpQixDQTRCbEI7QUFDQyxTQTdCRCxNQTZCTztBQUNON0UsY0FBSSxHQUFHOEMsUUFBUSxDQUFDNlUsY0FBVCxDQUF5QjlTLEtBQUssQ0FBRSxDQUFGLENBQTlCLENBQVA7O0FBRUEsY0FBSzdFLElBQUwsRUFBWTtBQUVYO0FBQ0EsaUJBQU0sQ0FBTixJQUFZQSxJQUFaO0FBQ0EsaUJBQUtILE1BQUwsR0FBYyxDQUFkO0FBQ0E7O0FBQ0QsaUJBQU8sSUFBUDtBQUNBLFNBMUN5QyxDQTRDM0M7O0FBQ0MsT0E3Q0QsTUE2Q08sSUFBSyxDQUFDZ1EsT0FBRCxJQUFZQSxPQUFPLENBQUNFLE1BQXpCLEVBQWtDO0FBQ3hDLGVBQU8sQ0FBRUYsT0FBTyxJQUFJK1QsSUFBYixFQUFvQmxKLElBQXBCLENBQTBCemEsUUFBMUIsQ0FBUCxDQUR3QyxDQUd6QztBQUNBO0FBQ0MsT0FMTSxNQUtBO0FBQ04sZUFBTyxLQUFLK1AsV0FBTCxDQUFrQkgsT0FBbEIsRUFBNEI2SyxJQUE1QixDQUFrQ3phLFFBQWxDLENBQVA7QUFDQSxPQWpFa0MsQ0FtRXBDOztBQUNDLEtBcEVELE1Bb0VPLElBQUtBLFFBQVEsQ0FBQ3dJLFFBQWQsRUFBeUI7QUFDL0IsV0FBTSxDQUFOLElBQVl4SSxRQUFaO0FBQ0EsV0FBS0osTUFBTCxHQUFjLENBQWQ7QUFDQSxhQUFPLElBQVAsQ0FIK0IsQ0FLaEM7QUFDQTtBQUNDLEtBUE0sTUFPQSxJQUFLZ1AsVUFBVSxDQUFFNU8sUUFBRixDQUFmLEVBQThCO0FBQ3BDLGFBQU8yakIsSUFBSSxDQUFDRSxLQUFMLEtBQWV2aEIsU0FBZixHQUNOcWhCLElBQUksQ0FBQ0UsS0FBTCxDQUFZN2pCLFFBQVosQ0FETSxHQUdOO0FBQ0FBLGNBQVEsQ0FBRTBGLE1BQUYsQ0FKVDtBQUtBOztBQUVELFdBQU9BLE1BQU0sQ0FBQ3ZELFNBQVAsQ0FBa0JuQyxRQUFsQixFQUE0QixJQUE1QixDQUFQO0FBQ0EsR0F6R0YsQ0E3Z0dpRixDQXduR2pGOzs7QUFDQTZQLE1BQUksQ0FBQ3RRLFNBQUwsR0FBaUJtRyxNQUFNLENBQUM4SCxFQUF4QixDQXpuR2lGLENBMm5HakY7O0FBQ0FrVyxZQUFVLEdBQUdoZSxNQUFNLENBQUU3QyxRQUFGLENBQW5CO0FBR0EsTUFBSWloQixZQUFZLEdBQUcsZ0NBQW5CO0FBQUEsTUFFQztBQUNBQyxrQkFBZ0IsR0FBRztBQUNsQnpZLFlBQVEsRUFBRSxJQURRO0FBRWxCMFksWUFBUSxFQUFFLElBRlE7QUFHbEJqTixRQUFJLEVBQUUsSUFIWTtBQUlsQmtOLFFBQUksRUFBRTtBQUpZLEdBSHBCO0FBVUF2ZSxRQUFNLENBQUM4SCxFQUFQLENBQVU5TCxNQUFWLENBQWtCO0FBQ2pCd2lCLE9BQUcsRUFBRSxVQUFVM1MsTUFBVixFQUFtQjtBQUN2QixVQUFJNFMsT0FBTyxHQUFHemUsTUFBTSxDQUFFNkwsTUFBRixFQUFVLElBQVYsQ0FBcEI7QUFBQSxVQUNDNlMsQ0FBQyxHQUFHRCxPQUFPLENBQUN2a0IsTUFEYjtBQUdBLGFBQU8sS0FBSzJhLE1BQUwsQ0FBYSxZQUFXO0FBQzlCLFlBQUk1YSxDQUFDLEdBQUcsQ0FBUjs7QUFDQSxlQUFRQSxDQUFDLEdBQUd5a0IsQ0FBWixFQUFlemtCLENBQUMsRUFBaEIsRUFBcUI7QUFDcEIsY0FBSytGLE1BQU0sQ0FBQ2tPLFFBQVAsQ0FBaUIsSUFBakIsRUFBdUJ1USxPQUFPLENBQUV4a0IsQ0FBRixDQUE5QixDQUFMLEVBQTZDO0FBQzVDLG1CQUFPLElBQVA7QUFDQTtBQUNEO0FBQ0QsT0FQTSxDQUFQO0FBUUEsS0FiZ0I7QUFlakIwa0IsV0FBTyxFQUFFLFVBQVU5SCxTQUFWLEVBQXFCM00sT0FBckIsRUFBK0I7QUFDdkMsVUFBSXVKLEdBQUo7QUFBQSxVQUNDeFosQ0FBQyxHQUFHLENBREw7QUFBQSxVQUVDeWtCLENBQUMsR0FBRyxLQUFLeGtCLE1BRlY7QUFBQSxVQUdDdWUsT0FBTyxHQUFHLEVBSFg7QUFBQSxVQUlDZ0csT0FBTyxHQUFHLE9BQU81SCxTQUFQLEtBQXFCLFFBQXJCLElBQWlDN1csTUFBTSxDQUFFNlcsU0FBRixDQUpsRCxDQUR1QyxDQU92Qzs7QUFDQSxVQUFLLENBQUM0RyxhQUFhLENBQUNwTCxJQUFkLENBQW9Cd0UsU0FBcEIsQ0FBTixFQUF3QztBQUN2QyxlQUFRNWMsQ0FBQyxHQUFHeWtCLENBQVosRUFBZXprQixDQUFDLEVBQWhCLEVBQXFCO0FBQ3BCLGVBQU13WixHQUFHLEdBQUcsS0FBTXhaLENBQU4sQ0FBWixFQUF1QndaLEdBQUcsSUFBSUEsR0FBRyxLQUFLdkosT0FBdEMsRUFBK0N1SixHQUFHLEdBQUdBLEdBQUcsQ0FBQ3ZXLFVBQXpELEVBQXNFO0FBRXJFO0FBQ0EsZ0JBQUt1VyxHQUFHLENBQUMzUSxRQUFKLEdBQWUsRUFBZixLQUF1QjJiLE9BQU8sR0FDbENBLE9BQU8sQ0FBQ2xqQixLQUFSLENBQWVrWSxHQUFmLElBQXVCLENBQUMsQ0FEVSxHQUdsQztBQUNBQSxlQUFHLENBQUMzUSxRQUFKLEtBQWlCLENBQWpCLElBQ0M5QyxNQUFNLENBQUMrVSxJQUFQLENBQVloYixlQUFaLENBQTZCMFosR0FBN0IsRUFBa0NvRCxTQUFsQyxDQUxHLENBQUwsRUFLb0Q7QUFFbkQ0QixxQkFBTyxDQUFDeGQsSUFBUixDQUFjd1ksR0FBZDtBQUNBO0FBQ0E7QUFDRDtBQUNEO0FBQ0Q7O0FBRUQsYUFBTyxLQUFLakosU0FBTCxDQUFnQmlPLE9BQU8sQ0FBQ3ZlLE1BQVIsR0FBaUIsQ0FBakIsR0FBcUI4RixNQUFNLENBQUNzVyxVQUFQLENBQW1CbUMsT0FBbkIsQ0FBckIsR0FBb0RBLE9BQXBFLENBQVA7QUFDQSxLQTNDZ0I7QUE2Q2pCO0FBQ0FsZCxTQUFLLEVBQUUsVUFBVWxCLElBQVYsRUFBaUI7QUFFdkI7QUFDQSxVQUFLLENBQUNBLElBQU4sRUFBYTtBQUNaLGVBQVMsS0FBTSxDQUFOLEtBQWEsS0FBTSxDQUFOLEVBQVU2QyxVQUF6QixHQUF3QyxLQUFLNE4sS0FBTCxHQUFhOFQsT0FBYixHQUF1QjFrQixNQUEvRCxHQUF3RSxDQUFDLENBQWhGO0FBQ0EsT0FMc0IsQ0FPdkI7OztBQUNBLFVBQUssT0FBT0csSUFBUCxLQUFnQixRQUFyQixFQUFnQztBQUMvQixlQUFPVyxPQUFPLENBQUM4QixJQUFSLENBQWNrRCxNQUFNLENBQUUzRixJQUFGLENBQXBCLEVBQThCLEtBQU0sQ0FBTixDQUE5QixDQUFQO0FBQ0EsT0FWc0IsQ0FZdkI7OztBQUNBLGFBQU9XLE9BQU8sQ0FBQzhCLElBQVIsQ0FBYyxJQUFkLEVBRU47QUFDQXpDLFVBQUksQ0FBQytQLE1BQUwsR0FBYy9QLElBQUksQ0FBRSxDQUFGLENBQWxCLEdBQTBCQSxJQUhwQixDQUFQO0FBS0EsS0FoRWdCO0FBa0VqQndrQixPQUFHLEVBQUUsVUFBVXZrQixRQUFWLEVBQW9CNFAsT0FBcEIsRUFBOEI7QUFDbEMsYUFBTyxLQUFLTSxTQUFMLENBQ054SyxNQUFNLENBQUNzVyxVQUFQLENBQ0N0VyxNQUFNLENBQUMwSyxLQUFQLENBQWMsS0FBS0gsR0FBTCxFQUFkLEVBQTBCdkssTUFBTSxDQUFFMUYsUUFBRixFQUFZNFAsT0FBWixDQUFoQyxDQURELENBRE0sQ0FBUDtBQUtBLEtBeEVnQjtBQTBFakI0VSxXQUFPLEVBQUUsVUFBVXhrQixRQUFWLEVBQXFCO0FBQzdCLGFBQU8sS0FBS3VrQixHQUFMLENBQVV2a0IsUUFBUSxJQUFJLElBQVosR0FDaEIsS0FBS3FRLFVBRFcsR0FDRSxLQUFLQSxVQUFMLENBQWdCa0ssTUFBaEIsQ0FBd0J2YSxRQUF4QixDQURaLENBQVA7QUFHQTtBQTlFZ0IsR0FBbEI7O0FBaUZBLFdBQVN5a0IsT0FBVCxDQUFrQnRMLEdBQWxCLEVBQXVCckMsR0FBdkIsRUFBNkI7QUFDNUIsV0FBUSxDQUFFcUMsR0FBRyxHQUFHQSxHQUFHLENBQUVyQyxHQUFGLENBQVgsS0FBd0JxQyxHQUFHLENBQUMzUSxRQUFKLEtBQWlCLENBQWpELEVBQXFELENBQUU7O0FBQ3ZELFdBQU8yUSxHQUFQO0FBQ0E7O0FBRUR6VCxRQUFNLENBQUM0SyxJQUFQLENBQWE7QUFDWnNOLFVBQU0sRUFBRSxVQUFVN2QsSUFBVixFQUFpQjtBQUN4QixVQUFJNmQsTUFBTSxHQUFHN2QsSUFBSSxDQUFDNkMsVUFBbEI7QUFDQSxhQUFPZ2IsTUFBTSxJQUFJQSxNQUFNLENBQUNwVixRQUFQLEtBQW9CLEVBQTlCLEdBQW1Db1YsTUFBbkMsR0FBNEMsSUFBbkQ7QUFDQSxLQUpXO0FBS1o4RyxXQUFPLEVBQUUsVUFBVTNrQixJQUFWLEVBQWlCO0FBQ3pCLGFBQU8rVyxHQUFHLENBQUUvVyxJQUFGLEVBQVEsWUFBUixDQUFWO0FBQ0EsS0FQVztBQVFaNGtCLGdCQUFZLEVBQUUsVUFBVTVrQixJQUFWLEVBQWdCNlMsRUFBaEIsRUFBb0JrUSxLQUFwQixFQUE0QjtBQUN6QyxhQUFPaE0sR0FBRyxDQUFFL1csSUFBRixFQUFRLFlBQVIsRUFBc0IraUIsS0FBdEIsQ0FBVjtBQUNBLEtBVlc7QUFXWi9MLFFBQUksRUFBRSxVQUFVaFgsSUFBVixFQUFpQjtBQUN0QixhQUFPMGtCLE9BQU8sQ0FBRTFrQixJQUFGLEVBQVEsYUFBUixDQUFkO0FBQ0EsS0FiVztBQWNaa2tCLFFBQUksRUFBRSxVQUFVbGtCLElBQVYsRUFBaUI7QUFDdEIsYUFBTzBrQixPQUFPLENBQUUxa0IsSUFBRixFQUFRLGlCQUFSLENBQWQ7QUFDQSxLQWhCVztBQWlCWjZrQixXQUFPLEVBQUUsVUFBVTdrQixJQUFWLEVBQWlCO0FBQ3pCLGFBQU8rVyxHQUFHLENBQUUvVyxJQUFGLEVBQVEsYUFBUixDQUFWO0FBQ0EsS0FuQlc7QUFvQlp1a0IsV0FBTyxFQUFFLFVBQVV2a0IsSUFBVixFQUFpQjtBQUN6QixhQUFPK1csR0FBRyxDQUFFL1csSUFBRixFQUFRLGlCQUFSLENBQVY7QUFDQSxLQXRCVztBQXVCWjhrQixhQUFTLEVBQUUsVUFBVTlrQixJQUFWLEVBQWdCNlMsRUFBaEIsRUFBb0JrUSxLQUFwQixFQUE0QjtBQUN0QyxhQUFPaE0sR0FBRyxDQUFFL1csSUFBRixFQUFRLGFBQVIsRUFBdUIraUIsS0FBdkIsQ0FBVjtBQUNBLEtBekJXO0FBMEJaZ0MsYUFBUyxFQUFFLFVBQVUva0IsSUFBVixFQUFnQjZTLEVBQWhCLEVBQW9Ca1EsS0FBcEIsRUFBNEI7QUFDdEMsYUFBT2hNLEdBQUcsQ0FBRS9XLElBQUYsRUFBUSxpQkFBUixFQUEyQitpQixLQUEzQixDQUFWO0FBQ0EsS0E1Qlc7QUE2QlpHLFlBQVEsRUFBRSxVQUFVbGpCLElBQVYsRUFBaUI7QUFDMUIsYUFBT2tqQixRQUFRLENBQUUsQ0FBRWxqQixJQUFJLENBQUM2QyxVQUFMLElBQW1CLEVBQXJCLEVBQTBCeVosVUFBNUIsRUFBd0N0YyxJQUF4QyxDQUFmO0FBQ0EsS0EvQlc7QUFnQ1p1TCxZQUFRLEVBQUUsVUFBVXZMLElBQVYsRUFBaUI7QUFDMUIsYUFBT2tqQixRQUFRLENBQUVsakIsSUFBSSxDQUFDc2MsVUFBUCxDQUFmO0FBQ0EsS0FsQ1c7QUFtQ1oySCxZQUFRLEVBQUUsVUFBVWprQixJQUFWLEVBQWlCO0FBQzFCLFVBQUtBLElBQUksQ0FBQ2dsQixlQUFMLElBQXdCLElBQXhCLElBRUo7QUFDQTtBQUNBO0FBQ0E5VyxjQUFRLENBQUVsTyxJQUFJLENBQUNnbEIsZUFBUCxDQUxULEVBS29DO0FBRW5DLGVBQU9obEIsSUFBSSxDQUFDZ2xCLGVBQVo7QUFDQSxPQVR5QixDQVcxQjtBQUNBO0FBQ0E7OztBQUNBLFVBQUtoYSxRQUFRLENBQUVoTCxJQUFGLEVBQVEsVUFBUixDQUFiLEVBQW9DO0FBQ25DQSxZQUFJLEdBQUdBLElBQUksQ0FBQ2lsQixPQUFMLElBQWdCamxCLElBQXZCO0FBQ0E7O0FBRUQsYUFBTzJGLE1BQU0sQ0FBQzBLLEtBQVAsQ0FBYyxFQUFkLEVBQWtCclEsSUFBSSxDQUFDaVgsVUFBdkIsQ0FBUDtBQUNBO0FBdERXLEdBQWIsRUF1REcsVUFBVTdGLElBQVYsRUFBZ0IzRCxFQUFoQixFQUFxQjtBQUN2QjlILFVBQU0sQ0FBQzhILEVBQVAsQ0FBVzJELElBQVgsSUFBb0IsVUFBVTJSLEtBQVYsRUFBaUI5aUIsUUFBakIsRUFBNEI7QUFDL0MsVUFBSW1lLE9BQU8sR0FBR3pZLE1BQU0sQ0FBQzZLLEdBQVAsQ0FBWSxJQUFaLEVBQWtCL0MsRUFBbEIsRUFBc0JzVixLQUF0QixDQUFkOztBQUVBLFVBQUszUixJQUFJLENBQUM5UCxLQUFMLENBQVksQ0FBQyxDQUFiLE1BQXFCLE9BQTFCLEVBQW9DO0FBQ25DckIsZ0JBQVEsR0FBRzhpQixLQUFYO0FBQ0E7O0FBRUQsVUFBSzlpQixRQUFRLElBQUksT0FBT0EsUUFBUCxLQUFvQixRQUFyQyxFQUFnRDtBQUMvQ21lLGVBQU8sR0FBR3pZLE1BQU0sQ0FBQzZVLE1BQVAsQ0FBZXZhLFFBQWYsRUFBeUJtZSxPQUF6QixDQUFWO0FBQ0E7O0FBRUQsVUFBSyxLQUFLdmUsTUFBTCxHQUFjLENBQW5CLEVBQXVCO0FBRXRCO0FBQ0EsWUFBSyxDQUFDbWtCLGdCQUFnQixDQUFFNVMsSUFBRixDQUF0QixFQUFpQztBQUNoQ3pMLGdCQUFNLENBQUNzVyxVQUFQLENBQW1CbUMsT0FBbkI7QUFDQSxTQUxxQixDQU90Qjs7O0FBQ0EsWUFBSzJGLFlBQVksQ0FBQy9MLElBQWIsQ0FBbUI1RyxJQUFuQixDQUFMLEVBQWlDO0FBQ2hDZ04saUJBQU8sQ0FBQzhHLE9BQVI7QUFDQTtBQUNEOztBQUVELGFBQU8sS0FBSy9VLFNBQUwsQ0FBZ0JpTyxPQUFoQixDQUFQO0FBQ0EsS0F6QkQ7QUEwQkEsR0FsRkQ7QUFtRkEsTUFBSStHLGFBQWEsR0FBSyxtQkFBdEIsQ0FsekdpRixDQXN6R2pGOztBQUNBLFdBQVNDLGFBQVQsQ0FBd0J0ZixPQUF4QixFQUFrQztBQUNqQyxRQUFJdWYsTUFBTSxHQUFHLEVBQWI7QUFDQTFmLFVBQU0sQ0FBQzRLLElBQVAsQ0FBYXpLLE9BQU8sQ0FBQ2pCLEtBQVIsQ0FBZXNnQixhQUFmLEtBQWtDLEVBQS9DLEVBQW1ELFVBQVVHLENBQVYsRUFBYUMsSUFBYixFQUFvQjtBQUN0RUYsWUFBTSxDQUFFRSxJQUFGLENBQU4sR0FBaUIsSUFBakI7QUFDQSxLQUZEO0FBR0EsV0FBT0YsTUFBUDtBQUNBO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCQTFmLFFBQU0sQ0FBQzZmLFNBQVAsR0FBbUIsVUFBVTFmLE9BQVYsRUFBb0I7QUFFdEM7QUFDQTtBQUNBQSxXQUFPLEdBQUcsT0FBT0EsT0FBUCxLQUFtQixRQUFuQixHQUNUc2YsYUFBYSxDQUFFdGYsT0FBRixDQURKLEdBRVRILE1BQU0sQ0FBQ2hFLE1BQVAsQ0FBZSxFQUFmLEVBQW1CbUUsT0FBbkIsQ0FGRDs7QUFJQSxRQUFJO0FBQ0gyZixVQUREO0FBQUEsUUFHQztBQUNBQyxVQUpEO0FBQUEsUUFNQztBQUNBQyxTQVBEO0FBQUEsUUFTQztBQUNBQyxVQVZEO0FBQUEsUUFZQztBQUNBbFIsUUFBSSxHQUFHLEVBYlI7QUFBQSxRQWVDO0FBQ0FtUixTQUFLLEdBQUcsRUFoQlQ7QUFBQSxRQWtCQztBQUNBQyxlQUFXLEdBQUcsQ0FBQyxDQW5CaEI7QUFBQSxRQXFCQztBQUNBQyxRQUFJLEdBQUcsWUFBVztBQUVqQjtBQUNBSCxZQUFNLEdBQUdBLE1BQU0sSUFBSTlmLE9BQU8sQ0FBQ2pGLElBQTNCLENBSGlCLENBS2pCO0FBQ0E7O0FBQ0E4a0IsV0FBSyxHQUFHRixNQUFNLEdBQUcsSUFBakI7O0FBQ0EsYUFBUUksS0FBSyxDQUFDaG1CLE1BQWQsRUFBc0JpbUIsV0FBVyxHQUFHLENBQUMsQ0FBckMsRUFBeUM7QUFDeENKLGNBQU0sR0FBR0csS0FBSyxDQUFDbE4sS0FBTixFQUFUOztBQUNBLGVBQVEsRUFBRW1OLFdBQUYsR0FBZ0JwUixJQUFJLENBQUM3VSxNQUE3QixFQUFzQztBQUVyQztBQUNBLGNBQUs2VSxJQUFJLENBQUVvUixXQUFGLENBQUosQ0FBb0J0a0IsS0FBcEIsQ0FBMkJra0IsTUFBTSxDQUFFLENBQUYsQ0FBakMsRUFBd0NBLE1BQU0sQ0FBRSxDQUFGLENBQTlDLE1BQTBELEtBQTFELElBQ0o1ZixPQUFPLENBQUNrZ0IsV0FEVCxFQUN1QjtBQUV0QjtBQUNBRix1QkFBVyxHQUFHcFIsSUFBSSxDQUFDN1UsTUFBbkI7QUFDQTZsQixrQkFBTSxHQUFHLEtBQVQ7QUFDQTtBQUNEO0FBQ0QsT0FyQmdCLENBdUJqQjs7O0FBQ0EsVUFBSyxDQUFDNWYsT0FBTyxDQUFDNGYsTUFBZCxFQUF1QjtBQUN0QkEsY0FBTSxHQUFHLEtBQVQ7QUFDQTs7QUFFREQsWUFBTSxHQUFHLEtBQVQsQ0E1QmlCLENBOEJqQjs7QUFDQSxVQUFLRyxNQUFMLEVBQWM7QUFFYjtBQUNBLFlBQUtGLE1BQUwsRUFBYztBQUNiaFIsY0FBSSxHQUFHLEVBQVAsQ0FEYSxDQUdkO0FBQ0MsU0FKRCxNQUlPO0FBQ05BLGNBQUksR0FBRyxFQUFQO0FBQ0E7QUFDRDtBQUNELEtBaEVGO0FBQUEsUUFrRUM7QUFDQWdQLFFBQUksR0FBRztBQUVOO0FBQ0FjLFNBQUcsRUFBRSxZQUFXO0FBQ2YsWUFBSzlQLElBQUwsRUFBWTtBQUVYO0FBQ0EsY0FBS2dSLE1BQU0sSUFBSSxDQUFDRCxNQUFoQixFQUF5QjtBQUN4QkssdUJBQVcsR0FBR3BSLElBQUksQ0FBQzdVLE1BQUwsR0FBYyxDQUE1QjtBQUNBZ21CLGlCQUFLLENBQUNqbEIsSUFBTixDQUFZOGtCLE1BQVo7QUFDQTs7QUFFRCxXQUFFLFNBQVNsQixHQUFULENBQWNuakIsSUFBZCxFQUFxQjtBQUN0QnNFLGtCQUFNLENBQUM0SyxJQUFQLENBQWFsUCxJQUFiLEVBQW1CLFVBQVVpa0IsQ0FBVixFQUFhOVMsR0FBYixFQUFtQjtBQUNyQyxrQkFBSzNELFVBQVUsQ0FBRTJELEdBQUYsQ0FBZixFQUF5QjtBQUN4QixvQkFBSyxDQUFDMU0sT0FBTyxDQUFDOGMsTUFBVCxJQUFtQixDQUFDYyxJQUFJLENBQUNTLEdBQUwsQ0FBVTNSLEdBQVYsQ0FBekIsRUFBMkM7QUFDMUNrQyxzQkFBSSxDQUFDOVQsSUFBTCxDQUFXNFIsR0FBWDtBQUNBO0FBQ0QsZUFKRCxNQUlPLElBQUtBLEdBQUcsSUFBSUEsR0FBRyxDQUFDM1MsTUFBWCxJQUFxQjhQLE1BQU0sQ0FBRTZDLEdBQUYsQ0FBTixLQUFrQixRQUE1QyxFQUF1RDtBQUU3RDtBQUNBZ1MsbUJBQUcsQ0FBRWhTLEdBQUYsQ0FBSDtBQUNBO0FBQ0QsYUFWRDtBQVdBLFdBWkQsRUFZS3JPLFNBWkw7O0FBY0EsY0FBS3VoQixNQUFNLElBQUksQ0FBQ0QsTUFBaEIsRUFBeUI7QUFDeEJNLGdCQUFJO0FBQ0o7QUFDRDs7QUFDRCxlQUFPLElBQVA7QUFDQSxPQS9CSztBQWlDTjtBQUNBRSxZQUFNLEVBQUUsWUFBVztBQUNsQnRnQixjQUFNLENBQUM0SyxJQUFQLENBQWFwTSxTQUFiLEVBQXdCLFVBQVVtaEIsQ0FBVixFQUFhOVMsR0FBYixFQUFtQjtBQUMxQyxjQUFJdFIsS0FBSjs7QUFDQSxpQkFBUSxDQUFFQSxLQUFLLEdBQUd5RSxNQUFNLENBQUN3TSxPQUFQLENBQWdCSyxHQUFoQixFQUFxQmtDLElBQXJCLEVBQTJCeFQsS0FBM0IsQ0FBVixJQUFpRCxDQUFDLENBQTFELEVBQThEO0FBQzdEd1QsZ0JBQUksQ0FBQ3ZULE1BQUwsQ0FBYUQsS0FBYixFQUFvQixDQUFwQixFQUQ2RCxDQUc3RDs7QUFDQSxnQkFBS0EsS0FBSyxJQUFJNGtCLFdBQWQsRUFBNEI7QUFDM0JBLHlCQUFXO0FBQ1g7QUFDRDtBQUNELFNBVkQ7QUFXQSxlQUFPLElBQVA7QUFDQSxPQS9DSztBQWlETjtBQUNBO0FBQ0EzQixTQUFHLEVBQUUsVUFBVTFXLEVBQVYsRUFBZTtBQUNuQixlQUFPQSxFQUFFLEdBQ1I5SCxNQUFNLENBQUN3TSxPQUFQLENBQWdCMUUsRUFBaEIsRUFBb0JpSCxJQUFwQixJQUE2QixDQUFDLENBRHRCLEdBRVJBLElBQUksQ0FBQzdVLE1BQUwsR0FBYyxDQUZmO0FBR0EsT0F2REs7QUF5RE47QUFDQXFtQixXQUFLLEVBQUUsWUFBVztBQUNqQixZQUFLeFIsSUFBTCxFQUFZO0FBQ1hBLGNBQUksR0FBRyxFQUFQO0FBQ0E7O0FBQ0QsZUFBTyxJQUFQO0FBQ0EsT0EvREs7QUFpRU47QUFDQTtBQUNBO0FBQ0F5UixhQUFPLEVBQUUsWUFBVztBQUNuQlAsY0FBTSxHQUFHQyxLQUFLLEdBQUcsRUFBakI7QUFDQW5SLFlBQUksR0FBR2dSLE1BQU0sR0FBRyxFQUFoQjtBQUNBLGVBQU8sSUFBUDtBQUNBLE9BeEVLO0FBeUVONU8sY0FBUSxFQUFFLFlBQVc7QUFDcEIsZUFBTyxDQUFDcEMsSUFBUjtBQUNBLE9BM0VLO0FBNkVOO0FBQ0E7QUFDQTtBQUNBMFIsVUFBSSxFQUFFLFlBQVc7QUFDaEJSLGNBQU0sR0FBR0MsS0FBSyxHQUFHLEVBQWpCOztBQUNBLFlBQUssQ0FBQ0gsTUFBRCxJQUFXLENBQUNELE1BQWpCLEVBQTBCO0FBQ3pCL1EsY0FBSSxHQUFHZ1IsTUFBTSxHQUFHLEVBQWhCO0FBQ0E7O0FBQ0QsZUFBTyxJQUFQO0FBQ0EsT0F0Rks7QUF1Rk5FLFlBQU0sRUFBRSxZQUFXO0FBQ2xCLGVBQU8sQ0FBQyxDQUFDQSxNQUFUO0FBQ0EsT0F6Rks7QUEyRk47QUFDQVMsY0FBUSxFQUFFLFVBQVV4VyxPQUFWLEVBQW1CeE8sSUFBbkIsRUFBMEI7QUFDbkMsWUFBSyxDQUFDdWtCLE1BQU4sRUFBZTtBQUNkdmtCLGNBQUksR0FBR0EsSUFBSSxJQUFJLEVBQWY7QUFDQUEsY0FBSSxHQUFHLENBQUV3TyxPQUFGLEVBQVd4TyxJQUFJLENBQUNDLEtBQUwsR0FBYUQsSUFBSSxDQUFDQyxLQUFMLEVBQWIsR0FBNEJELElBQXZDLENBQVA7QUFDQXdrQixlQUFLLENBQUNqbEIsSUFBTixDQUFZUyxJQUFaOztBQUNBLGNBQUssQ0FBQ29rQixNQUFOLEVBQWU7QUFDZE0sZ0JBQUk7QUFDSjtBQUNEOztBQUNELGVBQU8sSUFBUDtBQUNBLE9BdEdLO0FBd0dOO0FBQ0FBLFVBQUksRUFBRSxZQUFXO0FBQ2hCckMsWUFBSSxDQUFDMkMsUUFBTCxDQUFlLElBQWYsRUFBcUJsaUIsU0FBckI7QUFDQSxlQUFPLElBQVA7QUFDQSxPQTVHSztBQThHTjtBQUNBd2hCLFdBQUssRUFBRSxZQUFXO0FBQ2pCLGVBQU8sQ0FBQyxDQUFDQSxLQUFUO0FBQ0E7QUFqSEssS0FuRVI7O0FBdUxBLFdBQU9qQyxJQUFQO0FBQ0EsR0FoTUQ7O0FBbU1BLFdBQVM0QyxRQUFULENBQW1CQyxDQUFuQixFQUF1QjtBQUN0QixXQUFPQSxDQUFQO0FBQ0E7O0FBQ0QsV0FBU0MsT0FBVCxDQUFrQkMsRUFBbEIsRUFBdUI7QUFDdEIsVUFBTUEsRUFBTjtBQUNBOztBQUVELFdBQVNDLFVBQVQsQ0FBcUJwZ0IsS0FBckIsRUFBNEJxZ0IsT0FBNUIsRUFBcUNDLE1BQXJDLEVBQTZDQyxPQUE3QyxFQUF1RDtBQUN0RCxRQUFJOW1CLE1BQUo7O0FBRUEsUUFBSTtBQUVIO0FBQ0EsVUFBS3VHLEtBQUssSUFBSXVJLFVBQVUsQ0FBSTlPLE1BQU0sR0FBR3VHLEtBQUssQ0FBQ3FILE9BQW5CLENBQXhCLEVBQXlEO0FBQ3hENU4sY0FBTSxDQUFDMEMsSUFBUCxDQUFhNkQsS0FBYixFQUFxQjJOLElBQXJCLENBQTJCMFMsT0FBM0IsRUFBcUNHLElBQXJDLENBQTJDRixNQUEzQyxFQUR3RCxDQUd6RDtBQUNDLE9BSkQsTUFJTyxJQUFLdGdCLEtBQUssSUFBSXVJLFVBQVUsQ0FBSTlPLE1BQU0sR0FBR3VHLEtBQUssQ0FBQ3lnQixJQUFuQixDQUF4QixFQUFzRDtBQUM1RGhuQixjQUFNLENBQUMwQyxJQUFQLENBQWE2RCxLQUFiLEVBQW9CcWdCLE9BQXBCLEVBQTZCQyxNQUE3QixFQUQ0RCxDQUc3RDtBQUNDLE9BSk0sTUFJQTtBQUVOO0FBQ0E7QUFDQTtBQUNBRCxlQUFPLENBQUNubEIsS0FBUixDQUFlZSxTQUFmLEVBQTBCLENBQUUrRCxLQUFGLEVBQVVoRixLQUFWLENBQWlCdWxCLE9BQWpCLENBQTFCO0FBQ0EsT0FqQkUsQ0FtQko7QUFDQTtBQUNBOztBQUNDLEtBdEJELENBc0JFLE9BQVF2Z0IsS0FBUixFQUFnQjtBQUVqQjtBQUNBO0FBQ0FzZ0IsWUFBTSxDQUFDcGxCLEtBQVAsQ0FBY2UsU0FBZCxFQUF5QixDQUFFK0QsS0FBRixDQUF6QjtBQUNBO0FBQ0Q7O0FBRURYLFFBQU0sQ0FBQ2hFLE1BQVAsQ0FBZTtBQUVkOEksWUFBUSxFQUFFLFVBQVV1YyxJQUFWLEVBQWlCO0FBQzFCLFVBQUlDLE1BQU0sR0FBRyxDQUVYO0FBQ0E7QUFDQSxPQUFFLFFBQUYsRUFBWSxVQUFaLEVBQXdCdGhCLE1BQU0sQ0FBQzZmLFNBQVAsQ0FBa0IsUUFBbEIsQ0FBeEIsRUFDQzdmLE1BQU0sQ0FBQzZmLFNBQVAsQ0FBa0IsUUFBbEIsQ0FERCxFQUMrQixDQUQvQixDQUpXLEVBTVgsQ0FBRSxTQUFGLEVBQWEsTUFBYixFQUFxQjdmLE1BQU0sQ0FBQzZmLFNBQVAsQ0FBa0IsYUFBbEIsQ0FBckIsRUFDQzdmLE1BQU0sQ0FBQzZmLFNBQVAsQ0FBa0IsYUFBbEIsQ0FERCxFQUNvQyxDQURwQyxFQUN1QyxVQUR2QyxDQU5XLEVBUVgsQ0FBRSxRQUFGLEVBQVksTUFBWixFQUFvQjdmLE1BQU0sQ0FBQzZmLFNBQVAsQ0FBa0IsYUFBbEIsQ0FBcEIsRUFDQzdmLE1BQU0sQ0FBQzZmLFNBQVAsQ0FBa0IsYUFBbEIsQ0FERCxFQUNvQyxDQURwQyxFQUN1QyxVQUR2QyxDQVJXLENBQWI7QUFBQSxVQVdDMEIsS0FBSyxHQUFHLFNBWFQ7QUFBQSxVQVlDdlosT0FBTyxHQUFHO0FBQ1R1WixhQUFLLEVBQUUsWUFBVztBQUNqQixpQkFBT0EsS0FBUDtBQUNBLFNBSFE7QUFJVEMsY0FBTSxFQUFFLFlBQVc7QUFDbEJDLGtCQUFRLENBQUNuVCxJQUFULENBQWU5UCxTQUFmLEVBQTJCMmlCLElBQTNCLENBQWlDM2lCLFNBQWpDO0FBQ0EsaUJBQU8sSUFBUDtBQUNBLFNBUFE7QUFRVCxpQkFBUyxVQUFVc0osRUFBVixFQUFlO0FBQ3ZCLGlCQUFPRSxPQUFPLENBQUNvWixJQUFSLENBQWMsSUFBZCxFQUFvQnRaLEVBQXBCLENBQVA7QUFDQSxTQVZRO0FBWVQ7QUFDQTRaLFlBQUksRUFBRTtBQUFVO0FBQW1DO0FBQ2xELGNBQUlDLEdBQUcsR0FBR25qQixTQUFWO0FBRUEsaUJBQU93QixNQUFNLENBQUM4RSxRQUFQLENBQWlCLFVBQVU4YyxRQUFWLEVBQXFCO0FBQzVDNWhCLGtCQUFNLENBQUM0SyxJQUFQLENBQWEwVyxNQUFiLEVBQXFCLFVBQVVwVSxFQUFWLEVBQWMyVSxLQUFkLEVBQXNCO0FBRTFDO0FBQ0Esa0JBQUkvWixFQUFFLEdBQUdvQixVQUFVLENBQUV5WSxHQUFHLENBQUVFLEtBQUssQ0FBRSxDQUFGLENBQVAsQ0FBTCxDQUFWLElBQW1DRixHQUFHLENBQUVFLEtBQUssQ0FBRSxDQUFGLENBQVAsQ0FBL0MsQ0FIMEMsQ0FLMUM7QUFDQTtBQUNBOztBQUNBSixzQkFBUSxDQUFFSSxLQUFLLENBQUUsQ0FBRixDQUFQLENBQVIsQ0FBd0IsWUFBVztBQUNsQyxvQkFBSUMsUUFBUSxHQUFHaGEsRUFBRSxJQUFJQSxFQUFFLENBQUNqTSxLQUFILENBQVUsSUFBVixFQUFnQjJDLFNBQWhCLENBQXJCOztBQUNBLG9CQUFLc2pCLFFBQVEsSUFBSTVZLFVBQVUsQ0FBRTRZLFFBQVEsQ0FBQzlaLE9BQVgsQ0FBM0IsRUFBa0Q7QUFDakQ4WiwwQkFBUSxDQUFDOVosT0FBVCxHQUNFckIsUUFERixDQUNZaWIsUUFBUSxDQUFDL2EsTUFEckIsRUFFRXlILElBRkYsQ0FFUXNULFFBQVEsQ0FBQ1osT0FGakIsRUFHRUcsSUFIRixDQUdRUyxRQUFRLENBQUNYLE1BSGpCO0FBSUEsaUJBTEQsTUFLTztBQUNOVywwQkFBUSxDQUFFQyxLQUFLLENBQUUsQ0FBRixDQUFMLEdBQWEsTUFBZixDQUFSLENBQ0MsSUFERCxFQUVDL1osRUFBRSxHQUFHLENBQUVnYSxRQUFGLENBQUgsR0FBa0J0akIsU0FGckI7QUFJQTtBQUNELGVBYkQ7QUFjQSxhQXRCRDtBQXVCQW1qQixlQUFHLEdBQUcsSUFBTjtBQUNBLFdBekJNLEVBeUJIM1osT0F6QkcsRUFBUDtBQTBCQSxTQTFDUTtBQTJDVG9aLFlBQUksRUFBRSxVQUFVVyxXQUFWLEVBQXVCQyxVQUF2QixFQUFtQ3ZiLFVBQW5DLEVBQWdEO0FBQ3JELGNBQUl3YixRQUFRLEdBQUcsQ0FBZjs7QUFDQSxtQkFBU2pCLE9BQVQsQ0FBa0JrQixLQUFsQixFQUF5QlQsUUFBekIsRUFBbUNuTyxPQUFuQyxFQUE0QzZPLE9BQTVDLEVBQXNEO0FBQ3JELG1CQUFPLFlBQVc7QUFDakIsa0JBQUlDLElBQUksR0FBRyxJQUFYO0FBQUEsa0JBQ0MxbUIsSUFBSSxHQUFHOEMsU0FEUjtBQUFBLGtCQUVDNmpCLFVBQVUsR0FBRyxZQUFXO0FBQ3ZCLG9CQUFJUCxRQUFKLEVBQWNWLElBQWQsQ0FEdUIsQ0FHdkI7QUFDQTtBQUNBOztBQUNBLG9CQUFLYyxLQUFLLEdBQUdELFFBQWIsRUFBd0I7QUFDdkI7QUFDQTs7QUFFREgsd0JBQVEsR0FBR3hPLE9BQU8sQ0FBQ3pYLEtBQVIsQ0FBZXVtQixJQUFmLEVBQXFCMW1CLElBQXJCLENBQVgsQ0FWdUIsQ0FZdkI7QUFDQTs7QUFDQSxvQkFBS29tQixRQUFRLEtBQUtMLFFBQVEsQ0FBQ3paLE9BQVQsRUFBbEIsRUFBdUM7QUFDdEMsd0JBQU0sSUFBSXNhLFNBQUosQ0FBZSwwQkFBZixDQUFOO0FBQ0EsaUJBaEJzQixDQWtCdkI7QUFDQTtBQUNBO0FBQ0E7OztBQUNBbEIsb0JBQUksR0FBR1UsUUFBUSxNQUVkO0FBQ0E7QUFDQTtBQUNFLHVCQUFPQSxRQUFQLEtBQW9CLFFBQXBCLElBQ0QsT0FBT0EsUUFBUCxLQUFvQixVQU5QLENBQVIsSUFPTkEsUUFBUSxDQUFDVixJQVBWLENBdEJ1QixDQStCdkI7O0FBQ0Esb0JBQUtsWSxVQUFVLENBQUVrWSxJQUFGLENBQWYsRUFBMEI7QUFFekI7QUFDQSxzQkFBS2UsT0FBTCxFQUFlO0FBQ2RmLHdCQUFJLENBQUN0a0IsSUFBTCxDQUNDZ2xCLFFBREQsRUFFQ2QsT0FBTyxDQUFFaUIsUUFBRixFQUFZUixRQUFaLEVBQXNCZCxRQUF0QixFQUFnQ3dCLE9BQWhDLENBRlIsRUFHQ25CLE9BQU8sQ0FBRWlCLFFBQUYsRUFBWVIsUUFBWixFQUFzQlosT0FBdEIsRUFBK0JzQixPQUEvQixDQUhSLEVBRGMsQ0FPZjtBQUNDLG1CQVJELE1BUU87QUFFTjtBQUNBRiw0QkFBUTtBQUVSYix3QkFBSSxDQUFDdGtCLElBQUwsQ0FDQ2dsQixRQURELEVBRUNkLE9BQU8sQ0FBRWlCLFFBQUYsRUFBWVIsUUFBWixFQUFzQmQsUUFBdEIsRUFBZ0N3QixPQUFoQyxDQUZSLEVBR0NuQixPQUFPLENBQUVpQixRQUFGLEVBQVlSLFFBQVosRUFBc0JaLE9BQXRCLEVBQStCc0IsT0FBL0IsQ0FIUixFQUlDbkIsT0FBTyxDQUFFaUIsUUFBRixFQUFZUixRQUFaLEVBQXNCZCxRQUF0QixFQUNOYyxRQUFRLENBQUNjLFVBREgsQ0FKUjtBQU9BLG1CQXZCd0IsQ0F5QjFCOztBQUNDLGlCQTFCRCxNQTBCTztBQUVOO0FBQ0E7QUFDQSxzQkFBS2pQLE9BQU8sS0FBS3FOLFFBQWpCLEVBQTRCO0FBQzNCeUIsd0JBQUksR0FBR3hsQixTQUFQO0FBQ0FsQix3QkFBSSxHQUFHLENBQUVvbUIsUUFBRixDQUFQO0FBQ0EsbUJBUEssQ0FTTjtBQUNBOzs7QUFDQSxtQkFBRUssT0FBTyxJQUFJVixRQUFRLENBQUNlLFdBQXRCLEVBQXFDSixJQUFyQyxFQUEyQzFtQixJQUEzQztBQUNBO0FBQ0QsZUF6RUY7QUFBQSxrQkEyRUM7QUFDQSttQixxQkFBTyxHQUFHTixPQUFPLEdBQ2hCRSxVQURnQixHQUVoQixZQUFXO0FBQ1Ysb0JBQUk7QUFDSEEsNEJBQVU7QUFDVixpQkFGRCxDQUVFLE9BQVE5USxDQUFSLEVBQVk7QUFFYixzQkFBS3ZSLE1BQU0sQ0FBQzhFLFFBQVAsQ0FBZ0I0ZCxhQUFyQixFQUFxQztBQUNwQzFpQiwwQkFBTSxDQUFDOEUsUUFBUCxDQUFnQjRkLGFBQWhCLENBQStCblIsQ0FBL0IsRUFDQ2tSLE9BQU8sQ0FBQ0UsVUFEVDtBQUVBLG1CQUxZLENBT2I7QUFDQTtBQUNBOzs7QUFDQSxzQkFBS1QsS0FBSyxHQUFHLENBQVIsSUFBYUQsUUFBbEIsRUFBNkI7QUFFNUI7QUFDQTtBQUNBLHdCQUFLM08sT0FBTyxLQUFLdU4sT0FBakIsRUFBMkI7QUFDMUJ1QiwwQkFBSSxHQUFHeGxCLFNBQVA7QUFDQWxCLDBCQUFJLEdBQUcsQ0FBRTZWLENBQUYsQ0FBUDtBQUNBOztBQUVEa1EsNEJBQVEsQ0FBQ21CLFVBQVQsQ0FBcUJSLElBQXJCLEVBQTJCMW1CLElBQTNCO0FBQ0E7QUFDRDtBQUNELGVBdkdILENBRGlCLENBMEdqQjtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0Esa0JBQUt3bUIsS0FBTCxFQUFhO0FBQ1pPLHVCQUFPO0FBQ1AsZUFGRCxNQUVPO0FBRU47QUFDQTtBQUNBLG9CQUFLemlCLE1BQU0sQ0FBQzhFLFFBQVAsQ0FBZ0IrZCxZQUFyQixFQUFvQztBQUNuQ0oseUJBQU8sQ0FBQ0UsVUFBUixHQUFxQjNpQixNQUFNLENBQUM4RSxRQUFQLENBQWdCK2QsWUFBaEIsRUFBckI7QUFDQTs7QUFDRHRwQixzQkFBTSxDQUFDbUYsVUFBUCxDQUFtQitqQixPQUFuQjtBQUNBO0FBQ0QsYUF6SEQ7QUEwSEE7O0FBRUQsaUJBQU96aUIsTUFBTSxDQUFDOEUsUUFBUCxDQUFpQixVQUFVOGMsUUFBVixFQUFxQjtBQUU1QztBQUNBTixrQkFBTSxDQUFFLENBQUYsQ0FBTixDQUFhLENBQWIsRUFBaUJ6QyxHQUFqQixDQUNDbUMsT0FBTyxDQUNOLENBRE0sRUFFTlksUUFGTSxFQUdOMVksVUFBVSxDQUFFekMsVUFBRixDQUFWLEdBQ0NBLFVBREQsR0FFQ2thLFFBTEssRUFNTmlCLFFBQVEsQ0FBQ1csVUFOSCxDQURSLEVBSDRDLENBYzVDOztBQUNBakIsa0JBQU0sQ0FBRSxDQUFGLENBQU4sQ0FBYSxDQUFiLEVBQWlCekMsR0FBakIsQ0FDQ21DLE9BQU8sQ0FDTixDQURNLEVBRU5ZLFFBRk0sRUFHTjFZLFVBQVUsQ0FBRTZZLFdBQUYsQ0FBVixHQUNDQSxXQURELEdBRUNwQixRQUxLLENBRFIsRUFmNEMsQ0F5QjVDOztBQUNBVyxrQkFBTSxDQUFFLENBQUYsQ0FBTixDQUFhLENBQWIsRUFBaUJ6QyxHQUFqQixDQUNDbUMsT0FBTyxDQUNOLENBRE0sRUFFTlksUUFGTSxFQUdOMVksVUFBVSxDQUFFOFksVUFBRixDQUFWLEdBQ0NBLFVBREQsR0FFQ25CLE9BTEssQ0FEUjtBQVNBLFdBbkNNLEVBbUNIN1ksT0FuQ0csRUFBUDtBQW9DQSxTQTlNUTtBQWdOVDtBQUNBO0FBQ0FBLGVBQU8sRUFBRSxVQUFVdEwsR0FBVixFQUFnQjtBQUN4QixpQkFBT0EsR0FBRyxJQUFJLElBQVAsR0FBY3NELE1BQU0sQ0FBQ2hFLE1BQVAsQ0FBZVUsR0FBZixFQUFvQnNMLE9BQXBCLENBQWQsR0FBOENBLE9BQXJEO0FBQ0E7QUFwTlEsT0FaWDtBQUFBLFVBa09DeVosUUFBUSxHQUFHLEVBbE9aLENBRDBCLENBcU8xQjs7QUFDQXpoQixZQUFNLENBQUM0SyxJQUFQLENBQWEwVyxNQUFiLEVBQXFCLFVBQVVybkIsQ0FBVixFQUFhNG5CLEtBQWIsRUFBcUI7QUFDekMsWUFBSTlTLElBQUksR0FBRzhTLEtBQUssQ0FBRSxDQUFGLENBQWhCO0FBQUEsWUFDQ2lCLFdBQVcsR0FBR2pCLEtBQUssQ0FBRSxDQUFGLENBRHBCLENBRHlDLENBSXpDO0FBQ0E7QUFDQTs7QUFDQTdaLGVBQU8sQ0FBRTZaLEtBQUssQ0FBRSxDQUFGLENBQVAsQ0FBUCxHQUF3QjlTLElBQUksQ0FBQzhQLEdBQTdCLENBUHlDLENBU3pDOztBQUNBLFlBQUtpRSxXQUFMLEVBQW1CO0FBQ2xCL1QsY0FBSSxDQUFDOFAsR0FBTCxDQUNDLFlBQVc7QUFFVjtBQUNBO0FBQ0EwQyxpQkFBSyxHQUFHdUIsV0FBUjtBQUNBLFdBTkYsRUFRQztBQUNBO0FBQ0F4QixnQkFBTSxDQUFFLElBQUlybkIsQ0FBTixDQUFOLENBQWlCLENBQWpCLEVBQXFCdW1CLE9BVnRCLEVBWUM7QUFDQTtBQUNBYyxnQkFBTSxDQUFFLElBQUlybkIsQ0FBTixDQUFOLENBQWlCLENBQWpCLEVBQXFCdW1CLE9BZHRCLEVBZ0JDO0FBQ0FjLGdCQUFNLENBQUUsQ0FBRixDQUFOLENBQWEsQ0FBYixFQUFpQmIsSUFqQmxCLEVBbUJDO0FBQ0FhLGdCQUFNLENBQUUsQ0FBRixDQUFOLENBQWEsQ0FBYixFQUFpQmIsSUFwQmxCO0FBc0JBLFNBakN3QyxDQW1DekM7QUFDQTtBQUNBOzs7QUFDQTFSLFlBQUksQ0FBQzhQLEdBQUwsQ0FBVWdELEtBQUssQ0FBRSxDQUFGLENBQUwsQ0FBV3pCLElBQXJCLEVBdEN5QyxDQXdDekM7QUFDQTtBQUNBOztBQUNBcUIsZ0JBQVEsQ0FBRUksS0FBSyxDQUFFLENBQUYsQ0FBUCxDQUFSLEdBQXlCLFlBQVc7QUFDbkNKLGtCQUFRLENBQUVJLEtBQUssQ0FBRSxDQUFGLENBQUwsR0FBYSxNQUFmLENBQVIsQ0FBaUMsU0FBU0osUUFBVCxHQUFvQjdrQixTQUFwQixHQUFnQyxJQUFqRSxFQUF1RTRCLFNBQXZFO0FBQ0EsaUJBQU8sSUFBUDtBQUNBLFNBSEQsQ0EzQ3lDLENBZ0R6QztBQUNBO0FBQ0E7OztBQUNBaWpCLGdCQUFRLENBQUVJLEtBQUssQ0FBRSxDQUFGLENBQUwsR0FBYSxNQUFmLENBQVIsR0FBa0M5UyxJQUFJLENBQUMyUixRQUF2QztBQUNBLE9BcERELEVBdE8wQixDQTRSMUI7O0FBQ0ExWSxhQUFPLENBQUNBLE9BQVIsQ0FBaUJ5WixRQUFqQixFQTdSMEIsQ0ErUjFCOztBQUNBLFVBQUtKLElBQUwsRUFBWTtBQUNYQSxZQUFJLENBQUN2a0IsSUFBTCxDQUFXMmtCLFFBQVgsRUFBcUJBLFFBQXJCO0FBQ0EsT0FsU3lCLENBb1MxQjs7O0FBQ0EsYUFBT0EsUUFBUDtBQUNBLEtBeFNhO0FBMFNkO0FBQ0FzQixRQUFJLEVBQUUsVUFBVUMsV0FBVixFQUF3QjtBQUM3QixVQUVDO0FBQ0FDLGVBQVMsR0FBR3prQixTQUFTLENBQUN0RSxNQUh2QjtBQUFBLFVBS0M7QUFDQUQsT0FBQyxHQUFHZ3BCLFNBTkw7QUFBQSxVQVFDO0FBQ0FDLHFCQUFlLEdBQUcxbUIsS0FBSyxDQUFFdkMsQ0FBRixDQVR4QjtBQUFBLFVBVUNrcEIsYUFBYSxHQUFHeG5CLEtBQUssQ0FBQ21CLElBQU4sQ0FBWTBCLFNBQVosQ0FWakI7QUFBQSxVQVlDO0FBQ0E0a0IsWUFBTSxHQUFHcGpCLE1BQU0sQ0FBQzhFLFFBQVAsRUFiVjtBQUFBLFVBZUM7QUFDQXVlLGdCQUFVLEdBQUcsVUFBVXBwQixDQUFWLEVBQWM7QUFDMUIsZUFBTyxVQUFVMEcsS0FBVixFQUFrQjtBQUN4QnVpQix5QkFBZSxDQUFFanBCLENBQUYsQ0FBZixHQUF1QixJQUF2QjtBQUNBa3BCLHVCQUFhLENBQUVscEIsQ0FBRixDQUFiLEdBQXFCdUUsU0FBUyxDQUFDdEUsTUFBVixHQUFtQixDQUFuQixHQUF1QnlCLEtBQUssQ0FBQ21CLElBQU4sQ0FBWTBCLFNBQVosQ0FBdkIsR0FBaURtQyxLQUF0RTs7QUFDQSxjQUFLLENBQUcsR0FBRXNpQixTQUFWLEVBQXdCO0FBQ3ZCRyxrQkFBTSxDQUFDWixXQUFQLENBQW9CVSxlQUFwQixFQUFxQ0MsYUFBckM7QUFDQTtBQUNELFNBTkQ7QUFPQSxPQXhCRixDQUQ2QixDQTJCN0I7OztBQUNBLFVBQUtGLFNBQVMsSUFBSSxDQUFsQixFQUFzQjtBQUNyQmxDLGtCQUFVLENBQUVpQyxXQUFGLEVBQWVJLE1BQU0sQ0FBQzlVLElBQVAsQ0FBYStVLFVBQVUsQ0FBRXBwQixDQUFGLENBQXZCLEVBQStCK21CLE9BQTlDLEVBQXVEb0MsTUFBTSxDQUFDbkMsTUFBOUQsRUFDVCxDQUFDZ0MsU0FEUSxDQUFWLENBRHFCLENBSXJCOztBQUNBLFlBQUtHLE1BQU0sQ0FBQzdCLEtBQVAsT0FBbUIsU0FBbkIsSUFDSnJZLFVBQVUsQ0FBRWlhLGFBQWEsQ0FBRWxwQixDQUFGLENBQWIsSUFBc0JrcEIsYUFBYSxDQUFFbHBCLENBQUYsQ0FBYixDQUFtQm1uQixJQUEzQyxDQURYLEVBQytEO0FBRTlELGlCQUFPZ0MsTUFBTSxDQUFDaEMsSUFBUCxFQUFQO0FBQ0E7QUFDRCxPQXRDNEIsQ0F3QzdCOzs7QUFDQSxhQUFRbm5CLENBQUMsRUFBVCxFQUFjO0FBQ2I4bUIsa0JBQVUsQ0FBRW9DLGFBQWEsQ0FBRWxwQixDQUFGLENBQWYsRUFBc0JvcEIsVUFBVSxDQUFFcHBCLENBQUYsQ0FBaEMsRUFBdUNtcEIsTUFBTSxDQUFDbkMsTUFBOUMsQ0FBVjtBQUNBOztBQUVELGFBQU9tQyxNQUFNLENBQUNwYixPQUFQLEVBQVA7QUFDQTtBQXpWYSxHQUFmLEVBaGtIaUYsQ0E2NUhqRjtBQUNBOztBQUNBLE1BQUlzYixXQUFXLEdBQUcsd0RBQWxCOztBQUVBdGpCLFFBQU0sQ0FBQzhFLFFBQVAsQ0FBZ0I0ZCxhQUFoQixHQUFnQyxVQUFVcGlCLEtBQVYsRUFBaUJpakIsS0FBakIsRUFBeUI7QUFFeEQ7QUFDQTtBQUNBLFFBQUtocUIsTUFBTSxDQUFDK0YsT0FBUCxJQUFrQi9GLE1BQU0sQ0FBQytGLE9BQVAsQ0FBZWtrQixJQUFqQyxJQUF5Q2xqQixLQUF6QyxJQUFrRGdqQixXQUFXLENBQUNqUixJQUFaLENBQWtCL1IsS0FBSyxDQUFDbUwsSUFBeEIsQ0FBdkQsRUFBd0Y7QUFDdkZsUyxZQUFNLENBQUMrRixPQUFQLENBQWVra0IsSUFBZixDQUFxQixnQ0FBZ0NsakIsS0FBSyxDQUFDVyxPQUEzRCxFQUFvRVgsS0FBSyxDQUFDaWpCLEtBQTFFLEVBQWlGQSxLQUFqRjtBQUNBO0FBQ0QsR0FQRDs7QUFZQXZqQixRQUFNLENBQUN5akIsY0FBUCxHQUF3QixVQUFVbmpCLEtBQVYsRUFBa0I7QUFDekMvRyxVQUFNLENBQUNtRixVQUFQLENBQW1CLFlBQVc7QUFDN0IsWUFBTTRCLEtBQU47QUFDQSxLQUZEO0FBR0EsR0FKRCxDQTc2SGlGLENBczdIakY7OztBQUNBLE1BQUlvakIsU0FBUyxHQUFHMWpCLE1BQU0sQ0FBQzhFLFFBQVAsRUFBaEI7O0FBRUE5RSxRQUFNLENBQUM4SCxFQUFQLENBQVVxVyxLQUFWLEdBQWtCLFVBQVVyVyxFQUFWLEVBQWU7QUFFaEM0YixhQUFTLENBQ1B0QyxJQURGLENBQ1F0WixFQURSLEVBR0M7QUFDQTtBQUNBO0FBTEQsS0FNRTZiLEtBTkYsQ0FNUyxVQUFVcmpCLEtBQVYsRUFBa0I7QUFDekJOLFlBQU0sQ0FBQ3lqQixjQUFQLENBQXVCbmpCLEtBQXZCO0FBQ0EsS0FSRjtBQVVBLFdBQU8sSUFBUDtBQUNBLEdBYkQ7O0FBZUFOLFFBQU0sQ0FBQ2hFLE1BQVAsQ0FBZTtBQUVkO0FBQ0FrUSxXQUFPLEVBQUUsS0FISztBQUtkO0FBQ0E7QUFDQTBYLGFBQVMsRUFBRSxDQVBHO0FBU2Q7QUFDQXpGLFNBQUssRUFBRSxVQUFVMEYsSUFBVixFQUFpQjtBQUV2QjtBQUNBLFVBQUtBLElBQUksS0FBSyxJQUFULEdBQWdCLEVBQUU3akIsTUFBTSxDQUFDNGpCLFNBQXpCLEdBQXFDNWpCLE1BQU0sQ0FBQ2tNLE9BQWpELEVBQTJEO0FBQzFEO0FBQ0EsT0FMc0IsQ0FPdkI7OztBQUNBbE0sWUFBTSxDQUFDa00sT0FBUCxHQUFpQixJQUFqQixDQVJ1QixDQVV2Qjs7QUFDQSxVQUFLMlgsSUFBSSxLQUFLLElBQVQsSUFBaUIsRUFBRTdqQixNQUFNLENBQUM0akIsU0FBVCxHQUFxQixDQUEzQyxFQUErQztBQUM5QztBQUNBLE9BYnNCLENBZXZCOzs7QUFDQUYsZUFBUyxDQUFDbEIsV0FBVixDQUF1QnJsQixRQUF2QixFQUFpQyxDQUFFNkMsTUFBRixDQUFqQztBQUNBO0FBM0JhLEdBQWY7QUE4QkFBLFFBQU0sQ0FBQ21lLEtBQVAsQ0FBYWlELElBQWIsR0FBb0JzQyxTQUFTLENBQUN0QyxJQUE5QixDQXQrSGlGLENBdytIakY7O0FBQ0EsV0FBUzBDLFNBQVQsR0FBcUI7QUFDcEIzbUIsWUFBUSxDQUFDd0ssbUJBQVQsQ0FBOEIsa0JBQTlCLEVBQWtEbWMsU0FBbEQ7QUFDQXZxQixVQUFNLENBQUNvTyxtQkFBUCxDQUE0QixNQUE1QixFQUFvQ21jLFNBQXBDO0FBQ0E5akIsVUFBTSxDQUFDbWUsS0FBUDtBQUNBLEdBNytIZ0YsQ0ErK0hqRjtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsTUFBS2hoQixRQUFRLENBQUMwQixVQUFULEtBQXdCLFVBQXhCLElBQ0YxQixRQUFRLENBQUMwQixVQUFULEtBQXdCLFNBQXhCLElBQXFDLENBQUMxQixRQUFRLENBQUNxRixlQUFULENBQXlCdWhCLFFBRGxFLEVBQytFO0FBRTlFO0FBQ0F4cUIsVUFBTSxDQUFDbUYsVUFBUCxDQUFtQnNCLE1BQU0sQ0FBQ21lLEtBQTFCO0FBRUEsR0FORCxNQU1PO0FBRU47QUFDQWhoQixZQUFRLENBQUMyQixnQkFBVCxDQUEyQixrQkFBM0IsRUFBK0NnbEIsU0FBL0MsRUFITSxDQUtOOztBQUNBdnFCLFVBQU0sQ0FBQ3VGLGdCQUFQLENBQXlCLE1BQXpCLEVBQWlDZ2xCLFNBQWpDO0FBQ0EsR0FoZ0lnRixDQXFnSWpGO0FBQ0E7OztBQUNBLE1BQUlFLE1BQU0sR0FBRyxVQUFVcm1CLEtBQVYsRUFBaUJtSyxFQUFqQixFQUFxQmdMLEdBQXJCLEVBQTBCblMsS0FBMUIsRUFBaUNzakIsU0FBakMsRUFBNENDLFFBQTVDLEVBQXNEQyxHQUF0RCxFQUE0RDtBQUN4RSxRQUFJbHFCLENBQUMsR0FBRyxDQUFSO0FBQUEsUUFDQ29SLEdBQUcsR0FBRzFOLEtBQUssQ0FBQ3pELE1BRGI7QUFBQSxRQUVDa3FCLElBQUksR0FBR3RSLEdBQUcsSUFBSSxJQUZmLENBRHdFLENBS3hFOztBQUNBLFFBQUs5SSxNQUFNLENBQUU4SSxHQUFGLENBQU4sS0FBa0IsUUFBdkIsRUFBa0M7QUFDakNtUixlQUFTLEdBQUcsSUFBWjs7QUFDQSxXQUFNaHFCLENBQU4sSUFBVzZZLEdBQVgsRUFBaUI7QUFDaEJrUixjQUFNLENBQUVybUIsS0FBRixFQUFTbUssRUFBVCxFQUFhN04sQ0FBYixFQUFnQjZZLEdBQUcsQ0FBRTdZLENBQUYsQ0FBbkIsRUFBMEIsSUFBMUIsRUFBZ0NpcUIsUUFBaEMsRUFBMENDLEdBQTFDLENBQU47QUFDQSxPQUpnQyxDQU1sQzs7QUFDQyxLQVBELE1BT08sSUFBS3hqQixLQUFLLEtBQUsvRCxTQUFmLEVBQTJCO0FBQ2pDcW5CLGVBQVMsR0FBRyxJQUFaOztBQUVBLFVBQUssQ0FBQy9hLFVBQVUsQ0FBRXZJLEtBQUYsQ0FBaEIsRUFBNEI7QUFDM0J3akIsV0FBRyxHQUFHLElBQU47QUFDQTs7QUFFRCxVQUFLQyxJQUFMLEVBQVk7QUFFWDtBQUNBLFlBQUtELEdBQUwsRUFBVztBQUNWcmMsWUFBRSxDQUFDaEwsSUFBSCxDQUFTYSxLQUFULEVBQWdCZ0QsS0FBaEI7QUFDQW1ILFlBQUUsR0FBRyxJQUFMLENBRlUsQ0FJWDtBQUNDLFNBTEQsTUFLTztBQUNOc2MsY0FBSSxHQUFHdGMsRUFBUDs7QUFDQUEsWUFBRSxHQUFHLFVBQVV6TixJQUFWLEVBQWdCZ3FCLElBQWhCLEVBQXNCMWpCLEtBQXRCLEVBQThCO0FBQ2xDLG1CQUFPeWpCLElBQUksQ0FBQ3RuQixJQUFMLENBQVdrRCxNQUFNLENBQUUzRixJQUFGLENBQWpCLEVBQTJCc0csS0FBM0IsQ0FBUDtBQUNBLFdBRkQ7QUFHQTtBQUNEOztBQUVELFVBQUttSCxFQUFMLEVBQVU7QUFDVCxlQUFRN04sQ0FBQyxHQUFHb1IsR0FBWixFQUFpQnBSLENBQUMsRUFBbEIsRUFBdUI7QUFDdEI2TixZQUFFLENBQ0RuSyxLQUFLLENBQUUxRCxDQUFGLENBREosRUFDVzZZLEdBRFgsRUFDZ0JxUixHQUFHLEdBQ3BCeGpCLEtBRG9CLEdBRXBCQSxLQUFLLENBQUM3RCxJQUFOLENBQVlhLEtBQUssQ0FBRTFELENBQUYsQ0FBakIsRUFBd0JBLENBQXhCLEVBQTJCNk4sRUFBRSxDQUFFbkssS0FBSyxDQUFFMUQsQ0FBRixDQUFQLEVBQWM2WSxHQUFkLENBQTdCLENBSEMsQ0FBRjtBQUtBO0FBQ0Q7QUFDRDs7QUFFRCxRQUFLbVIsU0FBTCxFQUFpQjtBQUNoQixhQUFPdG1CLEtBQVA7QUFDQSxLQWpEdUUsQ0FtRHhFOzs7QUFDQSxRQUFLeW1CLElBQUwsRUFBWTtBQUNYLGFBQU90YyxFQUFFLENBQUNoTCxJQUFILENBQVNhLEtBQVQsQ0FBUDtBQUNBOztBQUVELFdBQU8wTixHQUFHLEdBQUd2RCxFQUFFLENBQUVuSyxLQUFLLENBQUUsQ0FBRixDQUFQLEVBQWNtVixHQUFkLENBQUwsR0FBMkJvUixRQUFyQztBQUNBLEdBekRELENBdmdJaUYsQ0Fta0lqRjs7O0FBQ0EsTUFBSUksU0FBUyxHQUFHLE9BQWhCO0FBQUEsTUFDQ0MsVUFBVSxHQUFHLFdBRGQsQ0Fwa0lpRixDQXVrSWpGOztBQUNBLFdBQVNDLFVBQVQsQ0FBcUJDLElBQXJCLEVBQTJCQyxNQUEzQixFQUFvQztBQUNuQyxXQUFPQSxNQUFNLENBQUNDLFdBQVAsRUFBUDtBQUNBLEdBMWtJZ0YsQ0E0a0lqRjtBQUNBO0FBQ0E7OztBQUNBLFdBQVNDLFNBQVQsQ0FBb0JDLE1BQXBCLEVBQTZCO0FBQzVCLFdBQU9BLE1BQU0sQ0FBQzVsQixPQUFQLENBQWdCcWxCLFNBQWhCLEVBQTJCLEtBQTNCLEVBQW1DcmxCLE9BQW5DLENBQTRDc2xCLFVBQTVDLEVBQXdEQyxVQUF4RCxDQUFQO0FBQ0E7O0FBQ0QsTUFBSU0sVUFBVSxHQUFHLFVBQVVDLEtBQVYsRUFBa0I7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBT0EsS0FBSyxDQUFDamlCLFFBQU4sS0FBbUIsQ0FBbkIsSUFBd0JpaUIsS0FBSyxDQUFDamlCLFFBQU4sS0FBbUIsQ0FBM0MsSUFBZ0QsQ0FBRyxDQUFDaWlCLEtBQUssQ0FBQ2ppQixRQUFqRTtBQUNBLEdBVEQ7O0FBY0EsV0FBU2tpQixJQUFULEdBQWdCO0FBQ2YsU0FBS2haLE9BQUwsR0FBZWhNLE1BQU0sQ0FBQ2dNLE9BQVAsR0FBaUJnWixJQUFJLENBQUNDLEdBQUwsRUFBaEM7QUFDQTs7QUFFREQsTUFBSSxDQUFDQyxHQUFMLEdBQVcsQ0FBWDtBQUVBRCxNQUFJLENBQUNuckIsU0FBTCxHQUFpQjtBQUVoQmdaLFNBQUssRUFBRSxVQUFVa1MsS0FBVixFQUFrQjtBQUV4QjtBQUNBLFVBQUlwa0IsS0FBSyxHQUFHb2tCLEtBQUssQ0FBRSxLQUFLL1ksT0FBUCxDQUFqQixDQUh3QixDQUt4Qjs7QUFDQSxVQUFLLENBQUNyTCxLQUFOLEVBQWM7QUFDYkEsYUFBSyxHQUFHc0UsTUFBTSxDQUFDQyxNQUFQLENBQWUsSUFBZixDQUFSLENBRGEsQ0FHYjtBQUNBO0FBQ0E7O0FBQ0EsWUFBSzRmLFVBQVUsQ0FBRUMsS0FBRixDQUFmLEVBQTJCO0FBRTFCO0FBQ0E7QUFDQSxjQUFLQSxLQUFLLENBQUNqaUIsUUFBWCxFQUFzQjtBQUNyQmlpQixpQkFBSyxDQUFFLEtBQUsvWSxPQUFQLENBQUwsR0FBd0JyTCxLQUF4QixDQURxQixDQUd0QjtBQUNBO0FBQ0E7QUFDQyxXQU5ELE1BTU87QUFDTnNFLGtCQUFNLENBQUNpZ0IsY0FBUCxDQUF1QkgsS0FBdkIsRUFBOEIsS0FBSy9ZLE9BQW5DLEVBQTRDO0FBQzNDckwsbUJBQUssRUFBRUEsS0FEb0M7QUFFM0N3a0IsMEJBQVksRUFBRTtBQUY2QixhQUE1QztBQUlBO0FBQ0Q7QUFDRDs7QUFFRCxhQUFPeGtCLEtBQVA7QUFDQSxLQWxDZTtBQW1DaEJ5a0IsT0FBRyxFQUFFLFVBQVVMLEtBQVYsRUFBaUJ0a0IsSUFBakIsRUFBdUJFLEtBQXZCLEVBQStCO0FBQ25DLFVBQUl4RSxJQUFKO0FBQUEsVUFDQzBXLEtBQUssR0FBRyxLQUFLQSxLQUFMLENBQVlrUyxLQUFaLENBRFQsQ0FEbUMsQ0FJbkM7QUFDQTs7QUFDQSxVQUFLLE9BQU90a0IsSUFBUCxLQUFnQixRQUFyQixFQUFnQztBQUMvQm9TLGFBQUssQ0FBRStSLFNBQVMsQ0FBRW5rQixJQUFGLENBQVgsQ0FBTCxHQUE2QkUsS0FBN0IsQ0FEK0IsQ0FHaEM7QUFDQyxPQUpELE1BSU87QUFFTjtBQUNBLGFBQU14RSxJQUFOLElBQWNzRSxJQUFkLEVBQXFCO0FBQ3BCb1MsZUFBSyxDQUFFK1IsU0FBUyxDQUFFem9CLElBQUYsQ0FBWCxDQUFMLEdBQTZCc0UsSUFBSSxDQUFFdEUsSUFBRixDQUFqQztBQUNBO0FBQ0Q7O0FBQ0QsYUFBTzBXLEtBQVA7QUFDQSxLQXJEZTtBQXNEaEJ0SSxPQUFHLEVBQUUsVUFBVXdhLEtBQVYsRUFBaUJqUyxHQUFqQixFQUF1QjtBQUMzQixhQUFPQSxHQUFHLEtBQUtsVyxTQUFSLEdBQ04sS0FBS2lXLEtBQUwsQ0FBWWtTLEtBQVosQ0FETSxHQUdOO0FBQ0FBLFdBQUssQ0FBRSxLQUFLL1ksT0FBUCxDQUFMLElBQXlCK1ksS0FBSyxDQUFFLEtBQUsvWSxPQUFQLENBQUwsQ0FBdUI0WSxTQUFTLENBQUU5UixHQUFGLENBQWhDLENBSjFCO0FBS0EsS0E1RGU7QUE2RGhCa1IsVUFBTSxFQUFFLFVBQVVlLEtBQVYsRUFBaUJqUyxHQUFqQixFQUFzQm5TLEtBQXRCLEVBQThCO0FBRXJDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFLbVMsR0FBRyxLQUFLbFcsU0FBUixJQUNDa1csR0FBRyxJQUFJLE9BQU9BLEdBQVAsS0FBZSxRQUF4QixJQUFzQ25TLEtBQUssS0FBSy9ELFNBRHBELEVBQ2tFO0FBRWpFLGVBQU8sS0FBSzJOLEdBQUwsQ0FBVXdhLEtBQVYsRUFBaUJqUyxHQUFqQixDQUFQO0FBQ0EsT0FqQm9DLENBbUJyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFdBQUtzUyxHQUFMLENBQVVMLEtBQVYsRUFBaUJqUyxHQUFqQixFQUFzQm5TLEtBQXRCLEVBekJxQyxDQTJCckM7QUFDQTs7QUFDQSxhQUFPQSxLQUFLLEtBQUsvRCxTQUFWLEdBQXNCK0QsS0FBdEIsR0FBOEJtUyxHQUFyQztBQUNBLEtBM0ZlO0FBNEZoQndOLFVBQU0sRUFBRSxVQUFVeUUsS0FBVixFQUFpQmpTLEdBQWpCLEVBQXVCO0FBQzlCLFVBQUk3WSxDQUFKO0FBQUEsVUFDQzRZLEtBQUssR0FBR2tTLEtBQUssQ0FBRSxLQUFLL1ksT0FBUCxDQURkOztBQUdBLFVBQUs2RyxLQUFLLEtBQUtqVyxTQUFmLEVBQTJCO0FBQzFCO0FBQ0E7O0FBRUQsVUFBS2tXLEdBQUcsS0FBS2xXLFNBQWIsRUFBeUI7QUFFeEI7QUFDQSxZQUFLSixLQUFLLENBQUNHLE9BQU4sQ0FBZW1XLEdBQWYsQ0FBTCxFQUE0QjtBQUUzQjtBQUNBO0FBQ0FBLGFBQUcsR0FBR0EsR0FBRyxDQUFDakksR0FBSixDQUFTK1osU0FBVCxDQUFOO0FBQ0EsU0FMRCxNQUtPO0FBQ045UixhQUFHLEdBQUc4UixTQUFTLENBQUU5UixHQUFGLENBQWYsQ0FETSxDQUdOO0FBQ0E7O0FBQ0FBLGFBQUcsR0FBR0EsR0FBRyxJQUFJRCxLQUFQLEdBQ0wsQ0FBRUMsR0FBRixDQURLLEdBRUhBLEdBQUcsQ0FBQzVULEtBQUosQ0FBV3NnQixhQUFYLEtBQThCLEVBRmpDO0FBR0E7O0FBRUR2bEIsU0FBQyxHQUFHNlksR0FBRyxDQUFDNVksTUFBUjs7QUFFQSxlQUFRRCxDQUFDLEVBQVQsRUFBYztBQUNiLGlCQUFPNFksS0FBSyxDQUFFQyxHQUFHLENBQUU3WSxDQUFGLENBQUwsQ0FBWjtBQUNBO0FBQ0QsT0EvQjZCLENBaUM5Qjs7O0FBQ0EsVUFBSzZZLEdBQUcsS0FBS2xXLFNBQVIsSUFBcUJvRCxNQUFNLENBQUNxTSxhQUFQLENBQXNCd0csS0FBdEIsQ0FBMUIsRUFBMEQ7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFLa1MsS0FBSyxDQUFDamlCLFFBQVgsRUFBc0I7QUFDckJpaUIsZUFBSyxDQUFFLEtBQUsvWSxPQUFQLENBQUwsR0FBd0JwUCxTQUF4QjtBQUNBLFNBRkQsTUFFTztBQUNOLGlCQUFPbW9CLEtBQUssQ0FBRSxLQUFLL1ksT0FBUCxDQUFaO0FBQ0E7QUFDRDtBQUNELEtBMUllO0FBMkloQnFaLFdBQU8sRUFBRSxVQUFVTixLQUFWLEVBQWtCO0FBQzFCLFVBQUlsUyxLQUFLLEdBQUdrUyxLQUFLLENBQUUsS0FBSy9ZLE9BQVAsQ0FBakI7QUFDQSxhQUFPNkcsS0FBSyxLQUFLalcsU0FBVixJQUF1QixDQUFDb0QsTUFBTSxDQUFDcU0sYUFBUCxDQUFzQndHLEtBQXRCLENBQS9CO0FBQ0E7QUE5SWUsR0FBakI7QUFnSkEsTUFBSXlTLFFBQVEsR0FBRyxJQUFJTixJQUFKLEVBQWY7QUFFQSxNQUFJTyxRQUFRLEdBQUcsSUFBSVAsSUFBSixFQUFmLENBeHZJaUYsQ0E0dklqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBSVEsTUFBTSxHQUFHLCtCQUFiO0FBQUEsTUFDQ0MsVUFBVSxHQUFHLFFBRGQ7O0FBR0EsV0FBU0MsT0FBVCxDQUFrQmpsQixJQUFsQixFQUF5QjtBQUN4QixRQUFLQSxJQUFJLEtBQUssTUFBZCxFQUF1QjtBQUN0QixhQUFPLElBQVA7QUFDQTs7QUFFRCxRQUFLQSxJQUFJLEtBQUssT0FBZCxFQUF3QjtBQUN2QixhQUFPLEtBQVA7QUFDQTs7QUFFRCxRQUFLQSxJQUFJLEtBQUssTUFBZCxFQUF1QjtBQUN0QixhQUFPLElBQVA7QUFDQSxLQVh1QixDQWF4Qjs7O0FBQ0EsUUFBS0EsSUFBSSxLQUFLLENBQUNBLElBQUQsR0FBUSxFQUF0QixFQUEyQjtBQUMxQixhQUFPLENBQUNBLElBQVI7QUFDQTs7QUFFRCxRQUFLK2tCLE1BQU0sQ0FBQ25ULElBQVAsQ0FBYTVSLElBQWIsQ0FBTCxFQUEyQjtBQUMxQixhQUFPTCxJQUFJLENBQUNDLEtBQUwsQ0FBWUksSUFBWixDQUFQO0FBQ0E7O0FBRUQsV0FBT0EsSUFBUDtBQUNBOztBQUVELFdBQVNkLFFBQVQsQ0FBbUJ0RixJQUFuQixFQUF5QnlZLEdBQXpCLEVBQThCclMsSUFBOUIsRUFBcUM7QUFDcEMsUUFBSWdMLElBQUosQ0FEb0MsQ0FHcEM7QUFDQTs7QUFDQSxRQUFLaEwsSUFBSSxLQUFLN0QsU0FBVCxJQUFzQnZDLElBQUksQ0FBQ3lJLFFBQUwsS0FBa0IsQ0FBN0MsRUFBaUQ7QUFDaEQySSxVQUFJLEdBQUcsVUFBVXFILEdBQUcsQ0FBQzdULE9BQUosQ0FBYXdtQixVQUFiLEVBQXlCLEtBQXpCLEVBQWlDcG1CLFdBQWpDLEVBQWpCO0FBQ0FvQixVQUFJLEdBQUdwRyxJQUFJLENBQUM2RixZQUFMLENBQW1CdUwsSUFBbkIsQ0FBUDs7QUFFQSxVQUFLLE9BQU9oTCxJQUFQLEtBQWdCLFFBQXJCLEVBQWdDO0FBQy9CLFlBQUk7QUFDSEEsY0FBSSxHQUFHaWxCLE9BQU8sQ0FBRWpsQixJQUFGLENBQWQ7QUFDQSxTQUZELENBRUUsT0FBUThRLENBQVIsRUFBWSxDQUFFLENBSGUsQ0FLL0I7OztBQUNBZ1UsZ0JBQVEsQ0FBQ0gsR0FBVCxDQUFjL3FCLElBQWQsRUFBb0J5WSxHQUFwQixFQUF5QnJTLElBQXpCO0FBQ0EsT0FQRCxNQU9PO0FBQ05BLFlBQUksR0FBRzdELFNBQVA7QUFDQTtBQUNEOztBQUNELFdBQU82RCxJQUFQO0FBQ0E7O0FBRURULFFBQU0sQ0FBQ2hFLE1BQVAsQ0FBZTtBQUNkcXBCLFdBQU8sRUFBRSxVQUFVaHJCLElBQVYsRUFBaUI7QUFDekIsYUFBT2tyQixRQUFRLENBQUNGLE9BQVQsQ0FBa0JockIsSUFBbEIsS0FBNEJpckIsUUFBUSxDQUFDRCxPQUFULENBQWtCaHJCLElBQWxCLENBQW5DO0FBQ0EsS0FIYTtBQUtkb0csUUFBSSxFQUFFLFVBQVVwRyxJQUFWLEVBQWdCb1IsSUFBaEIsRUFBc0JoTCxJQUF0QixFQUE2QjtBQUNsQyxhQUFPOGtCLFFBQVEsQ0FBQ3ZCLE1BQVQsQ0FBaUIzcEIsSUFBakIsRUFBdUJvUixJQUF2QixFQUE2QmhMLElBQTdCLENBQVA7QUFDQSxLQVBhO0FBU2RrbEIsY0FBVSxFQUFFLFVBQVV0ckIsSUFBVixFQUFnQm9SLElBQWhCLEVBQXVCO0FBQ2xDOFosY0FBUSxDQUFDakYsTUFBVCxDQUFpQmptQixJQUFqQixFQUF1Qm9SLElBQXZCO0FBQ0EsS0FYYTtBQWFkO0FBQ0E7QUFDQW1hLFNBQUssRUFBRSxVQUFVdnJCLElBQVYsRUFBZ0JvUixJQUFoQixFQUFzQmhMLElBQXRCLEVBQTZCO0FBQ25DLGFBQU82a0IsUUFBUSxDQUFDdEIsTUFBVCxDQUFpQjNwQixJQUFqQixFQUF1Qm9SLElBQXZCLEVBQTZCaEwsSUFBN0IsQ0FBUDtBQUNBLEtBakJhO0FBbUJkb2xCLGVBQVcsRUFBRSxVQUFVeHJCLElBQVYsRUFBZ0JvUixJQUFoQixFQUF1QjtBQUNuQzZaLGNBQVEsQ0FBQ2hGLE1BQVQsQ0FBaUJqbUIsSUFBakIsRUFBdUJvUixJQUF2QjtBQUNBO0FBckJhLEdBQWY7QUF3QkF6TCxRQUFNLENBQUM4SCxFQUFQLENBQVU5TCxNQUFWLENBQWtCO0FBQ2pCeUUsUUFBSSxFQUFFLFVBQVVxUyxHQUFWLEVBQWVuUyxLQUFmLEVBQXVCO0FBQzVCLFVBQUkxRyxDQUFKO0FBQUEsVUFBT3dSLElBQVA7QUFBQSxVQUFhaEwsSUFBYjtBQUFBLFVBQ0NwRyxJQUFJLEdBQUcsS0FBTSxDQUFOLENBRFI7QUFBQSxVQUVDZ1osS0FBSyxHQUFHaFosSUFBSSxJQUFJQSxJQUFJLENBQUM4VSxVQUZ0QixDQUQ0QixDQUs1Qjs7QUFDQSxVQUFLMkQsR0FBRyxLQUFLbFcsU0FBYixFQUF5QjtBQUN4QixZQUFLLEtBQUsxQyxNQUFWLEVBQW1CO0FBQ2xCdUcsY0FBSSxHQUFHOGtCLFFBQVEsQ0FBQ2hiLEdBQVQsQ0FBY2xRLElBQWQsQ0FBUDs7QUFFQSxjQUFLQSxJQUFJLENBQUN5SSxRQUFMLEtBQWtCLENBQWxCLElBQXVCLENBQUN3aUIsUUFBUSxDQUFDL2EsR0FBVCxDQUFjbFEsSUFBZCxFQUFvQixjQUFwQixDQUE3QixFQUFvRTtBQUNuRUosYUFBQyxHQUFHb1osS0FBSyxDQUFDblosTUFBVjs7QUFDQSxtQkFBUUQsQ0FBQyxFQUFULEVBQWM7QUFFYjtBQUNBO0FBQ0Esa0JBQUtvWixLQUFLLENBQUVwWixDQUFGLENBQVYsRUFBa0I7QUFDakJ3UixvQkFBSSxHQUFHNEgsS0FBSyxDQUFFcFosQ0FBRixDQUFMLENBQVd3UixJQUFsQjs7QUFDQSxvQkFBS0EsSUFBSSxDQUFDelEsT0FBTCxDQUFjLE9BQWQsTUFBNEIsQ0FBakMsRUFBcUM7QUFDcEN5USxzQkFBSSxHQUFHbVosU0FBUyxDQUFFblosSUFBSSxDQUFDOVAsS0FBTCxDQUFZLENBQVosQ0FBRixDQUFoQjtBQUNBZ0UsMEJBQVEsQ0FBRXRGLElBQUYsRUFBUW9SLElBQVIsRUFBY2hMLElBQUksQ0FBRWdMLElBQUYsQ0FBbEIsQ0FBUjtBQUNBO0FBQ0Q7QUFDRDs7QUFDRDZaLG9CQUFRLENBQUNGLEdBQVQsQ0FBYy9xQixJQUFkLEVBQW9CLGNBQXBCLEVBQW9DLElBQXBDO0FBQ0E7QUFDRDs7QUFFRCxlQUFPb0csSUFBUDtBQUNBLE9BN0IyQixDQStCNUI7OztBQUNBLFVBQUssT0FBT3FTLEdBQVAsS0FBZSxRQUFwQixFQUErQjtBQUM5QixlQUFPLEtBQUtsSSxJQUFMLENBQVcsWUFBVztBQUM1QjJhLGtCQUFRLENBQUNILEdBQVQsQ0FBYyxJQUFkLEVBQW9CdFMsR0FBcEI7QUFDQSxTQUZNLENBQVA7QUFHQTs7QUFFRCxhQUFPa1IsTUFBTSxDQUFFLElBQUYsRUFBUSxVQUFVcmpCLEtBQVYsRUFBa0I7QUFDdEMsWUFBSUYsSUFBSixDQURzQyxDQUd0QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFlBQUtwRyxJQUFJLElBQUlzRyxLQUFLLEtBQUsvRCxTQUF2QixFQUFtQztBQUVsQztBQUNBO0FBQ0E2RCxjQUFJLEdBQUc4a0IsUUFBUSxDQUFDaGIsR0FBVCxDQUFjbFEsSUFBZCxFQUFvQnlZLEdBQXBCLENBQVA7O0FBQ0EsY0FBS3JTLElBQUksS0FBSzdELFNBQWQsRUFBMEI7QUFDekIsbUJBQU82RCxJQUFQO0FBQ0EsV0FQaUMsQ0FTbEM7QUFDQTs7O0FBQ0FBLGNBQUksR0FBR2QsUUFBUSxDQUFFdEYsSUFBRixFQUFReVksR0FBUixDQUFmOztBQUNBLGNBQUtyUyxJQUFJLEtBQUs3RCxTQUFkLEVBQTBCO0FBQ3pCLG1CQUFPNkQsSUFBUDtBQUNBLFdBZGlDLENBZ0JsQzs7O0FBQ0E7QUFDQSxTQTFCcUMsQ0E0QnRDOzs7QUFDQSxhQUFLbUssSUFBTCxDQUFXLFlBQVc7QUFFckI7QUFDQTJhLGtCQUFRLENBQUNILEdBQVQsQ0FBYyxJQUFkLEVBQW9CdFMsR0FBcEIsRUFBeUJuUyxLQUF6QjtBQUNBLFNBSkQ7QUFLQSxPQWxDWSxFQWtDVixJQWxDVSxFQWtDSkEsS0FsQ0ksRUFrQ0duQyxTQUFTLENBQUN0RSxNQUFWLEdBQW1CLENBbEN0QixFQWtDeUIsSUFsQ3pCLEVBa0MrQixJQWxDL0IsQ0FBYjtBQW1DQSxLQTFFZ0I7QUE0RWpCeXJCLGNBQVUsRUFBRSxVQUFVN1MsR0FBVixFQUFnQjtBQUMzQixhQUFPLEtBQUtsSSxJQUFMLENBQVcsWUFBVztBQUM1QjJhLGdCQUFRLENBQUNqRixNQUFULENBQWlCLElBQWpCLEVBQXVCeE4sR0FBdkI7QUFDQSxPQUZNLENBQVA7QUFHQTtBQWhGZ0IsR0FBbEI7QUFvRkE5UyxRQUFNLENBQUNoRSxNQUFQLENBQWU7QUFDZGtrQixTQUFLLEVBQUUsVUFBVTdsQixJQUFWLEVBQWdCb0QsSUFBaEIsRUFBc0JnRCxJQUF0QixFQUE2QjtBQUNuQyxVQUFJeWYsS0FBSjs7QUFFQSxVQUFLN2xCLElBQUwsRUFBWTtBQUNYb0QsWUFBSSxHQUFHLENBQUVBLElBQUksSUFBSSxJQUFWLElBQW1CLE9BQTFCO0FBQ0F5aUIsYUFBSyxHQUFHb0YsUUFBUSxDQUFDL2EsR0FBVCxDQUFjbFEsSUFBZCxFQUFvQm9ELElBQXBCLENBQVIsQ0FGVyxDQUlYOztBQUNBLFlBQUtnRCxJQUFMLEVBQVk7QUFDWCxjQUFLLENBQUN5ZixLQUFELElBQVUxakIsS0FBSyxDQUFDRyxPQUFOLENBQWU4RCxJQUFmLENBQWYsRUFBdUM7QUFDdEN5ZixpQkFBSyxHQUFHb0YsUUFBUSxDQUFDdEIsTUFBVCxDQUFpQjNwQixJQUFqQixFQUF1Qm9ELElBQXZCLEVBQTZCdUMsTUFBTSxDQUFDdkQsU0FBUCxDQUFrQmdFLElBQWxCLENBQTdCLENBQVI7QUFDQSxXQUZELE1BRU87QUFDTnlmLGlCQUFLLENBQUNqbEIsSUFBTixDQUFZd0YsSUFBWjtBQUNBO0FBQ0Q7O0FBQ0QsZUFBT3lmLEtBQUssSUFBSSxFQUFoQjtBQUNBO0FBQ0QsS0FsQmE7QUFvQmQ0RixXQUFPLEVBQUUsVUFBVXpyQixJQUFWLEVBQWdCb0QsSUFBaEIsRUFBdUI7QUFDL0JBLFVBQUksR0FBR0EsSUFBSSxJQUFJLElBQWY7O0FBRUEsVUFBSXlpQixLQUFLLEdBQUdsZ0IsTUFBTSxDQUFDa2dCLEtBQVAsQ0FBYzdsQixJQUFkLEVBQW9Cb0QsSUFBcEIsQ0FBWjtBQUFBLFVBQ0Nzb0IsV0FBVyxHQUFHN0YsS0FBSyxDQUFDaG1CLE1BRHJCO0FBQUEsVUFFQzROLEVBQUUsR0FBR29ZLEtBQUssQ0FBQ2xOLEtBQU4sRUFGTjtBQUFBLFVBR0NnVCxLQUFLLEdBQUdobUIsTUFBTSxDQUFDaW1CLFdBQVAsQ0FBb0I1ckIsSUFBcEIsRUFBMEJvRCxJQUExQixDQUhUO0FBQUEsVUFJQzRULElBQUksR0FBRyxZQUFXO0FBQ2pCclIsY0FBTSxDQUFDOGxCLE9BQVAsQ0FBZ0J6ckIsSUFBaEIsRUFBc0JvRCxJQUF0QjtBQUNBLE9BTkYsQ0FIK0IsQ0FXL0I7OztBQUNBLFVBQUtxSyxFQUFFLEtBQUssWUFBWixFQUEyQjtBQUMxQkEsVUFBRSxHQUFHb1ksS0FBSyxDQUFDbE4sS0FBTixFQUFMO0FBQ0ErUyxtQkFBVztBQUNYOztBQUVELFVBQUtqZSxFQUFMLEVBQVU7QUFFVDtBQUNBO0FBQ0EsWUFBS3JLLElBQUksS0FBSyxJQUFkLEVBQXFCO0FBQ3BCeWlCLGVBQUssQ0FBQ2hLLE9BQU4sQ0FBZSxZQUFmO0FBQ0EsU0FOUSxDQVFUOzs7QUFDQSxlQUFPOFAsS0FBSyxDQUFDRSxJQUFiO0FBQ0FwZSxVQUFFLENBQUNoTCxJQUFILENBQVN6QyxJQUFULEVBQWVnWCxJQUFmLEVBQXFCMlUsS0FBckI7QUFDQTs7QUFFRCxVQUFLLENBQUNELFdBQUQsSUFBZ0JDLEtBQXJCLEVBQTZCO0FBQzVCQSxhQUFLLENBQUN6RixLQUFOLENBQVlILElBQVo7QUFDQTtBQUNELEtBckRhO0FBdURkO0FBQ0E2RixlQUFXLEVBQUUsVUFBVTVyQixJQUFWLEVBQWdCb0QsSUFBaEIsRUFBdUI7QUFDbkMsVUFBSXFWLEdBQUcsR0FBR3JWLElBQUksR0FBRyxZQUFqQjtBQUNBLGFBQU82bkIsUUFBUSxDQUFDL2EsR0FBVCxDQUFjbFEsSUFBZCxFQUFvQnlZLEdBQXBCLEtBQTZCd1MsUUFBUSxDQUFDdEIsTUFBVCxDQUFpQjNwQixJQUFqQixFQUF1QnlZLEdBQXZCLEVBQTRCO0FBQy9EeU4sYUFBSyxFQUFFdmdCLE1BQU0sQ0FBQzZmLFNBQVAsQ0FBa0IsYUFBbEIsRUFBa0NoQixHQUFsQyxDQUF1QyxZQUFXO0FBQ3hEeUcsa0JBQVEsQ0FBQ2hGLE1BQVQsQ0FBaUJqbUIsSUFBakIsRUFBdUIsQ0FBRW9ELElBQUksR0FBRyxPQUFULEVBQWtCcVYsR0FBbEIsQ0FBdkI7QUFDQSxTQUZNO0FBRHdELE9BQTVCLENBQXBDO0FBS0E7QUEvRGEsR0FBZjtBQWtFQTlTLFFBQU0sQ0FBQzhILEVBQVAsQ0FBVTlMLE1BQVYsQ0FBa0I7QUFDakJra0IsU0FBSyxFQUFFLFVBQVV6aUIsSUFBVixFQUFnQmdELElBQWhCLEVBQXVCO0FBQzdCLFVBQUkwbEIsTUFBTSxHQUFHLENBQWI7O0FBRUEsVUFBSyxPQUFPMW9CLElBQVAsS0FBZ0IsUUFBckIsRUFBZ0M7QUFDL0JnRCxZQUFJLEdBQUdoRCxJQUFQO0FBQ0FBLFlBQUksR0FBRyxJQUFQO0FBQ0Ewb0IsY0FBTTtBQUNOOztBQUVELFVBQUszbkIsU0FBUyxDQUFDdEUsTUFBVixHQUFtQmlzQixNQUF4QixFQUFpQztBQUNoQyxlQUFPbm1CLE1BQU0sQ0FBQ2tnQixLQUFQLENBQWMsS0FBTSxDQUFOLENBQWQsRUFBeUJ6aUIsSUFBekIsQ0FBUDtBQUNBOztBQUVELGFBQU9nRCxJQUFJLEtBQUs3RCxTQUFULEdBQ04sSUFETSxHQUVOLEtBQUtnTyxJQUFMLENBQVcsWUFBVztBQUNyQixZQUFJc1YsS0FBSyxHQUFHbGdCLE1BQU0sQ0FBQ2tnQixLQUFQLENBQWMsSUFBZCxFQUFvQnppQixJQUFwQixFQUEwQmdELElBQTFCLENBQVosQ0FEcUIsQ0FHckI7O0FBQ0FULGNBQU0sQ0FBQ2ltQixXQUFQLENBQW9CLElBQXBCLEVBQTBCeG9CLElBQTFCOztBQUVBLFlBQUtBLElBQUksS0FBSyxJQUFULElBQWlCeWlCLEtBQUssQ0FBRSxDQUFGLENBQUwsS0FBZSxZQUFyQyxFQUFvRDtBQUNuRGxnQixnQkFBTSxDQUFDOGxCLE9BQVAsQ0FBZ0IsSUFBaEIsRUFBc0Jyb0IsSUFBdEI7QUFDQTtBQUNELE9BVEQsQ0FGRDtBQVlBLEtBMUJnQjtBQTJCakJxb0IsV0FBTyxFQUFFLFVBQVVyb0IsSUFBVixFQUFpQjtBQUN6QixhQUFPLEtBQUttTixJQUFMLENBQVcsWUFBVztBQUM1QjVLLGNBQU0sQ0FBQzhsQixPQUFQLENBQWdCLElBQWhCLEVBQXNCcm9CLElBQXRCO0FBQ0EsT0FGTSxDQUFQO0FBR0EsS0EvQmdCO0FBZ0NqQjJvQixjQUFVLEVBQUUsVUFBVTNvQixJQUFWLEVBQWlCO0FBQzVCLGFBQU8sS0FBS3lpQixLQUFMLENBQVl6aUIsSUFBSSxJQUFJLElBQXBCLEVBQTBCLEVBQTFCLENBQVA7QUFDQSxLQWxDZ0I7QUFvQ2pCO0FBQ0E7QUFDQXVLLFdBQU8sRUFBRSxVQUFVdkssSUFBVixFQUFnQmYsR0FBaEIsRUFBc0I7QUFDOUIsVUFBSXdZLEdBQUo7QUFBQSxVQUNDbVIsS0FBSyxHQUFHLENBRFQ7QUFBQSxVQUVDQyxLQUFLLEdBQUd0bUIsTUFBTSxDQUFDOEUsUUFBUCxFQUZUO0FBQUEsVUFHQ0gsUUFBUSxHQUFHLElBSFo7QUFBQSxVQUlDMUssQ0FBQyxHQUFHLEtBQUtDLE1BSlY7QUFBQSxVQUtDOG1CLE9BQU8sR0FBRyxZQUFXO0FBQ3BCLFlBQUssQ0FBRyxHQUFFcUYsS0FBVixFQUFvQjtBQUNuQkMsZUFBSyxDQUFDOUQsV0FBTixDQUFtQjdkLFFBQW5CLEVBQTZCLENBQUVBLFFBQUYsQ0FBN0I7QUFDQTtBQUNELE9BVEY7O0FBV0EsVUFBSyxPQUFPbEgsSUFBUCxLQUFnQixRQUFyQixFQUFnQztBQUMvQmYsV0FBRyxHQUFHZSxJQUFOO0FBQ0FBLFlBQUksR0FBR2IsU0FBUDtBQUNBOztBQUNEYSxVQUFJLEdBQUdBLElBQUksSUFBSSxJQUFmOztBQUVBLGFBQVF4RCxDQUFDLEVBQVQsRUFBYztBQUNiaWIsV0FBRyxHQUFHb1EsUUFBUSxDQUFDL2EsR0FBVCxDQUFjNUYsUUFBUSxDQUFFMUssQ0FBRixDQUF0QixFQUE2QndELElBQUksR0FBRyxZQUFwQyxDQUFOOztBQUNBLFlBQUt5WCxHQUFHLElBQUlBLEdBQUcsQ0FBQ3FMLEtBQWhCLEVBQXdCO0FBQ3ZCOEYsZUFBSztBQUNMblIsYUFBRyxDQUFDcUwsS0FBSixDQUFVMUIsR0FBVixDQUFlbUMsT0FBZjtBQUNBO0FBQ0Q7O0FBQ0RBLGFBQU87QUFDUCxhQUFPc0YsS0FBSyxDQUFDdGUsT0FBTixDQUFldEwsR0FBZixDQUFQO0FBQ0E7QUFqRWdCLEdBQWxCO0FBbUVBLE1BQUk2cEIsSUFBSSxHQUFLLHFDQUFGLENBQTBDQyxNQUFyRDtBQUVBLE1BQUlDLE9BQU8sR0FBRyxJQUFJblgsTUFBSixDQUFZLG1CQUFtQmlYLElBQW5CLEdBQTBCLGFBQXRDLEVBQXFELEdBQXJELENBQWQ7QUFHQSxNQUFJRyxTQUFTLEdBQUcsQ0FBRSxLQUFGLEVBQVMsT0FBVCxFQUFrQixRQUFsQixFQUE0QixNQUE1QixDQUFoQjtBQUVBLE1BQUlsa0IsZUFBZSxHQUFHckYsUUFBUSxDQUFDcUYsZUFBL0I7O0FBSUMsTUFBSW1rQixVQUFVLEdBQUcsVUFBVXRzQixJQUFWLEVBQWlCO0FBQ2hDLFdBQU8yRixNQUFNLENBQUNrTyxRQUFQLENBQWlCN1QsSUFBSSxDQUFDMFgsYUFBdEIsRUFBcUMxWCxJQUFyQyxDQUFQO0FBQ0EsR0FGRjtBQUFBLE1BR0N1c0IsUUFBUSxHQUFHO0FBQUVBLFlBQVEsRUFBRTtBQUFaLEdBSFosQ0FyakpnRixDQTBqSmhGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLE1BQUtwa0IsZUFBZSxDQUFDcWtCLFdBQXJCLEVBQW1DO0FBQ2xDRixjQUFVLEdBQUcsVUFBVXRzQixJQUFWLEVBQWlCO0FBQzdCLGFBQU8yRixNQUFNLENBQUNrTyxRQUFQLENBQWlCN1QsSUFBSSxDQUFDMFgsYUFBdEIsRUFBcUMxWCxJQUFyQyxLQUNOQSxJQUFJLENBQUN3c0IsV0FBTCxDQUFrQkQsUUFBbEIsTUFBaUN2c0IsSUFBSSxDQUFDMFgsYUFEdkM7QUFFQSxLQUhEO0FBSUE7O0FBQ0YsTUFBSStVLGtCQUFrQixHQUFHLFVBQVV6c0IsSUFBVixFQUFnQjhZLEVBQWhCLEVBQXFCO0FBRTVDO0FBQ0E7QUFDQTlZLFFBQUksR0FBRzhZLEVBQUUsSUFBSTlZLElBQWIsQ0FKNEMsQ0FNNUM7O0FBQ0EsV0FBT0EsSUFBSSxDQUFDeUgsS0FBTCxDQUFXaUIsT0FBWCxLQUF1QixNQUF2QixJQUNOMUksSUFBSSxDQUFDeUgsS0FBTCxDQUFXaUIsT0FBWCxLQUF1QixFQUF2QixJQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E0akIsY0FBVSxDQUFFdHNCLElBQUYsQ0FOVixJQVFBMkYsTUFBTSxDQUFDK21CLEdBQVAsQ0FBWTFzQixJQUFaLEVBQWtCLFNBQWxCLE1BQWtDLE1BVG5DO0FBVUEsR0FqQkY7O0FBcUJBLFdBQVMyc0IsU0FBVCxDQUFvQjNzQixJQUFwQixFQUEwQjhCLElBQTFCLEVBQWdDOHFCLFVBQWhDLEVBQTRDQyxLQUE1QyxFQUFvRDtBQUNuRCxRQUFJQyxRQUFKO0FBQUEsUUFBY0MsS0FBZDtBQUFBLFFBQ0NDLGFBQWEsR0FBRyxFQURqQjtBQUFBLFFBRUNDLFlBQVksR0FBR0osS0FBSyxHQUNuQixZQUFXO0FBQ1YsYUFBT0EsS0FBSyxDQUFDelQsR0FBTixFQUFQO0FBQ0EsS0FIa0IsR0FJbkIsWUFBVztBQUNWLGFBQU96VCxNQUFNLENBQUMrbUIsR0FBUCxDQUFZMXNCLElBQVosRUFBa0I4QixJQUFsQixFQUF3QixFQUF4QixDQUFQO0FBQ0EsS0FSSDtBQUFBLFFBU0NvckIsT0FBTyxHQUFHRCxZQUFZLEVBVHZCO0FBQUEsUUFVQ0UsSUFBSSxHQUFHUCxVQUFVLElBQUlBLFVBQVUsQ0FBRSxDQUFGLENBQXhCLEtBQW1Dam5CLE1BQU0sQ0FBQ3luQixTQUFQLENBQWtCdHJCLElBQWxCLElBQTJCLEVBQTNCLEdBQWdDLElBQW5FLENBVlI7QUFBQSxRQVlDO0FBQ0F1ckIsaUJBQWEsR0FBR3J0QixJQUFJLENBQUN5SSxRQUFMLEtBQ2I5QyxNQUFNLENBQUN5bkIsU0FBUCxDQUFrQnRyQixJQUFsQixLQUE0QnFyQixJQUFJLEtBQUssSUFBVCxJQUFpQixDQUFDRCxPQURqQyxLQUVmZCxPQUFPLENBQUMxZ0IsSUFBUixDQUFjL0YsTUFBTSxDQUFDK21CLEdBQVAsQ0FBWTFzQixJQUFaLEVBQWtCOEIsSUFBbEIsQ0FBZCxDQWZGOztBQWlCQSxRQUFLdXJCLGFBQWEsSUFBSUEsYUFBYSxDQUFFLENBQUYsQ0FBYixLQUF1QkYsSUFBN0MsRUFBb0Q7QUFFbkQ7QUFDQTtBQUNBRCxhQUFPLEdBQUdBLE9BQU8sR0FBRyxDQUFwQixDQUptRCxDQU1uRDs7QUFDQUMsVUFBSSxHQUFHQSxJQUFJLElBQUlFLGFBQWEsQ0FBRSxDQUFGLENBQTVCLENBUG1ELENBU25EOztBQUNBQSxtQkFBYSxHQUFHLENBQUNILE9BQUQsSUFBWSxDQUE1Qjs7QUFFQSxhQUFRRixhQUFhLEVBQXJCLEVBQTBCO0FBRXpCO0FBQ0E7QUFDQXJuQixjQUFNLENBQUM4QixLQUFQLENBQWN6SCxJQUFkLEVBQW9COEIsSUFBcEIsRUFBMEJ1ckIsYUFBYSxHQUFHRixJQUExQzs7QUFDQSxZQUFLLENBQUUsSUFBSUosS0FBTixLQUFrQixLQUFNQSxLQUFLLEdBQUdFLFlBQVksS0FBS0MsT0FBakIsSUFBNEIsR0FBMUMsQ0FBbEIsS0FBdUUsQ0FBNUUsRUFBZ0Y7QUFDL0VGLHVCQUFhLEdBQUcsQ0FBaEI7QUFDQTs7QUFDREsscUJBQWEsR0FBR0EsYUFBYSxHQUFHTixLQUFoQztBQUVBOztBQUVETSxtQkFBYSxHQUFHQSxhQUFhLEdBQUcsQ0FBaEM7QUFDQTFuQixZQUFNLENBQUM4QixLQUFQLENBQWN6SCxJQUFkLEVBQW9COEIsSUFBcEIsRUFBMEJ1ckIsYUFBYSxHQUFHRixJQUExQyxFQXpCbUQsQ0EyQm5EOztBQUNBUCxnQkFBVSxHQUFHQSxVQUFVLElBQUksRUFBM0I7QUFDQTs7QUFFRCxRQUFLQSxVQUFMLEVBQWtCO0FBQ2pCUyxtQkFBYSxHQUFHLENBQUNBLGFBQUQsSUFBa0IsQ0FBQ0gsT0FBbkIsSUFBOEIsQ0FBOUMsQ0FEaUIsQ0FHakI7O0FBQ0FKLGNBQVEsR0FBR0YsVUFBVSxDQUFFLENBQUYsQ0FBVixHQUNWUyxhQUFhLEdBQUcsQ0FBRVQsVUFBVSxDQUFFLENBQUYsQ0FBVixHQUFrQixDQUFwQixJQUEwQkEsVUFBVSxDQUFFLENBQUYsQ0FEMUMsR0FFVixDQUFDQSxVQUFVLENBQUUsQ0FBRixDQUZaOztBQUdBLFVBQUtDLEtBQUwsRUFBYTtBQUNaQSxhQUFLLENBQUNNLElBQU4sR0FBYUEsSUFBYjtBQUNBTixhQUFLLENBQUNqUCxLQUFOLEdBQWN5UCxhQUFkO0FBQ0FSLGFBQUssQ0FBQzNiLEdBQU4sR0FBWTRiLFFBQVo7QUFDQTtBQUNEOztBQUNELFdBQU9BLFFBQVA7QUFDQTs7QUFHRCxNQUFJUSxpQkFBaUIsR0FBRyxFQUF4Qjs7QUFFQSxXQUFTQyxpQkFBVCxDQUE0QnZ0QixJQUE1QixFQUFtQztBQUNsQyxRQUFJaWhCLElBQUo7QUFBQSxRQUNDNVIsR0FBRyxHQUFHclAsSUFBSSxDQUFDMFgsYUFEWjtBQUFBLFFBRUMxTSxRQUFRLEdBQUdoTCxJQUFJLENBQUNnTCxRQUZqQjtBQUFBLFFBR0N0QyxPQUFPLEdBQUc0a0IsaUJBQWlCLENBQUV0aUIsUUFBRixDQUg1Qjs7QUFLQSxRQUFLdEMsT0FBTCxFQUFlO0FBQ2QsYUFBT0EsT0FBUDtBQUNBOztBQUVEdVksUUFBSSxHQUFHNVIsR0FBRyxDQUFDdE0sSUFBSixDQUFTcUYsV0FBVCxDQUFzQmlILEdBQUcsQ0FBQ3ZILGFBQUosQ0FBbUJrRCxRQUFuQixDQUF0QixDQUFQO0FBQ0F0QyxXQUFPLEdBQUcvQyxNQUFNLENBQUMrbUIsR0FBUCxDQUFZekwsSUFBWixFQUFrQixTQUFsQixDQUFWO0FBRUFBLFFBQUksQ0FBQ3BlLFVBQUwsQ0FBZ0IyRixXQUFoQixDQUE2QnlZLElBQTdCOztBQUVBLFFBQUt2WSxPQUFPLEtBQUssTUFBakIsRUFBMEI7QUFDekJBLGFBQU8sR0FBRyxPQUFWO0FBQ0E7O0FBQ0Q0a0IscUJBQWlCLENBQUV0aUIsUUFBRixDQUFqQixHQUFnQ3RDLE9BQWhDO0FBRUEsV0FBT0EsT0FBUDtBQUNBOztBQUVELFdBQVM4a0IsUUFBVCxDQUFtQmxqQixRQUFuQixFQUE2Qm1qQixJQUE3QixFQUFvQztBQUNuQyxRQUFJL2tCLE9BQUo7QUFBQSxRQUFhMUksSUFBYjtBQUFBLFFBQ0MwdEIsTUFBTSxHQUFHLEVBRFY7QUFBQSxRQUVDeHNCLEtBQUssR0FBRyxDQUZUO0FBQUEsUUFHQ3JCLE1BQU0sR0FBR3lLLFFBQVEsQ0FBQ3pLLE1BSG5CLENBRG1DLENBTW5DOztBQUNBLFdBQVFxQixLQUFLLEdBQUdyQixNQUFoQixFQUF3QnFCLEtBQUssRUFBN0IsRUFBa0M7QUFDakNsQixVQUFJLEdBQUdzSyxRQUFRLENBQUVwSixLQUFGLENBQWY7O0FBQ0EsVUFBSyxDQUFDbEIsSUFBSSxDQUFDeUgsS0FBWCxFQUFtQjtBQUNsQjtBQUNBOztBQUVEaUIsYUFBTyxHQUFHMUksSUFBSSxDQUFDeUgsS0FBTCxDQUFXaUIsT0FBckI7O0FBQ0EsVUFBSytrQixJQUFMLEVBQVk7QUFFWDtBQUNBO0FBQ0E7QUFDQSxZQUFLL2tCLE9BQU8sS0FBSyxNQUFqQixFQUEwQjtBQUN6QmdsQixnQkFBTSxDQUFFeHNCLEtBQUYsQ0FBTixHQUFrQitwQixRQUFRLENBQUMvYSxHQUFULENBQWNsUSxJQUFkLEVBQW9CLFNBQXBCLEtBQW1DLElBQXJEOztBQUNBLGNBQUssQ0FBQzB0QixNQUFNLENBQUV4c0IsS0FBRixDQUFaLEVBQXdCO0FBQ3ZCbEIsZ0JBQUksQ0FBQ3lILEtBQUwsQ0FBV2lCLE9BQVgsR0FBcUIsRUFBckI7QUFDQTtBQUNEOztBQUNELFlBQUsxSSxJQUFJLENBQUN5SCxLQUFMLENBQVdpQixPQUFYLEtBQXVCLEVBQXZCLElBQTZCK2pCLGtCQUFrQixDQUFFenNCLElBQUYsQ0FBcEQsRUFBK0Q7QUFDOUQwdEIsZ0JBQU0sQ0FBRXhzQixLQUFGLENBQU4sR0FBa0Jxc0IsaUJBQWlCLENBQUV2dEIsSUFBRixDQUFuQztBQUNBO0FBQ0QsT0FkRCxNQWNPO0FBQ04sWUFBSzBJLE9BQU8sS0FBSyxNQUFqQixFQUEwQjtBQUN6QmdsQixnQkFBTSxDQUFFeHNCLEtBQUYsQ0FBTixHQUFrQixNQUFsQixDQUR5QixDQUd6Qjs7QUFDQStwQixrQkFBUSxDQUFDRixHQUFULENBQWMvcUIsSUFBZCxFQUFvQixTQUFwQixFQUErQjBJLE9BQS9CO0FBQ0E7QUFDRDtBQUNELEtBcENrQyxDQXNDbkM7OztBQUNBLFNBQU14SCxLQUFLLEdBQUcsQ0FBZCxFQUFpQkEsS0FBSyxHQUFHckIsTUFBekIsRUFBaUNxQixLQUFLLEVBQXRDLEVBQTJDO0FBQzFDLFVBQUt3c0IsTUFBTSxDQUFFeHNCLEtBQUYsQ0FBTixJQUFtQixJQUF4QixFQUErQjtBQUM5Qm9KLGdCQUFRLENBQUVwSixLQUFGLENBQVIsQ0FBa0J1RyxLQUFsQixDQUF3QmlCLE9BQXhCLEdBQWtDZ2xCLE1BQU0sQ0FBRXhzQixLQUFGLENBQXhDO0FBQ0E7QUFDRDs7QUFFRCxXQUFPb0osUUFBUDtBQUNBOztBQUVEM0UsUUFBTSxDQUFDOEgsRUFBUCxDQUFVOUwsTUFBVixDQUFrQjtBQUNqQjhyQixRQUFJLEVBQUUsWUFBVztBQUNoQixhQUFPRCxRQUFRLENBQUUsSUFBRixFQUFRLElBQVIsQ0FBZjtBQUNBLEtBSGdCO0FBSWpCRyxRQUFJLEVBQUUsWUFBVztBQUNoQixhQUFPSCxRQUFRLENBQUUsSUFBRixDQUFmO0FBQ0EsS0FOZ0I7QUFPakJJLFVBQU0sRUFBRSxVQUFVMUcsS0FBVixFQUFrQjtBQUN6QixVQUFLLE9BQU9BLEtBQVAsS0FBaUIsU0FBdEIsRUFBa0M7QUFDakMsZUFBT0EsS0FBSyxHQUFHLEtBQUt1RyxJQUFMLEVBQUgsR0FBaUIsS0FBS0UsSUFBTCxFQUE3QjtBQUNBOztBQUVELGFBQU8sS0FBS3BkLElBQUwsQ0FBVyxZQUFXO0FBQzVCLFlBQUtrYyxrQkFBa0IsQ0FBRSxJQUFGLENBQXZCLEVBQWtDO0FBQ2pDOW1CLGdCQUFNLENBQUUsSUFBRixDQUFOLENBQWU4bkIsSUFBZjtBQUNBLFNBRkQsTUFFTztBQUNOOW5CLGdCQUFNLENBQUUsSUFBRixDQUFOLENBQWVnb0IsSUFBZjtBQUNBO0FBQ0QsT0FOTSxDQUFQO0FBT0E7QUFuQmdCLEdBQWxCO0FBcUJBLE1BQUlFLGNBQWMsR0FBSyx1QkFBdkI7QUFFQSxNQUFJQyxRQUFRLEdBQUssZ0NBQWpCO0FBRUEsTUFBSUMsV0FBVyxHQUFLLG9DQUFwQjs7QUFJQSxHQUFFLFlBQVc7QUFDWixRQUFJQyxRQUFRLEdBQUdsckIsUUFBUSxDQUFDbXJCLHNCQUFULEVBQWY7QUFBQSxRQUNDaHNCLEdBQUcsR0FBRytyQixRQUFRLENBQUM1bEIsV0FBVCxDQUFzQnRGLFFBQVEsQ0FBQ2dGLGFBQVQsQ0FBd0IsS0FBeEIsQ0FBdEIsQ0FEUDtBQUFBLFFBRUNnVCxLQUFLLEdBQUdoWSxRQUFRLENBQUNnRixhQUFULENBQXdCLE9BQXhCLENBRlQsQ0FEWSxDQUtaO0FBQ0E7QUFDQTtBQUNBOztBQUNBZ1QsU0FBSyxDQUFDckwsWUFBTixDQUFvQixNQUFwQixFQUE0QixPQUE1QjtBQUNBcUwsU0FBSyxDQUFDckwsWUFBTixDQUFvQixTQUFwQixFQUErQixTQUEvQjtBQUNBcUwsU0FBSyxDQUFDckwsWUFBTixDQUFvQixNQUFwQixFQUE0QixHQUE1QjtBQUVBeE4sT0FBRyxDQUFDbUcsV0FBSixDQUFpQjBTLEtBQWpCLEVBYlksQ0FlWjtBQUNBOztBQUNBbE0sV0FBTyxDQUFDc2YsVUFBUixHQUFxQmpzQixHQUFHLENBQUNrc0IsU0FBSixDQUFlLElBQWYsRUFBc0JBLFNBQXRCLENBQWlDLElBQWpDLEVBQXdDcFEsU0FBeEMsQ0FBa0RnQixPQUF2RSxDQWpCWSxDQW1CWjtBQUNBOztBQUNBOWMsT0FBRyxDQUFDOFksU0FBSixHQUFnQix3QkFBaEI7QUFDQW5NLFdBQU8sQ0FBQ3dmLGNBQVIsR0FBeUIsQ0FBQyxDQUFDbnNCLEdBQUcsQ0FBQ2tzQixTQUFKLENBQWUsSUFBZixFQUFzQnBRLFNBQXRCLENBQWdDNEUsWUFBM0QsQ0F0QlksQ0F3Qlo7QUFDQTtBQUNBOztBQUNBMWdCLE9BQUcsQ0FBQzhZLFNBQUosR0FBZ0IsbUJBQWhCO0FBQ0FuTSxXQUFPLENBQUN5ZixNQUFSLEdBQWlCLENBQUMsQ0FBQ3BzQixHQUFHLENBQUM4YixTQUF2QjtBQUNBLEdBN0JELElBbHdKaUYsQ0FreUpqRjs7O0FBQ0EsTUFBSXVRLE9BQU8sR0FBRztBQUViO0FBQ0E7QUFDQTtBQUNBQyxTQUFLLEVBQUUsQ0FBRSxDQUFGLEVBQUssU0FBTCxFQUFnQixVQUFoQixDQUxNO0FBTWJDLE9BQUcsRUFBRSxDQUFFLENBQUYsRUFBSyxtQkFBTCxFQUEwQixxQkFBMUIsQ0FOUTtBQU9iQyxNQUFFLEVBQUUsQ0FBRSxDQUFGLEVBQUssZ0JBQUwsRUFBdUIsa0JBQXZCLENBUFM7QUFRYkMsTUFBRSxFQUFFLENBQUUsQ0FBRixFQUFLLG9CQUFMLEVBQTJCLHVCQUEzQixDQVJTO0FBVWJDLFlBQVEsRUFBRSxDQUFFLENBQUYsRUFBSyxFQUFMLEVBQVMsRUFBVDtBQVZHLEdBQWQ7QUFhQUwsU0FBTyxDQUFDTSxLQUFSLEdBQWdCTixPQUFPLENBQUNPLEtBQVIsR0FBZ0JQLE9BQU8sQ0FBQ1EsUUFBUixHQUFtQlIsT0FBTyxDQUFDUyxPQUFSLEdBQWtCVCxPQUFPLENBQUNDLEtBQTdFO0FBQ0FELFNBQU8sQ0FBQ1UsRUFBUixHQUFhVixPQUFPLENBQUNJLEVBQXJCLENBanpKaUYsQ0FtekpqRjs7QUFDQSxNQUFLLENBQUM5ZixPQUFPLENBQUN5ZixNQUFkLEVBQXVCO0FBQ3RCQyxXQUFPLENBQUNXLFFBQVIsR0FBbUJYLE9BQU8sQ0FBQ0QsTUFBUixHQUFpQixDQUFFLENBQUYsRUFBSyw4QkFBTCxFQUFxQyxXQUFyQyxDQUFwQztBQUNBOztBQUdELFdBQVNhLE1BQVQsQ0FBaUJyZixPQUFqQixFQUEwQitLLEdBQTFCLEVBQWdDO0FBRS9CO0FBQ0E7QUFDQSxRQUFJeEssR0FBSjs7QUFFQSxRQUFLLE9BQU9QLE9BQU8sQ0FBQ2dJLG9CQUFmLEtBQXdDLFdBQTdDLEVBQTJEO0FBQzFEekgsU0FBRyxHQUFHUCxPQUFPLENBQUNnSSxvQkFBUixDQUE4QitDLEdBQUcsSUFBSSxHQUFyQyxDQUFOO0FBRUEsS0FIRCxNQUdPLElBQUssT0FBTy9LLE9BQU8sQ0FBQ2xNLGdCQUFmLEtBQW9DLFdBQXpDLEVBQXVEO0FBQzdEeU0sU0FBRyxHQUFHUCxPQUFPLENBQUNsTSxnQkFBUixDQUEwQmlYLEdBQUcsSUFBSSxHQUFqQyxDQUFOO0FBRUEsS0FITSxNQUdBO0FBQ054SyxTQUFHLEdBQUcsRUFBTjtBQUNBOztBQUVELFFBQUt3SyxHQUFHLEtBQUtyWSxTQUFSLElBQXFCcVksR0FBRyxJQUFJNVAsUUFBUSxDQUFFNkUsT0FBRixFQUFXK0ssR0FBWCxDQUF6QyxFQUE0RDtBQUMzRCxhQUFPalYsTUFBTSxDQUFDMEssS0FBUCxDQUFjLENBQUVSLE9BQUYsQ0FBZCxFQUEyQk8sR0FBM0IsQ0FBUDtBQUNBOztBQUVELFdBQU9BLEdBQVA7QUFDQSxHQTkwSmdGLENBaTFKakY7OztBQUNBLFdBQVMrZSxhQUFULENBQXdCN3JCLEtBQXhCLEVBQStCOHJCLFdBQS9CLEVBQTZDO0FBQzVDLFFBQUl4dkIsQ0FBQyxHQUFHLENBQVI7QUFBQSxRQUNDeWtCLENBQUMsR0FBRy9nQixLQUFLLENBQUN6RCxNQURYOztBQUdBLFdBQVFELENBQUMsR0FBR3lrQixDQUFaLEVBQWV6a0IsQ0FBQyxFQUFoQixFQUFxQjtBQUNwQnFyQixjQUFRLENBQUNGLEdBQVQsQ0FDQ3puQixLQUFLLENBQUUxRCxDQUFGLENBRE4sRUFFQyxZQUZELEVBR0MsQ0FBQ3d2QixXQUFELElBQWdCbkUsUUFBUSxDQUFDL2EsR0FBVCxDQUFja2YsV0FBVyxDQUFFeHZCLENBQUYsQ0FBekIsRUFBZ0MsWUFBaEMsQ0FIakI7QUFLQTtBQUNEOztBQUdELE1BQUk2VixLQUFLLEdBQUcsV0FBWjs7QUFFQSxXQUFTNFosYUFBVCxDQUF3Qi9yQixLQUF4QixFQUErQnVNLE9BQS9CLEVBQXdDeWYsT0FBeEMsRUFBaURDLFNBQWpELEVBQTREQyxPQUE1RCxFQUFzRTtBQUNyRSxRQUFJeHZCLElBQUo7QUFBQSxRQUFVNmEsR0FBVjtBQUFBLFFBQWVELEdBQWY7QUFBQSxRQUFvQjZVLElBQXBCO0FBQUEsUUFBMEJDLFFBQTFCO0FBQUEsUUFBb0N6ZSxDQUFwQztBQUFBLFFBQ0MrYyxRQUFRLEdBQUduZSxPQUFPLENBQUNvZSxzQkFBUixFQURaO0FBQUEsUUFFQzBCLEtBQUssR0FBRyxFQUZUO0FBQUEsUUFHQy92QixDQUFDLEdBQUcsQ0FITDtBQUFBLFFBSUN5a0IsQ0FBQyxHQUFHL2dCLEtBQUssQ0FBQ3pELE1BSlg7O0FBTUEsV0FBUUQsQ0FBQyxHQUFHeWtCLENBQVosRUFBZXprQixDQUFDLEVBQWhCLEVBQXFCO0FBQ3BCSSxVQUFJLEdBQUdzRCxLQUFLLENBQUUxRCxDQUFGLENBQVo7O0FBRUEsVUFBS0ksSUFBSSxJQUFJQSxJQUFJLEtBQUssQ0FBdEIsRUFBMEI7QUFFekI7QUFDQSxZQUFLMlAsTUFBTSxDQUFFM1AsSUFBRixDQUFOLEtBQW1CLFFBQXhCLEVBQW1DO0FBRWxDO0FBQ0E7QUFDQTJGLGdCQUFNLENBQUMwSyxLQUFQLENBQWNzZixLQUFkLEVBQXFCM3ZCLElBQUksQ0FBQ3lJLFFBQUwsR0FBZ0IsQ0FBRXpJLElBQUYsQ0FBaEIsR0FBMkJBLElBQWhELEVBSmtDLENBTW5DO0FBQ0MsU0FQRCxNQU9PLElBQUssQ0FBQ3lWLEtBQUssQ0FBQ3VDLElBQU4sQ0FBWWhZLElBQVosQ0FBTixFQUEyQjtBQUNqQzJ2QixlQUFLLENBQUMvdUIsSUFBTixDQUFZaVAsT0FBTyxDQUFDK2YsY0FBUixDQUF3QjV2QixJQUF4QixDQUFaLEVBRGlDLENBR2xDO0FBQ0MsU0FKTSxNQUlBO0FBQ042YSxhQUFHLEdBQUdBLEdBQUcsSUFBSW1ULFFBQVEsQ0FBQzVsQixXQUFULENBQXNCeUgsT0FBTyxDQUFDL0gsYUFBUixDQUF1QixLQUF2QixDQUF0QixDQUFiLENBRE0sQ0FHTjs7QUFDQThTLGFBQUcsR0FBRyxDQUFFa1QsUUFBUSxDQUFDcGlCLElBQVQsQ0FBZTFMLElBQWYsS0FBeUIsQ0FBRSxFQUFGLEVBQU0sRUFBTixDQUEzQixFQUF5QyxDQUF6QyxFQUE2Q2dGLFdBQTdDLEVBQU47QUFDQXlxQixjQUFJLEdBQUduQixPQUFPLENBQUUxVCxHQUFGLENBQVAsSUFBa0IwVCxPQUFPLENBQUNLLFFBQWpDO0FBQ0E5VCxhQUFHLENBQUNFLFNBQUosR0FBZ0IwVSxJQUFJLENBQUUsQ0FBRixDQUFKLEdBQVk5cEIsTUFBTSxDQUFDa3FCLGFBQVAsQ0FBc0I3dkIsSUFBdEIsQ0FBWixHQUEyQ3l2QixJQUFJLENBQUUsQ0FBRixDQUEvRCxDQU5NLENBUU47O0FBQ0F4ZSxXQUFDLEdBQUd3ZSxJQUFJLENBQUUsQ0FBRixDQUFSOztBQUNBLGlCQUFReGUsQ0FBQyxFQUFULEVBQWM7QUFDYjRKLGVBQUcsR0FBR0EsR0FBRyxDQUFDa0QsU0FBVjtBQUNBLFdBWkssQ0FjTjtBQUNBOzs7QUFDQXBZLGdCQUFNLENBQUMwSyxLQUFQLENBQWNzZixLQUFkLEVBQXFCOVUsR0FBRyxDQUFDNUQsVUFBekIsRUFoQk0sQ0FrQk47O0FBQ0E0RCxhQUFHLEdBQUdtVCxRQUFRLENBQUMxUixVQUFmLENBbkJNLENBcUJOOztBQUNBekIsYUFBRyxDQUFDd0IsV0FBSixHQUFrQixFQUFsQjtBQUNBO0FBQ0Q7QUFDRCxLQWpEb0UsQ0FtRHJFOzs7QUFDQTJSLFlBQVEsQ0FBQzNSLFdBQVQsR0FBdUIsRUFBdkI7QUFFQXpjLEtBQUMsR0FBRyxDQUFKOztBQUNBLFdBQVVJLElBQUksR0FBRzJ2QixLQUFLLENBQUUvdkIsQ0FBQyxFQUFILENBQXRCLEVBQWtDO0FBRWpDO0FBQ0EsVUFBSzJ2QixTQUFTLElBQUk1cEIsTUFBTSxDQUFDd00sT0FBUCxDQUFnQm5TLElBQWhCLEVBQXNCdXZCLFNBQXRCLElBQW9DLENBQUMsQ0FBdkQsRUFBMkQ7QUFDMUQsWUFBS0MsT0FBTCxFQUFlO0FBQ2RBLGlCQUFPLENBQUM1dUIsSUFBUixDQUFjWixJQUFkO0FBQ0E7O0FBQ0Q7QUFDQTs7QUFFRDB2QixjQUFRLEdBQUdwRCxVQUFVLENBQUV0c0IsSUFBRixDQUFyQixDQVZpQyxDQVlqQzs7QUFDQTZhLFNBQUcsR0FBR3FVLE1BQU0sQ0FBRWxCLFFBQVEsQ0FBQzVsQixXQUFULENBQXNCcEksSUFBdEIsQ0FBRixFQUFnQyxRQUFoQyxDQUFaLENBYmlDLENBZWpDOztBQUNBLFVBQUswdkIsUUFBTCxFQUFnQjtBQUNmUCxxQkFBYSxDQUFFdFUsR0FBRixDQUFiO0FBQ0EsT0FsQmdDLENBb0JqQzs7O0FBQ0EsVUFBS3lVLE9BQUwsRUFBZTtBQUNkcmUsU0FBQyxHQUFHLENBQUo7O0FBQ0EsZUFBVWpSLElBQUksR0FBRzZhLEdBQUcsQ0FBRTVKLENBQUMsRUFBSCxDQUFwQixFQUFnQztBQUMvQixjQUFLOGMsV0FBVyxDQUFDL1YsSUFBWixDQUFrQmhZLElBQUksQ0FBQ29ELElBQUwsSUFBYSxFQUEvQixDQUFMLEVBQTJDO0FBQzFDa3NCLG1CQUFPLENBQUMxdUIsSUFBUixDQUFjWixJQUFkO0FBQ0E7QUFDRDtBQUNEO0FBQ0Q7O0FBRUQsV0FBT2d1QixRQUFQO0FBQ0E7O0FBR0QsTUFDQzhCLFNBQVMsR0FBRyxNQURiO0FBQUEsTUFFQ0MsV0FBVyxHQUFHLGdEQUZmO0FBQUEsTUFHQ0MsY0FBYyxHQUFHLHFCQUhsQjs7QUFLQSxXQUFTQyxVQUFULEdBQXNCO0FBQ3JCLFdBQU8sSUFBUDtBQUNBOztBQUVELFdBQVNDLFdBQVQsR0FBdUI7QUFDdEIsV0FBTyxLQUFQO0FBQ0EsR0F2OEpnRixDQXk4SmpGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsV0FBU0MsVUFBVCxDQUFxQm53QixJQUFyQixFQUEyQm9ELElBQTNCLEVBQWtDO0FBQ2pDLFdBQVNwRCxJQUFJLEtBQUtvd0IsaUJBQWlCLEVBQTVCLE1BQXVDaHRCLElBQUksS0FBSyxPQUFoRCxDQUFQO0FBQ0EsR0FqOUpnRixDQW05SmpGO0FBQ0E7QUFDQTs7O0FBQ0EsV0FBU2d0QixpQkFBVCxHQUE2QjtBQUM1QixRQUFJO0FBQ0gsYUFBT3R0QixRQUFRLENBQUM2YixhQUFoQjtBQUNBLEtBRkQsQ0FFRSxPQUFRMFIsR0FBUixFQUFjLENBQUc7QUFDbkI7O0FBRUQsV0FBU2h3QixFQUFULENBQWFMLElBQWIsRUFBbUJzd0IsS0FBbkIsRUFBMEJyd0IsUUFBMUIsRUFBb0NtRyxJQUFwQyxFQUEwQ3FILEVBQTFDLEVBQThDOGlCLEdBQTlDLEVBQW9EO0FBQ25ELFFBQUlDLE1BQUosRUFBWXB0QixJQUFaLENBRG1ELENBR25EOztBQUNBLFFBQUssT0FBT2t0QixLQUFQLEtBQWlCLFFBQXRCLEVBQWlDO0FBRWhDO0FBQ0EsVUFBSyxPQUFPcndCLFFBQVAsS0FBb0IsUUFBekIsRUFBb0M7QUFFbkM7QUFDQW1HLFlBQUksR0FBR0EsSUFBSSxJQUFJbkcsUUFBZjtBQUNBQSxnQkFBUSxHQUFHc0MsU0FBWDtBQUNBOztBQUNELFdBQU1hLElBQU4sSUFBY2t0QixLQUFkLEVBQXNCO0FBQ3JCandCLFVBQUUsQ0FBRUwsSUFBRixFQUFRb0QsSUFBUixFQUFjbkQsUUFBZCxFQUF3Qm1HLElBQXhCLEVBQThCa3FCLEtBQUssQ0FBRWx0QixJQUFGLENBQW5DLEVBQTZDbXRCLEdBQTdDLENBQUY7QUFDQTs7QUFDRCxhQUFPdndCLElBQVA7QUFDQTs7QUFFRCxRQUFLb0csSUFBSSxJQUFJLElBQVIsSUFBZ0JxSCxFQUFFLElBQUksSUFBM0IsRUFBa0M7QUFFakM7QUFDQUEsUUFBRSxHQUFHeE4sUUFBTDtBQUNBbUcsVUFBSSxHQUFHbkcsUUFBUSxHQUFHc0MsU0FBbEI7QUFDQSxLQUxELE1BS08sSUFBS2tMLEVBQUUsSUFBSSxJQUFYLEVBQWtCO0FBQ3hCLFVBQUssT0FBT3hOLFFBQVAsS0FBb0IsUUFBekIsRUFBb0M7QUFFbkM7QUFDQXdOLFVBQUUsR0FBR3JILElBQUw7QUFDQUEsWUFBSSxHQUFHN0QsU0FBUDtBQUNBLE9BTEQsTUFLTztBQUVOO0FBQ0FrTCxVQUFFLEdBQUdySCxJQUFMO0FBQ0FBLFlBQUksR0FBR25HLFFBQVA7QUFDQUEsZ0JBQVEsR0FBR3NDLFNBQVg7QUFDQTtBQUNEOztBQUNELFFBQUtrTCxFQUFFLEtBQUssS0FBWixFQUFvQjtBQUNuQkEsUUFBRSxHQUFHeWlCLFdBQUw7QUFDQSxLQUZELE1BRU8sSUFBSyxDQUFDemlCLEVBQU4sRUFBVztBQUNqQixhQUFPek4sSUFBUDtBQUNBOztBQUVELFFBQUt1d0IsR0FBRyxLQUFLLENBQWIsRUFBaUI7QUFDaEJDLFlBQU0sR0FBRy9pQixFQUFUOztBQUNBQSxRQUFFLEdBQUcsVUFBVXRLLEtBQVYsRUFBa0I7QUFFdEI7QUFDQXdDLGNBQU0sR0FBRzFFLEdBQVQsQ0FBY2tDLEtBQWQ7QUFDQSxlQUFPcXRCLE1BQU0sQ0FBQ2h2QixLQUFQLENBQWMsSUFBZCxFQUFvQjJDLFNBQXBCLENBQVA7QUFDQSxPQUxELENBRmdCLENBU2hCOzs7QUFDQXNKLFFBQUUsQ0FBQ2dGLElBQUgsR0FBVStkLE1BQU0sQ0FBQy9kLElBQVAsS0FBaUIrZCxNQUFNLENBQUMvZCxJQUFQLEdBQWM5TSxNQUFNLENBQUM4TSxJQUFQLEVBQS9CLENBQVY7QUFDQTs7QUFDRCxXQUFPelMsSUFBSSxDQUFDdVEsSUFBTCxDQUFXLFlBQVc7QUFDNUI1SyxZQUFNLENBQUN4QyxLQUFQLENBQWFxaEIsR0FBYixDQUFrQixJQUFsQixFQUF3QjhMLEtBQXhCLEVBQStCN2lCLEVBQS9CLEVBQW1DckgsSUFBbkMsRUFBeUNuRyxRQUF6QztBQUNBLEtBRk0sQ0FBUDtBQUdBO0FBRUQ7Ozs7OztBQUlBMEYsUUFBTSxDQUFDeEMsS0FBUCxHQUFlO0FBRWRqRCxVQUFNLEVBQUUsRUFGTTtBQUlkc2tCLE9BQUcsRUFBRSxVQUFVeGtCLElBQVYsRUFBZ0Jzd0IsS0FBaEIsRUFBdUJyWCxPQUF2QixFQUFnQzdTLElBQWhDLEVBQXNDbkcsUUFBdEMsRUFBaUQ7QUFFckQsVUFBSXd3QixXQUFKO0FBQUEsVUFBaUJDLFdBQWpCO0FBQUEsVUFBOEI3VixHQUE5QjtBQUFBLFVBQ0NyYSxNQUREO0FBQUEsVUFDU213QixDQURUO0FBQUEsVUFDWUMsU0FEWjtBQUFBLFVBRUM5SSxPQUZEO0FBQUEsVUFFVStJLFFBRlY7QUFBQSxVQUVvQnp0QixJQUZwQjtBQUFBLFVBRTBCMHRCLFVBRjFCO0FBQUEsVUFFc0NDLFFBRnRDO0FBQUEsVUFHQ0MsUUFBUSxHQUFHL0YsUUFBUSxDQUFDL2EsR0FBVCxDQUFjbFEsSUFBZCxDQUhaLENBRnFELENBT3JEOztBQUNBLFVBQUssQ0FBQ3lxQixVQUFVLENBQUV6cUIsSUFBRixDQUFoQixFQUEyQjtBQUMxQjtBQUNBLE9BVm9ELENBWXJEOzs7QUFDQSxVQUFLaVosT0FBTyxDQUFDQSxPQUFiLEVBQXVCO0FBQ3RCd1gsbUJBQVcsR0FBR3hYLE9BQWQ7QUFDQUEsZUFBTyxHQUFHd1gsV0FBVyxDQUFDeFgsT0FBdEI7QUFDQWhaLGdCQUFRLEdBQUd3d0IsV0FBVyxDQUFDeHdCLFFBQXZCO0FBQ0EsT0FqQm9ELENBbUJyRDtBQUNBOzs7QUFDQSxVQUFLQSxRQUFMLEVBQWdCO0FBQ2YwRixjQUFNLENBQUMrVSxJQUFQLENBQVloYixlQUFaLENBQTZCeUksZUFBN0IsRUFBOENsSSxRQUE5QztBQUNBLE9BdkJvRCxDQXlCckQ7OztBQUNBLFVBQUssQ0FBQ2daLE9BQU8sQ0FBQ3hHLElBQWQsRUFBcUI7QUFDcEJ3RyxlQUFPLENBQUN4RyxJQUFSLEdBQWU5TSxNQUFNLENBQUM4TSxJQUFQLEVBQWY7QUFDQSxPQTVCb0QsQ0E4QnJEOzs7QUFDQSxVQUFLLEVBQUdqUyxNQUFNLEdBQUd3d0IsUUFBUSxDQUFDeHdCLE1BQXJCLENBQUwsRUFBcUM7QUFDcENBLGNBQU0sR0FBR3d3QixRQUFRLENBQUN4d0IsTUFBVCxHQUFrQm9LLE1BQU0sQ0FBQ0MsTUFBUCxDQUFlLElBQWYsQ0FBM0I7QUFDQTs7QUFDRCxVQUFLLEVBQUc2bEIsV0FBVyxHQUFHTSxRQUFRLENBQUNDLE1BQTFCLENBQUwsRUFBMEM7QUFDekNQLG1CQUFXLEdBQUdNLFFBQVEsQ0FBQ0MsTUFBVCxHQUFrQixVQUFVL1osQ0FBVixFQUFjO0FBRTdDO0FBQ0E7QUFDQSxpQkFBTyxPQUFPdlIsTUFBUCxLQUFrQixXQUFsQixJQUFpQ0EsTUFBTSxDQUFDeEMsS0FBUCxDQUFhK3RCLFNBQWIsS0FBMkJoYSxDQUFDLENBQUM5VCxJQUE5RCxHQUNOdUMsTUFBTSxDQUFDeEMsS0FBUCxDQUFhZ3VCLFFBQWIsQ0FBc0IzdkIsS0FBdEIsQ0FBNkJ4QixJQUE3QixFQUFtQ21FLFNBQW5DLENBRE0sR0FDMkM1QixTQURsRDtBQUVBLFNBTkQ7QUFPQSxPQTFDb0QsQ0E0Q3JEOzs7QUFDQSt0QixXQUFLLEdBQUcsQ0FBRUEsS0FBSyxJQUFJLEVBQVgsRUFBZ0J6ckIsS0FBaEIsQ0FBdUJzZ0IsYUFBdkIsS0FBMEMsQ0FBRSxFQUFGLENBQWxEO0FBQ0F3TCxPQUFDLEdBQUdMLEtBQUssQ0FBQ3p3QixNQUFWOztBQUNBLGFBQVE4d0IsQ0FBQyxFQUFULEVBQWM7QUFDYjlWLFdBQUcsR0FBR21WLGNBQWMsQ0FBQ3RrQixJQUFmLENBQXFCNGtCLEtBQUssQ0FBRUssQ0FBRixDQUExQixLQUFxQyxFQUEzQztBQUNBdnRCLFlBQUksR0FBRzJ0QixRQUFRLEdBQUdsVyxHQUFHLENBQUUsQ0FBRixDQUFyQjtBQUNBaVcsa0JBQVUsR0FBRyxDQUFFalcsR0FBRyxDQUFFLENBQUYsQ0FBSCxJQUFZLEVBQWQsRUFBbUJqSSxLQUFuQixDQUEwQixHQUExQixFQUFnQ3pCLElBQWhDLEVBQWIsQ0FIYSxDQUtiOztBQUNBLFlBQUssQ0FBQy9OLElBQU4sRUFBYTtBQUNaO0FBQ0EsU0FSWSxDQVViOzs7QUFDQTBrQixlQUFPLEdBQUduaUIsTUFBTSxDQUFDeEMsS0FBUCxDQUFhMmtCLE9BQWIsQ0FBc0Ixa0IsSUFBdEIsS0FBZ0MsRUFBMUMsQ0FYYSxDQWFiOztBQUNBQSxZQUFJLEdBQUcsQ0FBRW5ELFFBQVEsR0FBRzZuQixPQUFPLENBQUNzSixZQUFYLEdBQTBCdEosT0FBTyxDQUFDdUosUUFBNUMsS0FBMERqdUIsSUFBakUsQ0FkYSxDQWdCYjs7QUFDQTBrQixlQUFPLEdBQUduaUIsTUFBTSxDQUFDeEMsS0FBUCxDQUFhMmtCLE9BQWIsQ0FBc0Ixa0IsSUFBdEIsS0FBZ0MsRUFBMUMsQ0FqQmEsQ0FtQmI7O0FBQ0F3dEIsaUJBQVMsR0FBR2pyQixNQUFNLENBQUNoRSxNQUFQLENBQWU7QUFDMUJ5QixjQUFJLEVBQUVBLElBRG9CO0FBRTFCMnRCLGtCQUFRLEVBQUVBLFFBRmdCO0FBRzFCM3FCLGNBQUksRUFBRUEsSUFIb0I7QUFJMUI2UyxpQkFBTyxFQUFFQSxPQUppQjtBQUsxQnhHLGNBQUksRUFBRXdHLE9BQU8sQ0FBQ3hHLElBTFk7QUFNMUJ4UyxrQkFBUSxFQUFFQSxRQU5nQjtBQU8xQm9qQixzQkFBWSxFQUFFcGpCLFFBQVEsSUFBSTBGLE1BQU0sQ0FBQ21XLElBQVAsQ0FBWWpYLEtBQVosQ0FBa0J3ZSxZQUFsQixDQUErQnJMLElBQS9CLENBQXFDL1gsUUFBckMsQ0FQQTtBQVExQm1GLG1CQUFTLEVBQUUwckIsVUFBVSxDQUFDMVksSUFBWCxDQUFpQixHQUFqQjtBQVJlLFNBQWYsRUFTVHFZLFdBVFMsQ0FBWixDQXBCYSxDQStCYjs7QUFDQSxZQUFLLEVBQUdJLFFBQVEsR0FBR3J3QixNQUFNLENBQUU0QyxJQUFGLENBQXBCLENBQUwsRUFBc0M7QUFDckN5dEIsa0JBQVEsR0FBR3J3QixNQUFNLENBQUU0QyxJQUFGLENBQU4sR0FBaUIsRUFBNUI7QUFDQXl0QixrQkFBUSxDQUFDUyxhQUFULEdBQXlCLENBQXpCLENBRnFDLENBSXJDOztBQUNBLGNBQUssQ0FBQ3hKLE9BQU8sQ0FBQ2pnQixLQUFULElBQ0ppZ0IsT0FBTyxDQUFDamdCLEtBQVIsQ0FBY3BGLElBQWQsQ0FBb0J6QyxJQUFwQixFQUEwQm9HLElBQTFCLEVBQWdDMHFCLFVBQWhDLEVBQTRDSixXQUE1QyxNQUE4RCxLQUQvRCxFQUN1RTtBQUV0RSxnQkFBSzF3QixJQUFJLENBQUN5RSxnQkFBVixFQUE2QjtBQUM1QnpFLGtCQUFJLENBQUN5RSxnQkFBTCxDQUF1QnJCLElBQXZCLEVBQTZCc3RCLFdBQTdCO0FBQ0E7QUFDRDtBQUNEOztBQUVELFlBQUs1SSxPQUFPLENBQUN0RCxHQUFiLEVBQW1CO0FBQ2xCc0QsaUJBQU8sQ0FBQ3RELEdBQVIsQ0FBWS9oQixJQUFaLENBQWtCekMsSUFBbEIsRUFBd0I0d0IsU0FBeEI7O0FBRUEsY0FBSyxDQUFDQSxTQUFTLENBQUMzWCxPQUFWLENBQWtCeEcsSUFBeEIsRUFBK0I7QUFDOUJtZSxxQkFBUyxDQUFDM1gsT0FBVixDQUFrQnhHLElBQWxCLEdBQXlCd0csT0FBTyxDQUFDeEcsSUFBakM7QUFDQTtBQUNELFNBcERZLENBc0RiOzs7QUFDQSxZQUFLeFMsUUFBTCxFQUFnQjtBQUNmNHdCLGtCQUFRLENBQUMxdkIsTUFBVCxDQUFpQjB2QixRQUFRLENBQUNTLGFBQVQsRUFBakIsRUFBMkMsQ0FBM0MsRUFBOENWLFNBQTlDO0FBQ0EsU0FGRCxNQUVPO0FBQ05DLGtCQUFRLENBQUNqd0IsSUFBVCxDQUFlZ3dCLFNBQWY7QUFDQSxTQTNEWSxDQTZEYjs7O0FBQ0FqckIsY0FBTSxDQUFDeEMsS0FBUCxDQUFhakQsTUFBYixDQUFxQmtELElBQXJCLElBQThCLElBQTlCO0FBQ0E7QUFFRCxLQXBIYTtBQXNIZDtBQUNBNmlCLFVBQU0sRUFBRSxVQUFVam1CLElBQVYsRUFBZ0Jzd0IsS0FBaEIsRUFBdUJyWCxPQUF2QixFQUFnQ2haLFFBQWhDLEVBQTBDc3hCLFdBQTFDLEVBQXdEO0FBRS9ELFVBQUl0Z0IsQ0FBSjtBQUFBLFVBQU91Z0IsU0FBUDtBQUFBLFVBQWtCM1csR0FBbEI7QUFBQSxVQUNDcmEsTUFERDtBQUFBLFVBQ1Ntd0IsQ0FEVDtBQUFBLFVBQ1lDLFNBRFo7QUFBQSxVQUVDOUksT0FGRDtBQUFBLFVBRVUrSSxRQUZWO0FBQUEsVUFFb0J6dEIsSUFGcEI7QUFBQSxVQUUwQjB0QixVQUYxQjtBQUFBLFVBRXNDQyxRQUZ0QztBQUFBLFVBR0NDLFFBQVEsR0FBRy9GLFFBQVEsQ0FBQ0QsT0FBVCxDQUFrQmhyQixJQUFsQixLQUE0QmlyQixRQUFRLENBQUMvYSxHQUFULENBQWNsUSxJQUFkLENBSHhDOztBQUtBLFVBQUssQ0FBQ2d4QixRQUFELElBQWEsRUFBR3h3QixNQUFNLEdBQUd3d0IsUUFBUSxDQUFDeHdCLE1BQXJCLENBQWxCLEVBQWtEO0FBQ2pEO0FBQ0EsT0FUOEQsQ0FXL0Q7OztBQUNBOHZCLFdBQUssR0FBRyxDQUFFQSxLQUFLLElBQUksRUFBWCxFQUFnQnpyQixLQUFoQixDQUF1QnNnQixhQUF2QixLQUEwQyxDQUFFLEVBQUYsQ0FBbEQ7QUFDQXdMLE9BQUMsR0FBR0wsS0FBSyxDQUFDendCLE1BQVY7O0FBQ0EsYUFBUTh3QixDQUFDLEVBQVQsRUFBYztBQUNiOVYsV0FBRyxHQUFHbVYsY0FBYyxDQUFDdGtCLElBQWYsQ0FBcUI0a0IsS0FBSyxDQUFFSyxDQUFGLENBQTFCLEtBQXFDLEVBQTNDO0FBQ0F2dEIsWUFBSSxHQUFHMnRCLFFBQVEsR0FBR2xXLEdBQUcsQ0FBRSxDQUFGLENBQXJCO0FBQ0FpVyxrQkFBVSxHQUFHLENBQUVqVyxHQUFHLENBQUUsQ0FBRixDQUFILElBQVksRUFBZCxFQUFtQmpJLEtBQW5CLENBQTBCLEdBQTFCLEVBQWdDekIsSUFBaEMsRUFBYixDQUhhLENBS2I7O0FBQ0EsWUFBSyxDQUFDL04sSUFBTixFQUFhO0FBQ1osZUFBTUEsSUFBTixJQUFjNUMsTUFBZCxFQUF1QjtBQUN0Qm1GLGtCQUFNLENBQUN4QyxLQUFQLENBQWE4aUIsTUFBYixDQUFxQmptQixJQUFyQixFQUEyQm9ELElBQUksR0FBR2t0QixLQUFLLENBQUVLLENBQUYsQ0FBdkMsRUFBOEMxWCxPQUE5QyxFQUF1RGhaLFFBQXZELEVBQWlFLElBQWpFO0FBQ0E7O0FBQ0Q7QUFDQTs7QUFFRDZuQixlQUFPLEdBQUduaUIsTUFBTSxDQUFDeEMsS0FBUCxDQUFhMmtCLE9BQWIsQ0FBc0Ixa0IsSUFBdEIsS0FBZ0MsRUFBMUM7QUFDQUEsWUFBSSxHQUFHLENBQUVuRCxRQUFRLEdBQUc2bkIsT0FBTyxDQUFDc0osWUFBWCxHQUEwQnRKLE9BQU8sQ0FBQ3VKLFFBQTVDLEtBQTBEanVCLElBQWpFO0FBQ0F5dEIsZ0JBQVEsR0FBR3J3QixNQUFNLENBQUU0QyxJQUFGLENBQU4sSUFBa0IsRUFBN0I7QUFDQXlYLFdBQUcsR0FBR0EsR0FBRyxDQUFFLENBQUYsQ0FBSCxJQUNMLElBQUk1RixNQUFKLENBQVksWUFBWTZiLFVBQVUsQ0FBQzFZLElBQVgsQ0FBaUIsZUFBakIsQ0FBWixHQUFpRCxTQUE3RCxDQURELENBaEJhLENBbUJiOztBQUNBb1osaUJBQVMsR0FBR3ZnQixDQUFDLEdBQUc0ZixRQUFRLENBQUNoeEIsTUFBekI7O0FBQ0EsZUFBUW9SLENBQUMsRUFBVCxFQUFjO0FBQ2IyZixtQkFBUyxHQUFHQyxRQUFRLENBQUU1ZixDQUFGLENBQXBCOztBQUVBLGNBQUssQ0FBRXNnQixXQUFXLElBQUlSLFFBQVEsS0FBS0gsU0FBUyxDQUFDRyxRQUF4QyxNQUNGLENBQUM5WCxPQUFELElBQVlBLE9BQU8sQ0FBQ3hHLElBQVIsS0FBaUJtZSxTQUFTLENBQUNuZSxJQURyQyxNQUVGLENBQUNvSSxHQUFELElBQVFBLEdBQUcsQ0FBQzdDLElBQUosQ0FBVTRZLFNBQVMsQ0FBQ3hyQixTQUFwQixDQUZOLE1BR0YsQ0FBQ25GLFFBQUQsSUFBYUEsUUFBUSxLQUFLMndCLFNBQVMsQ0FBQzN3QixRQUFwQyxJQUNEQSxRQUFRLEtBQUssSUFBYixJQUFxQjJ3QixTQUFTLENBQUMzd0IsUUFKNUIsQ0FBTCxFQUk4QztBQUM3QzR3QixvQkFBUSxDQUFDMXZCLE1BQVQsQ0FBaUI4UCxDQUFqQixFQUFvQixDQUFwQjs7QUFFQSxnQkFBSzJmLFNBQVMsQ0FBQzN3QixRQUFmLEVBQTBCO0FBQ3pCNHdCLHNCQUFRLENBQUNTLGFBQVQ7QUFDQTs7QUFDRCxnQkFBS3hKLE9BQU8sQ0FBQzdCLE1BQWIsRUFBc0I7QUFDckI2QixxQkFBTyxDQUFDN0IsTUFBUixDQUFleGpCLElBQWYsQ0FBcUJ6QyxJQUFyQixFQUEyQjR3QixTQUEzQjtBQUNBO0FBQ0Q7QUFDRCxTQXRDWSxDQXdDYjtBQUNBOzs7QUFDQSxZQUFLWSxTQUFTLElBQUksQ0FBQ1gsUUFBUSxDQUFDaHhCLE1BQTVCLEVBQXFDO0FBQ3BDLGNBQUssQ0FBQ2lvQixPQUFPLENBQUMySixRQUFULElBQ0ozSixPQUFPLENBQUMySixRQUFSLENBQWlCaHZCLElBQWpCLENBQXVCekMsSUFBdkIsRUFBNkI4d0IsVUFBN0IsRUFBeUNFLFFBQVEsQ0FBQ0MsTUFBbEQsTUFBK0QsS0FEaEUsRUFDd0U7QUFFdkV0ckIsa0JBQU0sQ0FBQytyQixXQUFQLENBQW9CMXhCLElBQXBCLEVBQTBCb0QsSUFBMUIsRUFBZ0M0dEIsUUFBUSxDQUFDQyxNQUF6QztBQUNBOztBQUVELGlCQUFPendCLE1BQU0sQ0FBRTRDLElBQUYsQ0FBYjtBQUNBO0FBQ0QsT0FqRThELENBbUUvRDs7O0FBQ0EsVUFBS3VDLE1BQU0sQ0FBQ3FNLGFBQVAsQ0FBc0J4UixNQUF0QixDQUFMLEVBQXNDO0FBQ3JDeXFCLGdCQUFRLENBQUNoRixNQUFULENBQWlCam1CLElBQWpCLEVBQXVCLGVBQXZCO0FBQ0E7QUFDRCxLQTlMYTtBQWdNZG14QixZQUFRLEVBQUUsVUFBVVEsV0FBVixFQUF3QjtBQUVqQyxVQUFJL3hCLENBQUo7QUFBQSxVQUFPcVIsQ0FBUDtBQUFBLFVBQVViLEdBQVY7QUFBQSxVQUFlZ08sT0FBZjtBQUFBLFVBQXdCd1MsU0FBeEI7QUFBQSxVQUFtQ2dCLFlBQW5DO0FBQUEsVUFDQ3Z3QixJQUFJLEdBQUcsSUFBSWMsS0FBSixDQUFXZ0MsU0FBUyxDQUFDdEUsTUFBckIsQ0FEUjtBQUFBLFVBR0M7QUFDQXNELFdBQUssR0FBR3dDLE1BQU0sQ0FBQ3hDLEtBQVAsQ0FBYTB1QixHQUFiLENBQWtCRixXQUFsQixDQUpUO0FBQUEsVUFNQ2QsUUFBUSxHQUFHLENBQ1Q1RixRQUFRLENBQUMvYSxHQUFULENBQWMsSUFBZCxFQUFvQixRQUFwQixLQUFrQ3RGLE1BQU0sQ0FBQ0MsTUFBUCxDQUFlLElBQWYsQ0FEekIsRUFFUDFILEtBQUssQ0FBQ0MsSUFGQyxLQUVTLEVBUnJCO0FBQUEsVUFTQzBrQixPQUFPLEdBQUduaUIsTUFBTSxDQUFDeEMsS0FBUCxDQUFhMmtCLE9BQWIsQ0FBc0Iza0IsS0FBSyxDQUFDQyxJQUE1QixLQUFzQyxFQVRqRCxDQUZpQyxDQWFqQzs7QUFDQS9CLFVBQUksQ0FBRSxDQUFGLENBQUosR0FBWThCLEtBQVo7O0FBRUEsV0FBTXZELENBQUMsR0FBRyxDQUFWLEVBQWFBLENBQUMsR0FBR3VFLFNBQVMsQ0FBQ3RFLE1BQTNCLEVBQW1DRCxDQUFDLEVBQXBDLEVBQXlDO0FBQ3hDeUIsWUFBSSxDQUFFekIsQ0FBRixDQUFKLEdBQVl1RSxTQUFTLENBQUV2RSxDQUFGLENBQXJCO0FBQ0E7O0FBRUR1RCxXQUFLLENBQUMydUIsY0FBTixHQUF1QixJQUF2QixDQXBCaUMsQ0FzQmpDOztBQUNBLFVBQUtoSyxPQUFPLENBQUNpSyxXQUFSLElBQXVCakssT0FBTyxDQUFDaUssV0FBUixDQUFvQnR2QixJQUFwQixDQUEwQixJQUExQixFQUFnQ1UsS0FBaEMsTUFBNEMsS0FBeEUsRUFBZ0Y7QUFDL0U7QUFDQSxPQXpCZ0MsQ0EyQmpDOzs7QUFDQXl1QixrQkFBWSxHQUFHanNCLE1BQU0sQ0FBQ3hDLEtBQVAsQ0FBYTB0QixRQUFiLENBQXNCcHVCLElBQXRCLENBQTRCLElBQTVCLEVBQWtDVSxLQUFsQyxFQUF5QzB0QixRQUF6QyxDQUFmLENBNUJpQyxDQThCakM7O0FBQ0FqeEIsT0FBQyxHQUFHLENBQUo7O0FBQ0EsYUFBUSxDQUFFd2UsT0FBTyxHQUFHd1QsWUFBWSxDQUFFaHlCLENBQUMsRUFBSCxDQUF4QixLQUFxQyxDQUFDdUQsS0FBSyxDQUFDNnVCLG9CQUFOLEVBQTlDLEVBQTZFO0FBQzVFN3VCLGFBQUssQ0FBQzh1QixhQUFOLEdBQXNCN1QsT0FBTyxDQUFDcGUsSUFBOUI7QUFFQWlSLFNBQUMsR0FBRyxDQUFKOztBQUNBLGVBQVEsQ0FBRTJmLFNBQVMsR0FBR3hTLE9BQU8sQ0FBQ3lTLFFBQVIsQ0FBa0I1ZixDQUFDLEVBQW5CLENBQWQsS0FDUCxDQUFDOU4sS0FBSyxDQUFDK3VCLDZCQUFOLEVBREYsRUFDMEM7QUFFekM7QUFDQTtBQUNBLGNBQUssQ0FBQy91QixLQUFLLENBQUNndkIsVUFBUCxJQUFxQnZCLFNBQVMsQ0FBQ3hyQixTQUFWLEtBQXdCLEtBQTdDLElBQ0pqQyxLQUFLLENBQUNndkIsVUFBTixDQUFpQm5hLElBQWpCLENBQXVCNFksU0FBUyxDQUFDeHJCLFNBQWpDLENBREQsRUFDZ0Q7QUFFL0NqQyxpQkFBSyxDQUFDeXRCLFNBQU4sR0FBa0JBLFNBQWxCO0FBQ0F6dEIsaUJBQUssQ0FBQ2lELElBQU4sR0FBYXdxQixTQUFTLENBQUN4cUIsSUFBdkI7QUFFQWdLLGVBQUcsR0FBRyxDQUFFLENBQUV6SyxNQUFNLENBQUN4QyxLQUFQLENBQWEya0IsT0FBYixDQUFzQjhJLFNBQVMsQ0FBQ0csUUFBaEMsS0FBOEMsRUFBaEQsRUFBcURFLE1BQXJELElBQ1BMLFNBQVMsQ0FBQzNYLE9BREwsRUFDZXpYLEtBRGYsQ0FDc0I0YyxPQUFPLENBQUNwZSxJQUQ5QixFQUNvQ3FCLElBRHBDLENBQU47O0FBR0EsZ0JBQUsrTyxHQUFHLEtBQUs3TixTQUFiLEVBQXlCO0FBQ3hCLGtCQUFLLENBQUVZLEtBQUssQ0FBQzhaLE1BQU4sR0FBZTdNLEdBQWpCLE1BQTJCLEtBQWhDLEVBQXdDO0FBQ3ZDak4scUJBQUssQ0FBQ2l2QixjQUFOO0FBQ0FqdkIscUJBQUssQ0FBQ2t2QixlQUFOO0FBQ0E7QUFDRDtBQUNEO0FBQ0Q7QUFDRCxPQTFEZ0MsQ0E0RGpDOzs7QUFDQSxVQUFLdkssT0FBTyxDQUFDd0ssWUFBYixFQUE0QjtBQUMzQnhLLGVBQU8sQ0FBQ3dLLFlBQVIsQ0FBcUI3dkIsSUFBckIsQ0FBMkIsSUFBM0IsRUFBaUNVLEtBQWpDO0FBQ0E7O0FBRUQsYUFBT0EsS0FBSyxDQUFDOFosTUFBYjtBQUNBLEtBbFFhO0FBb1FkNFQsWUFBUSxFQUFFLFVBQVUxdEIsS0FBVixFQUFpQjB0QixRQUFqQixFQUE0QjtBQUNyQyxVQUFJanhCLENBQUo7QUFBQSxVQUFPZ3hCLFNBQVA7QUFBQSxVQUFrQjVVLEdBQWxCO0FBQUEsVUFBdUJ1VyxlQUF2QjtBQUFBLFVBQXdDQyxnQkFBeEM7QUFBQSxVQUNDWixZQUFZLEdBQUcsRUFEaEI7QUFBQSxVQUVDTixhQUFhLEdBQUdULFFBQVEsQ0FBQ1MsYUFGMUI7QUFBQSxVQUdDbFksR0FBRyxHQUFHalcsS0FBSyxDQUFDcU8sTUFIYixDQURxQyxDQU1yQzs7QUFDQSxVQUFLOGYsYUFBYSxJQUVqQjtBQUNBO0FBQ0FsWSxTQUFHLENBQUMzUSxRQUpBLElBTUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQUd0RixLQUFLLENBQUNDLElBQU4sS0FBZSxPQUFmLElBQTBCRCxLQUFLLENBQUNzdkIsTUFBTixJQUFnQixDQUE3QyxDQVhELEVBV29EO0FBRW5ELGVBQVFyWixHQUFHLEtBQUssSUFBaEIsRUFBc0JBLEdBQUcsR0FBR0EsR0FBRyxDQUFDdlcsVUFBSixJQUFrQixJQUE5QyxFQUFxRDtBQUVwRDtBQUNBO0FBQ0EsY0FBS3VXLEdBQUcsQ0FBQzNRLFFBQUosS0FBaUIsQ0FBakIsSUFBc0IsRUFBR3RGLEtBQUssQ0FBQ0MsSUFBTixLQUFlLE9BQWYsSUFBMEJnVyxHQUFHLENBQUN0QyxRQUFKLEtBQWlCLElBQTlDLENBQTNCLEVBQWtGO0FBQ2pGeWIsMkJBQWUsR0FBRyxFQUFsQjtBQUNBQyw0QkFBZ0IsR0FBRyxFQUFuQjs7QUFDQSxpQkFBTTV5QixDQUFDLEdBQUcsQ0FBVixFQUFhQSxDQUFDLEdBQUcweEIsYUFBakIsRUFBZ0MxeEIsQ0FBQyxFQUFqQyxFQUFzQztBQUNyQ2d4Qix1QkFBUyxHQUFHQyxRQUFRLENBQUVqeEIsQ0FBRixDQUFwQixDQURxQyxDQUdyQzs7QUFDQW9jLGlCQUFHLEdBQUc0VSxTQUFTLENBQUMzd0IsUUFBVixHQUFxQixHQUEzQjs7QUFFQSxrQkFBS3V5QixnQkFBZ0IsQ0FBRXhXLEdBQUYsQ0FBaEIsS0FBNEJ6WixTQUFqQyxFQUE2QztBQUM1Q2l3QixnQ0FBZ0IsQ0FBRXhXLEdBQUYsQ0FBaEIsR0FBMEI0VSxTQUFTLENBQUN2TixZQUFWLEdBQ3pCMWQsTUFBTSxDQUFFcVcsR0FBRixFQUFPLElBQVAsQ0FBTixDQUFvQjlhLEtBQXBCLENBQTJCa1ksR0FBM0IsSUFBbUMsQ0FBQyxDQURYLEdBRXpCelQsTUFBTSxDQUFDK1UsSUFBUCxDQUFhc0IsR0FBYixFQUFrQixJQUFsQixFQUF3QixJQUF4QixFQUE4QixDQUFFNUMsR0FBRixDQUE5QixFQUF3Q3ZaLE1BRnpDO0FBR0E7O0FBQ0Qsa0JBQUsyeUIsZ0JBQWdCLENBQUV4VyxHQUFGLENBQXJCLEVBQStCO0FBQzlCdVcsK0JBQWUsQ0FBQzN4QixJQUFoQixDQUFzQmd3QixTQUF0QjtBQUNBO0FBQ0Q7O0FBQ0QsZ0JBQUsyQixlQUFlLENBQUMxeUIsTUFBckIsRUFBOEI7QUFDN0IreEIsMEJBQVksQ0FBQ2h4QixJQUFiLENBQW1CO0FBQUVaLG9CQUFJLEVBQUVvWixHQUFSO0FBQWF5WCx3QkFBUSxFQUFFMEI7QUFBdkIsZUFBbkI7QUFDQTtBQUNEO0FBQ0Q7QUFDRCxPQS9Db0MsQ0FpRHJDOzs7QUFDQW5aLFNBQUcsR0FBRyxJQUFOOztBQUNBLFVBQUtrWSxhQUFhLEdBQUdULFFBQVEsQ0FBQ2h4QixNQUE5QixFQUF1QztBQUN0Qyt4QixvQkFBWSxDQUFDaHhCLElBQWIsQ0FBbUI7QUFBRVosY0FBSSxFQUFFb1osR0FBUjtBQUFheVgsa0JBQVEsRUFBRUEsUUFBUSxDQUFDdnZCLEtBQVQsQ0FBZ0Jnd0IsYUFBaEI7QUFBdkIsU0FBbkI7QUFDQTs7QUFFRCxhQUFPTSxZQUFQO0FBQ0EsS0E1VGE7QUE4VGRjLFdBQU8sRUFBRSxVQUFVdGhCLElBQVYsRUFBZ0J1aEIsSUFBaEIsRUFBdUI7QUFDL0IvbkIsWUFBTSxDQUFDaWdCLGNBQVAsQ0FBdUJsbEIsTUFBTSxDQUFDaXRCLEtBQVAsQ0FBYXB6QixTQUFwQyxFQUErQzRSLElBQS9DLEVBQXFEO0FBQ3BEeWhCLGtCQUFVLEVBQUUsSUFEd0M7QUFFcEQvSCxvQkFBWSxFQUFFLElBRnNDO0FBSXBENWEsV0FBRyxFQUFFckIsVUFBVSxDQUFFOGpCLElBQUYsQ0FBVixHQUNKLFlBQVc7QUFDVixjQUFLLEtBQUtHLGFBQVYsRUFBMEI7QUFDeEIsbUJBQU9ILElBQUksQ0FBRSxLQUFLRyxhQUFQLENBQVg7QUFDRDtBQUNELFNBTEcsR0FNSixZQUFXO0FBQ1YsY0FBSyxLQUFLQSxhQUFWLEVBQTBCO0FBQ3hCLG1CQUFPLEtBQUtBLGFBQUwsQ0FBb0IxaEIsSUFBcEIsQ0FBUDtBQUNEO0FBQ0QsU0Fka0Q7QUFnQnBEMlosV0FBRyxFQUFFLFVBQVV6a0IsS0FBVixFQUFrQjtBQUN0QnNFLGdCQUFNLENBQUNpZ0IsY0FBUCxDQUF1QixJQUF2QixFQUE2QnpaLElBQTdCLEVBQW1DO0FBQ2xDeWhCLHNCQUFVLEVBQUUsSUFEc0I7QUFFbEMvSCx3QkFBWSxFQUFFLElBRm9CO0FBR2xDaUksb0JBQVEsRUFBRSxJQUh3QjtBQUlsQ3pzQixpQkFBSyxFQUFFQTtBQUoyQixXQUFuQztBQU1BO0FBdkJtRCxPQUFyRDtBQXlCQSxLQXhWYTtBQTBWZHVyQixPQUFHLEVBQUUsVUFBVWlCLGFBQVYsRUFBMEI7QUFDOUIsYUFBT0EsYUFBYSxDQUFFbnRCLE1BQU0sQ0FBQ2dNLE9BQVQsQ0FBYixHQUNObWhCLGFBRE0sR0FFTixJQUFJbnRCLE1BQU0sQ0FBQ2l0QixLQUFYLENBQWtCRSxhQUFsQixDQUZEO0FBR0EsS0E5VmE7QUFnV2RoTCxXQUFPLEVBQUU7QUFDUmtMLFVBQUksRUFBRTtBQUVMO0FBQ0FDLGdCQUFRLEVBQUU7QUFITCxPQURFO0FBTVJDLFdBQUssRUFBRTtBQUVOO0FBQ0FyckIsYUFBSyxFQUFFLFVBQVV6QixJQUFWLEVBQWlCO0FBRXZCO0FBQ0E7QUFDQSxjQUFJMFMsRUFBRSxHQUFHLFFBQVExUyxJQUFqQixDQUp1QixDQU12Qjs7QUFDQSxjQUFLeW5CLGNBQWMsQ0FBQzdWLElBQWYsQ0FBcUJjLEVBQUUsQ0FBQzFWLElBQXhCLEtBQ0owVixFQUFFLENBQUNvYSxLQURDLElBQ1Fsb0IsUUFBUSxDQUFFOE4sRUFBRixFQUFNLE9BQU4sQ0FEckIsRUFDdUM7QUFFdEM7QUFDQXFhLDBCQUFjLENBQUVyYSxFQUFGLEVBQU0sT0FBTixFQUFlbVgsVUFBZixDQUFkO0FBQ0EsV0Fac0IsQ0FjdkI7OztBQUNBLGlCQUFPLEtBQVA7QUFDQSxTQW5CSztBQW9CTm1ELGVBQU8sRUFBRSxVQUFVaHRCLElBQVYsRUFBaUI7QUFFekI7QUFDQTtBQUNBLGNBQUkwUyxFQUFFLEdBQUcsUUFBUTFTLElBQWpCLENBSnlCLENBTXpCOztBQUNBLGNBQUt5bkIsY0FBYyxDQUFDN1YsSUFBZixDQUFxQmMsRUFBRSxDQUFDMVYsSUFBeEIsS0FDSjBWLEVBQUUsQ0FBQ29hLEtBREMsSUFDUWxvQixRQUFRLENBQUU4TixFQUFGLEVBQU0sT0FBTixDQURyQixFQUN1QztBQUV0Q3FhLDBCQUFjLENBQUVyYSxFQUFGLEVBQU0sT0FBTixDQUFkO0FBQ0EsV0FYd0IsQ0FhekI7OztBQUNBLGlCQUFPLElBQVA7QUFDQSxTQW5DSztBQXFDTjtBQUNBO0FBQ0E2VixnQkFBUSxFQUFFLFVBQVV4ckIsS0FBVixFQUFrQjtBQUMzQixjQUFJcU8sTUFBTSxHQUFHck8sS0FBSyxDQUFDcU8sTUFBbkI7QUFDQSxpQkFBT3FjLGNBQWMsQ0FBQzdWLElBQWYsQ0FBcUJ4RyxNQUFNLENBQUNwTyxJQUE1QixLQUNOb08sTUFBTSxDQUFDMGhCLEtBREQsSUFDVWxvQixRQUFRLENBQUV3RyxNQUFGLEVBQVUsT0FBVixDQURsQixJQUVOeVosUUFBUSxDQUFDL2EsR0FBVCxDQUFjc0IsTUFBZCxFQUFzQixPQUF0QixDQUZNLElBR054RyxRQUFRLENBQUV3RyxNQUFGLEVBQVUsR0FBVixDQUhUO0FBSUE7QUE3Q0ssT0FOQztBQXNEUjZoQixrQkFBWSxFQUFFO0FBQ2JmLG9CQUFZLEVBQUUsVUFBVW52QixLQUFWLEVBQWtCO0FBRS9CO0FBQ0E7QUFDQSxjQUFLQSxLQUFLLENBQUM4WixNQUFOLEtBQWlCMWEsU0FBakIsSUFBOEJZLEtBQUssQ0FBQzJ2QixhQUF6QyxFQUF5RDtBQUN4RDN2QixpQkFBSyxDQUFDMnZCLGFBQU4sQ0FBb0JRLFdBQXBCLEdBQWtDbndCLEtBQUssQ0FBQzhaLE1BQXhDO0FBQ0E7QUFDRDtBQVJZO0FBdEROO0FBaFdLLEdBQWYsQ0E3aEtpRixDQWc4S2pGO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFdBQVNrVyxjQUFULENBQXlCcmEsRUFBekIsRUFBNkIxVixJQUE3QixFQUFtQytzQixVQUFuQyxFQUFnRDtBQUUvQztBQUNBLFFBQUssQ0FBQ0EsVUFBTixFQUFtQjtBQUNsQixVQUFLbEYsUUFBUSxDQUFDL2EsR0FBVCxDQUFjNEksRUFBZCxFQUFrQjFWLElBQWxCLE1BQTZCYixTQUFsQyxFQUE4QztBQUM3Q29ELGNBQU0sQ0FBQ3hDLEtBQVAsQ0FBYXFoQixHQUFiLENBQWtCMUwsRUFBbEIsRUFBc0IxVixJQUF0QixFQUE0QjZzQixVQUE1QjtBQUNBOztBQUNEO0FBQ0EsS0FSOEMsQ0FVL0M7OztBQUNBaEYsWUFBUSxDQUFDRixHQUFULENBQWNqUyxFQUFkLEVBQWtCMVYsSUFBbEIsRUFBd0IsS0FBeEI7QUFDQXVDLFVBQU0sQ0FBQ3hDLEtBQVAsQ0FBYXFoQixHQUFiLENBQWtCMUwsRUFBbEIsRUFBc0IxVixJQUF0QixFQUE0QjtBQUMzQmdDLGVBQVMsRUFBRSxLQURnQjtBQUUzQjZULGFBQU8sRUFBRSxVQUFVOVYsS0FBVixFQUFrQjtBQUMxQixZQUFJb3dCLFFBQUo7QUFBQSxZQUFjdFcsTUFBZDtBQUFBLFlBQ0N1VyxLQUFLLEdBQUd2SSxRQUFRLENBQUMvYSxHQUFULENBQWMsSUFBZCxFQUFvQjlNLElBQXBCLENBRFQ7O0FBR0EsWUFBT0QsS0FBSyxDQUFDc3dCLFNBQU4sR0FBa0IsQ0FBcEIsSUFBMkIsS0FBTXJ3QixJQUFOLENBQWhDLEVBQStDO0FBRTlDO0FBQ0E7QUFDQTtBQUNBLGNBQUssQ0FBQ293QixLQUFLLENBQUMzekIsTUFBWixFQUFxQjtBQUVwQjtBQUNBO0FBQ0E7QUFDQTJ6QixpQkFBSyxHQUFHbHlCLEtBQUssQ0FBQ21CLElBQU4sQ0FBWTBCLFNBQVosQ0FBUjtBQUNBOG1CLG9CQUFRLENBQUNGLEdBQVQsQ0FBYyxJQUFkLEVBQW9CM25CLElBQXBCLEVBQTBCb3dCLEtBQTFCLEVBTm9CLENBUXBCO0FBQ0E7QUFDQTs7QUFDQUQsb0JBQVEsR0FBR3BELFVBQVUsQ0FBRSxJQUFGLEVBQVEvc0IsSUFBUixDQUFyQjtBQUNBLGlCQUFNQSxJQUFOO0FBQ0E2WixrQkFBTSxHQUFHZ08sUUFBUSxDQUFDL2EsR0FBVCxDQUFjLElBQWQsRUFBb0I5TSxJQUFwQixDQUFUOztBQUNBLGdCQUFLb3dCLEtBQUssS0FBS3ZXLE1BQVYsSUFBb0JzVyxRQUF6QixFQUFvQztBQUNuQ3RJLHNCQUFRLENBQUNGLEdBQVQsQ0FBYyxJQUFkLEVBQW9CM25CLElBQXBCLEVBQTBCLEtBQTFCO0FBQ0EsYUFGRCxNQUVPO0FBQ042WixvQkFBTSxHQUFHLEVBQVQ7QUFDQTs7QUFDRCxnQkFBS3VXLEtBQUssS0FBS3ZXLE1BQWYsRUFBd0I7QUFFdkI7QUFDQTlaLG1CQUFLLENBQUN1d0Isd0JBQU47QUFDQXZ3QixtQkFBSyxDQUFDaXZCLGNBQU47QUFDQSxxQkFBT25WLE1BQU0sQ0FBQzNXLEtBQWQ7QUFDQSxhQXpCbUIsQ0EyQnJCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQyxXQWpDRCxNQWlDTyxJQUFLLENBQUVYLE1BQU0sQ0FBQ3hDLEtBQVAsQ0FBYTJrQixPQUFiLENBQXNCMWtCLElBQXRCLEtBQWdDLEVBQWxDLEVBQXVDZ3VCLFlBQTVDLEVBQTJEO0FBQ2pFanVCLGlCQUFLLENBQUNrdkIsZUFBTjtBQUNBLFdBeEM2QyxDQTBDL0M7QUFDQTs7QUFDQyxTQTVDRCxNQTRDTyxJQUFLbUIsS0FBSyxDQUFDM3pCLE1BQVgsRUFBb0I7QUFFMUI7QUFDQW9yQixrQkFBUSxDQUFDRixHQUFULENBQWMsSUFBZCxFQUFvQjNuQixJQUFwQixFQUEwQjtBQUN6QmtELGlCQUFLLEVBQUVYLE1BQU0sQ0FBQ3hDLEtBQVAsQ0FBYWl3QixPQUFiLEVBRU47QUFDQTtBQUNBenRCLGtCQUFNLENBQUNoRSxNQUFQLENBQWU2eEIsS0FBSyxDQUFFLENBQUYsQ0FBcEIsRUFBMkI3dEIsTUFBTSxDQUFDaXRCLEtBQVAsQ0FBYXB6QixTQUF4QyxDQUpNLEVBS05nMEIsS0FBSyxDQUFDbHlCLEtBQU4sQ0FBYSxDQUFiLENBTE0sRUFNTixJQU5NO0FBRGtCLFdBQTFCLEVBSDBCLENBYzFCOztBQUNBNkIsZUFBSyxDQUFDdXdCLHdCQUFOO0FBQ0E7QUFDRDtBQW5FMEIsS0FBNUI7QUFxRUE7O0FBRUQvdEIsUUFBTSxDQUFDK3JCLFdBQVAsR0FBcUIsVUFBVTF4QixJQUFWLEVBQWdCb0QsSUFBaEIsRUFBc0I2dEIsTUFBdEIsRUFBK0I7QUFFbkQ7QUFDQSxRQUFLanhCLElBQUksQ0FBQ3NOLG1CQUFWLEVBQWdDO0FBQy9CdE4sVUFBSSxDQUFDc04sbUJBQUwsQ0FBMEJsSyxJQUExQixFQUFnQzZ0QixNQUFoQztBQUNBO0FBQ0QsR0FORDs7QUFRQXRyQixRQUFNLENBQUNpdEIsS0FBUCxHQUFlLFVBQVUxbEIsR0FBVixFQUFleW1CLEtBQWYsRUFBdUI7QUFFckM7QUFDQSxRQUFLLEVBQUcsZ0JBQWdCaHVCLE1BQU0sQ0FBQ2l0QixLQUExQixDQUFMLEVBQXlDO0FBQ3hDLGFBQU8sSUFBSWp0QixNQUFNLENBQUNpdEIsS0FBWCxDQUFrQjFsQixHQUFsQixFQUF1QnltQixLQUF2QixDQUFQO0FBQ0EsS0FMb0MsQ0FPckM7OztBQUNBLFFBQUt6bUIsR0FBRyxJQUFJQSxHQUFHLENBQUM5SixJQUFoQixFQUF1QjtBQUN0QixXQUFLMHZCLGFBQUwsR0FBcUI1bEIsR0FBckI7QUFDQSxXQUFLOUosSUFBTCxHQUFZOEosR0FBRyxDQUFDOUosSUFBaEIsQ0FGc0IsQ0FJdEI7QUFDQTs7QUFDQSxXQUFLd3dCLGtCQUFMLEdBQTBCMW1CLEdBQUcsQ0FBQzJtQixnQkFBSixJQUN4QjNtQixHQUFHLENBQUMybUIsZ0JBQUosS0FBeUJ0eEIsU0FBekIsSUFFQTtBQUNBMkssU0FBRyxDQUFDb21CLFdBQUosS0FBb0IsS0FKSSxHQUt6QnJELFVBTHlCLEdBTXpCQyxXQU5ELENBTnNCLENBY3RCO0FBQ0E7QUFDQTs7QUFDQSxXQUFLMWUsTUFBTCxHQUFnQnRFLEdBQUcsQ0FBQ3NFLE1BQUosSUFBY3RFLEdBQUcsQ0FBQ3NFLE1BQUosQ0FBVy9JLFFBQVgsS0FBd0IsQ0FBeEMsR0FDYnlFLEdBQUcsQ0FBQ3NFLE1BQUosQ0FBVzNPLFVBREUsR0FFYnFLLEdBQUcsQ0FBQ3NFLE1BRkw7QUFJQSxXQUFLeWdCLGFBQUwsR0FBcUIva0IsR0FBRyxDQUFDK2tCLGFBQXpCO0FBQ0EsV0FBSzZCLGFBQUwsR0FBcUI1bUIsR0FBRyxDQUFDNG1CLGFBQXpCLENBdEJzQixDQXdCdkI7QUFDQyxLQXpCRCxNQXlCTztBQUNOLFdBQUsxd0IsSUFBTCxHQUFZOEosR0FBWjtBQUNBLEtBbkNvQyxDQXFDckM7OztBQUNBLFFBQUt5bUIsS0FBTCxFQUFhO0FBQ1podUIsWUFBTSxDQUFDaEUsTUFBUCxDQUFlLElBQWYsRUFBcUJneUIsS0FBckI7QUFDQSxLQXhDb0MsQ0EwQ3JDOzs7QUFDQSxTQUFLSSxTQUFMLEdBQWlCN21CLEdBQUcsSUFBSUEsR0FBRyxDQUFDNm1CLFNBQVgsSUFBd0JqZ0IsSUFBSSxDQUFDa2dCLEdBQUwsRUFBekMsQ0EzQ3FDLENBNkNyQzs7QUFDQSxTQUFNcnVCLE1BQU0sQ0FBQ2dNLE9BQWIsSUFBeUIsSUFBekI7QUFDQSxHQS9DRCxDQS9oTGlGLENBZ2xMakY7QUFDQTs7O0FBQ0FoTSxRQUFNLENBQUNpdEIsS0FBUCxDQUFhcHpCLFNBQWIsR0FBeUI7QUFDeEJ3USxlQUFXLEVBQUVySyxNQUFNLENBQUNpdEIsS0FESTtBQUV4QmdCLHNCQUFrQixFQUFFMUQsV0FGSTtBQUd4QjhCLHdCQUFvQixFQUFFOUIsV0FIRTtBQUl4QmdDLGlDQUE2QixFQUFFaEMsV0FKUDtBQUt4QitELGVBQVcsRUFBRSxLQUxXO0FBT3hCN0Isa0JBQWMsRUFBRSxZQUFXO0FBQzFCLFVBQUlsYixDQUFDLEdBQUcsS0FBSzRiLGFBQWI7QUFFQSxXQUFLYyxrQkFBTCxHQUEwQjNELFVBQTFCOztBQUVBLFVBQUsvWSxDQUFDLElBQUksQ0FBQyxLQUFLK2MsV0FBaEIsRUFBOEI7QUFDN0IvYyxTQUFDLENBQUNrYixjQUFGO0FBQ0E7QUFDRCxLQWZ1QjtBQWdCeEJDLG1CQUFlLEVBQUUsWUFBVztBQUMzQixVQUFJbmIsQ0FBQyxHQUFHLEtBQUs0YixhQUFiO0FBRUEsV0FBS2Qsb0JBQUwsR0FBNEIvQixVQUE1Qjs7QUFFQSxVQUFLL1ksQ0FBQyxJQUFJLENBQUMsS0FBSytjLFdBQWhCLEVBQThCO0FBQzdCL2MsU0FBQyxDQUFDbWIsZUFBRjtBQUNBO0FBQ0QsS0F4QnVCO0FBeUJ4QnFCLDRCQUF3QixFQUFFLFlBQVc7QUFDcEMsVUFBSXhjLENBQUMsR0FBRyxLQUFLNGIsYUFBYjtBQUVBLFdBQUtaLDZCQUFMLEdBQXFDakMsVUFBckM7O0FBRUEsVUFBSy9ZLENBQUMsSUFBSSxDQUFDLEtBQUsrYyxXQUFoQixFQUE4QjtBQUM3Qi9jLFNBQUMsQ0FBQ3djLHdCQUFGO0FBQ0E7O0FBRUQsV0FBS3JCLGVBQUw7QUFDQTtBQW5DdUIsR0FBekIsQ0FsbExpRixDQXduTGpGOztBQUNBMXNCLFFBQU0sQ0FBQzRLLElBQVAsQ0FBYTtBQUNaMmpCLFVBQU0sRUFBRSxJQURJO0FBRVpDLFdBQU8sRUFBRSxJQUZHO0FBR1pDLGNBQVUsRUFBRSxJQUhBO0FBSVpDLGtCQUFjLEVBQUUsSUFKSjtBQUtaQyxXQUFPLEVBQUUsSUFMRztBQU1aQyxVQUFNLEVBQUUsSUFOSTtBQU9aQyxjQUFVLEVBQUUsSUFQQTtBQVFaQyxXQUFPLEVBQUUsSUFSRztBQVNaQyxTQUFLLEVBQUUsSUFUSztBQVVaQyxTQUFLLEVBQUUsSUFWSztBQVdaQyxZQUFRLEVBQUUsSUFYRTtBQVlaQyxRQUFJLEVBQUUsSUFaTTtBQWFaLFlBQVEsSUFiSTtBQWNaMWxCLFFBQUksRUFBRSxJQWRNO0FBZVoybEIsWUFBUSxFQUFFLElBZkU7QUFnQlpyYyxPQUFHLEVBQUUsSUFoQk87QUFpQlpzYyxXQUFPLEVBQUUsSUFqQkc7QUFrQlp0QyxVQUFNLEVBQUUsSUFsQkk7QUFtQlp1QyxXQUFPLEVBQUUsSUFuQkc7QUFvQlpDLFdBQU8sRUFBRSxJQXBCRztBQXFCWkMsV0FBTyxFQUFFLElBckJHO0FBc0JaQyxXQUFPLEVBQUUsSUF0Qkc7QUF1QlpDLFdBQU8sRUFBRSxJQXZCRztBQXdCWkMsYUFBUyxFQUFFLElBeEJDO0FBeUJaQyxlQUFXLEVBQUUsSUF6QkQ7QUEwQlpDLFdBQU8sRUFBRSxJQTFCRztBQTJCWkMsV0FBTyxFQUFFLElBM0JHO0FBNEJaQyxpQkFBYSxFQUFFLElBNUJIO0FBNkJaQyxhQUFTLEVBQUUsSUE3QkM7QUE4QlpDLFdBQU8sRUFBRSxJQTlCRztBQWdDWkMsU0FBSyxFQUFFLFVBQVV6eUIsS0FBVixFQUFrQjtBQUN4QixVQUFJc3ZCLE1BQU0sR0FBR3R2QixLQUFLLENBQUNzdkIsTUFBbkIsQ0FEd0IsQ0FHeEI7O0FBQ0EsVUFBS3R2QixLQUFLLENBQUN5eUIsS0FBTixJQUFlLElBQWYsSUFBdUI5RixTQUFTLENBQUM5WCxJQUFWLENBQWdCN1UsS0FBSyxDQUFDQyxJQUF0QixDQUE1QixFQUEyRDtBQUMxRCxlQUFPRCxLQUFLLENBQUMyeEIsUUFBTixJQUFrQixJQUFsQixHQUF5QjN4QixLQUFLLENBQUMyeEIsUUFBL0IsR0FBMEMzeEIsS0FBSyxDQUFDNHhCLE9BQXZEO0FBQ0EsT0FOdUIsQ0FReEI7OztBQUNBLFVBQUssQ0FBQzV4QixLQUFLLENBQUN5eUIsS0FBUCxJQUFnQm5ELE1BQU0sS0FBS2x3QixTQUEzQixJQUF3Q3d0QixXQUFXLENBQUMvWCxJQUFaLENBQWtCN1UsS0FBSyxDQUFDQyxJQUF4QixDQUE3QyxFQUE4RTtBQUM3RSxZQUFLcXZCLE1BQU0sR0FBRyxDQUFkLEVBQWtCO0FBQ2pCLGlCQUFPLENBQVA7QUFDQTs7QUFFRCxZQUFLQSxNQUFNLEdBQUcsQ0FBZCxFQUFrQjtBQUNqQixpQkFBTyxDQUFQO0FBQ0E7O0FBRUQsWUFBS0EsTUFBTSxHQUFHLENBQWQsRUFBa0I7QUFDakIsaUJBQU8sQ0FBUDtBQUNBOztBQUVELGVBQU8sQ0FBUDtBQUNBOztBQUVELGFBQU90dkIsS0FBSyxDQUFDeXlCLEtBQWI7QUFDQTtBQTFEVyxHQUFiLEVBMkRHandCLE1BQU0sQ0FBQ3hDLEtBQVAsQ0FBYXV2QixPQTNEaEI7QUE2REEvc0IsUUFBTSxDQUFDNEssSUFBUCxDQUFhO0FBQUVzbEIsU0FBSyxFQUFFLFNBQVQ7QUFBb0JDLFFBQUksRUFBRTtBQUExQixHQUFiLEVBQXFELFVBQVUxeUIsSUFBVixFQUFnQmd1QixZQUFoQixFQUErQjtBQUNuRnpyQixVQUFNLENBQUN4QyxLQUFQLENBQWEya0IsT0FBYixDQUFzQjFrQixJQUF0QixJQUErQjtBQUU5QjtBQUNBeUUsV0FBSyxFQUFFLFlBQVc7QUFFakI7QUFDQTtBQUNBO0FBQ0FzckIsc0JBQWMsQ0FBRSxJQUFGLEVBQVEvdkIsSUFBUixFQUFjK3NCLFVBQWQsQ0FBZCxDQUxpQixDQU9qQjs7QUFDQSxlQUFPLEtBQVA7QUFDQSxPQVo2QjtBQWE5QmlELGFBQU8sRUFBRSxZQUFXO0FBRW5CO0FBQ0FELHNCQUFjLENBQUUsSUFBRixFQUFRL3ZCLElBQVIsQ0FBZCxDQUhtQixDQUtuQjs7QUFDQSxlQUFPLElBQVA7QUFDQSxPQXBCNkI7QUFzQjlCZ3VCLGtCQUFZLEVBQUVBO0FBdEJnQixLQUEvQjtBQXdCQSxHQXpCRCxFQXRyTGlGLENBaXRMakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQXpyQixRQUFNLENBQUM0SyxJQUFQLENBQWE7QUFDWndsQixjQUFVLEVBQUUsV0FEQTtBQUVaQyxjQUFVLEVBQUUsVUFGQTtBQUdaQyxnQkFBWSxFQUFFLGFBSEY7QUFJWkMsZ0JBQVksRUFBRTtBQUpGLEdBQWIsRUFLRyxVQUFVQyxJQUFWLEVBQWdCdEUsR0FBaEIsRUFBc0I7QUFDeEJsc0IsVUFBTSxDQUFDeEMsS0FBUCxDQUFhMmtCLE9BQWIsQ0FBc0JxTyxJQUF0QixJQUErQjtBQUM5Qi9FLGtCQUFZLEVBQUVTLEdBRGdCO0FBRTlCUixjQUFRLEVBQUVRLEdBRm9CO0FBSTlCWixZQUFNLEVBQUUsVUFBVTl0QixLQUFWLEVBQWtCO0FBQ3pCLFlBQUlpTixHQUFKO0FBQUEsWUFDQ29CLE1BQU0sR0FBRyxJQURWO0FBQUEsWUFFQzRrQixPQUFPLEdBQUdqekIsS0FBSyxDQUFDMndCLGFBRmpCO0FBQUEsWUFHQ2xELFNBQVMsR0FBR3p0QixLQUFLLENBQUN5dEIsU0FIbkIsQ0FEeUIsQ0FNekI7QUFDQTs7QUFDQSxZQUFLLENBQUN3RixPQUFELElBQWNBLE9BQU8sS0FBSzVrQixNQUFaLElBQXNCLENBQUM3TCxNQUFNLENBQUNrTyxRQUFQLENBQWlCckMsTUFBakIsRUFBeUI0a0IsT0FBekIsQ0FBMUMsRUFBaUY7QUFDaEZqekIsZUFBSyxDQUFDQyxJQUFOLEdBQWF3dEIsU0FBUyxDQUFDRyxRQUF2QjtBQUNBM2dCLGFBQUcsR0FBR3dnQixTQUFTLENBQUMzWCxPQUFWLENBQWtCelgsS0FBbEIsQ0FBeUIsSUFBekIsRUFBK0IyQyxTQUEvQixDQUFOO0FBQ0FoQixlQUFLLENBQUNDLElBQU4sR0FBYXl1QixHQUFiO0FBQ0E7O0FBQ0QsZUFBT3poQixHQUFQO0FBQ0E7QUFsQjZCLEtBQS9CO0FBb0JBLEdBMUJEO0FBNEJBekssUUFBTSxDQUFDOEgsRUFBUCxDQUFVOUwsTUFBVixDQUFrQjtBQUVqQnRCLE1BQUUsRUFBRSxVQUFVaXdCLEtBQVYsRUFBaUJyd0IsUUFBakIsRUFBMkJtRyxJQUEzQixFQUFpQ3FILEVBQWpDLEVBQXNDO0FBQ3pDLGFBQU9wTixFQUFFLENBQUUsSUFBRixFQUFRaXdCLEtBQVIsRUFBZXJ3QixRQUFmLEVBQXlCbUcsSUFBekIsRUFBK0JxSCxFQUEvQixDQUFUO0FBQ0EsS0FKZ0I7QUFLakI4aUIsT0FBRyxFQUFFLFVBQVVELEtBQVYsRUFBaUJyd0IsUUFBakIsRUFBMkJtRyxJQUEzQixFQUFpQ3FILEVBQWpDLEVBQXNDO0FBQzFDLGFBQU9wTixFQUFFLENBQUUsSUFBRixFQUFRaXdCLEtBQVIsRUFBZXJ3QixRQUFmLEVBQXlCbUcsSUFBekIsRUFBK0JxSCxFQUEvQixFQUFtQyxDQUFuQyxDQUFUO0FBQ0EsS0FQZ0I7QUFRakJ4TSxPQUFHLEVBQUUsVUFBVXF2QixLQUFWLEVBQWlCcndCLFFBQWpCLEVBQTJCd04sRUFBM0IsRUFBZ0M7QUFDcEMsVUFBSW1qQixTQUFKLEVBQWV4dEIsSUFBZjs7QUFDQSxVQUFLa3RCLEtBQUssSUFBSUEsS0FBSyxDQUFDOEIsY0FBZixJQUFpQzlCLEtBQUssQ0FBQ00sU0FBNUMsRUFBd0Q7QUFFdkQ7QUFDQUEsaUJBQVMsR0FBR04sS0FBSyxDQUFDTSxTQUFsQjtBQUNBanJCLGNBQU0sQ0FBRTJxQixLQUFLLENBQUN3QixjQUFSLENBQU4sQ0FBK0I3d0IsR0FBL0IsQ0FDQzJ2QixTQUFTLENBQUN4ckIsU0FBVixHQUNDd3JCLFNBQVMsQ0FBQ0csUUFBVixHQUFxQixHQUFyQixHQUEyQkgsU0FBUyxDQUFDeHJCLFNBRHRDLEdBRUN3ckIsU0FBUyxDQUFDRyxRQUhaLEVBSUNILFNBQVMsQ0FBQzN3QixRQUpYLEVBS0Myd0IsU0FBUyxDQUFDM1gsT0FMWDtBQU9BLGVBQU8sSUFBUDtBQUNBOztBQUNELFVBQUssT0FBT3FYLEtBQVAsS0FBaUIsUUFBdEIsRUFBaUM7QUFFaEM7QUFDQSxhQUFNbHRCLElBQU4sSUFBY2t0QixLQUFkLEVBQXNCO0FBQ3JCLGVBQUtydkIsR0FBTCxDQUFVbUMsSUFBVixFQUFnQm5ELFFBQWhCLEVBQTBCcXdCLEtBQUssQ0FBRWx0QixJQUFGLENBQS9CO0FBQ0E7O0FBQ0QsZUFBTyxJQUFQO0FBQ0E7O0FBQ0QsVUFBS25ELFFBQVEsS0FBSyxLQUFiLElBQXNCLE9BQU9BLFFBQVAsS0FBb0IsVUFBL0MsRUFBNEQ7QUFFM0Q7QUFDQXdOLFVBQUUsR0FBR3hOLFFBQUw7QUFDQUEsZ0JBQVEsR0FBR3NDLFNBQVg7QUFDQTs7QUFDRCxVQUFLa0wsRUFBRSxLQUFLLEtBQVosRUFBb0I7QUFDbkJBLFVBQUUsR0FBR3lpQixXQUFMO0FBQ0E7O0FBQ0QsYUFBTyxLQUFLM2YsSUFBTCxDQUFXLFlBQVc7QUFDNUI1SyxjQUFNLENBQUN4QyxLQUFQLENBQWE4aUIsTUFBYixDQUFxQixJQUFyQixFQUEyQnFLLEtBQTNCLEVBQWtDN2lCLEVBQWxDLEVBQXNDeE4sUUFBdEM7QUFDQSxPQUZNLENBQVA7QUFHQTtBQTNDZ0IsR0FBbEI7QUErQ0EsTUFFQztBQUNBO0FBQ0E7QUFDQW8yQixjQUFZLEdBQUcsdUJBTGhCO0FBQUEsTUFPQztBQUNBQyxVQUFRLEdBQUcsbUNBUlo7QUFBQSxNQVNDQyxZQUFZLEdBQUcsMENBVGhCLENBcHlMaUYsQ0EreUxqRjs7QUFDQSxXQUFTQyxrQkFBVCxDQUE2QngyQixJQUE3QixFQUFtQ2lsQixPQUFuQyxFQUE2QztBQUM1QyxRQUFLamEsUUFBUSxDQUFFaEwsSUFBRixFQUFRLE9BQVIsQ0FBUixJQUNKZ0wsUUFBUSxDQUFFaWEsT0FBTyxDQUFDeGMsUUFBUixLQUFxQixFQUFyQixHQUEwQndjLE9BQTFCLEdBQW9DQSxPQUFPLENBQUMzSSxVQUE5QyxFQUEwRCxJQUExRCxDQURULEVBQzRFO0FBRTNFLGFBQU8zVyxNQUFNLENBQUUzRixJQUFGLENBQU4sQ0FBZXVMLFFBQWYsQ0FBeUIsT0FBekIsRUFBb0MsQ0FBcEMsS0FBMkN2TCxJQUFsRDtBQUNBOztBQUVELFdBQU9BLElBQVA7QUFDQSxHQXh6TGdGLENBMHpMakY7OztBQUNBLFdBQVN5MkIsYUFBVCxDQUF3QnoyQixJQUF4QixFQUErQjtBQUM5QkEsUUFBSSxDQUFDb0QsSUFBTCxHQUFZLENBQUVwRCxJQUFJLENBQUM2RixZQUFMLENBQW1CLE1BQW5CLE1BQWdDLElBQWxDLElBQTJDLEdBQTNDLEdBQWlEN0YsSUFBSSxDQUFDb0QsSUFBbEU7QUFDQSxXQUFPcEQsSUFBUDtBQUNBOztBQUNELFdBQVMwMkIsYUFBVCxDQUF3QjEyQixJQUF4QixFQUErQjtBQUM5QixRQUFLLENBQUVBLElBQUksQ0FBQ29ELElBQUwsSUFBYSxFQUFmLEVBQW9COUIsS0FBcEIsQ0FBMkIsQ0FBM0IsRUFBOEIsQ0FBOUIsTUFBc0MsT0FBM0MsRUFBcUQ7QUFDcER0QixVQUFJLENBQUNvRCxJQUFMLEdBQVlwRCxJQUFJLENBQUNvRCxJQUFMLENBQVU5QixLQUFWLENBQWlCLENBQWpCLENBQVo7QUFDQSxLQUZELE1BRU87QUFDTnRCLFVBQUksQ0FBQ3NZLGVBQUwsQ0FBc0IsTUFBdEI7QUFDQTs7QUFFRCxXQUFPdFksSUFBUDtBQUNBOztBQUVELFdBQVMyMkIsY0FBVCxDQUF5QnpwQixHQUF6QixFQUE4QjBwQixJQUE5QixFQUFxQztBQUNwQyxRQUFJaDNCLENBQUosRUFBT3lrQixDQUFQLEVBQVVqaEIsSUFBVixFQUFnQnl6QixRQUFoQixFQUEwQkMsUUFBMUIsRUFBb0NDLFFBQXBDLEVBQThDdjJCLE1BQTlDOztBQUVBLFFBQUtvMkIsSUFBSSxDQUFDbnVCLFFBQUwsS0FBa0IsQ0FBdkIsRUFBMkI7QUFDMUI7QUFDQSxLQUxtQyxDQU9wQzs7O0FBQ0EsUUFBS3dpQixRQUFRLENBQUNELE9BQVQsQ0FBa0I5ZCxHQUFsQixDQUFMLEVBQStCO0FBQzlCMnBCLGNBQVEsR0FBRzVMLFFBQVEsQ0FBQy9hLEdBQVQsQ0FBY2hELEdBQWQsQ0FBWDtBQUNBMU0sWUFBTSxHQUFHcTJCLFFBQVEsQ0FBQ3IyQixNQUFsQjs7QUFFQSxVQUFLQSxNQUFMLEVBQWM7QUFDYnlxQixnQkFBUSxDQUFDaEYsTUFBVCxDQUFpQjJRLElBQWpCLEVBQXVCLGVBQXZCOztBQUVBLGFBQU14ekIsSUFBTixJQUFjNUMsTUFBZCxFQUF1QjtBQUN0QixlQUFNWixDQUFDLEdBQUcsQ0FBSixFQUFPeWtCLENBQUMsR0FBRzdqQixNQUFNLENBQUU0QyxJQUFGLENBQU4sQ0FBZXZELE1BQWhDLEVBQXdDRCxDQUFDLEdBQUd5a0IsQ0FBNUMsRUFBK0N6a0IsQ0FBQyxFQUFoRCxFQUFxRDtBQUNwRCtGLGtCQUFNLENBQUN4QyxLQUFQLENBQWFxaEIsR0FBYixDQUFrQm9TLElBQWxCLEVBQXdCeHpCLElBQXhCLEVBQThCNUMsTUFBTSxDQUFFNEMsSUFBRixDQUFOLENBQWdCeEQsQ0FBaEIsQ0FBOUI7QUFDQTtBQUNEO0FBQ0Q7QUFDRCxLQXJCbUMsQ0F1QnBDOzs7QUFDQSxRQUFLc3JCLFFBQVEsQ0FBQ0YsT0FBVCxDQUFrQjlkLEdBQWxCLENBQUwsRUFBK0I7QUFDOUI0cEIsY0FBUSxHQUFHNUwsUUFBUSxDQUFDdkIsTUFBVCxDQUFpQnpjLEdBQWpCLENBQVg7QUFDQTZwQixjQUFRLEdBQUdweEIsTUFBTSxDQUFDaEUsTUFBUCxDQUFlLEVBQWYsRUFBbUJtMUIsUUFBbkIsQ0FBWDtBQUVBNUwsY0FBUSxDQUFDSCxHQUFULENBQWM2TCxJQUFkLEVBQW9CRyxRQUFwQjtBQUNBO0FBQ0QsR0F2MkxnRixDQXkyTGpGOzs7QUFDQSxXQUFTQyxRQUFULENBQW1COXBCLEdBQW5CLEVBQXdCMHBCLElBQXhCLEVBQStCO0FBQzlCLFFBQUk1ckIsUUFBUSxHQUFHNHJCLElBQUksQ0FBQzVyQixRQUFMLENBQWNoRyxXQUFkLEVBQWYsQ0FEOEIsQ0FHOUI7O0FBQ0EsUUFBS2dHLFFBQVEsS0FBSyxPQUFiLElBQXdCNmlCLGNBQWMsQ0FBQzdWLElBQWYsQ0FBcUI5SyxHQUFHLENBQUM5SixJQUF6QixDQUE3QixFQUErRDtBQUM5RHd6QixVQUFJLENBQUM3WCxPQUFMLEdBQWU3UixHQUFHLENBQUM2UixPQUFuQixDQUQ4RCxDQUcvRDtBQUNDLEtBSkQsTUFJTyxJQUFLL1QsUUFBUSxLQUFLLE9BQWIsSUFBd0JBLFFBQVEsS0FBSyxVQUExQyxFQUF1RDtBQUM3RDRyQixVQUFJLENBQUNqVSxZQUFMLEdBQW9CelYsR0FBRyxDQUFDeVYsWUFBeEI7QUFDQTtBQUNEOztBQUVELFdBQVNzVSxRQUFULENBQW1CQyxVQUFuQixFQUErQjcxQixJQUEvQixFQUFxQ2tELFFBQXJDLEVBQStDaXJCLE9BQS9DLEVBQXlEO0FBRXhEO0FBQ0FudUIsUUFBSSxHQUFHK00sSUFBSSxDQUFFL00sSUFBRixDQUFYO0FBRUEsUUFBSTJzQixRQUFKO0FBQUEsUUFBY3ZkLEtBQWQ7QUFBQSxRQUFxQjZlLE9BQXJCO0FBQUEsUUFBOEI2SCxVQUE5QjtBQUFBLFFBQTBDL25CLElBQTFDO0FBQUEsUUFBZ0RDLEdBQWhEO0FBQUEsUUFDQ3pQLENBQUMsR0FBRyxDQURMO0FBQUEsUUFFQ3lrQixDQUFDLEdBQUc2UyxVQUFVLENBQUNyM0IsTUFGaEI7QUFBQSxRQUdDdTNCLFFBQVEsR0FBRy9TLENBQUMsR0FBRyxDQUhoQjtBQUFBLFFBSUMvZCxLQUFLLEdBQUdqRixJQUFJLENBQUUsQ0FBRixDQUpiO0FBQUEsUUFLQ2cyQixlQUFlLEdBQUd4b0IsVUFBVSxDQUFFdkksS0FBRixDQUw3QixDQUx3RCxDQVl4RDs7QUFDQSxRQUFLK3dCLGVBQWUsSUFDaEJoVCxDQUFDLEdBQUcsQ0FBSixJQUFTLE9BQU8vZCxLQUFQLEtBQWlCLFFBQTFCLElBQ0QsQ0FBQ3NJLE9BQU8sQ0FBQ3NmLFVBRFIsSUFDc0JvSSxRQUFRLENBQUN0ZSxJQUFULENBQWUxUixLQUFmLENBRjFCLEVBRXFEO0FBQ3BELGFBQU80d0IsVUFBVSxDQUFDM21CLElBQVgsQ0FBaUIsVUFBVXJQLEtBQVYsRUFBa0I7QUFDekMsWUFBSXdpQixJQUFJLEdBQUd3VCxVQUFVLENBQUN4bUIsRUFBWCxDQUFleFAsS0FBZixDQUFYOztBQUNBLFlBQUttMkIsZUFBTCxFQUF1QjtBQUN0QmgyQixjQUFJLENBQUUsQ0FBRixDQUFKLEdBQVlpRixLQUFLLENBQUM3RCxJQUFOLENBQVksSUFBWixFQUFrQnZCLEtBQWxCLEVBQXlCd2lCLElBQUksQ0FBQzRULElBQUwsRUFBekIsQ0FBWjtBQUNBOztBQUNETCxnQkFBUSxDQUFFdlQsSUFBRixFQUFRcmlCLElBQVIsRUFBY2tELFFBQWQsRUFBd0JpckIsT0FBeEIsQ0FBUjtBQUNBLE9BTk0sQ0FBUDtBQU9BOztBQUVELFFBQUtuTCxDQUFMLEVBQVM7QUFDUjJKLGNBQVEsR0FBR3FCLGFBQWEsQ0FBRWh1QixJQUFGLEVBQVE2MUIsVUFBVSxDQUFFLENBQUYsQ0FBVixDQUFnQnhmLGFBQXhCLEVBQXVDLEtBQXZDLEVBQThDd2YsVUFBOUMsRUFBMEQxSCxPQUExRCxDQUF4QjtBQUNBL2UsV0FBSyxHQUFHdWQsUUFBUSxDQUFDMVIsVUFBakI7O0FBRUEsVUFBSzBSLFFBQVEsQ0FBQy9XLFVBQVQsQ0FBb0JwWCxNQUFwQixLQUErQixDQUFwQyxFQUF3QztBQUN2Q211QixnQkFBUSxHQUFHdmQsS0FBWDtBQUNBLE9BTk8sQ0FRUjs7O0FBQ0EsVUFBS0EsS0FBSyxJQUFJK2UsT0FBZCxFQUF3QjtBQUN2QkYsZUFBTyxHQUFHM3BCLE1BQU0sQ0FBQzZLLEdBQVAsQ0FBWTBlLE1BQU0sQ0FBRWxCLFFBQUYsRUFBWSxRQUFaLENBQWxCLEVBQTBDeUksYUFBMUMsQ0FBVjtBQUNBVSxrQkFBVSxHQUFHN0gsT0FBTyxDQUFDenZCLE1BQXJCLENBRnVCLENBSXZCO0FBQ0E7QUFDQTs7QUFDQSxlQUFRRCxDQUFDLEdBQUd5a0IsQ0FBWixFQUFlemtCLENBQUMsRUFBaEIsRUFBcUI7QUFDcEJ3UCxjQUFJLEdBQUc0ZSxRQUFQOztBQUVBLGNBQUtwdUIsQ0FBQyxLQUFLdzNCLFFBQVgsRUFBc0I7QUFDckJob0IsZ0JBQUksR0FBR3pKLE1BQU0sQ0FBQzRMLEtBQVAsQ0FBY25DLElBQWQsRUFBb0IsSUFBcEIsRUFBMEIsSUFBMUIsQ0FBUCxDQURxQixDQUdyQjs7QUFDQSxnQkFBSytuQixVQUFMLEVBQWtCO0FBRWpCO0FBQ0E7QUFDQXh4QixvQkFBTSxDQUFDMEssS0FBUCxDQUFjaWYsT0FBZCxFQUF1QkosTUFBTSxDQUFFOWYsSUFBRixFQUFRLFFBQVIsQ0FBN0I7QUFDQTtBQUNEOztBQUVEN0ssa0JBQVEsQ0FBQzlCLElBQVQsQ0FBZXkwQixVQUFVLENBQUV0M0IsQ0FBRixDQUF6QixFQUFnQ3dQLElBQWhDLEVBQXNDeFAsQ0FBdEM7QUFDQTs7QUFFRCxZQUFLdTNCLFVBQUwsRUFBa0I7QUFDakI5bkIsYUFBRyxHQUFHaWdCLE9BQU8sQ0FBRUEsT0FBTyxDQUFDenZCLE1BQVIsR0FBaUIsQ0FBbkIsQ0FBUCxDQUE4QjZYLGFBQXBDLENBRGlCLENBR2pCOztBQUNBL1IsZ0JBQU0sQ0FBQzZLLEdBQVAsQ0FBWThlLE9BQVosRUFBcUJvSCxhQUFyQixFQUppQixDQU1qQjs7QUFDQSxlQUFNOTJCLENBQUMsR0FBRyxDQUFWLEVBQWFBLENBQUMsR0FBR3UzQixVQUFqQixFQUE2QnYzQixDQUFDLEVBQTlCLEVBQW1DO0FBQ2xDd1AsZ0JBQUksR0FBR2tnQixPQUFPLENBQUUxdkIsQ0FBRixDQUFkOztBQUNBLGdCQUFLbXVCLFdBQVcsQ0FBQy9WLElBQVosQ0FBa0I1SSxJQUFJLENBQUNoTSxJQUFMLElBQWEsRUFBL0IsS0FDSixDQUFDNm5CLFFBQVEsQ0FBQ3RCLE1BQVQsQ0FBaUJ2YSxJQUFqQixFQUF1QixZQUF2QixDQURHLElBRUp6SixNQUFNLENBQUNrTyxRQUFQLENBQWlCeEUsR0FBakIsRUFBc0JELElBQXRCLENBRkQsRUFFZ0M7QUFFL0Isa0JBQUtBLElBQUksQ0FBQ2xDLEdBQUwsSUFBWSxDQUFFa0MsSUFBSSxDQUFDaE0sSUFBTCxJQUFhLEVBQWYsRUFBb0I0QixXQUFwQixPQUF1QyxRQUF4RCxFQUFtRTtBQUVsRTtBQUNBLG9CQUFLVyxNQUFNLENBQUM0eEIsUUFBUCxJQUFtQixDQUFDbm9CLElBQUksQ0FBQ0gsUUFBOUIsRUFBeUM7QUFDeEN0Six3QkFBTSxDQUFDNHhCLFFBQVAsQ0FBaUJub0IsSUFBSSxDQUFDbEMsR0FBdEIsRUFBMkI7QUFDMUI4Qix5QkFBSyxFQUFFSSxJQUFJLENBQUNKLEtBQUwsSUFBY0ksSUFBSSxDQUFDdkosWUFBTCxDQUFtQixPQUFuQjtBQURLLG1CQUEzQixFQUVHd0osR0FGSDtBQUdBO0FBQ0QsZUFSRCxNQVFPO0FBQ05ILHVCQUFPLENBQUVFLElBQUksQ0FBQ2lOLFdBQUwsQ0FBaUJ6WCxPQUFqQixDQUEwQjJ4QixZQUExQixFQUF3QyxFQUF4QyxDQUFGLEVBQWdEbm5CLElBQWhELEVBQXNEQyxHQUF0RCxDQUFQO0FBQ0E7QUFDRDtBQUNEO0FBQ0Q7QUFDRDtBQUNEOztBQUVELFdBQU82bkIsVUFBUDtBQUNBOztBQUVELFdBQVNqUixNQUFULENBQWlCam1CLElBQWpCLEVBQXVCQyxRQUF2QixFQUFpQ3UzQixRQUFqQyxFQUE0QztBQUMzQyxRQUFJcG9CLElBQUo7QUFBQSxRQUNDdWdCLEtBQUssR0FBRzF2QixRQUFRLEdBQUcwRixNQUFNLENBQUM2VSxNQUFQLENBQWV2YSxRQUFmLEVBQXlCRCxJQUF6QixDQUFILEdBQXFDQSxJQUR0RDtBQUFBLFFBRUNKLENBQUMsR0FBRyxDQUZMOztBQUlBLFdBQVEsQ0FBRXdQLElBQUksR0FBR3VnQixLQUFLLENBQUUvdkIsQ0FBRixDQUFkLEtBQXlCLElBQWpDLEVBQXVDQSxDQUFDLEVBQXhDLEVBQTZDO0FBQzVDLFVBQUssQ0FBQzQzQixRQUFELElBQWFwb0IsSUFBSSxDQUFDM0csUUFBTCxLQUFrQixDQUFwQyxFQUF3QztBQUN2QzlDLGNBQU0sQ0FBQzh4QixTQUFQLENBQWtCdkksTUFBTSxDQUFFOWYsSUFBRixDQUF4QjtBQUNBOztBQUVELFVBQUtBLElBQUksQ0FBQ3ZNLFVBQVYsRUFBdUI7QUFDdEIsWUFBSzIwQixRQUFRLElBQUlsTCxVQUFVLENBQUVsZCxJQUFGLENBQTNCLEVBQXNDO0FBQ3JDK2YsdUJBQWEsQ0FBRUQsTUFBTSxDQUFFOWYsSUFBRixFQUFRLFFBQVIsQ0FBUixDQUFiO0FBQ0E7O0FBQ0RBLFlBQUksQ0FBQ3ZNLFVBQUwsQ0FBZ0IyRixXQUFoQixDQUE2QjRHLElBQTdCO0FBQ0E7QUFDRDs7QUFFRCxXQUFPcFAsSUFBUDtBQUNBOztBQUVEMkYsUUFBTSxDQUFDaEUsTUFBUCxDQUFlO0FBQ2RrdUIsaUJBQWEsRUFBRSxVQUFVeUgsSUFBVixFQUFpQjtBQUMvQixhQUFPQSxJQUFQO0FBQ0EsS0FIYTtBQUtkL2xCLFNBQUssRUFBRSxVQUFVdlIsSUFBVixFQUFnQjAzQixhQUFoQixFQUErQkMsaUJBQS9CLEVBQW1EO0FBQ3pELFVBQUkvM0IsQ0FBSjtBQUFBLFVBQU95a0IsQ0FBUDtBQUFBLFVBQVV1VCxXQUFWO0FBQUEsVUFBdUJDLFlBQXZCO0FBQUEsVUFDQ3RtQixLQUFLLEdBQUd2UixJQUFJLENBQUNtdUIsU0FBTCxDQUFnQixJQUFoQixDQURUO0FBQUEsVUFFQzJKLE1BQU0sR0FBR3hMLFVBQVUsQ0FBRXRzQixJQUFGLENBRnBCLENBRHlELENBS3pEOztBQUNBLFVBQUssQ0FBQzRPLE9BQU8sQ0FBQ3dmLGNBQVQsS0FBNkJwdUIsSUFBSSxDQUFDeUksUUFBTCxLQUFrQixDQUFsQixJQUF1QnpJLElBQUksQ0FBQ3lJLFFBQUwsS0FBa0IsRUFBdEUsS0FDSCxDQUFDOUMsTUFBTSxDQUFDa2QsUUFBUCxDQUFpQjdpQixJQUFqQixDQURILEVBQzZCO0FBRTVCO0FBQ0E2M0Isb0JBQVksR0FBRzNJLE1BQU0sQ0FBRTNkLEtBQUYsQ0FBckI7QUFDQXFtQixtQkFBVyxHQUFHMUksTUFBTSxDQUFFbHZCLElBQUYsQ0FBcEI7O0FBRUEsYUFBTUosQ0FBQyxHQUFHLENBQUosRUFBT3lrQixDQUFDLEdBQUd1VCxXQUFXLENBQUMvM0IsTUFBN0IsRUFBcUNELENBQUMsR0FBR3lrQixDQUF6QyxFQUE0Q3prQixDQUFDLEVBQTdDLEVBQWtEO0FBQ2pEbzNCLGtCQUFRLENBQUVZLFdBQVcsQ0FBRWg0QixDQUFGLENBQWIsRUFBb0JpNEIsWUFBWSxDQUFFajRCLENBQUYsQ0FBaEMsQ0FBUjtBQUNBO0FBQ0QsT0FoQndELENBa0J6RDs7O0FBQ0EsVUFBSzgzQixhQUFMLEVBQXFCO0FBQ3BCLFlBQUtDLGlCQUFMLEVBQXlCO0FBQ3hCQyxxQkFBVyxHQUFHQSxXQUFXLElBQUkxSSxNQUFNLENBQUVsdkIsSUFBRixDQUFuQztBQUNBNjNCLHNCQUFZLEdBQUdBLFlBQVksSUFBSTNJLE1BQU0sQ0FBRTNkLEtBQUYsQ0FBckM7O0FBRUEsZUFBTTNSLENBQUMsR0FBRyxDQUFKLEVBQU95a0IsQ0FBQyxHQUFHdVQsV0FBVyxDQUFDLzNCLE1BQTdCLEVBQXFDRCxDQUFDLEdBQUd5a0IsQ0FBekMsRUFBNEN6a0IsQ0FBQyxFQUE3QyxFQUFrRDtBQUNqRCsyQiwwQkFBYyxDQUFFaUIsV0FBVyxDQUFFaDRCLENBQUYsQ0FBYixFQUFvQmk0QixZQUFZLENBQUVqNEIsQ0FBRixDQUFoQyxDQUFkO0FBQ0E7QUFDRCxTQVBELE1BT087QUFDTisyQix3QkFBYyxDQUFFMzJCLElBQUYsRUFBUXVSLEtBQVIsQ0FBZDtBQUNBO0FBQ0QsT0E5QndELENBZ0N6RDs7O0FBQ0FzbUIsa0JBQVksR0FBRzNJLE1BQU0sQ0FBRTNkLEtBQUYsRUFBUyxRQUFULENBQXJCOztBQUNBLFVBQUtzbUIsWUFBWSxDQUFDaDRCLE1BQWIsR0FBc0IsQ0FBM0IsRUFBK0I7QUFDOUJzdkIscUJBQWEsQ0FBRTBJLFlBQUYsRUFBZ0IsQ0FBQ0MsTUFBRCxJQUFXNUksTUFBTSxDQUFFbHZCLElBQUYsRUFBUSxRQUFSLENBQWpDLENBQWI7QUFDQSxPQXBDd0QsQ0FzQ3pEOzs7QUFDQSxhQUFPdVIsS0FBUDtBQUNBLEtBN0NhO0FBK0Nka21CLGFBQVMsRUFBRSxVQUFVbjBCLEtBQVYsRUFBa0I7QUFDNUIsVUFBSThDLElBQUo7QUFBQSxVQUFVcEcsSUFBVjtBQUFBLFVBQWdCb0QsSUFBaEI7QUFBQSxVQUNDMGtCLE9BQU8sR0FBR25pQixNQUFNLENBQUN4QyxLQUFQLENBQWEya0IsT0FEeEI7QUFBQSxVQUVDbG9CLENBQUMsR0FBRyxDQUZMOztBQUlBLGFBQVEsQ0FBRUksSUFBSSxHQUFHc0QsS0FBSyxDQUFFMUQsQ0FBRixDQUFkLE1BQTBCMkMsU0FBbEMsRUFBNkMzQyxDQUFDLEVBQTlDLEVBQW1EO0FBQ2xELFlBQUs2cUIsVUFBVSxDQUFFenFCLElBQUYsQ0FBZixFQUEwQjtBQUN6QixjQUFPb0csSUFBSSxHQUFHcEcsSUFBSSxDQUFFaXJCLFFBQVEsQ0FBQ3RaLE9BQVgsQ0FBbEIsRUFBMkM7QUFDMUMsZ0JBQUt2TCxJQUFJLENBQUM1RixNQUFWLEVBQW1CO0FBQ2xCLG1CQUFNNEMsSUFBTixJQUFjZ0QsSUFBSSxDQUFDNUYsTUFBbkIsRUFBNEI7QUFDM0Isb0JBQUtzbkIsT0FBTyxDQUFFMWtCLElBQUYsQ0FBWixFQUF1QjtBQUN0QnVDLHdCQUFNLENBQUN4QyxLQUFQLENBQWE4aUIsTUFBYixDQUFxQmptQixJQUFyQixFQUEyQm9ELElBQTNCLEVBRHNCLENBR3ZCO0FBQ0MsaUJBSkQsTUFJTztBQUNOdUMsd0JBQU0sQ0FBQytyQixXQUFQLENBQW9CMXhCLElBQXBCLEVBQTBCb0QsSUFBMUIsRUFBZ0NnRCxJQUFJLENBQUM2cUIsTUFBckM7QUFDQTtBQUNEO0FBQ0QsYUFYeUMsQ0FhMUM7QUFDQTs7O0FBQ0FqeEIsZ0JBQUksQ0FBRWlyQixRQUFRLENBQUN0WixPQUFYLENBQUosR0FBMkJwUCxTQUEzQjtBQUNBOztBQUNELGNBQUt2QyxJQUFJLENBQUVrckIsUUFBUSxDQUFDdlosT0FBWCxDQUFULEVBQWdDO0FBRS9CO0FBQ0E7QUFDQTNSLGdCQUFJLENBQUVrckIsUUFBUSxDQUFDdlosT0FBWCxDQUFKLEdBQTJCcFAsU0FBM0I7QUFDQTtBQUNEO0FBQ0Q7QUFDRDtBQS9FYSxHQUFmO0FBa0ZBb0QsUUFBTSxDQUFDOEgsRUFBUCxDQUFVOUwsTUFBVixDQUFrQjtBQUNqQm8yQixVQUFNLEVBQUUsVUFBVTkzQixRQUFWLEVBQXFCO0FBQzVCLGFBQU9nbUIsTUFBTSxDQUFFLElBQUYsRUFBUWhtQixRQUFSLEVBQWtCLElBQWxCLENBQWI7QUFDQSxLQUhnQjtBQUtqQmdtQixVQUFNLEVBQUUsVUFBVWhtQixRQUFWLEVBQXFCO0FBQzVCLGFBQU9nbUIsTUFBTSxDQUFFLElBQUYsRUFBUWhtQixRQUFSLENBQWI7QUFDQSxLQVBnQjtBQVNqQnVQLFFBQUksRUFBRSxVQUFVbEosS0FBVixFQUFrQjtBQUN2QixhQUFPcWpCLE1BQU0sQ0FBRSxJQUFGLEVBQVEsVUFBVXJqQixLQUFWLEVBQWtCO0FBQ3RDLGVBQU9BLEtBQUssS0FBSy9ELFNBQVYsR0FDTm9ELE1BQU0sQ0FBQzZKLElBQVAsQ0FBYSxJQUFiLENBRE0sR0FFTixLQUFLMFcsS0FBTCxHQUFhM1YsSUFBYixDQUFtQixZQUFXO0FBQzdCLGNBQUssS0FBSzlILFFBQUwsS0FBa0IsQ0FBbEIsSUFBdUIsS0FBS0EsUUFBTCxLQUFrQixFQUF6QyxJQUErQyxLQUFLQSxRQUFMLEtBQWtCLENBQXRFLEVBQTBFO0FBQ3pFLGlCQUFLNFQsV0FBTCxHQUFtQi9WLEtBQW5CO0FBQ0E7QUFDRCxTQUpELENBRkQ7QUFPQSxPQVJZLEVBUVYsSUFSVSxFQVFKQSxLQVJJLEVBUUduQyxTQUFTLENBQUN0RSxNQVJiLENBQWI7QUFTQSxLQW5CZ0I7QUFxQmpCbTRCLFVBQU0sRUFBRSxZQUFXO0FBQ2xCLGFBQU9mLFFBQVEsQ0FBRSxJQUFGLEVBQVE5eUIsU0FBUixFQUFtQixVQUFVbkUsSUFBVixFQUFpQjtBQUNsRCxZQUFLLEtBQUt5SSxRQUFMLEtBQWtCLENBQWxCLElBQXVCLEtBQUtBLFFBQUwsS0FBa0IsRUFBekMsSUFBK0MsS0FBS0EsUUFBTCxLQUFrQixDQUF0RSxFQUEwRTtBQUN6RSxjQUFJK0ksTUFBTSxHQUFHZ2xCLGtCQUFrQixDQUFFLElBQUYsRUFBUXgyQixJQUFSLENBQS9CO0FBQ0F3UixnQkFBTSxDQUFDcEosV0FBUCxDQUFvQnBJLElBQXBCO0FBQ0E7QUFDRCxPQUxjLENBQWY7QUFNQSxLQTVCZ0I7QUE4QmpCaTRCLFdBQU8sRUFBRSxZQUFXO0FBQ25CLGFBQU9oQixRQUFRLENBQUUsSUFBRixFQUFROXlCLFNBQVIsRUFBbUIsVUFBVW5FLElBQVYsRUFBaUI7QUFDbEQsWUFBSyxLQUFLeUksUUFBTCxLQUFrQixDQUFsQixJQUF1QixLQUFLQSxRQUFMLEtBQWtCLEVBQXpDLElBQStDLEtBQUtBLFFBQUwsS0FBa0IsQ0FBdEUsRUFBMEU7QUFDekUsY0FBSStJLE1BQU0sR0FBR2dsQixrQkFBa0IsQ0FBRSxJQUFGLEVBQVF4MkIsSUFBUixDQUEvQjtBQUNBd1IsZ0JBQU0sQ0FBQzBtQixZQUFQLENBQXFCbDRCLElBQXJCLEVBQTJCd1IsTUFBTSxDQUFDOEssVUFBbEM7QUFDQTtBQUNELE9BTGMsQ0FBZjtBQU1BLEtBckNnQjtBQXVDakI2YixVQUFNLEVBQUUsWUFBVztBQUNsQixhQUFPbEIsUUFBUSxDQUFFLElBQUYsRUFBUTl5QixTQUFSLEVBQW1CLFVBQVVuRSxJQUFWLEVBQWlCO0FBQ2xELFlBQUssS0FBSzZDLFVBQVYsRUFBdUI7QUFDdEIsZUFBS0EsVUFBTCxDQUFnQnExQixZQUFoQixDQUE4Qmw0QixJQUE5QixFQUFvQyxJQUFwQztBQUNBO0FBQ0QsT0FKYyxDQUFmO0FBS0EsS0E3Q2dCO0FBK0NqQm80QixTQUFLLEVBQUUsWUFBVztBQUNqQixhQUFPbkIsUUFBUSxDQUFFLElBQUYsRUFBUTl5QixTQUFSLEVBQW1CLFVBQVVuRSxJQUFWLEVBQWlCO0FBQ2xELFlBQUssS0FBSzZDLFVBQVYsRUFBdUI7QUFDdEIsZUFBS0EsVUFBTCxDQUFnQnExQixZQUFoQixDQUE4Qmw0QixJQUE5QixFQUFvQyxLQUFLdVosV0FBekM7QUFDQTtBQUNELE9BSmMsQ0FBZjtBQUtBLEtBckRnQjtBQXVEakIyTSxTQUFLLEVBQUUsWUFBVztBQUNqQixVQUFJbG1CLElBQUo7QUFBQSxVQUNDSixDQUFDLEdBQUcsQ0FETDs7QUFHQSxhQUFRLENBQUVJLElBQUksR0FBRyxLQUFNSixDQUFOLENBQVQsS0FBd0IsSUFBaEMsRUFBc0NBLENBQUMsRUFBdkMsRUFBNEM7QUFDM0MsWUFBS0ksSUFBSSxDQUFDeUksUUFBTCxLQUFrQixDQUF2QixFQUEyQjtBQUUxQjtBQUNBOUMsZ0JBQU0sQ0FBQzh4QixTQUFQLENBQWtCdkksTUFBTSxDQUFFbHZCLElBQUYsRUFBUSxLQUFSLENBQXhCLEVBSDBCLENBSzFCOztBQUNBQSxjQUFJLENBQUNxYyxXQUFMLEdBQW1CLEVBQW5CO0FBQ0E7QUFDRDs7QUFFRCxhQUFPLElBQVA7QUFDQSxLQXZFZ0I7QUF5RWpCOUssU0FBSyxFQUFFLFVBQVVtbUIsYUFBVixFQUF5QkMsaUJBQXpCLEVBQTZDO0FBQ25ERCxtQkFBYSxHQUFHQSxhQUFhLElBQUksSUFBakIsR0FBd0IsS0FBeEIsR0FBZ0NBLGFBQWhEO0FBQ0FDLHVCQUFpQixHQUFHQSxpQkFBaUIsSUFBSSxJQUFyQixHQUE0QkQsYUFBNUIsR0FBNENDLGlCQUFoRTtBQUVBLGFBQU8sS0FBS25uQixHQUFMLENBQVUsWUFBVztBQUMzQixlQUFPN0ssTUFBTSxDQUFDNEwsS0FBUCxDQUFjLElBQWQsRUFBb0JtbUIsYUFBcEIsRUFBbUNDLGlCQUFuQyxDQUFQO0FBQ0EsT0FGTSxDQUFQO0FBR0EsS0FoRmdCO0FBa0ZqQkwsUUFBSSxFQUFFLFVBQVVoeEIsS0FBVixFQUFrQjtBQUN2QixhQUFPcWpCLE1BQU0sQ0FBRSxJQUFGLEVBQVEsVUFBVXJqQixLQUFWLEVBQWtCO0FBQ3RDLFlBQUl0RyxJQUFJLEdBQUcsS0FBTSxDQUFOLEtBQWEsRUFBeEI7QUFBQSxZQUNDSixDQUFDLEdBQUcsQ0FETDtBQUFBLFlBRUN5a0IsQ0FBQyxHQUFHLEtBQUt4a0IsTUFGVjs7QUFJQSxZQUFLeUcsS0FBSyxLQUFLL0QsU0FBVixJQUF1QnZDLElBQUksQ0FBQ3lJLFFBQUwsS0FBa0IsQ0FBOUMsRUFBa0Q7QUFDakQsaUJBQU96SSxJQUFJLENBQUMrYSxTQUFaO0FBQ0EsU0FQcUMsQ0FTdEM7OztBQUNBLFlBQUssT0FBT3pVLEtBQVAsS0FBaUIsUUFBakIsSUFBNkIsQ0FBQyt2QixZQUFZLENBQUNyZSxJQUFiLENBQW1CMVIsS0FBbkIsQ0FBOUIsSUFDSixDQUFDZ29CLE9BQU8sQ0FBRSxDQUFFUixRQUFRLENBQUNwaUIsSUFBVCxDQUFlcEYsS0FBZixLQUEwQixDQUFFLEVBQUYsRUFBTSxFQUFOLENBQTVCLEVBQTBDLENBQTFDLEVBQThDdEIsV0FBOUMsRUFBRixDQURULEVBQzJFO0FBRTFFc0IsZUFBSyxHQUFHWCxNQUFNLENBQUNrcUIsYUFBUCxDQUFzQnZwQixLQUF0QixDQUFSOztBQUVBLGNBQUk7QUFDSCxtQkFBUTFHLENBQUMsR0FBR3lrQixDQUFaLEVBQWV6a0IsQ0FBQyxFQUFoQixFQUFxQjtBQUNwQkksa0JBQUksR0FBRyxLQUFNSixDQUFOLEtBQWEsRUFBcEIsQ0FEb0IsQ0FHcEI7O0FBQ0Esa0JBQUtJLElBQUksQ0FBQ3lJLFFBQUwsS0FBa0IsQ0FBdkIsRUFBMkI7QUFDMUI5QyxzQkFBTSxDQUFDOHhCLFNBQVAsQ0FBa0J2SSxNQUFNLENBQUVsdkIsSUFBRixFQUFRLEtBQVIsQ0FBeEI7QUFDQUEsb0JBQUksQ0FBQythLFNBQUwsR0FBaUJ6VSxLQUFqQjtBQUNBO0FBQ0Q7O0FBRUR0RyxnQkFBSSxHQUFHLENBQVAsQ0FYRyxDQWFKO0FBQ0MsV0FkRCxDQWNFLE9BQVFrWCxDQUFSLEVBQVksQ0FBRTtBQUNoQjs7QUFFRCxZQUFLbFgsSUFBTCxFQUFZO0FBQ1gsZUFBS2ttQixLQUFMLEdBQWE4UixNQUFiLENBQXFCMXhCLEtBQXJCO0FBQ0E7QUFDRCxPQW5DWSxFQW1DVixJQW5DVSxFQW1DSkEsS0FuQ0ksRUFtQ0duQyxTQUFTLENBQUN0RSxNQW5DYixDQUFiO0FBb0NBLEtBdkhnQjtBQXlIakJ3NEIsZUFBVyxFQUFFLFlBQVc7QUFDdkIsVUFBSTdJLE9BQU8sR0FBRyxFQUFkLENBRHVCLENBR3ZCOztBQUNBLGFBQU95SCxRQUFRLENBQUUsSUFBRixFQUFROXlCLFNBQVIsRUFBbUIsVUFBVW5FLElBQVYsRUFBaUI7QUFDbEQsWUFBSTZkLE1BQU0sR0FBRyxLQUFLaGIsVUFBbEI7O0FBRUEsWUFBSzhDLE1BQU0sQ0FBQ3dNLE9BQVAsQ0FBZ0IsSUFBaEIsRUFBc0JxZCxPQUF0QixJQUFrQyxDQUF2QyxFQUEyQztBQUMxQzdwQixnQkFBTSxDQUFDOHhCLFNBQVAsQ0FBa0J2SSxNQUFNLENBQUUsSUFBRixDQUF4Qjs7QUFDQSxjQUFLclIsTUFBTCxFQUFjO0FBQ2JBLGtCQUFNLENBQUN5YSxZQUFQLENBQXFCdDRCLElBQXJCLEVBQTJCLElBQTNCO0FBQ0E7QUFDRCxTQVJpRCxDQVVuRDs7QUFDQyxPQVhjLEVBV1p3dkIsT0FYWSxDQUFmO0FBWUE7QUF6SWdCLEdBQWxCO0FBNElBN3BCLFFBQU0sQ0FBQzRLLElBQVAsQ0FBYTtBQUNaZ29CLFlBQVEsRUFBRSxRQURFO0FBRVpDLGFBQVMsRUFBRSxTQUZDO0FBR1pOLGdCQUFZLEVBQUUsUUFIRjtBQUlaTyxlQUFXLEVBQUUsT0FKRDtBQUtaQyxjQUFVLEVBQUU7QUFMQSxHQUFiLEVBTUcsVUFBVXRuQixJQUFWLEVBQWdCdW5CLFFBQWhCLEVBQTJCO0FBQzdCaHpCLFVBQU0sQ0FBQzhILEVBQVAsQ0FBVzJELElBQVgsSUFBb0IsVUFBVW5SLFFBQVYsRUFBcUI7QUFDeEMsVUFBSXFELEtBQUo7QUFBQSxVQUNDOE0sR0FBRyxHQUFHLEVBRFA7QUFBQSxVQUVDd29CLE1BQU0sR0FBR2p6QixNQUFNLENBQUUxRixRQUFGLENBRmhCO0FBQUEsVUFHQzBRLElBQUksR0FBR2lvQixNQUFNLENBQUMvNEIsTUFBUCxHQUFnQixDQUh4QjtBQUFBLFVBSUNELENBQUMsR0FBRyxDQUpMOztBQU1BLGFBQVFBLENBQUMsSUFBSStRLElBQWIsRUFBbUIvUSxDQUFDLEVBQXBCLEVBQXlCO0FBQ3hCMEQsYUFBSyxHQUFHMUQsQ0FBQyxLQUFLK1EsSUFBTixHQUFhLElBQWIsR0FBb0IsS0FBS1ksS0FBTCxDQUFZLElBQVosQ0FBNUI7QUFDQTVMLGNBQU0sQ0FBRWl6QixNQUFNLENBQUVoNUIsQ0FBRixDQUFSLENBQU4sQ0FBdUIrNEIsUUFBdkIsRUFBbUNyMUIsS0FBbkMsRUFGd0IsQ0FJeEI7QUFDQTs7QUFDQTFDLFlBQUksQ0FBQ1ksS0FBTCxDQUFZNE8sR0FBWixFQUFpQjlNLEtBQUssQ0FBQzRNLEdBQU4sRUFBakI7QUFDQTs7QUFFRCxhQUFPLEtBQUtDLFNBQUwsQ0FBZ0JDLEdBQWhCLENBQVA7QUFDQSxLQWpCRDtBQWtCQSxHQXpCRDtBQTBCQSxNQUFJeW9CLFNBQVMsR0FBRyxJQUFJNWpCLE1BQUosQ0FBWSxPQUFPaVgsSUFBUCxHQUFjLGlCQUExQixFQUE2QyxHQUE3QyxDQUFoQjs7QUFFQSxNQUFJNE0sU0FBUyxHQUFHLFVBQVU5NEIsSUFBVixFQUFpQjtBQUUvQjtBQUNBO0FBQ0E7QUFDQSxRQUFJNjBCLElBQUksR0FBRzcwQixJQUFJLENBQUMwWCxhQUFMLENBQW1Cd0MsV0FBOUI7O0FBRUEsUUFBSyxDQUFDMmEsSUFBRCxJQUFTLENBQUNBLElBQUksQ0FBQ2tFLE1BQXBCLEVBQTZCO0FBQzVCbEUsVUFBSSxHQUFHMzFCLE1BQVA7QUFDQTs7QUFFRCxXQUFPMjFCLElBQUksQ0FBQ250QixnQkFBTCxDQUF1QjFILElBQXZCLENBQVA7QUFDQSxHQVpGOztBQWNBLE1BQUlnNUIsSUFBSSxHQUFHLFVBQVVoNUIsSUFBVixFQUFnQjhGLE9BQWhCLEVBQXlCdkIsUUFBekIsRUFBb0M7QUFDOUMsUUFBSTZMLEdBQUo7QUFBQSxRQUFTZ0IsSUFBVDtBQUFBLFFBQ0M2bkIsR0FBRyxHQUFHLEVBRFAsQ0FEOEMsQ0FJOUM7O0FBQ0EsU0FBTTduQixJQUFOLElBQWN0TCxPQUFkLEVBQXdCO0FBQ3ZCbXpCLFNBQUcsQ0FBRTduQixJQUFGLENBQUgsR0FBY3BSLElBQUksQ0FBQ3lILEtBQUwsQ0FBWTJKLElBQVosQ0FBZDtBQUNBcFIsVUFBSSxDQUFDeUgsS0FBTCxDQUFZMkosSUFBWixJQUFxQnRMLE9BQU8sQ0FBRXNMLElBQUYsQ0FBNUI7QUFDQTs7QUFFRGhCLE9BQUcsR0FBRzdMLFFBQVEsQ0FBQzlCLElBQVQsQ0FBZXpDLElBQWYsQ0FBTixDQVY4QyxDQVk5Qzs7QUFDQSxTQUFNb1IsSUFBTixJQUFjdEwsT0FBZCxFQUF3QjtBQUN2QjlGLFVBQUksQ0FBQ3lILEtBQUwsQ0FBWTJKLElBQVosSUFBcUI2bkIsR0FBRyxDQUFFN25CLElBQUYsQ0FBeEI7QUFDQTs7QUFFRCxXQUFPaEIsR0FBUDtBQUNBLEdBbEJEOztBQXFCQSxNQUFJOG9CLFNBQVMsR0FBRyxJQUFJamtCLE1BQUosQ0FBWW9YLFNBQVMsQ0FBQ2pVLElBQVYsQ0FBZ0IsR0FBaEIsQ0FBWixFQUFtQyxHQUFuQyxDQUFoQjs7QUFJQSxHQUFFLFlBQVc7QUFFWjtBQUNBO0FBQ0EsYUFBUytnQixpQkFBVCxHQUE2QjtBQUU1QjtBQUNBLFVBQUssQ0FBQ2wzQixHQUFOLEVBQVk7QUFDWDtBQUNBOztBQUVEbTNCLGVBQVMsQ0FBQzN4QixLQUFWLENBQWdCNHhCLE9BQWhCLEdBQTBCLGdEQUN6QixtQ0FERDtBQUVBcDNCLFNBQUcsQ0FBQ3dGLEtBQUosQ0FBVTR4QixPQUFWLEdBQ0MsMkVBQ0EscUNBREEsR0FFQSxrQkFIRDtBQUlBbHhCLHFCQUFlLENBQUNDLFdBQWhCLENBQTZCZ3hCLFNBQTdCLEVBQXlDaHhCLFdBQXpDLENBQXNEbkcsR0FBdEQ7QUFFQSxVQUFJcTNCLFFBQVEsR0FBR3A2QixNQUFNLENBQUN3SSxnQkFBUCxDQUF5QnpGLEdBQXpCLENBQWY7QUFDQXMzQixzQkFBZ0IsR0FBR0QsUUFBUSxDQUFDbmYsR0FBVCxLQUFpQixJQUFwQyxDQWhCNEIsQ0FrQjVCOztBQUNBcWYsMkJBQXFCLEdBQUdDLGtCQUFrQixDQUFFSCxRQUFRLENBQUNqd0IsVUFBWCxDQUFsQixLQUE4QyxFQUF0RSxDQW5CNEIsQ0FxQjVCO0FBQ0E7O0FBQ0FwSCxTQUFHLENBQUN3RixLQUFKLENBQVVpeUIsS0FBVixHQUFrQixLQUFsQjtBQUNBQyx1QkFBaUIsR0FBR0Ysa0JBQWtCLENBQUVILFFBQVEsQ0FBQ0ksS0FBWCxDQUFsQixLQUF5QyxFQUE3RCxDQXhCNEIsQ0EwQjVCO0FBQ0E7O0FBQ0FFLDBCQUFvQixHQUFHSCxrQkFBa0IsQ0FBRUgsUUFBUSxDQUFDcnlCLEtBQVgsQ0FBbEIsS0FBeUMsRUFBaEUsQ0E1QjRCLENBOEI1QjtBQUNBO0FBQ0E7QUFDQTs7QUFDQWhGLFNBQUcsQ0FBQ3dGLEtBQUosQ0FBVW95QixRQUFWLEdBQXFCLFVBQXJCO0FBQ0FDLHNCQUFnQixHQUFHTCxrQkFBa0IsQ0FBRXgzQixHQUFHLENBQUMwRyxXQUFKLEdBQWtCLENBQXBCLENBQWxCLEtBQThDLEVBQWpFO0FBRUFSLHFCQUFlLENBQUNLLFdBQWhCLENBQTZCNHdCLFNBQTdCLEVBckM0QixDQXVDNUI7QUFDQTs7QUFDQW4zQixTQUFHLEdBQUcsSUFBTjtBQUNBOztBQUVELGFBQVN3M0Isa0JBQVQsQ0FBNkJNLE9BQTdCLEVBQXVDO0FBQ3RDLGFBQU8xeEIsSUFBSSxDQUFDQyxLQUFMLENBQVkvQixVQUFVLENBQUV3ekIsT0FBRixDQUF0QixDQUFQO0FBQ0E7O0FBRUQsUUFBSVIsZ0JBQUo7QUFBQSxRQUFzQkssb0JBQXRCO0FBQUEsUUFBNENFLGdCQUE1QztBQUFBLFFBQThESCxpQkFBOUQ7QUFBQSxRQUNDSyx1QkFERDtBQUFBLFFBQzBCUixxQkFEMUI7QUFBQSxRQUVDSixTQUFTLEdBQUd0MkIsUUFBUSxDQUFDZ0YsYUFBVCxDQUF3QixLQUF4QixDQUZiO0FBQUEsUUFHQzdGLEdBQUcsR0FBR2EsUUFBUSxDQUFDZ0YsYUFBVCxDQUF3QixLQUF4QixDQUhQLENBcERZLENBeURaOztBQUNBLFFBQUssQ0FBQzdGLEdBQUcsQ0FBQ3dGLEtBQVYsRUFBa0I7QUFDakI7QUFDQSxLQTVEVyxDQThEWjtBQUNBOzs7QUFDQXhGLE9BQUcsQ0FBQ3dGLEtBQUosQ0FBVXd5QixjQUFWLEdBQTJCLGFBQTNCO0FBQ0FoNEIsT0FBRyxDQUFDa3NCLFNBQUosQ0FBZSxJQUFmLEVBQXNCMW1CLEtBQXRCLENBQTRCd3lCLGNBQTVCLEdBQTZDLEVBQTdDO0FBQ0FyckIsV0FBTyxDQUFDc3JCLGVBQVIsR0FBMEJqNEIsR0FBRyxDQUFDd0YsS0FBSixDQUFVd3lCLGNBQVYsS0FBNkIsYUFBdkQ7QUFFQXQwQixVQUFNLENBQUNoRSxNQUFQLENBQWVpTixPQUFmLEVBQXdCO0FBQ3ZCdXJCLHVCQUFpQixFQUFFLFlBQVc7QUFDN0JoQix5QkFBaUI7QUFDakIsZUFBT1Msb0JBQVA7QUFDQSxPQUpzQjtBQUt2QlEsb0JBQWMsRUFBRSxZQUFXO0FBQzFCakIseUJBQWlCO0FBQ2pCLGVBQU9RLGlCQUFQO0FBQ0EsT0FSc0I7QUFTdkJVLG1CQUFhLEVBQUUsWUFBVztBQUN6QmxCLHlCQUFpQjtBQUNqQixlQUFPSSxnQkFBUDtBQUNBLE9BWnNCO0FBYXZCZSx3QkFBa0IsRUFBRSxZQUFXO0FBQzlCbkIseUJBQWlCO0FBQ2pCLGVBQU9LLHFCQUFQO0FBQ0EsT0FoQnNCO0FBaUJ2QmUsbUJBQWEsRUFBRSxZQUFXO0FBQ3pCcEIseUJBQWlCO0FBQ2pCLGVBQU9XLGdCQUFQO0FBQ0EsT0FwQnNCO0FBc0J2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FVLDBCQUFvQixFQUFFLFlBQVc7QUFDaEMsWUFBSUMsS0FBSixFQUFXaE0sRUFBWCxFQUFlaU0sT0FBZixFQUF3QkMsT0FBeEI7O0FBQ0EsWUFBS1gsdUJBQXVCLElBQUksSUFBaEMsRUFBdUM7QUFDdENTLGVBQUssR0FBRzMzQixRQUFRLENBQUNnRixhQUFULENBQXdCLE9BQXhCLENBQVI7QUFDQTJtQixZQUFFLEdBQUczckIsUUFBUSxDQUFDZ0YsYUFBVCxDQUF3QixJQUF4QixDQUFMO0FBQ0E0eUIsaUJBQU8sR0FBRzUzQixRQUFRLENBQUNnRixhQUFULENBQXdCLEtBQXhCLENBQVY7QUFFQTJ5QixlQUFLLENBQUNoekIsS0FBTixDQUFZNHhCLE9BQVosR0FBc0IsaUNBQXRCO0FBQ0E1SyxZQUFFLENBQUNobkIsS0FBSCxDQUFTUCxNQUFULEdBQWtCLEtBQWxCO0FBQ0F3ekIsaUJBQU8sQ0FBQ2p6QixLQUFSLENBQWNQLE1BQWQsR0FBdUIsS0FBdkI7QUFFQWlCLHlCQUFlLENBQ2JDLFdBREYsQ0FDZXF5QixLQURmLEVBRUVyeUIsV0FGRixDQUVlcW1CLEVBRmYsRUFHRXJtQixXQUhGLENBR2VzeUIsT0FIZjtBQUtBQyxpQkFBTyxHQUFHejdCLE1BQU0sQ0FBQ3dJLGdCQUFQLENBQXlCK21CLEVBQXpCLENBQVY7QUFDQXVMLGlDQUF1QixHQUFHWSxRQUFRLENBQUVELE9BQU8sQ0FBQ3p6QixNQUFWLENBQVIsR0FBNkIsQ0FBdkQ7QUFFQWlCLHlCQUFlLENBQUNLLFdBQWhCLENBQTZCaXlCLEtBQTdCO0FBQ0E7O0FBQ0QsZUFBT1QsdUJBQVA7QUFDQTtBQWpEc0IsS0FBeEI7QUFtREEsR0F2SEQ7O0FBMEhBLFdBQVNhLE1BQVQsQ0FBaUI3NkIsSUFBakIsRUFBdUJvUixJQUF2QixFQUE2QjBwQixRQUE3QixFQUF3QztBQUN2QyxRQUFJN3pCLEtBQUo7QUFBQSxRQUFXOHpCLFFBQVg7QUFBQSxRQUFxQkMsUUFBckI7QUFBQSxRQUErQjVxQixHQUEvQjtBQUFBLFFBRUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTNJLFNBQUssR0FBR3pILElBQUksQ0FBQ3lILEtBTmQ7QUFRQXF6QixZQUFRLEdBQUdBLFFBQVEsSUFBSWhDLFNBQVMsQ0FBRTk0QixJQUFGLENBQWhDLENBVHVDLENBV3ZDO0FBQ0E7QUFDQTs7QUFDQSxRQUFLODZCLFFBQUwsRUFBZ0I7QUFDZjFxQixTQUFHLEdBQUcwcUIsUUFBUSxDQUFDRyxnQkFBVCxDQUEyQjdwQixJQUEzQixLQUFxQzBwQixRQUFRLENBQUUxcEIsSUFBRixDQUFuRDs7QUFFQSxVQUFLaEIsR0FBRyxLQUFLLEVBQVIsSUFBYyxDQUFDa2MsVUFBVSxDQUFFdHNCLElBQUYsQ0FBOUIsRUFBeUM7QUFDeENvUSxXQUFHLEdBQUd6SyxNQUFNLENBQUM4QixLQUFQLENBQWN6SCxJQUFkLEVBQW9Cb1IsSUFBcEIsQ0FBTjtBQUNBLE9BTGMsQ0FPZjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxVQUFLLENBQUN4QyxPQUFPLENBQUN3ckIsY0FBUixFQUFELElBQTZCdkIsU0FBUyxDQUFDN2dCLElBQVYsQ0FBZ0I1SCxHQUFoQixDQUE3QixJQUFzRDhvQixTQUFTLENBQUNsaEIsSUFBVixDQUFnQjVHLElBQWhCLENBQTNELEVBQW9GO0FBRW5GO0FBQ0FuSyxhQUFLLEdBQUdRLEtBQUssQ0FBQ1IsS0FBZDtBQUNBOHpCLGdCQUFRLEdBQUd0ekIsS0FBSyxDQUFDc3pCLFFBQWpCO0FBQ0FDLGdCQUFRLEdBQUd2ekIsS0FBSyxDQUFDdXpCLFFBQWpCLENBTG1GLENBT25GOztBQUNBdnpCLGFBQUssQ0FBQ3N6QixRQUFOLEdBQWlCdHpCLEtBQUssQ0FBQ3V6QixRQUFOLEdBQWlCdnpCLEtBQUssQ0FBQ1IsS0FBTixHQUFjbUosR0FBaEQ7QUFDQUEsV0FBRyxHQUFHMHFCLFFBQVEsQ0FBQzd6QixLQUFmLENBVG1GLENBV25GOztBQUNBUSxhQUFLLENBQUNSLEtBQU4sR0FBY0EsS0FBZDtBQUNBUSxhQUFLLENBQUNzekIsUUFBTixHQUFpQkEsUUFBakI7QUFDQXR6QixhQUFLLENBQUN1ekIsUUFBTixHQUFpQkEsUUFBakI7QUFDQTtBQUNEOztBQUVELFdBQU81cUIsR0FBRyxLQUFLN04sU0FBUixHQUVOO0FBQ0E7QUFDQTZOLE9BQUcsR0FBRyxFQUpBLEdBS05BLEdBTEQ7QUFNQTs7QUFHRCxXQUFTOHFCLFlBQVQsQ0FBdUJDLFdBQXZCLEVBQW9DQyxNQUFwQyxFQUE2QztBQUU1QztBQUNBLFdBQU87QUFDTmxyQixTQUFHLEVBQUUsWUFBVztBQUNmLFlBQUtpckIsV0FBVyxFQUFoQixFQUFxQjtBQUVwQjtBQUNBO0FBQ0EsaUJBQU8sS0FBS2pyQixHQUFaO0FBQ0E7QUFDQSxTQVBjLENBU2Y7OztBQUNBLGVBQU8sQ0FBRSxLQUFLQSxHQUFMLEdBQVdrckIsTUFBYixFQUFzQjU1QixLQUF0QixDQUE2QixJQUE3QixFQUFtQzJDLFNBQW5DLENBQVA7QUFDQTtBQVpLLEtBQVA7QUFjQTs7QUFHRCxNQUFJazNCLFdBQVcsR0FBRyxDQUFFLFFBQUYsRUFBWSxLQUFaLEVBQW1CLElBQW5CLENBQWxCO0FBQUEsTUFDQ0MsVUFBVSxHQUFHeDRCLFFBQVEsQ0FBQ2dGLGFBQVQsQ0FBd0IsS0FBeEIsRUFBZ0NMLEtBRDlDO0FBQUEsTUFFQzh6QixXQUFXLEdBQUcsRUFGZixDQTU4TWlGLENBZzlNakY7O0FBQ0EsV0FBU0MsY0FBVCxDQUF5QnBxQixJQUF6QixFQUFnQztBQUUvQjtBQUNBLFFBQUlxcUIsT0FBTyxHQUFHcnFCLElBQUksQ0FBRSxDQUFGLENBQUosQ0FBVWtaLFdBQVYsS0FBMEJsWixJQUFJLENBQUM5UCxLQUFMLENBQVksQ0FBWixDQUF4QztBQUFBLFFBQ0MxQixDQUFDLEdBQUd5N0IsV0FBVyxDQUFDeDdCLE1BRGpCOztBQUdBLFdBQVFELENBQUMsRUFBVCxFQUFjO0FBQ2J3UixVQUFJLEdBQUdpcUIsV0FBVyxDQUFFejdCLENBQUYsQ0FBWCxHQUFtQjY3QixPQUExQjs7QUFDQSxVQUFLcnFCLElBQUksSUFBSWtxQixVQUFiLEVBQTBCO0FBQ3pCLGVBQU9scUIsSUFBUDtBQUNBO0FBQ0Q7QUFDRCxHQTc5TWdGLENBKzlNakY7OztBQUNBLFdBQVNzcUIsYUFBVCxDQUF3QnRxQixJQUF4QixFQUErQjtBQUM5QixRQUFJdXFCLEtBQUssR0FBR2gyQixNQUFNLENBQUNpMkIsUUFBUCxDQUFpQnhxQixJQUFqQixLQUEyQm1xQixXQUFXLENBQUVucUIsSUFBRixDQUFsRDs7QUFFQSxRQUFLdXFCLEtBQUwsRUFBYTtBQUNaLGFBQU9BLEtBQVA7QUFDQTs7QUFDRCxRQUFLdnFCLElBQUksSUFBSWtxQixVQUFiLEVBQTBCO0FBQ3pCLGFBQU9scUIsSUFBUDtBQUNBOztBQUNELFdBQU9tcUIsV0FBVyxDQUFFbnFCLElBQUYsQ0FBWCxHQUFzQm9xQixjQUFjLENBQUVwcUIsSUFBRixDQUFkLElBQTBCQSxJQUF2RDtBQUNBOztBQUdELE1BRUM7QUFDQTtBQUNBO0FBQ0F5cUIsY0FBWSxHQUFHLDJCQUxoQjtBQUFBLE1BTUNDLFdBQVcsR0FBRyxLQU5mO0FBQUEsTUFPQ0MsT0FBTyxHQUFHO0FBQUVsQyxZQUFRLEVBQUUsVUFBWjtBQUF3Qm1DLGNBQVUsRUFBRSxRQUFwQztBQUE4Q3R6QixXQUFPLEVBQUU7QUFBdkQsR0FQWDtBQUFBLE1BUUN1ekIsa0JBQWtCLEdBQUc7QUFDcEJDLGlCQUFhLEVBQUUsR0FESztBQUVwQkMsY0FBVSxFQUFFO0FBRlEsR0FSdEI7O0FBYUEsV0FBU0MsaUJBQVQsQ0FBNEJ0ckIsS0FBNUIsRUFBbUN4SyxLQUFuQyxFQUEwQysxQixRQUExQyxFQUFxRDtBQUVwRDtBQUNBO0FBQ0EsUUFBSTU4QixPQUFPLEdBQUcyc0IsT0FBTyxDQUFDMWdCLElBQVIsQ0FBY3BGLEtBQWQsQ0FBZDtBQUNBLFdBQU83RyxPQUFPLEdBRWI7QUFDQTRJLFFBQUksQ0FBQ2kwQixHQUFMLENBQVUsQ0FBVixFQUFhNzhCLE9BQU8sQ0FBRSxDQUFGLENBQVAsSUFBaUI0OEIsUUFBUSxJQUFJLENBQTdCLENBQWIsS0FBb0Q1OEIsT0FBTyxDQUFFLENBQUYsQ0FBUCxJQUFnQixJQUFwRSxDQUhhLEdBSWI2RyxLQUpEO0FBS0E7O0FBRUQsV0FBU2kyQixrQkFBVCxDQUE2QnY4QixJQUE3QixFQUFtQ3c4QixTQUFuQyxFQUE4Q0MsR0FBOUMsRUFBbUQ1ekIsV0FBbkQsRUFBZ0U2ekIsTUFBaEUsRUFBd0VDLFdBQXhFLEVBQXNGO0FBQ3JGLFFBQUkvOEIsQ0FBQyxHQUFHNDhCLFNBQVMsS0FBSyxPQUFkLEdBQXdCLENBQXhCLEdBQTRCLENBQXBDO0FBQUEsUUFDQ0ksS0FBSyxHQUFHLENBRFQ7QUFBQSxRQUVDQyxLQUFLLEdBQUcsQ0FGVCxDQURxRixDQUtyRjs7QUFDQSxRQUFLSixHQUFHLE1BQU81ekIsV0FBVyxHQUFHLFFBQUgsR0FBYyxTQUFoQyxDQUFSLEVBQXNEO0FBQ3JELGFBQU8sQ0FBUDtBQUNBOztBQUVELFdBQVFqSixDQUFDLEdBQUcsQ0FBWixFQUFlQSxDQUFDLElBQUksQ0FBcEIsRUFBd0I7QUFFdkI7QUFDQSxVQUFLNjhCLEdBQUcsS0FBSyxRQUFiLEVBQXdCO0FBQ3ZCSSxhQUFLLElBQUlsM0IsTUFBTSxDQUFDK21CLEdBQVAsQ0FBWTFzQixJQUFaLEVBQWtCeThCLEdBQUcsR0FBR3BRLFNBQVMsQ0FBRXpzQixDQUFGLENBQWpDLEVBQXdDLElBQXhDLEVBQThDODhCLE1BQTlDLENBQVQ7QUFDQSxPQUxzQixDQU92Qjs7O0FBQ0EsVUFBSyxDQUFDN3pCLFdBQU4sRUFBb0I7QUFFbkI7QUFDQWcwQixhQUFLLElBQUlsM0IsTUFBTSxDQUFDK21CLEdBQVAsQ0FBWTFzQixJQUFaLEVBQWtCLFlBQVlxc0IsU0FBUyxDQUFFenNCLENBQUYsQ0FBdkMsRUFBOEMsSUFBOUMsRUFBb0Q4OEIsTUFBcEQsQ0FBVCxDQUhtQixDQUtuQjs7QUFDQSxZQUFLRCxHQUFHLEtBQUssU0FBYixFQUF5QjtBQUN4QkksZUFBSyxJQUFJbDNCLE1BQU0sQ0FBQyttQixHQUFQLENBQVkxc0IsSUFBWixFQUFrQixXQUFXcXNCLFNBQVMsQ0FBRXpzQixDQUFGLENBQXBCLEdBQTRCLE9BQTlDLEVBQXVELElBQXZELEVBQTZEODhCLE1BQTdELENBQVQsQ0FEd0IsQ0FHekI7QUFDQyxTQUpELE1BSU87QUFDTkUsZUFBSyxJQUFJajNCLE1BQU0sQ0FBQyttQixHQUFQLENBQVkxc0IsSUFBWixFQUFrQixXQUFXcXNCLFNBQVMsQ0FBRXpzQixDQUFGLENBQXBCLEdBQTRCLE9BQTlDLEVBQXVELElBQXZELEVBQTZEODhCLE1BQTdELENBQVQ7QUFDQSxTQVprQixDQWNwQjtBQUNBOztBQUNDLE9BaEJELE1BZ0JPO0FBRU47QUFDQSxZQUFLRCxHQUFHLEtBQUssU0FBYixFQUF5QjtBQUN4QkksZUFBSyxJQUFJbDNCLE1BQU0sQ0FBQyttQixHQUFQLENBQVkxc0IsSUFBWixFQUFrQixZQUFZcXNCLFNBQVMsQ0FBRXpzQixDQUFGLENBQXZDLEVBQThDLElBQTlDLEVBQW9EODhCLE1BQXBELENBQVQ7QUFDQSxTQUxLLENBT047OztBQUNBLFlBQUtELEdBQUcsS0FBSyxRQUFiLEVBQXdCO0FBQ3ZCSSxlQUFLLElBQUlsM0IsTUFBTSxDQUFDK21CLEdBQVAsQ0FBWTFzQixJQUFaLEVBQWtCLFdBQVdxc0IsU0FBUyxDQUFFenNCLENBQUYsQ0FBcEIsR0FBNEIsT0FBOUMsRUFBdUQsSUFBdkQsRUFBNkQ4OEIsTUFBN0QsQ0FBVDtBQUNBO0FBQ0Q7QUFDRCxLQTlDb0YsQ0FnRHJGOzs7QUFDQSxRQUFLLENBQUM3ekIsV0FBRCxJQUFnQjh6QixXQUFXLElBQUksQ0FBcEMsRUFBd0M7QUFFdkM7QUFDQTtBQUNBRSxXQUFLLElBQUl4MEIsSUFBSSxDQUFDaTBCLEdBQUwsQ0FBVSxDQUFWLEVBQWFqMEIsSUFBSSxDQUFDeTBCLElBQUwsQ0FDckI5OEIsSUFBSSxDQUFFLFdBQVd3OEIsU0FBUyxDQUFFLENBQUYsQ0FBVCxDQUFlbFMsV0FBZixFQUFYLEdBQTBDa1MsU0FBUyxDQUFDbDdCLEtBQVYsQ0FBaUIsQ0FBakIsQ0FBNUMsQ0FBSixHQUNBcTdCLFdBREEsR0FFQUUsS0FGQSxHQUdBRCxLQUhBLEdBSUEsR0FMcUIsQ0FPdEI7QUFDQTtBQVJzQixPQUFiLEtBU0YsQ0FUUDtBQVVBOztBQUVELFdBQU9DLEtBQVA7QUFDQTs7QUFFRCxXQUFTRSxnQkFBVCxDQUEyQi84QixJQUEzQixFQUFpQ3c4QixTQUFqQyxFQUE0Q0ksS0FBNUMsRUFBb0Q7QUFFbkQ7QUFDQSxRQUFJRixNQUFNLEdBQUc1RCxTQUFTLENBQUU5NEIsSUFBRixDQUF0QjtBQUFBLFFBRUM7QUFDQTtBQUNBZzlCLG1CQUFlLEdBQUcsQ0FBQ3B1QixPQUFPLENBQUN1ckIsaUJBQVIsRUFBRCxJQUFnQ3lDLEtBSm5EO0FBQUEsUUFLQy96QixXQUFXLEdBQUdtMEIsZUFBZSxJQUM1QnIzQixNQUFNLENBQUMrbUIsR0FBUCxDQUFZMXNCLElBQVosRUFBa0IsV0FBbEIsRUFBK0IsS0FBL0IsRUFBc0MwOEIsTUFBdEMsTUFBbUQsWUFOckQ7QUFBQSxRQU9DTyxnQkFBZ0IsR0FBR3AwQixXQVBwQjtBQUFBLFFBU0N5RyxHQUFHLEdBQUd1ckIsTUFBTSxDQUFFNzZCLElBQUYsRUFBUXc4QixTQUFSLEVBQW1CRSxNQUFuQixDQVRiO0FBQUEsUUFVQ1EsVUFBVSxHQUFHLFdBQVdWLFNBQVMsQ0FBRSxDQUFGLENBQVQsQ0FBZWxTLFdBQWYsRUFBWCxHQUEwQ2tTLFNBQVMsQ0FBQ2w3QixLQUFWLENBQWlCLENBQWpCLENBVnhELENBSG1ELENBZW5EO0FBQ0E7O0FBQ0EsUUFBS3UzQixTQUFTLENBQUM3Z0IsSUFBVixDQUFnQjFJLEdBQWhCLENBQUwsRUFBNkI7QUFDNUIsVUFBSyxDQUFDc3RCLEtBQU4sRUFBYztBQUNiLGVBQU90dEIsR0FBUDtBQUNBOztBQUNEQSxTQUFHLEdBQUcsTUFBTjtBQUNBLEtBdEJrRCxDQXlCbkQ7QUFDQTtBQUNBOzs7QUFDQSxRQUFLLENBQUUsQ0FBQ1YsT0FBTyxDQUFDdXJCLGlCQUFSLEVBQUQsSUFBZ0N0eEIsV0FBaEMsSUFFTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUMrRixPQUFPLENBQUM0ckIsb0JBQVIsRUFBRCxJQUFtQ3h2QixRQUFRLENBQUVoTCxJQUFGLEVBQVEsSUFBUixDQU5yQyxJQVFOO0FBQ0E7QUFDQXNQLE9BQUcsS0FBSyxNQVZGLElBWU47QUFDQTtBQUNBLEtBQUMvSSxVQUFVLENBQUUrSSxHQUFGLENBQVgsSUFBc0IzSixNQUFNLENBQUMrbUIsR0FBUCxDQUFZMXNCLElBQVosRUFBa0IsU0FBbEIsRUFBNkIsS0FBN0IsRUFBb0MwOEIsTUFBcEMsTUFBaUQsUUFkbkUsS0FnQko7QUFDQTE4QixRQUFJLENBQUNtOUIsY0FBTCxHQUFzQnQ5QixNQWpCdkIsRUFpQmdDO0FBRS9CZ0osaUJBQVcsR0FBR2xELE1BQU0sQ0FBQyttQixHQUFQLENBQVkxc0IsSUFBWixFQUFrQixXQUFsQixFQUErQixLQUEvQixFQUFzQzA4QixNQUF0QyxNQUFtRCxZQUFqRSxDQUYrQixDQUkvQjtBQUNBO0FBQ0E7O0FBQ0FPLHNCQUFnQixHQUFHQyxVQUFVLElBQUlsOUIsSUFBakM7O0FBQ0EsVUFBS2k5QixnQkFBTCxFQUF3QjtBQUN2QjN0QixXQUFHLEdBQUd0UCxJQUFJLENBQUVrOUIsVUFBRixDQUFWO0FBQ0E7QUFDRCxLQXhEa0QsQ0EwRG5EOzs7QUFDQTV0QixPQUFHLEdBQUcvSSxVQUFVLENBQUUrSSxHQUFGLENBQVYsSUFBcUIsQ0FBM0IsQ0EzRG1ELENBNkRuRDs7QUFDQSxXQUFTQSxHQUFHLEdBQ1hpdEIsa0JBQWtCLENBQ2pCdjhCLElBRGlCLEVBRWpCdzhCLFNBRmlCLEVBR2pCSSxLQUFLLEtBQU0vekIsV0FBVyxHQUFHLFFBQUgsR0FBYyxTQUEvQixDQUhZLEVBSWpCbzBCLGdCQUppQixFQUtqQlAsTUFMaUIsRUFPakI7QUFDQXB0QixPQVJpQixDQURaLEdBV0gsSUFYSjtBQVlBOztBQUVEM0osUUFBTSxDQUFDaEUsTUFBUCxDQUFlO0FBRWQ7QUFDQTtBQUNBeTdCLFlBQVEsRUFBRTtBQUNUQyxhQUFPLEVBQUU7QUFDUm50QixXQUFHLEVBQUUsVUFBVWxRLElBQVYsRUFBZ0I4NkIsUUFBaEIsRUFBMkI7QUFDL0IsY0FBS0EsUUFBTCxFQUFnQjtBQUVmO0FBQ0EsZ0JBQUkxcUIsR0FBRyxHQUFHeXFCLE1BQU0sQ0FBRTc2QixJQUFGLEVBQVEsU0FBUixDQUFoQjtBQUNBLG1CQUFPb1EsR0FBRyxLQUFLLEVBQVIsR0FBYSxHQUFiLEdBQW1CQSxHQUExQjtBQUNBO0FBQ0Q7QUFSTztBQURBLEtBSkk7QUFpQmQ7QUFDQWdkLGFBQVMsRUFBRTtBQUNWLGlDQUEyQixJQURqQjtBQUVWLHFCQUFlLElBRkw7QUFHVixxQkFBZSxJQUhMO0FBSVYsa0JBQVksSUFKRjtBQUtWLG9CQUFjLElBTEo7QUFNVixvQkFBYyxJQU5KO0FBT1Ysa0JBQVksSUFQRjtBQVFWLG9CQUFjLElBUko7QUFTVix1QkFBaUIsSUFUUDtBQVVWLHlCQUFtQixJQVZUO0FBV1YsaUJBQVcsSUFYRDtBQVlWLG9CQUFjLElBWko7QUFhVixzQkFBZ0IsSUFiTjtBQWNWLG9CQUFjLElBZEo7QUFlVixpQkFBVyxJQWZEO0FBZ0JWLGVBQVMsSUFoQkM7QUFpQlYsaUJBQVcsSUFqQkQ7QUFrQlYsZ0JBQVUsSUFsQkE7QUFtQlYsZ0JBQVUsSUFuQkE7QUFvQlYsY0FBUTtBQXBCRSxLQWxCRztBQXlDZDtBQUNBO0FBQ0F3TyxZQUFRLEVBQUUsRUEzQ0k7QUE2Q2Q7QUFDQW4wQixTQUFLLEVBQUUsVUFBVXpILElBQVYsRUFBZ0JvUixJQUFoQixFQUFzQjlLLEtBQXRCLEVBQTZCczJCLEtBQTdCLEVBQXFDO0FBRTNDO0FBQ0EsVUFBSyxDQUFDNThCLElBQUQsSUFBU0EsSUFBSSxDQUFDeUksUUFBTCxLQUFrQixDQUEzQixJQUFnQ3pJLElBQUksQ0FBQ3lJLFFBQUwsS0FBa0IsQ0FBbEQsSUFBdUQsQ0FBQ3pJLElBQUksQ0FBQ3lILEtBQWxFLEVBQTBFO0FBQ3pFO0FBQ0EsT0FMMEMsQ0FPM0M7OztBQUNBLFVBQUkySSxHQUFKO0FBQUEsVUFBU2hOLElBQVQ7QUFBQSxVQUFldW9CLEtBQWY7QUFBQSxVQUNDMlIsUUFBUSxHQUFHL1MsU0FBUyxDQUFFblosSUFBRixDQURyQjtBQUFBLFVBRUNtc0IsWUFBWSxHQUFHekIsV0FBVyxDQUFDOWpCLElBQVosQ0FBa0I1RyxJQUFsQixDQUZoQjtBQUFBLFVBR0MzSixLQUFLLEdBQUd6SCxJQUFJLENBQUN5SCxLQUhkLENBUjJDLENBYTNDO0FBQ0E7QUFDQTs7QUFDQSxVQUFLLENBQUM4MUIsWUFBTixFQUFxQjtBQUNwQm5zQixZQUFJLEdBQUdzcUIsYUFBYSxDQUFFNEIsUUFBRixDQUFwQjtBQUNBLE9BbEIwQyxDQW9CM0M7OztBQUNBM1IsV0FBSyxHQUFHaG1CLE1BQU0sQ0FBQ3kzQixRQUFQLENBQWlCaHNCLElBQWpCLEtBQTJCekwsTUFBTSxDQUFDeTNCLFFBQVAsQ0FBaUJFLFFBQWpCLENBQW5DLENBckIyQyxDQXVCM0M7O0FBQ0EsVUFBS2gzQixLQUFLLEtBQUsvRCxTQUFmLEVBQTJCO0FBQzFCYSxZQUFJLEdBQUcsT0FBT2tELEtBQWQsQ0FEMEIsQ0FHMUI7O0FBQ0EsWUFBS2xELElBQUksS0FBSyxRQUFULEtBQXVCZ04sR0FBRyxHQUFHZ2MsT0FBTyxDQUFDMWdCLElBQVIsQ0FBY3BGLEtBQWQsQ0FBN0IsS0FBd0Q4SixHQUFHLENBQUUsQ0FBRixDQUFoRSxFQUF3RTtBQUN2RTlKLGVBQUssR0FBR3FtQixTQUFTLENBQUUzc0IsSUFBRixFQUFRb1IsSUFBUixFQUFjaEIsR0FBZCxDQUFqQixDQUR1RSxDQUd2RTs7QUFDQWhOLGNBQUksR0FBRyxRQUFQO0FBQ0EsU0FUeUIsQ0FXMUI7OztBQUNBLFlBQUtrRCxLQUFLLElBQUksSUFBVCxJQUFpQkEsS0FBSyxLQUFLQSxLQUFoQyxFQUF3QztBQUN2QztBQUNBLFNBZHlCLENBZ0IxQjtBQUNBO0FBQ0E7OztBQUNBLFlBQUtsRCxJQUFJLEtBQUssUUFBVCxJQUFxQixDQUFDbTZCLFlBQTNCLEVBQTBDO0FBQ3pDajNCLGVBQUssSUFBSThKLEdBQUcsSUFBSUEsR0FBRyxDQUFFLENBQUYsQ0FBVixLQUFxQnpLLE1BQU0sQ0FBQ3luQixTQUFQLENBQWtCa1EsUUFBbEIsSUFBK0IsRUFBL0IsR0FBb0MsSUFBekQsQ0FBVDtBQUNBLFNBckJ5QixDQXVCMUI7OztBQUNBLFlBQUssQ0FBQzF1QixPQUFPLENBQUNzckIsZUFBVCxJQUE0QjV6QixLQUFLLEtBQUssRUFBdEMsSUFBNEM4SyxJQUFJLENBQUN6USxPQUFMLENBQWMsWUFBZCxNQUFpQyxDQUFsRixFQUFzRjtBQUNyRjhHLGVBQUssQ0FBRTJKLElBQUYsQ0FBTCxHQUFnQixTQUFoQjtBQUNBLFNBMUJ5QixDQTRCMUI7OztBQUNBLFlBQUssQ0FBQ3VhLEtBQUQsSUFBVSxFQUFHLFNBQVNBLEtBQVosQ0FBVixJQUNKLENBQUVybEIsS0FBSyxHQUFHcWxCLEtBQUssQ0FBQ1osR0FBTixDQUFXL3FCLElBQVgsRUFBaUJzRyxLQUFqQixFQUF3QnMyQixLQUF4QixDQUFWLE1BQWdEcjZCLFNBRGpELEVBQzZEO0FBRTVELGNBQUtnN0IsWUFBTCxFQUFvQjtBQUNuQjkxQixpQkFBSyxDQUFDKzFCLFdBQU4sQ0FBbUJwc0IsSUFBbkIsRUFBeUI5SyxLQUF6QjtBQUNBLFdBRkQsTUFFTztBQUNObUIsaUJBQUssQ0FBRTJKLElBQUYsQ0FBTCxHQUFnQjlLLEtBQWhCO0FBQ0E7QUFDRDtBQUVELE9BdkNELE1BdUNPO0FBRU47QUFDQSxZQUFLcWxCLEtBQUssSUFBSSxTQUFTQSxLQUFsQixJQUNKLENBQUV2YixHQUFHLEdBQUd1YixLQUFLLENBQUN6YixHQUFOLENBQVdsUSxJQUFYLEVBQWlCLEtBQWpCLEVBQXdCNDhCLEtBQXhCLENBQVIsTUFBOENyNkIsU0FEL0MsRUFDMkQ7QUFFMUQsaUJBQU82TixHQUFQO0FBQ0EsU0FQSyxDQVNOOzs7QUFDQSxlQUFPM0ksS0FBSyxDQUFFMkosSUFBRixDQUFaO0FBQ0E7QUFDRCxLQXpIYTtBQTJIZHNiLE9BQUcsRUFBRSxVQUFVMXNCLElBQVYsRUFBZ0JvUixJQUFoQixFQUFzQndyQixLQUF0QixFQUE2QkYsTUFBN0IsRUFBc0M7QUFDMUMsVUFBSXB0QixHQUFKO0FBQUEsVUFBU3ROLEdBQVQ7QUFBQSxVQUFjMnBCLEtBQWQ7QUFBQSxVQUNDMlIsUUFBUSxHQUFHL1MsU0FBUyxDQUFFblosSUFBRixDQURyQjtBQUFBLFVBRUNtc0IsWUFBWSxHQUFHekIsV0FBVyxDQUFDOWpCLElBQVosQ0FBa0I1RyxJQUFsQixDQUZoQixDQUQwQyxDQUsxQztBQUNBO0FBQ0E7O0FBQ0EsVUFBSyxDQUFDbXNCLFlBQU4sRUFBcUI7QUFDcEJuc0IsWUFBSSxHQUFHc3FCLGFBQWEsQ0FBRTRCLFFBQUYsQ0FBcEI7QUFDQSxPQVZ5QyxDQVkxQzs7O0FBQ0EzUixXQUFLLEdBQUdobUIsTUFBTSxDQUFDeTNCLFFBQVAsQ0FBaUJoc0IsSUFBakIsS0FBMkJ6TCxNQUFNLENBQUN5M0IsUUFBUCxDQUFpQkUsUUFBakIsQ0FBbkMsQ0FiMEMsQ0FlMUM7O0FBQ0EsVUFBSzNSLEtBQUssSUFBSSxTQUFTQSxLQUF2QixFQUErQjtBQUM5QnJjLFdBQUcsR0FBR3FjLEtBQUssQ0FBQ3piLEdBQU4sQ0FBV2xRLElBQVgsRUFBaUIsSUFBakIsRUFBdUI0OEIsS0FBdkIsQ0FBTjtBQUNBLE9BbEJ5QyxDQW9CMUM7OztBQUNBLFVBQUt0dEIsR0FBRyxLQUFLL00sU0FBYixFQUF5QjtBQUN4QitNLFdBQUcsR0FBR3VyQixNQUFNLENBQUU3NkIsSUFBRixFQUFRb1IsSUFBUixFQUFjc3JCLE1BQWQsQ0FBWjtBQUNBLE9BdkJ5QyxDQXlCMUM7OztBQUNBLFVBQUtwdEIsR0FBRyxLQUFLLFFBQVIsSUFBb0I4QixJQUFJLElBQUk2cUIsa0JBQWpDLEVBQXNEO0FBQ3JEM3NCLFdBQUcsR0FBRzJzQixrQkFBa0IsQ0FBRTdxQixJQUFGLENBQXhCO0FBQ0EsT0E1QnlDLENBOEIxQzs7O0FBQ0EsVUFBS3dyQixLQUFLLEtBQUssRUFBVixJQUFnQkEsS0FBckIsRUFBNkI7QUFDNUI1NkIsV0FBRyxHQUFHdUUsVUFBVSxDQUFFK0ksR0FBRixDQUFoQjtBQUNBLGVBQU9zdEIsS0FBSyxLQUFLLElBQVYsSUFBa0JhLFFBQVEsQ0FBRXo3QixHQUFGLENBQTFCLEdBQW9DQSxHQUFHLElBQUksQ0FBM0MsR0FBK0NzTixHQUF0RDtBQUNBOztBQUVELGFBQU9BLEdBQVA7QUFDQTtBQWhLYSxHQUFmO0FBbUtBM0osUUFBTSxDQUFDNEssSUFBUCxDQUFhLENBQUUsUUFBRixFQUFZLE9BQVosQ0FBYixFQUFvQyxVQUFVc0MsRUFBVixFQUFjMnBCLFNBQWQsRUFBMEI7QUFDN0Q3MkIsVUFBTSxDQUFDeTNCLFFBQVAsQ0FBaUJaLFNBQWpCLElBQStCO0FBQzlCdHNCLFNBQUcsRUFBRSxVQUFVbFEsSUFBVixFQUFnQjg2QixRQUFoQixFQUEwQjhCLEtBQTFCLEVBQWtDO0FBQ3RDLFlBQUs5QixRQUFMLEVBQWdCO0FBRWY7QUFDQTtBQUNBLGlCQUFPZSxZQUFZLENBQUM3akIsSUFBYixDQUFtQnJTLE1BQU0sQ0FBQyttQixHQUFQLENBQVkxc0IsSUFBWixFQUFrQixTQUFsQixDQUFuQixPQUVOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFLFdBQUNBLElBQUksQ0FBQ205QixjQUFMLEdBQXNCdDlCLE1BQXZCLElBQWlDLENBQUNHLElBQUksQ0FBQzA5QixxQkFBTCxHQUE2QnoyQixLQVIzRCxJQVNMK3hCLElBQUksQ0FBRWg1QixJQUFGLEVBQVErN0IsT0FBUixFQUFpQixZQUFXO0FBQy9CLG1CQUFPZ0IsZ0JBQWdCLENBQUUvOEIsSUFBRixFQUFRdzhCLFNBQVIsRUFBbUJJLEtBQW5CLENBQXZCO0FBQ0EsV0FGRyxDQVRDLEdBWUxHLGdCQUFnQixDQUFFLzhCLElBQUYsRUFBUXc4QixTQUFSLEVBQW1CSSxLQUFuQixDQVpsQjtBQWFBO0FBQ0QsT0FwQjZCO0FBc0I5QjdSLFNBQUcsRUFBRSxVQUFVL3FCLElBQVYsRUFBZ0JzRyxLQUFoQixFQUF1QnMyQixLQUF2QixFQUErQjtBQUNuQyxZQUFJbjlCLE9BQUo7QUFBQSxZQUNDaTlCLE1BQU0sR0FBRzVELFNBQVMsQ0FBRTk0QixJQUFGLENBRG5CO0FBQUEsWUFHQztBQUNBO0FBQ0EyOUIsMEJBQWtCLEdBQUcsQ0FBQy91QixPQUFPLENBQUMyckIsYUFBUixFQUFELElBQ3BCbUMsTUFBTSxDQUFDN0MsUUFBUCxLQUFvQixVQU50QjtBQUFBLFlBUUM7QUFDQW1ELHVCQUFlLEdBQUdXLGtCQUFrQixJQUFJZixLQVR6QztBQUFBLFlBVUMvekIsV0FBVyxHQUFHbTBCLGVBQWUsSUFDNUJyM0IsTUFBTSxDQUFDK21CLEdBQVAsQ0FBWTFzQixJQUFaLEVBQWtCLFdBQWxCLEVBQStCLEtBQS9CLEVBQXNDMDhCLE1BQXRDLE1BQW1ELFlBWHJEO0FBQUEsWUFZQ0wsUUFBUSxHQUFHTyxLQUFLLEdBQ2ZMLGtCQUFrQixDQUNqQnY4QixJQURpQixFQUVqQnc4QixTQUZpQixFQUdqQkksS0FIaUIsRUFJakIvekIsV0FKaUIsRUFLakI2ekIsTUFMaUIsQ0FESCxHQVFmLENBcEJGLENBRG1DLENBdUJuQztBQUNBOztBQUNBLFlBQUs3ekIsV0FBVyxJQUFJODBCLGtCQUFwQixFQUF5QztBQUN4Q3RCLGtCQUFRLElBQUloMEIsSUFBSSxDQUFDeTBCLElBQUwsQ0FDWDk4QixJQUFJLENBQUUsV0FBV3c4QixTQUFTLENBQUUsQ0FBRixDQUFULENBQWVsUyxXQUFmLEVBQVgsR0FBMENrUyxTQUFTLENBQUNsN0IsS0FBVixDQUFpQixDQUFqQixDQUE1QyxDQUFKLEdBQ0FpRixVQUFVLENBQUVtMkIsTUFBTSxDQUFFRixTQUFGLENBQVIsQ0FEVixHQUVBRCxrQkFBa0IsQ0FBRXY4QixJQUFGLEVBQVF3OEIsU0FBUixFQUFtQixRQUFuQixFQUE2QixLQUE3QixFQUFvQ0UsTUFBcEMsQ0FGbEIsR0FHQSxHQUpXLENBQVo7QUFNQSxTQWhDa0MsQ0FrQ25DOzs7QUFDQSxZQUFLTCxRQUFRLEtBQU01OEIsT0FBTyxHQUFHMnNCLE9BQU8sQ0FBQzFnQixJQUFSLENBQWNwRixLQUFkLENBQWhCLENBQVIsSUFDSixDQUFFN0csT0FBTyxDQUFFLENBQUYsQ0FBUCxJQUFnQixJQUFsQixNQUE2QixJQUQ5QixFQUNxQztBQUVwQ08sY0FBSSxDQUFDeUgsS0FBTCxDQUFZKzBCLFNBQVosSUFBMEJsMkIsS0FBMUI7QUFDQUEsZUFBSyxHQUFHWCxNQUFNLENBQUMrbUIsR0FBUCxDQUFZMXNCLElBQVosRUFBa0J3OEIsU0FBbEIsQ0FBUjtBQUNBOztBQUVELGVBQU9KLGlCQUFpQixDQUFFcDhCLElBQUYsRUFBUXNHLEtBQVIsRUFBZSsxQixRQUFmLENBQXhCO0FBQ0E7QUFqRTZCLEtBQS9CO0FBbUVBLEdBcEVEO0FBc0VBMTJCLFFBQU0sQ0FBQ3kzQixRQUFQLENBQWdCL3pCLFVBQWhCLEdBQTZCNnhCLFlBQVksQ0FBRXRzQixPQUFPLENBQUMwckIsa0JBQVYsRUFDeEMsVUFBVXQ2QixJQUFWLEVBQWdCODZCLFFBQWhCLEVBQTJCO0FBQzFCLFFBQUtBLFFBQUwsRUFBZ0I7QUFDZixhQUFPLENBQUV2MEIsVUFBVSxDQUFFczBCLE1BQU0sQ0FBRTc2QixJQUFGLEVBQVEsWUFBUixDQUFSLENBQVYsSUFDUkEsSUFBSSxDQUFDMDlCLHFCQUFMLEdBQTZCRSxJQUE3QixHQUNDNUUsSUFBSSxDQUFFaDVCLElBQUYsRUFBUTtBQUFFcUosa0JBQVUsRUFBRTtBQUFkLE9BQVIsRUFBMkIsWUFBVztBQUN6QyxlQUFPckosSUFBSSxDQUFDMDlCLHFCQUFMLEdBQTZCRSxJQUFwQztBQUNBLE9BRkcsQ0FGQyxJQUtGLElBTEw7QUFNQTtBQUNELEdBVnVDLENBQXpDLENBLzNOaUYsQ0E0NE5qRjs7QUFDQWo0QixRQUFNLENBQUM0SyxJQUFQLENBQWE7QUFDWnN0QixVQUFNLEVBQUUsRUFESTtBQUVaOTFCLFdBQU8sRUFBRSxFQUZHO0FBR1orMUIsVUFBTSxFQUFFO0FBSEksR0FBYixFQUlHLFVBQVVoK0IsTUFBVixFQUFrQmkrQixNQUFsQixFQUEyQjtBQUM3QnA0QixVQUFNLENBQUN5M0IsUUFBUCxDQUFpQnQ5QixNQUFNLEdBQUdpK0IsTUFBMUIsSUFBcUM7QUFDcENDLFlBQU0sRUFBRSxVQUFVMTNCLEtBQVYsRUFBa0I7QUFDekIsWUFBSTFHLENBQUMsR0FBRyxDQUFSO0FBQUEsWUFDQ3ErQixRQUFRLEdBQUcsRUFEWjtBQUFBLFlBR0M7QUFDQUMsYUFBSyxHQUFHLE9BQU81M0IsS0FBUCxLQUFpQixRQUFqQixHQUE0QkEsS0FBSyxDQUFDc00sS0FBTixDQUFhLEdBQWIsQ0FBNUIsR0FBaUQsQ0FBRXRNLEtBQUYsQ0FKMUQ7O0FBTUEsZUFBUTFHLENBQUMsR0FBRyxDQUFaLEVBQWVBLENBQUMsRUFBaEIsRUFBcUI7QUFDcEJxK0Isa0JBQVEsQ0FBRW4rQixNQUFNLEdBQUd1c0IsU0FBUyxDQUFFenNCLENBQUYsQ0FBbEIsR0FBMEJtK0IsTUFBNUIsQ0FBUixHQUNDRyxLQUFLLENBQUV0K0IsQ0FBRixDQUFMLElBQWNzK0IsS0FBSyxDQUFFdCtCLENBQUMsR0FBRyxDQUFOLENBQW5CLElBQWdDcytCLEtBQUssQ0FBRSxDQUFGLENBRHRDO0FBRUE7O0FBRUQsZUFBT0QsUUFBUDtBQUNBO0FBZG1DLEtBQXJDOztBQWlCQSxRQUFLbitCLE1BQU0sS0FBSyxRQUFoQixFQUEyQjtBQUMxQjZGLFlBQU0sQ0FBQ3kzQixRQUFQLENBQWlCdDlCLE1BQU0sR0FBR2krQixNQUExQixFQUFtQ2hULEdBQW5DLEdBQXlDcVIsaUJBQXpDO0FBQ0E7QUFDRCxHQXpCRDtBQTJCQXoyQixRQUFNLENBQUM4SCxFQUFQLENBQVU5TCxNQUFWLENBQWtCO0FBQ2pCK3FCLE9BQUcsRUFBRSxVQUFVdGIsSUFBVixFQUFnQjlLLEtBQWhCLEVBQXdCO0FBQzVCLGFBQU9xakIsTUFBTSxDQUFFLElBQUYsRUFBUSxVQUFVM3BCLElBQVYsRUFBZ0JvUixJQUFoQixFQUFzQjlLLEtBQXRCLEVBQThCO0FBQ2xELFlBQUlvMkIsTUFBSjtBQUFBLFlBQVkxckIsR0FBWjtBQUFBLFlBQ0NSLEdBQUcsR0FBRyxFQURQO0FBQUEsWUFFQzVRLENBQUMsR0FBRyxDQUZMOztBQUlBLFlBQUt1QyxLQUFLLENBQUNHLE9BQU4sQ0FBZThPLElBQWYsQ0FBTCxFQUE2QjtBQUM1QnNyQixnQkFBTSxHQUFHNUQsU0FBUyxDQUFFOTRCLElBQUYsQ0FBbEI7QUFDQWdSLGFBQUcsR0FBR0ksSUFBSSxDQUFDdlIsTUFBWDs7QUFFQSxpQkFBUUQsQ0FBQyxHQUFHb1IsR0FBWixFQUFpQnBSLENBQUMsRUFBbEIsRUFBdUI7QUFDdEI0USxlQUFHLENBQUVZLElBQUksQ0FBRXhSLENBQUYsQ0FBTixDQUFILEdBQW1CK0YsTUFBTSxDQUFDK21CLEdBQVAsQ0FBWTFzQixJQUFaLEVBQWtCb1IsSUFBSSxDQUFFeFIsQ0FBRixDQUF0QixFQUE2QixLQUE3QixFQUFvQzg4QixNQUFwQyxDQUFuQjtBQUNBOztBQUVELGlCQUFPbHNCLEdBQVA7QUFDQTs7QUFFRCxlQUFPbEssS0FBSyxLQUFLL0QsU0FBVixHQUNOb0QsTUFBTSxDQUFDOEIsS0FBUCxDQUFjekgsSUFBZCxFQUFvQm9SLElBQXBCLEVBQTBCOUssS0FBMUIsQ0FETSxHQUVOWCxNQUFNLENBQUMrbUIsR0FBUCxDQUFZMXNCLElBQVosRUFBa0JvUixJQUFsQixDQUZEO0FBR0EsT0FuQlksRUFtQlZBLElBbkJVLEVBbUJKOUssS0FuQkksRUFtQkduQyxTQUFTLENBQUN0RSxNQUFWLEdBQW1CLENBbkJ0QixDQUFiO0FBb0JBO0FBdEJnQixHQUFsQjs7QUEwQkEsV0FBU3MrQixLQUFULENBQWdCbitCLElBQWhCLEVBQXNCOEYsT0FBdEIsRUFBK0JoRSxJQUEvQixFQUFxQ29QLEdBQXJDLEVBQTBDa3RCLE1BQTFDLEVBQW1EO0FBQ2xELFdBQU8sSUFBSUQsS0FBSyxDQUFDMytCLFNBQU4sQ0FBZ0JzUSxJQUFwQixDQUEwQjlQLElBQTFCLEVBQWdDOEYsT0FBaEMsRUFBeUNoRSxJQUF6QyxFQUErQ29QLEdBQS9DLEVBQW9Ea3RCLE1BQXBELENBQVA7QUFDQTs7QUFDRHo0QixRQUFNLENBQUN3NEIsS0FBUCxHQUFlQSxLQUFmO0FBRUFBLE9BQUssQ0FBQzMrQixTQUFOLEdBQWtCO0FBQ2pCd1EsZUFBVyxFQUFFbXVCLEtBREk7QUFFakJydUIsUUFBSSxFQUFFLFVBQVU5UCxJQUFWLEVBQWdCOEYsT0FBaEIsRUFBeUJoRSxJQUF6QixFQUErQm9QLEdBQS9CLEVBQW9Da3RCLE1BQXBDLEVBQTRDalIsSUFBNUMsRUFBbUQ7QUFDeEQsV0FBS250QixJQUFMLEdBQVlBLElBQVo7QUFDQSxXQUFLOEIsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsV0FBS3M4QixNQUFMLEdBQWNBLE1BQU0sSUFBSXo0QixNQUFNLENBQUN5NEIsTUFBUCxDQUFjelAsUUFBdEM7QUFDQSxXQUFLN29CLE9BQUwsR0FBZUEsT0FBZjtBQUNBLFdBQUs4WCxLQUFMLEdBQWEsS0FBS29XLEdBQUwsR0FBVyxLQUFLNWEsR0FBTCxFQUF4QjtBQUNBLFdBQUtsSSxHQUFMLEdBQVdBLEdBQVg7QUFDQSxXQUFLaWMsSUFBTCxHQUFZQSxJQUFJLEtBQU14bkIsTUFBTSxDQUFDeW5CLFNBQVAsQ0FBa0J0ckIsSUFBbEIsSUFBMkIsRUFBM0IsR0FBZ0MsSUFBdEMsQ0FBaEI7QUFDQSxLQVZnQjtBQVdqQnNYLE9BQUcsRUFBRSxZQUFXO0FBQ2YsVUFBSXVTLEtBQUssR0FBR3dTLEtBQUssQ0FBQ0UsU0FBTixDQUFpQixLQUFLdjhCLElBQXRCLENBQVo7QUFFQSxhQUFPNnBCLEtBQUssSUFBSUEsS0FBSyxDQUFDemIsR0FBZixHQUNOeWIsS0FBSyxDQUFDemIsR0FBTixDQUFXLElBQVgsQ0FETSxHQUVOaXVCLEtBQUssQ0FBQ0UsU0FBTixDQUFnQjFQLFFBQWhCLENBQXlCemUsR0FBekIsQ0FBOEIsSUFBOUIsQ0FGRDtBQUdBLEtBakJnQjtBQWtCakJvdUIsT0FBRyxFQUFFLFVBQVVDLE9BQVYsRUFBb0I7QUFDeEIsVUFBSUMsS0FBSjtBQUFBLFVBQ0M3UyxLQUFLLEdBQUd3UyxLQUFLLENBQUNFLFNBQU4sQ0FBaUIsS0FBS3Y4QixJQUF0QixDQURUOztBQUdBLFVBQUssS0FBS2dFLE9BQUwsQ0FBYTI0QixRQUFsQixFQUE2QjtBQUM1QixhQUFLQyxHQUFMLEdBQVdGLEtBQUssR0FBRzc0QixNQUFNLENBQUN5NEIsTUFBUCxDQUFlLEtBQUtBLE1BQXBCLEVBQ2xCRyxPQURrQixFQUNULEtBQUt6NEIsT0FBTCxDQUFhMjRCLFFBQWIsR0FBd0JGLE9BRGYsRUFDd0IsQ0FEeEIsRUFDMkIsQ0FEM0IsRUFDOEIsS0FBS3o0QixPQUFMLENBQWEyNEIsUUFEM0MsQ0FBbkI7QUFHQSxPQUpELE1BSU87QUFDTixhQUFLQyxHQUFMLEdBQVdGLEtBQUssR0FBR0QsT0FBbkI7QUFDQTs7QUFDRCxXQUFLdkssR0FBTCxHQUFXLENBQUUsS0FBSzlpQixHQUFMLEdBQVcsS0FBSzBNLEtBQWxCLElBQTRCNGdCLEtBQTVCLEdBQW9DLEtBQUs1Z0IsS0FBcEQ7O0FBRUEsVUFBSyxLQUFLOVgsT0FBTCxDQUFhNjRCLElBQWxCLEVBQXlCO0FBQ3hCLGFBQUs3NEIsT0FBTCxDQUFhNjRCLElBQWIsQ0FBa0JsOEIsSUFBbEIsQ0FBd0IsS0FBS3pDLElBQTdCLEVBQW1DLEtBQUtnMEIsR0FBeEMsRUFBNkMsSUFBN0M7QUFDQTs7QUFFRCxVQUFLckksS0FBSyxJQUFJQSxLQUFLLENBQUNaLEdBQXBCLEVBQTBCO0FBQ3pCWSxhQUFLLENBQUNaLEdBQU4sQ0FBVyxJQUFYO0FBQ0EsT0FGRCxNQUVPO0FBQ05vVCxhQUFLLENBQUNFLFNBQU4sQ0FBZ0IxUCxRQUFoQixDQUF5QjVELEdBQXpCLENBQThCLElBQTlCO0FBQ0E7O0FBQ0QsYUFBTyxJQUFQO0FBQ0E7QUF6Q2dCLEdBQWxCO0FBNENBb1QsT0FBSyxDQUFDMytCLFNBQU4sQ0FBZ0JzUSxJQUFoQixDQUFxQnRRLFNBQXJCLEdBQWlDMitCLEtBQUssQ0FBQzMrQixTQUF2QztBQUVBMitCLE9BQUssQ0FBQ0UsU0FBTixHQUFrQjtBQUNqQjFQLFlBQVEsRUFBRTtBQUNUemUsU0FBRyxFQUFFLFVBQVUyYyxLQUFWLEVBQWtCO0FBQ3RCLFlBQUk1UCxNQUFKLENBRHNCLENBR3RCO0FBQ0E7O0FBQ0EsWUFBSzRQLEtBQUssQ0FBQzdzQixJQUFOLENBQVd5SSxRQUFYLEtBQXdCLENBQXhCLElBQ0pva0IsS0FBSyxDQUFDN3NCLElBQU4sQ0FBWTZzQixLQUFLLENBQUMvcUIsSUFBbEIsS0FBNEIsSUFBNUIsSUFBb0MrcUIsS0FBSyxDQUFDN3NCLElBQU4sQ0FBV3lILEtBQVgsQ0FBa0JvbEIsS0FBSyxDQUFDL3FCLElBQXhCLEtBQWtDLElBRHZFLEVBQzhFO0FBQzdFLGlCQUFPK3FCLEtBQUssQ0FBQzdzQixJQUFOLENBQVk2c0IsS0FBSyxDQUFDL3FCLElBQWxCLENBQVA7QUFDQSxTQVJxQixDQVV0QjtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FtYixjQUFNLEdBQUd0WCxNQUFNLENBQUMrbUIsR0FBUCxDQUFZRyxLQUFLLENBQUM3c0IsSUFBbEIsRUFBd0I2c0IsS0FBSyxDQUFDL3FCLElBQTlCLEVBQW9DLEVBQXBDLENBQVQsQ0Fkc0IsQ0FnQnRCOztBQUNBLGVBQU8sQ0FBQ21iLE1BQUQsSUFBV0EsTUFBTSxLQUFLLE1BQXRCLEdBQStCLENBQS9CLEdBQW1DQSxNQUExQztBQUNBLE9BbkJRO0FBb0JUOE4sU0FBRyxFQUFFLFVBQVU4QixLQUFWLEVBQWtCO0FBRXRCO0FBQ0E7QUFDQTtBQUNBLFlBQUtsbkIsTUFBTSxDQUFDaTVCLEVBQVAsQ0FBVUQsSUFBVixDQUFnQjlSLEtBQUssQ0FBQy9xQixJQUF0QixDQUFMLEVBQW9DO0FBQ25DNkQsZ0JBQU0sQ0FBQ2k1QixFQUFQLENBQVVELElBQVYsQ0FBZ0I5UixLQUFLLENBQUMvcUIsSUFBdEIsRUFBOEIrcUIsS0FBOUI7QUFDQSxTQUZELE1BRU8sSUFBS0EsS0FBSyxDQUFDN3NCLElBQU4sQ0FBV3lJLFFBQVgsS0FBd0IsQ0FBeEIsS0FDVjlDLE1BQU0sQ0FBQ3kzQixRQUFQLENBQWlCdlEsS0FBSyxDQUFDL3FCLElBQXZCLEtBQ0ErcUIsS0FBSyxDQUFDN3NCLElBQU4sQ0FBV3lILEtBQVgsQ0FBa0JpMEIsYUFBYSxDQUFFN08sS0FBSyxDQUFDL3FCLElBQVIsQ0FBL0IsS0FBbUQsSUFGekMsQ0FBTCxFQUV1RDtBQUM3RDZELGdCQUFNLENBQUM4QixLQUFQLENBQWNvbEIsS0FBSyxDQUFDN3NCLElBQXBCLEVBQTBCNnNCLEtBQUssQ0FBQy9xQixJQUFoQyxFQUFzQytxQixLQUFLLENBQUNtSCxHQUFOLEdBQVluSCxLQUFLLENBQUNNLElBQXhEO0FBQ0EsU0FKTSxNQUlBO0FBQ05OLGVBQUssQ0FBQzdzQixJQUFOLENBQVk2c0IsS0FBSyxDQUFDL3FCLElBQWxCLElBQTJCK3FCLEtBQUssQ0FBQ21ILEdBQWpDO0FBQ0E7QUFDRDtBQWxDUTtBQURPLEdBQWxCLENBci9OaUYsQ0E0aE9qRjtBQUNBOztBQUNBbUssT0FBSyxDQUFDRSxTQUFOLENBQWdCUSxTQUFoQixHQUE0QlYsS0FBSyxDQUFDRSxTQUFOLENBQWdCUyxVQUFoQixHQUE2QjtBQUN4RC9ULE9BQUcsRUFBRSxVQUFVOEIsS0FBVixFQUFrQjtBQUN0QixVQUFLQSxLQUFLLENBQUM3c0IsSUFBTixDQUFXeUksUUFBWCxJQUF1Qm9rQixLQUFLLENBQUM3c0IsSUFBTixDQUFXNkMsVUFBdkMsRUFBb0Q7QUFDbkRncUIsYUFBSyxDQUFDN3NCLElBQU4sQ0FBWTZzQixLQUFLLENBQUMvcUIsSUFBbEIsSUFBMkIrcUIsS0FBSyxDQUFDbUgsR0FBakM7QUFDQTtBQUNEO0FBTHVELEdBQXpEO0FBUUFydUIsUUFBTSxDQUFDeTRCLE1BQVAsR0FBZ0I7QUFDZlcsVUFBTSxFQUFFLFVBQVVDLENBQVYsRUFBYztBQUNyQixhQUFPQSxDQUFQO0FBQ0EsS0FIYztBQUlmQyxTQUFLLEVBQUUsVUFBVUQsQ0FBVixFQUFjO0FBQ3BCLGFBQU8sTUFBTTMyQixJQUFJLENBQUM2MkIsR0FBTCxDQUFVRixDQUFDLEdBQUczMkIsSUFBSSxDQUFDODJCLEVBQW5CLElBQTBCLENBQXZDO0FBQ0EsS0FOYztBQU9meFEsWUFBUSxFQUFFO0FBUEssR0FBaEI7QUFVQWhwQixRQUFNLENBQUNpNUIsRUFBUCxHQUFZVCxLQUFLLENBQUMzK0IsU0FBTixDQUFnQnNRLElBQTVCLENBaGpPaUYsQ0Frak9qRjs7QUFDQW5LLFFBQU0sQ0FBQ2k1QixFQUFQLENBQVVELElBQVYsR0FBaUIsRUFBakI7QUFLQSxNQUNDUyxLQUREO0FBQUEsTUFDUUMsVUFEUjtBQUFBLE1BRUNDLFFBQVEsR0FBRyx3QkFGWjtBQUFBLE1BR0NDLElBQUksR0FBRyxhQUhSOztBQUtBLFdBQVNDLFFBQVQsR0FBb0I7QUFDbkIsUUFBS0gsVUFBTCxFQUFrQjtBQUNqQixVQUFLdjhCLFFBQVEsQ0FBQzI4QixNQUFULEtBQW9CLEtBQXBCLElBQTZCdmdDLE1BQU0sQ0FBQ3dnQyxxQkFBekMsRUFBaUU7QUFDaEV4Z0MsY0FBTSxDQUFDd2dDLHFCQUFQLENBQThCRixRQUE5QjtBQUNBLE9BRkQsTUFFTztBQUNOdGdDLGNBQU0sQ0FBQ21GLFVBQVAsQ0FBbUJtN0IsUUFBbkIsRUFBNkI3NUIsTUFBTSxDQUFDaTVCLEVBQVAsQ0FBVWUsUUFBdkM7QUFDQTs7QUFFRGg2QixZQUFNLENBQUNpNUIsRUFBUCxDQUFVZ0IsSUFBVjtBQUNBO0FBQ0QsR0F2a09nRixDQXlrT2pGOzs7QUFDQSxXQUFTQyxXQUFULEdBQXVCO0FBQ3RCM2dDLFVBQU0sQ0FBQ21GLFVBQVAsQ0FBbUIsWUFBVztBQUM3Qis2QixXQUFLLEdBQUc3OEIsU0FBUjtBQUNBLEtBRkQ7QUFHQSxXQUFTNjhCLEtBQUssR0FBR3RyQixJQUFJLENBQUNrZ0IsR0FBTCxFQUFqQjtBQUNBLEdBL2tPZ0YsQ0FpbE9qRjs7O0FBQ0EsV0FBUzhMLEtBQVQsQ0FBZ0IxOEIsSUFBaEIsRUFBc0IyOEIsWUFBdEIsRUFBcUM7QUFDcEMsUUFBSW5LLEtBQUo7QUFBQSxRQUNDaDJCLENBQUMsR0FBRyxDQURMO0FBQUEsUUFFQ29aLEtBQUssR0FBRztBQUFFOVIsWUFBTSxFQUFFOUQ7QUFBVixLQUZULENBRG9DLENBS3BDO0FBQ0E7O0FBQ0EyOEIsZ0JBQVksR0FBR0EsWUFBWSxHQUFHLENBQUgsR0FBTyxDQUFsQzs7QUFDQSxXQUFRbmdDLENBQUMsR0FBRyxDQUFaLEVBQWVBLENBQUMsSUFBSSxJQUFJbWdDLFlBQXhCLEVBQXVDO0FBQ3RDbkssV0FBSyxHQUFHdkosU0FBUyxDQUFFenNCLENBQUYsQ0FBakI7QUFDQW9aLFdBQUssQ0FBRSxXQUFXNGMsS0FBYixDQUFMLEdBQTRCNWMsS0FBSyxDQUFFLFlBQVk0YyxLQUFkLENBQUwsR0FBNkJ4eUIsSUFBekQ7QUFDQTs7QUFFRCxRQUFLMjhCLFlBQUwsRUFBb0I7QUFDbkIvbUIsV0FBSyxDQUFDcWtCLE9BQU4sR0FBZ0Jya0IsS0FBSyxDQUFDL1IsS0FBTixHQUFjN0QsSUFBOUI7QUFDQTs7QUFFRCxXQUFPNFYsS0FBUDtBQUNBOztBQUVELFdBQVNnbkIsV0FBVCxDQUFzQjE1QixLQUF0QixFQUE2QnhFLElBQTdCLEVBQW1DbStCLFNBQW5DLEVBQStDO0FBQzlDLFFBQUlwVCxLQUFKO0FBQUEsUUFDQ3FLLFVBQVUsR0FBRyxDQUFFZ0osU0FBUyxDQUFDQyxRQUFWLENBQW9CcitCLElBQXBCLEtBQThCLEVBQWhDLEVBQXFDMkQsTUFBckMsQ0FBNkN5NkIsU0FBUyxDQUFDQyxRQUFWLENBQW9CLEdBQXBCLENBQTdDLENBRGQ7QUFBQSxRQUVDai9CLEtBQUssR0FBRyxDQUZUO0FBQUEsUUFHQ3JCLE1BQU0sR0FBR3EzQixVQUFVLENBQUNyM0IsTUFIckI7O0FBSUEsV0FBUXFCLEtBQUssR0FBR3JCLE1BQWhCLEVBQXdCcUIsS0FBSyxFQUE3QixFQUFrQztBQUNqQyxVQUFPMnJCLEtBQUssR0FBR3FLLFVBQVUsQ0FBRWgyQixLQUFGLENBQVYsQ0FBb0J1QixJQUFwQixDQUEwQnc5QixTQUExQixFQUFxQ24rQixJQUFyQyxFQUEyQ3dFLEtBQTNDLENBQWYsRUFBc0U7QUFFckU7QUFDQSxlQUFPdW1CLEtBQVA7QUFDQTtBQUNEO0FBQ0Q7O0FBRUQsV0FBU3VULGdCQUFULENBQTJCcGdDLElBQTNCLEVBQWlDMnpCLEtBQWpDLEVBQXdDME0sSUFBeEMsRUFBK0M7QUFDOUMsUUFBSXYrQixJQUFKO0FBQUEsUUFBVXdFLEtBQVY7QUFBQSxRQUFpQnNuQixNQUFqQjtBQUFBLFFBQXlCakMsS0FBekI7QUFBQSxRQUFnQzJVLE9BQWhDO0FBQUEsUUFBeUNDLFNBQXpDO0FBQUEsUUFBb0RDLGNBQXBEO0FBQUEsUUFBb0U5M0IsT0FBcEU7QUFBQSxRQUNDKzNCLEtBQUssR0FBRyxXQUFXOU0sS0FBWCxJQUFvQixZQUFZQSxLQUR6QztBQUFBLFFBRUMrTSxJQUFJLEdBQUcsSUFGUjtBQUFBLFFBR0N2SyxJQUFJLEdBQUcsRUFIUjtBQUFBLFFBSUMxdUIsS0FBSyxHQUFHekgsSUFBSSxDQUFDeUgsS0FKZDtBQUFBLFFBS0NnNEIsTUFBTSxHQUFHei9CLElBQUksQ0FBQ3lJLFFBQUwsSUFBaUJna0Isa0JBQWtCLENBQUV6c0IsSUFBRixDQUw3QztBQUFBLFFBTUMyZ0MsUUFBUSxHQUFHMVYsUUFBUSxDQUFDL2EsR0FBVCxDQUFjbFEsSUFBZCxFQUFvQixRQUFwQixDQU5aLENBRDhDLENBUzlDOztBQUNBLFFBQUssQ0FBQ3FnQyxJQUFJLENBQUN4YSxLQUFYLEVBQW1CO0FBQ2xCOEYsV0FBSyxHQUFHaG1CLE1BQU0sQ0FBQ2ltQixXQUFQLENBQW9CNXJCLElBQXBCLEVBQTBCLElBQTFCLENBQVI7O0FBQ0EsVUFBSzJyQixLQUFLLENBQUNpVixRQUFOLElBQWtCLElBQXZCLEVBQThCO0FBQzdCalYsYUFBSyxDQUFDaVYsUUFBTixHQUFpQixDQUFqQjtBQUNBTixlQUFPLEdBQUczVSxLQUFLLENBQUN6RixLQUFOLENBQVlILElBQXRCOztBQUNBNEYsYUFBSyxDQUFDekYsS0FBTixDQUFZSCxJQUFaLEdBQW1CLFlBQVc7QUFDN0IsY0FBSyxDQUFDNEYsS0FBSyxDQUFDaVYsUUFBWixFQUF1QjtBQUN0Qk4sbUJBQU87QUFDUDtBQUNELFNBSkQ7QUFLQTs7QUFDRDNVLFdBQUssQ0FBQ2lWLFFBQU47QUFFQUYsVUFBSSxDQUFDdlosTUFBTCxDQUFhLFlBQVc7QUFFdkI7QUFDQXVaLFlBQUksQ0FBQ3ZaLE1BQUwsQ0FBYSxZQUFXO0FBQ3ZCd0UsZUFBSyxDQUFDaVYsUUFBTjs7QUFDQSxjQUFLLENBQUNqN0IsTUFBTSxDQUFDa2dCLEtBQVAsQ0FBYzdsQixJQUFkLEVBQW9CLElBQXBCLEVBQTJCSCxNQUFqQyxFQUEwQztBQUN6QzhyQixpQkFBSyxDQUFDekYsS0FBTixDQUFZSCxJQUFaO0FBQ0E7QUFDRCxTQUxEO0FBTUEsT0FURDtBQVVBLEtBakM2QyxDQW1DOUM7OztBQUNBLFNBQU1qa0IsSUFBTixJQUFjNnhCLEtBQWQsRUFBc0I7QUFDckJydEIsV0FBSyxHQUFHcXRCLEtBQUssQ0FBRTd4QixJQUFGLENBQWI7O0FBQ0EsVUFBS3c5QixRQUFRLENBQUN0bkIsSUFBVCxDQUFlMVIsS0FBZixDQUFMLEVBQThCO0FBQzdCLGVBQU9xdEIsS0FBSyxDQUFFN3hCLElBQUYsQ0FBWjtBQUNBOHJCLGNBQU0sR0FBR0EsTUFBTSxJQUFJdG5CLEtBQUssS0FBSyxRQUE3Qjs7QUFDQSxZQUFLQSxLQUFLLE1BQU9tNUIsTUFBTSxHQUFHLE1BQUgsR0FBWSxNQUF6QixDQUFWLEVBQThDO0FBRTdDO0FBQ0E7QUFDQSxjQUFLbjVCLEtBQUssS0FBSyxNQUFWLElBQW9CcTZCLFFBQXBCLElBQWdDQSxRQUFRLENBQUU3K0IsSUFBRixDQUFSLEtBQXFCUyxTQUExRCxFQUFzRTtBQUNyRWs5QixrQkFBTSxHQUFHLElBQVQsQ0FEcUUsQ0FHdEU7QUFDQyxXQUpELE1BSU87QUFDTjtBQUNBO0FBQ0Q7O0FBQ0R0SixZQUFJLENBQUVyMEIsSUFBRixDQUFKLEdBQWU2K0IsUUFBUSxJQUFJQSxRQUFRLENBQUU3K0IsSUFBRixDQUFwQixJQUFnQzZELE1BQU0sQ0FBQzhCLEtBQVAsQ0FBY3pILElBQWQsRUFBb0I4QixJQUFwQixDQUEvQztBQUNBO0FBQ0QsS0F2RDZDLENBeUQ5Qzs7O0FBQ0F5K0IsYUFBUyxHQUFHLENBQUM1NkIsTUFBTSxDQUFDcU0sYUFBUCxDQUFzQjJoQixLQUF0QixDQUFiOztBQUNBLFFBQUssQ0FBQzRNLFNBQUQsSUFBYzU2QixNQUFNLENBQUNxTSxhQUFQLENBQXNCbWtCLElBQXRCLENBQW5CLEVBQWtEO0FBQ2pEO0FBQ0EsS0E3RDZDLENBK0Q5Qzs7O0FBQ0EsUUFBS3NLLEtBQUssSUFBSXpnQyxJQUFJLENBQUN5SSxRQUFMLEtBQWtCLENBQWhDLEVBQW9DO0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E0M0IsVUFBSSxDQUFDUSxRQUFMLEdBQWdCLENBQUVwNUIsS0FBSyxDQUFDbzVCLFFBQVIsRUFBa0JwNUIsS0FBSyxDQUFDcTVCLFNBQXhCLEVBQW1DcjVCLEtBQUssQ0FBQ3M1QixTQUF6QyxDQUFoQixDQU5tQyxDQVFuQzs7QUFDQVAsb0JBQWMsR0FBR0csUUFBUSxJQUFJQSxRQUFRLENBQUNqNEIsT0FBdEM7O0FBQ0EsVUFBSzgzQixjQUFjLElBQUksSUFBdkIsRUFBOEI7QUFDN0JBLHNCQUFjLEdBQUd2VixRQUFRLENBQUMvYSxHQUFULENBQWNsUSxJQUFkLEVBQW9CLFNBQXBCLENBQWpCO0FBQ0E7O0FBQ0QwSSxhQUFPLEdBQUcvQyxNQUFNLENBQUMrbUIsR0FBUCxDQUFZMXNCLElBQVosRUFBa0IsU0FBbEIsQ0FBVjs7QUFDQSxVQUFLMEksT0FBTyxLQUFLLE1BQWpCLEVBQTBCO0FBQ3pCLFlBQUs4M0IsY0FBTCxFQUFzQjtBQUNyQjkzQixpQkFBTyxHQUFHODNCLGNBQVY7QUFDQSxTQUZELE1BRU87QUFFTjtBQUNBaFQsa0JBQVEsQ0FBRSxDQUFFeHRCLElBQUYsQ0FBRixFQUFZLElBQVosQ0FBUjtBQUNBd2dDLHdCQUFjLEdBQUd4Z0MsSUFBSSxDQUFDeUgsS0FBTCxDQUFXaUIsT0FBWCxJQUFzQjgzQixjQUF2QztBQUNBOTNCLGlCQUFPLEdBQUcvQyxNQUFNLENBQUMrbUIsR0FBUCxDQUFZMXNCLElBQVosRUFBa0IsU0FBbEIsQ0FBVjtBQUNBd3RCLGtCQUFRLENBQUUsQ0FBRXh0QixJQUFGLENBQUYsQ0FBUjtBQUNBO0FBQ0QsT0F6QmtDLENBMkJuQzs7O0FBQ0EsVUFBSzBJLE9BQU8sS0FBSyxRQUFaLElBQXdCQSxPQUFPLEtBQUssY0FBWixJQUE4QjgzQixjQUFjLElBQUksSUFBN0UsRUFBb0Y7QUFDbkYsWUFBSzc2QixNQUFNLENBQUMrbUIsR0FBUCxDQUFZMXNCLElBQVosRUFBa0IsT0FBbEIsTUFBZ0MsTUFBckMsRUFBOEM7QUFFN0M7QUFDQSxjQUFLLENBQUN1Z0MsU0FBTixFQUFrQjtBQUNqQkcsZ0JBQUksQ0FBQ3pzQixJQUFMLENBQVcsWUFBVztBQUNyQnhNLG1CQUFLLENBQUNpQixPQUFOLEdBQWdCODNCLGNBQWhCO0FBQ0EsYUFGRDs7QUFHQSxnQkFBS0EsY0FBYyxJQUFJLElBQXZCLEVBQThCO0FBQzdCOTNCLHFCQUFPLEdBQUdqQixLQUFLLENBQUNpQixPQUFoQjtBQUNBODNCLDRCQUFjLEdBQUc5M0IsT0FBTyxLQUFLLE1BQVosR0FBcUIsRUFBckIsR0FBMEJBLE9BQTNDO0FBQ0E7QUFDRDs7QUFDRGpCLGVBQUssQ0FBQ2lCLE9BQU4sR0FBZ0IsY0FBaEI7QUFDQTtBQUNEO0FBQ0Q7O0FBRUQsUUFBSzIzQixJQUFJLENBQUNRLFFBQVYsRUFBcUI7QUFDcEJwNUIsV0FBSyxDQUFDbzVCLFFBQU4sR0FBaUIsUUFBakI7QUFDQUgsVUFBSSxDQUFDdlosTUFBTCxDQUFhLFlBQVc7QUFDdkIxZixhQUFLLENBQUNvNUIsUUFBTixHQUFpQlIsSUFBSSxDQUFDUSxRQUFMLENBQWUsQ0FBZixDQUFqQjtBQUNBcDVCLGFBQUssQ0FBQ3E1QixTQUFOLEdBQWtCVCxJQUFJLENBQUNRLFFBQUwsQ0FBZSxDQUFmLENBQWxCO0FBQ0FwNUIsYUFBSyxDQUFDczVCLFNBQU4sR0FBa0JWLElBQUksQ0FBQ1EsUUFBTCxDQUFlLENBQWYsQ0FBbEI7QUFDQSxPQUpEO0FBS0EsS0FySDZDLENBdUg5Qzs7O0FBQ0FOLGFBQVMsR0FBRyxLQUFaOztBQUNBLFNBQU16K0IsSUFBTixJQUFjcTBCLElBQWQsRUFBcUI7QUFFcEI7QUFDQSxVQUFLLENBQUNvSyxTQUFOLEVBQWtCO0FBQ2pCLFlBQUtJLFFBQUwsRUFBZ0I7QUFDZixjQUFLLFlBQVlBLFFBQWpCLEVBQTRCO0FBQzNCbEIsa0JBQU0sR0FBR2tCLFFBQVEsQ0FBQ2xCLE1BQWxCO0FBQ0E7QUFDRCxTQUpELE1BSU87QUFDTmtCLGtCQUFRLEdBQUcxVixRQUFRLENBQUN0QixNQUFULENBQWlCM3BCLElBQWpCLEVBQXVCLFFBQXZCLEVBQWlDO0FBQUUwSSxtQkFBTyxFQUFFODNCO0FBQVgsV0FBakMsQ0FBWDtBQUNBLFNBUGdCLENBU2pCOzs7QUFDQSxZQUFLNVMsTUFBTCxFQUFjO0FBQ2IrUyxrQkFBUSxDQUFDbEIsTUFBVCxHQUFrQixDQUFDQSxNQUFuQjtBQUNBLFNBWmdCLENBY2pCOzs7QUFDQSxZQUFLQSxNQUFMLEVBQWM7QUFDYmpTLGtCQUFRLENBQUUsQ0FBRXh0QixJQUFGLENBQUYsRUFBWSxJQUFaLENBQVI7QUFDQTtBQUVEOzs7QUFFQTBnQyxZQUFJLENBQUN6c0IsSUFBTCxDQUFXLFlBQVc7QUFFdEI7QUFFQztBQUNBLGNBQUssQ0FBQ3dyQixNQUFOLEVBQWU7QUFDZGpTLG9CQUFRLENBQUUsQ0FBRXh0QixJQUFGLENBQUYsQ0FBUjtBQUNBOztBQUNEaXJCLGtCQUFRLENBQUNoRixNQUFULENBQWlCam1CLElBQWpCLEVBQXVCLFFBQXZCOztBQUNBLGVBQU04QixJQUFOLElBQWNxMEIsSUFBZCxFQUFxQjtBQUNwQnh3QixrQkFBTSxDQUFDOEIsS0FBUCxDQUFjekgsSUFBZCxFQUFvQjhCLElBQXBCLEVBQTBCcTBCLElBQUksQ0FBRXIwQixJQUFGLENBQTlCO0FBQ0E7QUFDRCxTQVpEO0FBYUEsT0FyQ21CLENBdUNwQjs7O0FBQ0F5K0IsZUFBUyxHQUFHUCxXQUFXLENBQUVQLE1BQU0sR0FBR2tCLFFBQVEsQ0FBRTcrQixJQUFGLENBQVgsR0FBc0IsQ0FBOUIsRUFBaUNBLElBQWpDLEVBQXVDNCtCLElBQXZDLENBQXZCOztBQUNBLFVBQUssRUFBRzUrQixJQUFJLElBQUk2K0IsUUFBWCxDQUFMLEVBQTZCO0FBQzVCQSxnQkFBUSxDQUFFNytCLElBQUYsQ0FBUixHQUFtQnkrQixTQUFTLENBQUMzaUIsS0FBN0I7O0FBQ0EsWUFBSzZoQixNQUFMLEVBQWM7QUFDYmMsbUJBQVMsQ0FBQ3J2QixHQUFWLEdBQWdCcXZCLFNBQVMsQ0FBQzNpQixLQUExQjtBQUNBMmlCLG1CQUFTLENBQUMzaUIsS0FBVixHQUFrQixDQUFsQjtBQUNBO0FBQ0Q7QUFDRDtBQUNEOztBQUVELFdBQVNvakIsVUFBVCxDQUFxQnJOLEtBQXJCLEVBQTRCc04sYUFBNUIsRUFBNEM7QUFDM0MsUUFBSS8vQixLQUFKLEVBQVdrUSxJQUFYLEVBQWlCZ3RCLE1BQWpCLEVBQXlCOTNCLEtBQXpCLEVBQWdDcWxCLEtBQWhDLENBRDJDLENBRzNDOztBQUNBLFNBQU16cUIsS0FBTixJQUFleXlCLEtBQWYsRUFBdUI7QUFDdEJ2aUIsVUFBSSxHQUFHbVosU0FBUyxDQUFFcnBCLEtBQUYsQ0FBaEI7QUFDQWs5QixZQUFNLEdBQUc2QyxhQUFhLENBQUU3dkIsSUFBRixDQUF0QjtBQUNBOUssV0FBSyxHQUFHcXRCLEtBQUssQ0FBRXp5QixLQUFGLENBQWI7O0FBQ0EsVUFBS2lCLEtBQUssQ0FBQ0csT0FBTixDQUFlZ0UsS0FBZixDQUFMLEVBQThCO0FBQzdCODNCLGNBQU0sR0FBRzkzQixLQUFLLENBQUUsQ0FBRixDQUFkO0FBQ0FBLGFBQUssR0FBR3F0QixLQUFLLENBQUV6eUIsS0FBRixDQUFMLEdBQWlCb0YsS0FBSyxDQUFFLENBQUYsQ0FBOUI7QUFDQTs7QUFFRCxVQUFLcEYsS0FBSyxLQUFLa1EsSUFBZixFQUFzQjtBQUNyQnVpQixhQUFLLENBQUV2aUIsSUFBRixDQUFMLEdBQWdCOUssS0FBaEI7QUFDQSxlQUFPcXRCLEtBQUssQ0FBRXp5QixLQUFGLENBQVo7QUFDQTs7QUFFRHlxQixXQUFLLEdBQUdobUIsTUFBTSxDQUFDeTNCLFFBQVAsQ0FBaUJoc0IsSUFBakIsQ0FBUjs7QUFDQSxVQUFLdWEsS0FBSyxJQUFJLFlBQVlBLEtBQTFCLEVBQWtDO0FBQ2pDcmxCLGFBQUssR0FBR3FsQixLQUFLLENBQUNxUyxNQUFOLENBQWMxM0IsS0FBZCxDQUFSO0FBQ0EsZUFBT3F0QixLQUFLLENBQUV2aUIsSUFBRixDQUFaLENBRmlDLENBSWpDO0FBQ0E7O0FBQ0EsYUFBTWxRLEtBQU4sSUFBZW9GLEtBQWYsRUFBdUI7QUFDdEIsY0FBSyxFQUFHcEYsS0FBSyxJQUFJeXlCLEtBQVosQ0FBTCxFQUEyQjtBQUMxQkEsaUJBQUssQ0FBRXp5QixLQUFGLENBQUwsR0FBaUJvRixLQUFLLENBQUVwRixLQUFGLENBQXRCO0FBQ0ErL0IseUJBQWEsQ0FBRS8vQixLQUFGLENBQWIsR0FBeUJrOUIsTUFBekI7QUFDQTtBQUNEO0FBQ0QsT0FaRCxNQVlPO0FBQ042QyxxQkFBYSxDQUFFN3ZCLElBQUYsQ0FBYixHQUF3Qmd0QixNQUF4QjtBQUNBO0FBQ0Q7QUFDRDs7QUFFRCxXQUFTOEIsU0FBVCxDQUFvQmxnQyxJQUFwQixFQUEwQmtoQyxVQUExQixFQUFzQ3A3QixPQUF0QyxFQUFnRDtBQUMvQyxRQUFJbVgsTUFBSjtBQUFBLFFBQ0Nra0IsT0FERDtBQUFBLFFBRUNqZ0MsS0FBSyxHQUFHLENBRlQ7QUFBQSxRQUdDckIsTUFBTSxHQUFHcWdDLFNBQVMsQ0FBQ2tCLFVBQVYsQ0FBcUJ2aEMsTUFIL0I7QUFBQSxRQUlDdW5CLFFBQVEsR0FBR3poQixNQUFNLENBQUM4RSxRQUFQLEdBQWtCMGMsTUFBbEIsQ0FBMEIsWUFBVztBQUUvQztBQUNBLGFBQU95WSxJQUFJLENBQUM1L0IsSUFBWjtBQUNBLEtBSlUsQ0FKWjtBQUFBLFFBU0M0L0IsSUFBSSxHQUFHLFlBQVc7QUFDakIsVUFBS3VCLE9BQUwsRUFBZTtBQUNkLGVBQU8sS0FBUDtBQUNBOztBQUNELFVBQUlFLFdBQVcsR0FBR2pDLEtBQUssSUFBSVMsV0FBVyxFQUF0QztBQUFBLFVBQ0NqWCxTQUFTLEdBQUd2Z0IsSUFBSSxDQUFDaTBCLEdBQUwsQ0FBVSxDQUFWLEVBQWEyRCxTQUFTLENBQUNxQixTQUFWLEdBQXNCckIsU0FBUyxDQUFDeEIsUUFBaEMsR0FBMkM0QyxXQUF4RCxDQURiO0FBQUEsVUFHQztBQUNBO0FBQ0FwZ0IsVUFBSSxHQUFHMkgsU0FBUyxHQUFHcVgsU0FBUyxDQUFDeEIsUUFBdEIsSUFBa0MsQ0FMMUM7QUFBQSxVQU1DRixPQUFPLEdBQUcsSUFBSXRkLElBTmY7QUFBQSxVQU9DL2YsS0FBSyxHQUFHLENBUFQ7QUFBQSxVQVFDckIsTUFBTSxHQUFHb2dDLFNBQVMsQ0FBQ3NCLE1BQVYsQ0FBaUIxaEMsTUFSM0I7O0FBVUEsYUFBUXFCLEtBQUssR0FBR3JCLE1BQWhCLEVBQXdCcUIsS0FBSyxFQUE3QixFQUFrQztBQUNqQysrQixpQkFBUyxDQUFDc0IsTUFBVixDQUFrQnJnQyxLQUFsQixFQUEwQm85QixHQUExQixDQUErQkMsT0FBL0I7QUFDQTs7QUFFRG5YLGNBQVEsQ0FBQ2MsVUFBVCxDQUFxQmxvQixJQUFyQixFQUEyQixDQUFFaWdDLFNBQUYsRUFBYTFCLE9BQWIsRUFBc0IzVixTQUF0QixDQUEzQixFQWxCaUIsQ0FvQmpCOztBQUNBLFVBQUsyVixPQUFPLEdBQUcsQ0FBVixJQUFlMStCLE1BQXBCLEVBQTZCO0FBQzVCLGVBQU8rb0IsU0FBUDtBQUNBLE9BdkJnQixDQXlCakI7OztBQUNBLFVBQUssQ0FBQy9vQixNQUFOLEVBQWU7QUFDZHVuQixnQkFBUSxDQUFDYyxVQUFULENBQXFCbG9CLElBQXJCLEVBQTJCLENBQUVpZ0MsU0FBRixFQUFhLENBQWIsRUFBZ0IsQ0FBaEIsQ0FBM0I7QUFDQSxPQTVCZ0IsQ0E4QmpCOzs7QUFDQTdZLGNBQVEsQ0FBQ2UsV0FBVCxDQUFzQm5vQixJQUF0QixFQUE0QixDQUFFaWdDLFNBQUYsQ0FBNUI7QUFDQSxhQUFPLEtBQVA7QUFDQSxLQTFDRjtBQUFBLFFBMkNDQSxTQUFTLEdBQUc3WSxRQUFRLENBQUN6WixPQUFULENBQWtCO0FBQzdCM04sVUFBSSxFQUFFQSxJQUR1QjtBQUU3QjJ6QixXQUFLLEVBQUVodUIsTUFBTSxDQUFDaEUsTUFBUCxDQUFlLEVBQWYsRUFBbUJ1L0IsVUFBbkIsQ0FGc0I7QUFHN0JiLFVBQUksRUFBRTE2QixNQUFNLENBQUNoRSxNQUFQLENBQWUsSUFBZixFQUFxQjtBQUMxQnMvQixxQkFBYSxFQUFFLEVBRFc7QUFFMUI3QyxjQUFNLEVBQUV6NEIsTUFBTSxDQUFDeTRCLE1BQVAsQ0FBY3pQO0FBRkksT0FBckIsRUFHSDdvQixPQUhHLENBSHVCO0FBTzdCMDdCLHdCQUFrQixFQUFFTixVQVBTO0FBUTdCTyxxQkFBZSxFQUFFMzdCLE9BUlk7QUFTN0J3N0IsZUFBUyxFQUFFbEMsS0FBSyxJQUFJUyxXQUFXLEVBVEY7QUFVN0JwQixjQUFRLEVBQUUzNEIsT0FBTyxDQUFDMjRCLFFBVlc7QUFXN0I4QyxZQUFNLEVBQUUsRUFYcUI7QUFZN0J2QixpQkFBVyxFQUFFLFVBQVVsK0IsSUFBVixFQUFnQm9QLEdBQWhCLEVBQXNCO0FBQ2xDLFlBQUkyYixLQUFLLEdBQUdsbkIsTUFBTSxDQUFDdzRCLEtBQVAsQ0FBY24rQixJQUFkLEVBQW9CaWdDLFNBQVMsQ0FBQ0ksSUFBOUIsRUFBb0N2K0IsSUFBcEMsRUFBMENvUCxHQUExQyxFQUNWK3VCLFNBQVMsQ0FBQ0ksSUFBVixDQUFlWSxhQUFmLENBQThCbi9CLElBQTlCLEtBQXdDbStCLFNBQVMsQ0FBQ0ksSUFBVixDQUFlakMsTUFEN0MsQ0FBWjtBQUVBNkIsaUJBQVMsQ0FBQ3NCLE1BQVYsQ0FBaUIzZ0MsSUFBakIsQ0FBdUJpc0IsS0FBdkI7QUFDQSxlQUFPQSxLQUFQO0FBQ0EsT0FqQjRCO0FBa0I3QmhCLFVBQUksRUFBRSxVQUFVNlYsT0FBVixFQUFvQjtBQUN6QixZQUFJeGdDLEtBQUssR0FBRyxDQUFaO0FBQUEsWUFFQztBQUNBO0FBQ0FyQixjQUFNLEdBQUc2aEMsT0FBTyxHQUFHekIsU0FBUyxDQUFDc0IsTUFBVixDQUFpQjFoQyxNQUFwQixHQUE2QixDQUo5Qzs7QUFLQSxZQUFLc2hDLE9BQUwsRUFBZTtBQUNkLGlCQUFPLElBQVA7QUFDQTs7QUFDREEsZUFBTyxHQUFHLElBQVY7O0FBQ0EsZUFBUWpnQyxLQUFLLEdBQUdyQixNQUFoQixFQUF3QnFCLEtBQUssRUFBN0IsRUFBa0M7QUFDakMrK0IsbUJBQVMsQ0FBQ3NCLE1BQVYsQ0FBa0JyZ0MsS0FBbEIsRUFBMEJvOUIsR0FBMUIsQ0FBK0IsQ0FBL0I7QUFDQSxTQVp3QixDQWN6Qjs7O0FBQ0EsWUFBS29ELE9BQUwsRUFBZTtBQUNkdGEsa0JBQVEsQ0FBQ2MsVUFBVCxDQUFxQmxvQixJQUFyQixFQUEyQixDQUFFaWdDLFNBQUYsRUFBYSxDQUFiLEVBQWdCLENBQWhCLENBQTNCO0FBQ0E3WSxrQkFBUSxDQUFDZSxXQUFULENBQXNCbm9CLElBQXRCLEVBQTRCLENBQUVpZ0MsU0FBRixFQUFheUIsT0FBYixDQUE1QjtBQUNBLFNBSEQsTUFHTztBQUNOdGEsa0JBQVEsQ0FBQ21CLFVBQVQsQ0FBcUJ2b0IsSUFBckIsRUFBMkIsQ0FBRWlnQyxTQUFGLEVBQWF5QixPQUFiLENBQTNCO0FBQ0E7O0FBQ0QsZUFBTyxJQUFQO0FBQ0E7QUF4QzRCLEtBQWxCLENBM0NiO0FBQUEsUUFxRkMvTixLQUFLLEdBQUdzTSxTQUFTLENBQUN0TSxLQXJGbkI7O0FBdUZBcU4sY0FBVSxDQUFFck4sS0FBRixFQUFTc00sU0FBUyxDQUFDSSxJQUFWLENBQWVZLGFBQXhCLENBQVY7O0FBRUEsV0FBUS8vQixLQUFLLEdBQUdyQixNQUFoQixFQUF3QnFCLEtBQUssRUFBN0IsRUFBa0M7QUFDakMrYixZQUFNLEdBQUdpakIsU0FBUyxDQUFDa0IsVUFBVixDQUFzQmxnQyxLQUF0QixFQUE4QnVCLElBQTlCLENBQW9DdzlCLFNBQXBDLEVBQStDamdDLElBQS9DLEVBQXFEMnpCLEtBQXJELEVBQTREc00sU0FBUyxDQUFDSSxJQUF0RSxDQUFUOztBQUNBLFVBQUtwakIsTUFBTCxFQUFjO0FBQ2IsWUFBS3BPLFVBQVUsQ0FBRW9PLE1BQU0sQ0FBQzRPLElBQVQsQ0FBZixFQUFpQztBQUNoQ2xtQixnQkFBTSxDQUFDaW1CLFdBQVAsQ0FBb0JxVSxTQUFTLENBQUNqZ0MsSUFBOUIsRUFBb0NpZ0MsU0FBUyxDQUFDSSxJQUFWLENBQWV4YSxLQUFuRCxFQUEyRGdHLElBQTNELEdBQ0M1TyxNQUFNLENBQUM0TyxJQUFQLENBQVlsaEIsSUFBWixDQUFrQnNTLE1BQWxCLENBREQ7QUFFQTs7QUFDRCxlQUFPQSxNQUFQO0FBQ0E7QUFDRDs7QUFFRHRYLFVBQU0sQ0FBQzZLLEdBQVAsQ0FBWW1qQixLQUFaLEVBQW1CcU0sV0FBbkIsRUFBZ0NDLFNBQWhDOztBQUVBLFFBQUtweEIsVUFBVSxDQUFFb3hCLFNBQVMsQ0FBQ0ksSUFBVixDQUFlemlCLEtBQWpCLENBQWYsRUFBMEM7QUFDekNxaUIsZUFBUyxDQUFDSSxJQUFWLENBQWV6aUIsS0FBZixDQUFxQm5iLElBQXJCLENBQTJCekMsSUFBM0IsRUFBaUNpZ0MsU0FBakM7QUFDQSxLQXpHOEMsQ0EyRy9DOzs7QUFDQUEsYUFBUyxDQUNQM3pCLFFBREYsQ0FDWTJ6QixTQUFTLENBQUNJLElBQVYsQ0FBZS96QixRQUQzQixFQUVFMkgsSUFGRixDQUVRZ3NCLFNBQVMsQ0FBQ0ksSUFBVixDQUFlcHNCLElBRnZCLEVBRTZCZ3NCLFNBQVMsQ0FBQ0ksSUFBVixDQUFlbDBCLFFBRjVDLEVBR0UyYSxJQUhGLENBR1FtWixTQUFTLENBQUNJLElBQVYsQ0FBZXZaLElBSHZCLEVBSUVLLE1BSkYsQ0FJVThZLFNBQVMsQ0FBQ0ksSUFBVixDQUFlbFosTUFKekI7QUFNQXhoQixVQUFNLENBQUNpNUIsRUFBUCxDQUFVK0MsS0FBVixDQUNDaDhCLE1BQU0sQ0FBQ2hFLE1BQVAsQ0FBZWkrQixJQUFmLEVBQXFCO0FBQ3BCNS9CLFVBQUksRUFBRUEsSUFEYztBQUVwQjBnQyxVQUFJLEVBQUVULFNBRmM7QUFHcEJwYSxXQUFLLEVBQUVvYSxTQUFTLENBQUNJLElBQVYsQ0FBZXhhO0FBSEYsS0FBckIsQ0FERDtBQVFBLFdBQU9vYSxTQUFQO0FBQ0E7O0FBRUR0NkIsUUFBTSxDQUFDdTZCLFNBQVAsR0FBbUJ2NkIsTUFBTSxDQUFDaEUsTUFBUCxDQUFldStCLFNBQWYsRUFBMEI7QUFFNUNDLFlBQVEsRUFBRTtBQUNULFdBQUssQ0FBRSxVQUFVcitCLElBQVYsRUFBZ0J3RSxLQUFoQixFQUF3QjtBQUM5QixZQUFJdW1CLEtBQUssR0FBRyxLQUFLbVQsV0FBTCxDQUFrQmwrQixJQUFsQixFQUF3QndFLEtBQXhCLENBQVo7QUFDQXFtQixpQkFBUyxDQUFFRSxLQUFLLENBQUM3c0IsSUFBUixFQUFjOEIsSUFBZCxFQUFvQnNxQixPQUFPLENBQUMxZ0IsSUFBUixDQUFjcEYsS0FBZCxDQUFwQixFQUEyQ3VtQixLQUEzQyxDQUFUO0FBQ0EsZUFBT0EsS0FBUDtBQUNBLE9BSkk7QUFESSxLQUZrQztBQVU1QytVLFdBQU8sRUFBRSxVQUFVak8sS0FBVixFQUFpQnB2QixRQUFqQixFQUE0QjtBQUNwQyxVQUFLc0ssVUFBVSxDQUFFOGtCLEtBQUYsQ0FBZixFQUEyQjtBQUMxQnB2QixnQkFBUSxHQUFHb3ZCLEtBQVg7QUFDQUEsYUFBSyxHQUFHLENBQUUsR0FBRixDQUFSO0FBQ0EsT0FIRCxNQUdPO0FBQ05BLGFBQUssR0FBR0EsS0FBSyxDQUFDOXVCLEtBQU4sQ0FBYXNnQixhQUFiLENBQVI7QUFDQTs7QUFFRCxVQUFJcmpCLElBQUo7QUFBQSxVQUNDWixLQUFLLEdBQUcsQ0FEVDtBQUFBLFVBRUNyQixNQUFNLEdBQUc4ekIsS0FBSyxDQUFDOXpCLE1BRmhCOztBQUlBLGFBQVFxQixLQUFLLEdBQUdyQixNQUFoQixFQUF3QnFCLEtBQUssRUFBN0IsRUFBa0M7QUFDakNZLFlBQUksR0FBRzZ4QixLQUFLLENBQUV6eUIsS0FBRixDQUFaO0FBQ0FnL0IsaUJBQVMsQ0FBQ0MsUUFBVixDQUFvQnIrQixJQUFwQixJQUE2Qm8rQixTQUFTLENBQUNDLFFBQVYsQ0FBb0JyK0IsSUFBcEIsS0FBOEIsRUFBM0Q7QUFDQW8rQixpQkFBUyxDQUFDQyxRQUFWLENBQW9CcitCLElBQXBCLEVBQTJCK1osT0FBM0IsQ0FBb0N0WCxRQUFwQztBQUNBO0FBQ0QsS0EzQjJDO0FBNkI1QzY4QixjQUFVLEVBQUUsQ0FBRWhCLGdCQUFGLENBN0JnQztBQStCNUN5QixhQUFTLEVBQUUsVUFBVXQ5QixRQUFWLEVBQW9CMHpCLE9BQXBCLEVBQThCO0FBQ3hDLFVBQUtBLE9BQUwsRUFBZTtBQUNkaUksaUJBQVMsQ0FBQ2tCLFVBQVYsQ0FBcUJ2bEIsT0FBckIsQ0FBOEJ0WCxRQUE5QjtBQUNBLE9BRkQsTUFFTztBQUNOMjdCLGlCQUFTLENBQUNrQixVQUFWLENBQXFCeGdDLElBQXJCLENBQTJCMkQsUUFBM0I7QUFDQTtBQUNEO0FBckMyQyxHQUExQixDQUFuQjs7QUF3Q0FvQixRQUFNLENBQUNtOEIsS0FBUCxHQUFlLFVBQVVBLEtBQVYsRUFBaUIxRCxNQUFqQixFQUF5QjN3QixFQUF6QixFQUE4QjtBQUM1QyxRQUFJczBCLEdBQUcsR0FBR0QsS0FBSyxJQUFJLE9BQU9BLEtBQVAsS0FBaUIsUUFBMUIsR0FBcUNuOEIsTUFBTSxDQUFDaEUsTUFBUCxDQUFlLEVBQWYsRUFBbUJtZ0MsS0FBbkIsQ0FBckMsR0FBa0U7QUFDM0UzMUIsY0FBUSxFQUFFc0IsRUFBRSxJQUFJLENBQUNBLEVBQUQsSUFBTzJ3QixNQUFiLElBQ1R2dkIsVUFBVSxDQUFFaXpCLEtBQUYsQ0FBVixJQUF1QkEsS0FGbUQ7QUFHM0VyRCxjQUFRLEVBQUVxRCxLQUhpRTtBQUkzRTFELFlBQU0sRUFBRTN3QixFQUFFLElBQUkyd0IsTUFBTixJQUFnQkEsTUFBTSxJQUFJLENBQUN2dkIsVUFBVSxDQUFFdXZCLE1BQUYsQ0FBckIsSUFBbUNBO0FBSmdCLEtBQTVFLENBRDRDLENBUTVDOztBQUNBLFFBQUt6NEIsTUFBTSxDQUFDaTVCLEVBQVAsQ0FBVTM5QixHQUFmLEVBQXFCO0FBQ3BCOGdDLFNBQUcsQ0FBQ3RELFFBQUosR0FBZSxDQUFmO0FBRUEsS0FIRCxNQUdPO0FBQ04sVUFBSyxPQUFPc0QsR0FBRyxDQUFDdEQsUUFBWCxLQUF3QixRQUE3QixFQUF3QztBQUN2QyxZQUFLc0QsR0FBRyxDQUFDdEQsUUFBSixJQUFnQjk0QixNQUFNLENBQUNpNUIsRUFBUCxDQUFVb0QsTUFBL0IsRUFBd0M7QUFDdkNELGFBQUcsQ0FBQ3RELFFBQUosR0FBZTk0QixNQUFNLENBQUNpNUIsRUFBUCxDQUFVb0QsTUFBVixDQUFrQkQsR0FBRyxDQUFDdEQsUUFBdEIsQ0FBZjtBQUVBLFNBSEQsTUFHTztBQUNOc0QsYUFBRyxDQUFDdEQsUUFBSixHQUFlOTRCLE1BQU0sQ0FBQ2k1QixFQUFQLENBQVVvRCxNQUFWLENBQWlCclQsUUFBaEM7QUFDQTtBQUNEO0FBQ0QsS0FyQjJDLENBdUI1Qzs7O0FBQ0EsUUFBS29ULEdBQUcsQ0FBQ2xjLEtBQUosSUFBYSxJQUFiLElBQXFCa2MsR0FBRyxDQUFDbGMsS0FBSixLQUFjLElBQXhDLEVBQStDO0FBQzlDa2MsU0FBRyxDQUFDbGMsS0FBSixHQUFZLElBQVo7QUFDQSxLQTFCMkMsQ0E0QjVDOzs7QUFDQWtjLE9BQUcsQ0FBQzlJLEdBQUosR0FBVThJLEdBQUcsQ0FBQzUxQixRQUFkOztBQUVBNDFCLE9BQUcsQ0FBQzUxQixRQUFKLEdBQWUsWUFBVztBQUN6QixVQUFLMEMsVUFBVSxDQUFFa3pCLEdBQUcsQ0FBQzlJLEdBQU4sQ0FBZixFQUE2QjtBQUM1QjhJLFdBQUcsQ0FBQzlJLEdBQUosQ0FBUXgyQixJQUFSLENBQWMsSUFBZDtBQUNBOztBQUVELFVBQUtzL0IsR0FBRyxDQUFDbGMsS0FBVCxFQUFpQjtBQUNoQmxnQixjQUFNLENBQUM4bEIsT0FBUCxDQUFnQixJQUFoQixFQUFzQnNXLEdBQUcsQ0FBQ2xjLEtBQTFCO0FBQ0E7QUFDRCxLQVJEOztBQVVBLFdBQU9rYyxHQUFQO0FBQ0EsR0ExQ0Q7O0FBNENBcDhCLFFBQU0sQ0FBQzhILEVBQVAsQ0FBVTlMLE1BQVYsQ0FBa0I7QUFDakJzZ0MsVUFBTSxFQUFFLFVBQVVILEtBQVYsRUFBaUJJLEVBQWpCLEVBQXFCOUQsTUFBckIsRUFBNkI3NUIsUUFBN0IsRUFBd0M7QUFFL0M7QUFDQSxhQUFPLEtBQUtpVyxNQUFMLENBQWFpUyxrQkFBYixFQUFrQ0MsR0FBbEMsQ0FBdUMsU0FBdkMsRUFBa0QsQ0FBbEQsRUFBc0RlLElBQXRELEdBRU47QUFGTSxPQUdMdmMsR0FISyxHQUdDaXhCLE9BSEQsQ0FHVTtBQUFFOUUsZUFBTyxFQUFFNkU7QUFBWCxPQUhWLEVBRzJCSixLQUgzQixFQUdrQzFELE1BSGxDLEVBRzBDNzVCLFFBSDFDLENBQVA7QUFJQSxLQVJnQjtBQVNqQjQ5QixXQUFPLEVBQUUsVUFBVXJnQyxJQUFWLEVBQWdCZ2dDLEtBQWhCLEVBQXVCMUQsTUFBdkIsRUFBK0I3NUIsUUFBL0IsRUFBMEM7QUFDbEQsVUFBSTJoQixLQUFLLEdBQUd2Z0IsTUFBTSxDQUFDcU0sYUFBUCxDQUFzQmxRLElBQXRCLENBQVo7QUFBQSxVQUNDc2dDLE1BQU0sR0FBR3o4QixNQUFNLENBQUNtOEIsS0FBUCxDQUFjQSxLQUFkLEVBQXFCMUQsTUFBckIsRUFBNkI3NUIsUUFBN0IsQ0FEVjtBQUFBLFVBRUM4OUIsV0FBVyxHQUFHLFlBQVc7QUFFeEI7QUFDQSxZQUFJM0IsSUFBSSxHQUFHUixTQUFTLENBQUUsSUFBRixFQUFRdjZCLE1BQU0sQ0FBQ2hFLE1BQVAsQ0FBZSxFQUFmLEVBQW1CRyxJQUFuQixDQUFSLEVBQW1Dc2dDLE1BQW5DLENBQXBCLENBSHdCLENBS3hCOztBQUNBLFlBQUtsYyxLQUFLLElBQUkrRSxRQUFRLENBQUMvYSxHQUFULENBQWMsSUFBZCxFQUFvQixRQUFwQixDQUFkLEVBQStDO0FBQzlDd3dCLGNBQUksQ0FBQzdVLElBQUwsQ0FBVyxJQUFYO0FBQ0E7QUFDRCxPQVhGOztBQVlDd1csaUJBQVcsQ0FBQ0MsTUFBWixHQUFxQkQsV0FBckI7QUFFRCxhQUFPbmMsS0FBSyxJQUFJa2MsTUFBTSxDQUFDdmMsS0FBUCxLQUFpQixLQUExQixHQUNOLEtBQUt0VixJQUFMLENBQVc4eEIsV0FBWCxDQURNLEdBRU4sS0FBS3hjLEtBQUwsQ0FBWXVjLE1BQU0sQ0FBQ3ZjLEtBQW5CLEVBQTBCd2MsV0FBMUIsQ0FGRDtBQUdBLEtBM0JnQjtBQTRCakJ4VyxRQUFJLEVBQUUsVUFBVXpvQixJQUFWLEVBQWdCMm9CLFVBQWhCLEVBQTRCMlYsT0FBNUIsRUFBc0M7QUFDM0MsVUFBSWEsU0FBUyxHQUFHLFVBQVU1VyxLQUFWLEVBQWtCO0FBQ2pDLFlBQUlFLElBQUksR0FBR0YsS0FBSyxDQUFDRSxJQUFqQjtBQUNBLGVBQU9GLEtBQUssQ0FBQ0UsSUFBYjtBQUNBQSxZQUFJLENBQUU2VixPQUFGLENBQUo7QUFDQSxPQUpEOztBQU1BLFVBQUssT0FBT3QrQixJQUFQLEtBQWdCLFFBQXJCLEVBQWdDO0FBQy9CcytCLGVBQU8sR0FBRzNWLFVBQVY7QUFDQUEsa0JBQVUsR0FBRzNvQixJQUFiO0FBQ0FBLFlBQUksR0FBR2IsU0FBUDtBQUNBOztBQUNELFVBQUt3cEIsVUFBTCxFQUFrQjtBQUNqQixhQUFLbEcsS0FBTCxDQUFZemlCLElBQUksSUFBSSxJQUFwQixFQUEwQixFQUExQjtBQUNBOztBQUVELGFBQU8sS0FBS21OLElBQUwsQ0FBVyxZQUFXO0FBQzVCLFlBQUlrYixPQUFPLEdBQUcsSUFBZDtBQUFBLFlBQ0N2cUIsS0FBSyxHQUFHa0MsSUFBSSxJQUFJLElBQVIsSUFBZ0JBLElBQUksR0FBRyxZQURoQztBQUFBLFlBRUNvL0IsTUFBTSxHQUFHNzhCLE1BQU0sQ0FBQzY4QixNQUZqQjtBQUFBLFlBR0NwOEIsSUFBSSxHQUFHNmtCLFFBQVEsQ0FBQy9hLEdBQVQsQ0FBYyxJQUFkLENBSFI7O0FBS0EsWUFBS2hQLEtBQUwsRUFBYTtBQUNaLGNBQUtrRixJQUFJLENBQUVsRixLQUFGLENBQUosSUFBaUJrRixJQUFJLENBQUVsRixLQUFGLENBQUosQ0FBYzJxQixJQUFwQyxFQUEyQztBQUMxQzBXLHFCQUFTLENBQUVuOEIsSUFBSSxDQUFFbEYsS0FBRixDQUFOLENBQVQ7QUFDQTtBQUNELFNBSkQsTUFJTztBQUNOLGVBQU1BLEtBQU4sSUFBZWtGLElBQWYsRUFBc0I7QUFDckIsZ0JBQUtBLElBQUksQ0FBRWxGLEtBQUYsQ0FBSixJQUFpQmtGLElBQUksQ0FBRWxGLEtBQUYsQ0FBSixDQUFjMnFCLElBQS9CLElBQXVDMFQsSUFBSSxDQUFDdm5CLElBQUwsQ0FBVzlXLEtBQVgsQ0FBNUMsRUFBaUU7QUFDaEVxaEMsdUJBQVMsQ0FBRW44QixJQUFJLENBQUVsRixLQUFGLENBQU4sQ0FBVDtBQUNBO0FBQ0Q7QUFDRDs7QUFFRCxhQUFNQSxLQUFLLEdBQUdzaEMsTUFBTSxDQUFDM2lDLE1BQXJCLEVBQTZCcUIsS0FBSyxFQUFsQyxHQUF3QztBQUN2QyxjQUFLc2hDLE1BQU0sQ0FBRXRoQyxLQUFGLENBQU4sQ0FBZ0JsQixJQUFoQixLQUF5QixJQUF6QixLQUNGb0QsSUFBSSxJQUFJLElBQVIsSUFBZ0JvL0IsTUFBTSxDQUFFdGhDLEtBQUYsQ0FBTixDQUFnQjJrQixLQUFoQixLQUEwQnppQixJQUR4QyxDQUFMLEVBQ3NEO0FBRXJEby9CLGtCQUFNLENBQUV0aEMsS0FBRixDQUFOLENBQWdCdy9CLElBQWhCLENBQXFCN1UsSUFBckIsQ0FBMkI2VixPQUEzQjtBQUNBalcsbUJBQU8sR0FBRyxLQUFWO0FBQ0ErVyxrQkFBTSxDQUFDcmhDLE1BQVAsQ0FBZUQsS0FBZixFQUFzQixDQUF0QjtBQUNBO0FBQ0QsU0ExQjJCLENBNEI1QjtBQUNBO0FBQ0E7OztBQUNBLFlBQUt1cUIsT0FBTyxJQUFJLENBQUNpVyxPQUFqQixFQUEyQjtBQUMxQi83QixnQkFBTSxDQUFDOGxCLE9BQVAsQ0FBZ0IsSUFBaEIsRUFBc0Jyb0IsSUFBdEI7QUFDQTtBQUNELE9BbENNLENBQVA7QUFtQ0EsS0EvRWdCO0FBZ0ZqQmsvQixVQUFNLEVBQUUsVUFBVWwvQixJQUFWLEVBQWlCO0FBQ3hCLFVBQUtBLElBQUksS0FBSyxLQUFkLEVBQXNCO0FBQ3JCQSxZQUFJLEdBQUdBLElBQUksSUFBSSxJQUFmO0FBQ0E7O0FBQ0QsYUFBTyxLQUFLbU4sSUFBTCxDQUFXLFlBQVc7QUFDNUIsWUFBSXJQLEtBQUo7QUFBQSxZQUNDa0YsSUFBSSxHQUFHNmtCLFFBQVEsQ0FBQy9hLEdBQVQsQ0FBYyxJQUFkLENBRFI7QUFBQSxZQUVDMlYsS0FBSyxHQUFHemYsSUFBSSxDQUFFaEQsSUFBSSxHQUFHLE9BQVQsQ0FGYjtBQUFBLFlBR0N1b0IsS0FBSyxHQUFHdmxCLElBQUksQ0FBRWhELElBQUksR0FBRyxZQUFULENBSGI7QUFBQSxZQUlDby9CLE1BQU0sR0FBRzc4QixNQUFNLENBQUM2OEIsTUFKakI7QUFBQSxZQUtDM2lDLE1BQU0sR0FBR2dtQixLQUFLLEdBQUdBLEtBQUssQ0FBQ2htQixNQUFULEdBQWtCLENBTGpDLENBRDRCLENBUTVCOztBQUNBdUcsWUFBSSxDQUFDazhCLE1BQUwsR0FBYyxJQUFkLENBVDRCLENBVzVCOztBQUNBMzhCLGNBQU0sQ0FBQ2tnQixLQUFQLENBQWMsSUFBZCxFQUFvQnppQixJQUFwQixFQUEwQixFQUExQjs7QUFFQSxZQUFLdW9CLEtBQUssSUFBSUEsS0FBSyxDQUFDRSxJQUFwQixFQUEyQjtBQUMxQkYsZUFBSyxDQUFDRSxJQUFOLENBQVdwcEIsSUFBWCxDQUFpQixJQUFqQixFQUF1QixJQUF2QjtBQUNBLFNBaEIyQixDQWtCNUI7OztBQUNBLGFBQU12QixLQUFLLEdBQUdzaEMsTUFBTSxDQUFDM2lDLE1BQXJCLEVBQTZCcUIsS0FBSyxFQUFsQyxHQUF3QztBQUN2QyxjQUFLc2hDLE1BQU0sQ0FBRXRoQyxLQUFGLENBQU4sQ0FBZ0JsQixJQUFoQixLQUF5QixJQUF6QixJQUFpQ3dpQyxNQUFNLENBQUV0aEMsS0FBRixDQUFOLENBQWdCMmtCLEtBQWhCLEtBQTBCemlCLElBQWhFLEVBQXVFO0FBQ3RFby9CLGtCQUFNLENBQUV0aEMsS0FBRixDQUFOLENBQWdCdy9CLElBQWhCLENBQXFCN1UsSUFBckIsQ0FBMkIsSUFBM0I7QUFDQTJXLGtCQUFNLENBQUNyaEMsTUFBUCxDQUFlRCxLQUFmLEVBQXNCLENBQXRCO0FBQ0E7QUFDRCxTQXhCMkIsQ0EwQjVCOzs7QUFDQSxhQUFNQSxLQUFLLEdBQUcsQ0FBZCxFQUFpQkEsS0FBSyxHQUFHckIsTUFBekIsRUFBaUNxQixLQUFLLEVBQXRDLEVBQTJDO0FBQzFDLGNBQUsya0IsS0FBSyxDQUFFM2tCLEtBQUYsQ0FBTCxJQUFrQjJrQixLQUFLLENBQUUza0IsS0FBRixDQUFMLENBQWVvaEMsTUFBdEMsRUFBK0M7QUFDOUN6YyxpQkFBSyxDQUFFM2tCLEtBQUYsQ0FBTCxDQUFlb2hDLE1BQWYsQ0FBc0I3L0IsSUFBdEIsQ0FBNEIsSUFBNUI7QUFDQTtBQUNELFNBL0IyQixDQWlDNUI7OztBQUNBLGVBQU8yRCxJQUFJLENBQUNrOEIsTUFBWjtBQUNBLE9BbkNNLENBQVA7QUFvQ0E7QUF4SGdCLEdBQWxCO0FBMkhBMzhCLFFBQU0sQ0FBQzRLLElBQVAsQ0FBYSxDQUFFLFFBQUYsRUFBWSxNQUFaLEVBQW9CLE1BQXBCLENBQWIsRUFBMkMsVUFBVXNDLEVBQVYsRUFBY3pCLElBQWQsRUFBcUI7QUFDL0QsUUFBSXF4QixLQUFLLEdBQUc5OEIsTUFBTSxDQUFDOEgsRUFBUCxDQUFXMkQsSUFBWCxDQUFaOztBQUNBekwsVUFBTSxDQUFDOEgsRUFBUCxDQUFXMkQsSUFBWCxJQUFvQixVQUFVMHdCLEtBQVYsRUFBaUIxRCxNQUFqQixFQUF5Qjc1QixRQUF6QixFQUFvQztBQUN2RCxhQUFPdTlCLEtBQUssSUFBSSxJQUFULElBQWlCLE9BQU9BLEtBQVAsS0FBaUIsU0FBbEMsR0FDTlcsS0FBSyxDQUFDamhDLEtBQU4sQ0FBYSxJQUFiLEVBQW1CMkMsU0FBbkIsQ0FETSxHQUVOLEtBQUtnK0IsT0FBTCxDQUFjckMsS0FBSyxDQUFFMXVCLElBQUYsRUFBUSxJQUFSLENBQW5CLEVBQW1DMHdCLEtBQW5DLEVBQTBDMUQsTUFBMUMsRUFBa0Q3NUIsUUFBbEQsQ0FGRDtBQUdBLEtBSkQ7QUFLQSxHQVBELEVBanBQaUYsQ0EwcFBqRjs7QUFDQW9CLFFBQU0sQ0FBQzRLLElBQVAsQ0FBYTtBQUNabXlCLGFBQVMsRUFBRTVDLEtBQUssQ0FBRSxNQUFGLENBREo7QUFFWjZDLFdBQU8sRUFBRTdDLEtBQUssQ0FBRSxNQUFGLENBRkY7QUFHWjhDLGVBQVcsRUFBRTlDLEtBQUssQ0FBRSxRQUFGLENBSE47QUFJWitDLFVBQU0sRUFBRTtBQUFFeEYsYUFBTyxFQUFFO0FBQVgsS0FKSTtBQUtaeUYsV0FBTyxFQUFFO0FBQUV6RixhQUFPLEVBQUU7QUFBWCxLQUxHO0FBTVowRixjQUFVLEVBQUU7QUFBRTFGLGFBQU8sRUFBRTtBQUFYO0FBTkEsR0FBYixFQU9HLFVBQVVqc0IsSUFBVixFQUFnQnVpQixLQUFoQixFQUF3QjtBQUMxQmh1QixVQUFNLENBQUM4SCxFQUFQLENBQVcyRCxJQUFYLElBQW9CLFVBQVUwd0IsS0FBVixFQUFpQjFELE1BQWpCLEVBQXlCNzVCLFFBQXpCLEVBQW9DO0FBQ3ZELGFBQU8sS0FBSzQ5QixPQUFMLENBQWN4TyxLQUFkLEVBQXFCbU8sS0FBckIsRUFBNEIxRCxNQUE1QixFQUFvQzc1QixRQUFwQyxDQUFQO0FBQ0EsS0FGRDtBQUdBLEdBWEQ7QUFhQW9CLFFBQU0sQ0FBQzY4QixNQUFQLEdBQWdCLEVBQWhCOztBQUNBNzhCLFFBQU0sQ0FBQ2k1QixFQUFQLENBQVVnQixJQUFWLEdBQWlCLFlBQVc7QUFDM0IsUUFBSStCLEtBQUo7QUFBQSxRQUNDL2hDLENBQUMsR0FBRyxDQURMO0FBQUEsUUFFQzRpQyxNQUFNLEdBQUc3OEIsTUFBTSxDQUFDNjhCLE1BRmpCO0FBSUFwRCxTQUFLLEdBQUd0ckIsSUFBSSxDQUFDa2dCLEdBQUwsRUFBUjs7QUFFQSxXQUFRcDBCLENBQUMsR0FBRzRpQyxNQUFNLENBQUMzaUMsTUFBbkIsRUFBMkJELENBQUMsRUFBNUIsRUFBaUM7QUFDaEMraEMsV0FBSyxHQUFHYSxNQUFNLENBQUU1aUMsQ0FBRixDQUFkLENBRGdDLENBR2hDOztBQUNBLFVBQUssQ0FBQytoQyxLQUFLLEVBQU4sSUFBWWEsTUFBTSxDQUFFNWlDLENBQUYsQ0FBTixLQUFnQitoQyxLQUFqQyxFQUF5QztBQUN4Q2EsY0FBTSxDQUFDcmhDLE1BQVAsQ0FBZXZCLENBQUMsRUFBaEIsRUFBb0IsQ0FBcEI7QUFDQTtBQUNEOztBQUVELFFBQUssQ0FBQzRpQyxNQUFNLENBQUMzaUMsTUFBYixFQUFzQjtBQUNyQjhGLFlBQU0sQ0FBQ2k1QixFQUFQLENBQVUvUyxJQUFWO0FBQ0E7O0FBQ0R1VCxTQUFLLEdBQUc3OEIsU0FBUjtBQUNBLEdBcEJEOztBQXNCQW9ELFFBQU0sQ0FBQ2k1QixFQUFQLENBQVUrQyxLQUFWLEdBQWtCLFVBQVVBLEtBQVYsRUFBa0I7QUFDbkNoOEIsVUFBTSxDQUFDNjhCLE1BQVAsQ0FBYzVoQyxJQUFkLENBQW9CK2dDLEtBQXBCO0FBQ0FoOEIsVUFBTSxDQUFDaTVCLEVBQVAsQ0FBVWhoQixLQUFWO0FBQ0EsR0FIRDs7QUFLQWpZLFFBQU0sQ0FBQ2k1QixFQUFQLENBQVVlLFFBQVYsR0FBcUIsRUFBckI7O0FBQ0FoNkIsUUFBTSxDQUFDaTVCLEVBQVAsQ0FBVWhoQixLQUFWLEdBQWtCLFlBQVc7QUFDNUIsUUFBS3loQixVQUFMLEVBQWtCO0FBQ2pCO0FBQ0E7O0FBRURBLGNBQVUsR0FBRyxJQUFiO0FBQ0FHLFlBQVE7QUFDUixHQVBEOztBQVNBNzVCLFFBQU0sQ0FBQ2k1QixFQUFQLENBQVUvUyxJQUFWLEdBQWlCLFlBQVc7QUFDM0J3VCxjQUFVLEdBQUcsSUFBYjtBQUNBLEdBRkQ7O0FBSUExNUIsUUFBTSxDQUFDaTVCLEVBQVAsQ0FBVW9ELE1BQVYsR0FBbUI7QUFDbEJnQixRQUFJLEVBQUUsR0FEWTtBQUVsQkMsUUFBSSxFQUFFLEdBRlk7QUFJbEI7QUFDQXRVLFlBQVEsRUFBRTtBQUxRLEdBQW5CLENBbHRQaUYsQ0EydFBqRjtBQUNBOztBQUNBaHBCLFFBQU0sQ0FBQzhILEVBQVAsQ0FBVXkxQixLQUFWLEdBQWtCLFVBQVVDLElBQVYsRUFBZ0IvL0IsSUFBaEIsRUFBdUI7QUFDeEMrL0IsUUFBSSxHQUFHeDlCLE1BQU0sQ0FBQ2k1QixFQUFQLEdBQVlqNUIsTUFBTSxDQUFDaTVCLEVBQVAsQ0FBVW9ELE1BQVYsQ0FBa0JtQixJQUFsQixLQUE0QkEsSUFBeEMsR0FBK0NBLElBQXREO0FBQ0EvL0IsUUFBSSxHQUFHQSxJQUFJLElBQUksSUFBZjtBQUVBLFdBQU8sS0FBS3lpQixLQUFMLENBQVl6aUIsSUFBWixFQUFrQixVQUFVNFQsSUFBVixFQUFnQjJVLEtBQWhCLEVBQXdCO0FBQ2hELFVBQUkxbkIsT0FBTyxHQUFHL0UsTUFBTSxDQUFDbUYsVUFBUCxDQUFtQjJTLElBQW5CLEVBQXlCbXNCLElBQXpCLENBQWQ7O0FBQ0F4WCxXQUFLLENBQUNFLElBQU4sR0FBYSxZQUFXO0FBQ3ZCM3NCLGNBQU0sQ0FBQ2dGLFlBQVAsQ0FBcUJELE9BQXJCO0FBQ0EsT0FGRDtBQUdBLEtBTE0sQ0FBUDtBQU1BLEdBVkQ7O0FBYUEsR0FBRSxZQUFXO0FBQ1osUUFBSTZXLEtBQUssR0FBR2hZLFFBQVEsQ0FBQ2dGLGFBQVQsQ0FBd0IsT0FBeEIsQ0FBWjtBQUFBLFFBQ0NzTCxNQUFNLEdBQUd0USxRQUFRLENBQUNnRixhQUFULENBQXdCLFFBQXhCLENBRFY7QUFBQSxRQUVDaTZCLEdBQUcsR0FBRzN1QixNQUFNLENBQUNoTCxXQUFQLENBQW9CdEYsUUFBUSxDQUFDZ0YsYUFBVCxDQUF3QixRQUF4QixDQUFwQixDQUZQO0FBSUFnVCxTQUFLLENBQUMxWCxJQUFOLEdBQWEsVUFBYixDQUxZLENBT1o7QUFDQTs7QUFDQXdMLFdBQU8sQ0FBQ3cwQixPQUFSLEdBQWtCdG9CLEtBQUssQ0FBQ3hVLEtBQU4sS0FBZ0IsRUFBbEMsQ0FUWSxDQVdaO0FBQ0E7O0FBQ0FzSSxXQUFPLENBQUN5MEIsV0FBUixHQUFzQnRCLEdBQUcsQ0FBQy9pQixRQUExQixDQWJZLENBZVo7QUFDQTs7QUFDQWxFLFNBQUssR0FBR2hZLFFBQVEsQ0FBQ2dGLGFBQVQsQ0FBd0IsT0FBeEIsQ0FBUjtBQUNBZ1QsU0FBSyxDQUFDeFUsS0FBTixHQUFjLEdBQWQ7QUFDQXdVLFNBQUssQ0FBQzFYLElBQU4sR0FBYSxPQUFiO0FBQ0F3TCxXQUFPLENBQUMwMEIsVUFBUixHQUFxQnhvQixLQUFLLENBQUN4VSxLQUFOLEtBQWdCLEdBQXJDO0FBQ0EsR0FyQkQ7O0FBd0JBLE1BQUlpOUIsUUFBSjtBQUFBLE1BQ0NycUIsVUFBVSxHQUFHdlQsTUFBTSxDQUFDbVcsSUFBUCxDQUFZNUMsVUFEMUI7QUFHQXZULFFBQU0sQ0FBQzhILEVBQVAsQ0FBVTlMLE1BQVYsQ0FBa0I7QUFDakJpRSxRQUFJLEVBQUUsVUFBVXdMLElBQVYsRUFBZ0I5SyxLQUFoQixFQUF3QjtBQUM3QixhQUFPcWpCLE1BQU0sQ0FBRSxJQUFGLEVBQVFoa0IsTUFBTSxDQUFDQyxJQUFmLEVBQXFCd0wsSUFBckIsRUFBMkI5SyxLQUEzQixFQUFrQ25DLFNBQVMsQ0FBQ3RFLE1BQVYsR0FBbUIsQ0FBckQsQ0FBYjtBQUNBLEtBSGdCO0FBS2pCMmpDLGNBQVUsRUFBRSxVQUFVcHlCLElBQVYsRUFBaUI7QUFDNUIsYUFBTyxLQUFLYixJQUFMLENBQVcsWUFBVztBQUM1QjVLLGNBQU0sQ0FBQzY5QixVQUFQLENBQW1CLElBQW5CLEVBQXlCcHlCLElBQXpCO0FBQ0EsT0FGTSxDQUFQO0FBR0E7QUFUZ0IsR0FBbEI7QUFZQXpMLFFBQU0sQ0FBQ2hFLE1BQVAsQ0FBZTtBQUNkaUUsUUFBSSxFQUFFLFVBQVU1RixJQUFWLEVBQWdCb1IsSUFBaEIsRUFBc0I5SyxLQUF0QixFQUE4QjtBQUNuQyxVQUFJOEosR0FBSjtBQUFBLFVBQVN1YixLQUFUO0FBQUEsVUFDQzhYLEtBQUssR0FBR3pqQyxJQUFJLENBQUN5SSxRQURkLENBRG1DLENBSW5DOztBQUNBLFVBQUtnN0IsS0FBSyxLQUFLLENBQVYsSUFBZUEsS0FBSyxLQUFLLENBQXpCLElBQThCQSxLQUFLLEtBQUssQ0FBN0MsRUFBaUQ7QUFDaEQ7QUFDQSxPQVBrQyxDQVNuQzs7O0FBQ0EsVUFBSyxPQUFPempDLElBQUksQ0FBQzZGLFlBQVosS0FBNkIsV0FBbEMsRUFBZ0Q7QUFDL0MsZUFBT0YsTUFBTSxDQUFDN0QsSUFBUCxDQUFhOUIsSUFBYixFQUFtQm9SLElBQW5CLEVBQXlCOUssS0FBekIsQ0FBUDtBQUNBLE9BWmtDLENBY25DO0FBQ0E7OztBQUNBLFVBQUttOUIsS0FBSyxLQUFLLENBQVYsSUFBZSxDQUFDOTlCLE1BQU0sQ0FBQ2tkLFFBQVAsQ0FBaUI3aUIsSUFBakIsQ0FBckIsRUFBK0M7QUFDOUMyckIsYUFBSyxHQUFHaG1CLE1BQU0sQ0FBQys5QixTQUFQLENBQWtCdHlCLElBQUksQ0FBQ3BNLFdBQUwsRUFBbEIsTUFDTFcsTUFBTSxDQUFDbVcsSUFBUCxDQUFZalgsS0FBWixDQUFrQjgrQixJQUFsQixDQUF1QjNyQixJQUF2QixDQUE2QjVHLElBQTdCLElBQXNDbXlCLFFBQXRDLEdBQWlEaGhDLFNBRDVDLENBQVI7QUFFQTs7QUFFRCxVQUFLK0QsS0FBSyxLQUFLL0QsU0FBZixFQUEyQjtBQUMxQixZQUFLK0QsS0FBSyxLQUFLLElBQWYsRUFBc0I7QUFDckJYLGdCQUFNLENBQUM2OUIsVUFBUCxDQUFtQnhqQyxJQUFuQixFQUF5Qm9SLElBQXpCO0FBQ0E7QUFDQTs7QUFFRCxZQUFLdWEsS0FBSyxJQUFJLFNBQVNBLEtBQWxCLElBQ0osQ0FBRXZiLEdBQUcsR0FBR3ViLEtBQUssQ0FBQ1osR0FBTixDQUFXL3FCLElBQVgsRUFBaUJzRyxLQUFqQixFQUF3QjhLLElBQXhCLENBQVIsTUFBNkM3TyxTQUQ5QyxFQUMwRDtBQUN6RCxpQkFBTzZOLEdBQVA7QUFDQTs7QUFFRHBRLFlBQUksQ0FBQ3lQLFlBQUwsQ0FBbUIyQixJQUFuQixFQUF5QjlLLEtBQUssR0FBRyxFQUFqQztBQUNBLGVBQU9BLEtBQVA7QUFDQTs7QUFFRCxVQUFLcWxCLEtBQUssSUFBSSxTQUFTQSxLQUFsQixJQUEyQixDQUFFdmIsR0FBRyxHQUFHdWIsS0FBSyxDQUFDemIsR0FBTixDQUFXbFEsSUFBWCxFQUFpQm9SLElBQWpCLENBQVIsTUFBc0MsSUFBdEUsRUFBNkU7QUFDNUUsZUFBT2hCLEdBQVA7QUFDQTs7QUFFREEsU0FBRyxHQUFHekssTUFBTSxDQUFDK1UsSUFBUCxDQUFZOVUsSUFBWixDQUFrQjVGLElBQWxCLEVBQXdCb1IsSUFBeEIsQ0FBTixDQXhDbUMsQ0EwQ25DOztBQUNBLGFBQU9oQixHQUFHLElBQUksSUFBUCxHQUFjN04sU0FBZCxHQUEwQjZOLEdBQWpDO0FBQ0EsS0E3Q2E7QUErQ2RzekIsYUFBUyxFQUFFO0FBQ1Z0Z0MsVUFBSSxFQUFFO0FBQ0wybkIsV0FBRyxFQUFFLFVBQVUvcUIsSUFBVixFQUFnQnNHLEtBQWhCLEVBQXdCO0FBQzVCLGNBQUssQ0FBQ3NJLE9BQU8sQ0FBQzAwQixVQUFULElBQXVCaDlCLEtBQUssS0FBSyxPQUFqQyxJQUNKMEUsUUFBUSxDQUFFaEwsSUFBRixFQUFRLE9BQVIsQ0FEVCxFQUM2QjtBQUM1QixnQkFBSXNQLEdBQUcsR0FBR3RQLElBQUksQ0FBQ3NHLEtBQWY7QUFDQXRHLGdCQUFJLENBQUN5UCxZQUFMLENBQW1CLE1BQW5CLEVBQTJCbkosS0FBM0I7O0FBQ0EsZ0JBQUtnSixHQUFMLEVBQVc7QUFDVnRQLGtCQUFJLENBQUNzRyxLQUFMLEdBQWFnSixHQUFiO0FBQ0E7O0FBQ0QsbUJBQU9oSixLQUFQO0FBQ0E7QUFDRDtBQVhJO0FBREksS0EvQ0c7QUErRGRrOUIsY0FBVSxFQUFFLFVBQVV4akMsSUFBVixFQUFnQnNHLEtBQWhCLEVBQXdCO0FBQ25DLFVBQUk4SyxJQUFKO0FBQUEsVUFDQ3hSLENBQUMsR0FBRyxDQURMO0FBQUEsVUFHQztBQUNBO0FBQ0Fna0MsZUFBUyxHQUFHdDlCLEtBQUssSUFBSUEsS0FBSyxDQUFDekIsS0FBTixDQUFhc2dCLGFBQWIsQ0FMdEI7O0FBT0EsVUFBS3llLFNBQVMsSUFBSTVqQyxJQUFJLENBQUN5SSxRQUFMLEtBQWtCLENBQXBDLEVBQXdDO0FBQ3ZDLGVBQVUySSxJQUFJLEdBQUd3eUIsU0FBUyxDQUFFaGtDLENBQUMsRUFBSCxDQUExQixFQUFzQztBQUNyQ0ksY0FBSSxDQUFDc1ksZUFBTCxDQUFzQmxILElBQXRCO0FBQ0E7QUFDRDtBQUNEO0FBNUVhLEdBQWYsRUFqeFBpRixDQWcyUGpGOztBQUNBbXlCLFVBQVEsR0FBRztBQUNWeFksT0FBRyxFQUFFLFVBQVUvcUIsSUFBVixFQUFnQnNHLEtBQWhCLEVBQXVCOEssSUFBdkIsRUFBOEI7QUFDbEMsVUFBSzlLLEtBQUssS0FBSyxLQUFmLEVBQXVCO0FBRXRCO0FBQ0FYLGNBQU0sQ0FBQzY5QixVQUFQLENBQW1CeGpDLElBQW5CLEVBQXlCb1IsSUFBekI7QUFDQSxPQUpELE1BSU87QUFDTnBSLFlBQUksQ0FBQ3lQLFlBQUwsQ0FBbUIyQixJQUFuQixFQUF5QkEsSUFBekI7QUFDQTs7QUFDRCxhQUFPQSxJQUFQO0FBQ0E7QUFWUyxHQUFYO0FBYUF6TCxRQUFNLENBQUM0SyxJQUFQLENBQWE1SyxNQUFNLENBQUNtVyxJQUFQLENBQVlqWCxLQUFaLENBQWtCOCtCLElBQWxCLENBQXVCeFgsTUFBdkIsQ0FBOEJ0bkIsS0FBOUIsQ0FBcUMsTUFBckMsQ0FBYixFQUE0RCxVQUFVZ08sRUFBVixFQUFjekIsSUFBZCxFQUFxQjtBQUNoRixRQUFJeXlCLE1BQU0sR0FBRzNxQixVQUFVLENBQUU5SCxJQUFGLENBQVYsSUFBc0J6TCxNQUFNLENBQUMrVSxJQUFQLENBQVk5VSxJQUEvQzs7QUFFQXNULGNBQVUsQ0FBRTlILElBQUYsQ0FBVixHQUFxQixVQUFVcFIsSUFBVixFQUFnQm9SLElBQWhCLEVBQXNCNkIsS0FBdEIsRUFBOEI7QUFDbEQsVUFBSTdDLEdBQUo7QUFBQSxVQUFTNmdCLE1BQVQ7QUFBQSxVQUNDNlMsYUFBYSxHQUFHMXlCLElBQUksQ0FBQ3BNLFdBQUwsRUFEakI7O0FBR0EsVUFBSyxDQUFDaU8sS0FBTixFQUFjO0FBRWI7QUFDQWdlLGNBQU0sR0FBRy9YLFVBQVUsQ0FBRTRxQixhQUFGLENBQW5CO0FBQ0E1cUIsa0JBQVUsQ0FBRTRxQixhQUFGLENBQVYsR0FBOEIxekIsR0FBOUI7QUFDQUEsV0FBRyxHQUFHeXpCLE1BQU0sQ0FBRTdqQyxJQUFGLEVBQVFvUixJQUFSLEVBQWM2QixLQUFkLENBQU4sSUFBK0IsSUFBL0IsR0FDTDZ3QixhQURLLEdBRUwsSUFGRDtBQUdBNXFCLGtCQUFVLENBQUU0cUIsYUFBRixDQUFWLEdBQThCN1MsTUFBOUI7QUFDQTs7QUFDRCxhQUFPN2dCLEdBQVA7QUFDQSxLQWZEO0FBZ0JBLEdBbkJEO0FBd0JBLE1BQUkyekIsVUFBVSxHQUFHLHFDQUFqQjtBQUFBLE1BQ0NDLFVBQVUsR0FBRyxlQURkO0FBR0FyK0IsUUFBTSxDQUFDOEgsRUFBUCxDQUFVOUwsTUFBVixDQUFrQjtBQUNqQkcsUUFBSSxFQUFFLFVBQVVzUCxJQUFWLEVBQWdCOUssS0FBaEIsRUFBd0I7QUFDN0IsYUFBT3FqQixNQUFNLENBQUUsSUFBRixFQUFRaGtCLE1BQU0sQ0FBQzdELElBQWYsRUFBcUJzUCxJQUFyQixFQUEyQjlLLEtBQTNCLEVBQWtDbkMsU0FBUyxDQUFDdEUsTUFBVixHQUFtQixDQUFyRCxDQUFiO0FBQ0EsS0FIZ0I7QUFLakJva0MsY0FBVSxFQUFFLFVBQVU3eUIsSUFBVixFQUFpQjtBQUM1QixhQUFPLEtBQUtiLElBQUwsQ0FBVyxZQUFXO0FBQzVCLGVBQU8sS0FBTTVLLE1BQU0sQ0FBQ3UrQixPQUFQLENBQWdCOXlCLElBQWhCLEtBQTBCQSxJQUFoQyxDQUFQO0FBQ0EsT0FGTSxDQUFQO0FBR0E7QUFUZ0IsR0FBbEI7QUFZQXpMLFFBQU0sQ0FBQ2hFLE1BQVAsQ0FBZTtBQUNkRyxRQUFJLEVBQUUsVUFBVTlCLElBQVYsRUFBZ0JvUixJQUFoQixFQUFzQjlLLEtBQXRCLEVBQThCO0FBQ25DLFVBQUk4SixHQUFKO0FBQUEsVUFBU3ViLEtBQVQ7QUFBQSxVQUNDOFgsS0FBSyxHQUFHempDLElBQUksQ0FBQ3lJLFFBRGQsQ0FEbUMsQ0FJbkM7O0FBQ0EsVUFBS2c3QixLQUFLLEtBQUssQ0FBVixJQUFlQSxLQUFLLEtBQUssQ0FBekIsSUFBOEJBLEtBQUssS0FBSyxDQUE3QyxFQUFpRDtBQUNoRDtBQUNBOztBQUVELFVBQUtBLEtBQUssS0FBSyxDQUFWLElBQWUsQ0FBQzk5QixNQUFNLENBQUNrZCxRQUFQLENBQWlCN2lCLElBQWpCLENBQXJCLEVBQStDO0FBRTlDO0FBQ0FvUixZQUFJLEdBQUd6TCxNQUFNLENBQUN1K0IsT0FBUCxDQUFnQjl5QixJQUFoQixLQUEwQkEsSUFBakM7QUFDQXVhLGFBQUssR0FBR2htQixNQUFNLENBQUMwNEIsU0FBUCxDQUFrQmp0QixJQUFsQixDQUFSO0FBQ0E7O0FBRUQsVUFBSzlLLEtBQUssS0FBSy9ELFNBQWYsRUFBMkI7QUFDMUIsWUFBS29wQixLQUFLLElBQUksU0FBU0EsS0FBbEIsSUFDSixDQUFFdmIsR0FBRyxHQUFHdWIsS0FBSyxDQUFDWixHQUFOLENBQVcvcUIsSUFBWCxFQUFpQnNHLEtBQWpCLEVBQXdCOEssSUFBeEIsQ0FBUixNQUE2QzdPLFNBRDlDLEVBQzBEO0FBQ3pELGlCQUFPNk4sR0FBUDtBQUNBOztBQUVELGVBQVNwUSxJQUFJLENBQUVvUixJQUFGLENBQUosR0FBZTlLLEtBQXhCO0FBQ0E7O0FBRUQsVUFBS3FsQixLQUFLLElBQUksU0FBU0EsS0FBbEIsSUFBMkIsQ0FBRXZiLEdBQUcsR0FBR3ViLEtBQUssQ0FBQ3piLEdBQU4sQ0FBV2xRLElBQVgsRUFBaUJvUixJQUFqQixDQUFSLE1BQXNDLElBQXRFLEVBQTZFO0FBQzVFLGVBQU9oQixHQUFQO0FBQ0E7O0FBRUQsYUFBT3BRLElBQUksQ0FBRW9SLElBQUYsQ0FBWDtBQUNBLEtBL0JhO0FBaUNkaXRCLGFBQVMsRUFBRTtBQUNWdmYsY0FBUSxFQUFFO0FBQ1Q1TyxXQUFHLEVBQUUsVUFBVWxRLElBQVYsRUFBaUI7QUFFckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQUlta0MsUUFBUSxHQUFHeCtCLE1BQU0sQ0FBQytVLElBQVAsQ0FBWTlVLElBQVosQ0FBa0I1RixJQUFsQixFQUF3QixVQUF4QixDQUFmOztBQUVBLGNBQUtta0MsUUFBTCxFQUFnQjtBQUNmLG1CQUFPdkosUUFBUSxDQUFFdUosUUFBRixFQUFZLEVBQVosQ0FBZjtBQUNBOztBQUVELGNBQ0NKLFVBQVUsQ0FBQy9yQixJQUFYLENBQWlCaFksSUFBSSxDQUFDZ0wsUUFBdEIsS0FDQWc1QixVQUFVLENBQUNoc0IsSUFBWCxDQUFpQmhZLElBQUksQ0FBQ2dMLFFBQXRCLEtBQ0FoTCxJQUFJLENBQUM2ZSxJQUhOLEVBSUU7QUFDRCxtQkFBTyxDQUFQO0FBQ0E7O0FBRUQsaUJBQU8sQ0FBQyxDQUFSO0FBQ0E7QUF2QlE7QUFEQSxLQWpDRztBQTZEZHFsQixXQUFPLEVBQUU7QUFDUixhQUFPLFNBREM7QUFFUixlQUFTO0FBRkQ7QUE3REssR0FBZixFQXI1UGlGLENBdzlQakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxNQUFLLENBQUN0MUIsT0FBTyxDQUFDeTBCLFdBQWQsRUFBNEI7QUFDM0IxOUIsVUFBTSxDQUFDMDRCLFNBQVAsQ0FBaUJyZixRQUFqQixHQUE0QjtBQUMzQjlPLFNBQUcsRUFBRSxVQUFVbFEsSUFBVixFQUFpQjtBQUVyQjtBQUVBLFlBQUk2ZCxNQUFNLEdBQUc3ZCxJQUFJLENBQUM2QyxVQUFsQjs7QUFDQSxZQUFLZ2IsTUFBTSxJQUFJQSxNQUFNLENBQUNoYixVQUF0QixFQUFtQztBQUNsQ2diLGdCQUFNLENBQUNoYixVQUFQLENBQWtCb2MsYUFBbEI7QUFDQTs7QUFDRCxlQUFPLElBQVA7QUFDQSxPQVYwQjtBQVczQjhMLFNBQUcsRUFBRSxVQUFVL3FCLElBQVYsRUFBaUI7QUFFckI7QUFFQSxZQUFJNmQsTUFBTSxHQUFHN2QsSUFBSSxDQUFDNkMsVUFBbEI7O0FBQ0EsWUFBS2diLE1BQUwsRUFBYztBQUNiQSxnQkFBTSxDQUFDb0IsYUFBUDs7QUFFQSxjQUFLcEIsTUFBTSxDQUFDaGIsVUFBWixFQUF5QjtBQUN4QmdiLGtCQUFNLENBQUNoYixVQUFQLENBQWtCb2MsYUFBbEI7QUFDQTtBQUNEO0FBQ0Q7QUF2QjBCLEtBQTVCO0FBeUJBOztBQUVEdFosUUFBTSxDQUFDNEssSUFBUCxDQUFhLENBQ1osVUFEWSxFQUVaLFVBRlksRUFHWixXQUhZLEVBSVosYUFKWSxFQUtaLGFBTFksRUFNWixTQU5ZLEVBT1osU0FQWSxFQVFaLFFBUlksRUFTWixhQVRZLEVBVVosaUJBVlksQ0FBYixFQVdHLFlBQVc7QUFDYjVLLFVBQU0sQ0FBQ3UrQixPQUFQLENBQWdCLEtBQUtsL0IsV0FBTCxFQUFoQixJQUF1QyxJQUF2QztBQUNBLEdBYkQsRUE1L1BpRixDQThnUWhGO0FBQ0E7O0FBQ0EsV0FBU28vQixnQkFBVCxDQUEyQjk5QixLQUEzQixFQUFtQztBQUNsQyxRQUFJcVosTUFBTSxHQUFHclosS0FBSyxDQUFDekIsS0FBTixDQUFhc2dCLGFBQWIsS0FBZ0MsRUFBN0M7QUFDQSxXQUFPeEYsTUFBTSxDQUFDdkgsSUFBUCxDQUFhLEdBQWIsQ0FBUDtBQUNBOztBQUdGLFdBQVNpc0IsUUFBVCxDQUFtQnJrQyxJQUFuQixFQUEwQjtBQUN6QixXQUFPQSxJQUFJLENBQUM2RixZQUFMLElBQXFCN0YsSUFBSSxDQUFDNkYsWUFBTCxDQUFtQixPQUFuQixDQUFyQixJQUFxRCxFQUE1RDtBQUNBOztBQUVELFdBQVN5K0IsY0FBVCxDQUF5QmgrQixLQUF6QixFQUFpQztBQUNoQyxRQUFLbkUsS0FBSyxDQUFDRyxPQUFOLENBQWVnRSxLQUFmLENBQUwsRUFBOEI7QUFDN0IsYUFBT0EsS0FBUDtBQUNBOztBQUNELFFBQUssT0FBT0EsS0FBUCxLQUFpQixRQUF0QixFQUFpQztBQUNoQyxhQUFPQSxLQUFLLENBQUN6QixLQUFOLENBQWFzZ0IsYUFBYixLQUFnQyxFQUF2QztBQUNBOztBQUNELFdBQU8sRUFBUDtBQUNBOztBQUVEeGYsUUFBTSxDQUFDOEgsRUFBUCxDQUFVOUwsTUFBVixDQUFrQjtBQUNqQjRpQyxZQUFRLEVBQUUsVUFBVWorQixLQUFWLEVBQWtCO0FBQzNCLFVBQUlrK0IsT0FBSjtBQUFBLFVBQWF4a0MsSUFBYjtBQUFBLFVBQW1Cb1osR0FBbkI7QUFBQSxVQUF3QnFyQixRQUF4QjtBQUFBLFVBQWtDQyxLQUFsQztBQUFBLFVBQXlDenpCLENBQXpDO0FBQUEsVUFBNEMwekIsVUFBNUM7QUFBQSxVQUNDL2tDLENBQUMsR0FBRyxDQURMOztBQUdBLFVBQUtpUCxVQUFVLENBQUV2SSxLQUFGLENBQWYsRUFBMkI7QUFDMUIsZUFBTyxLQUFLaUssSUFBTCxDQUFXLFVBQVVVLENBQVYsRUFBYztBQUMvQnRMLGdCQUFNLENBQUUsSUFBRixDQUFOLENBQWU0K0IsUUFBZixDQUF5QmorQixLQUFLLENBQUM3RCxJQUFOLENBQVksSUFBWixFQUFrQndPLENBQWxCLEVBQXFCb3pCLFFBQVEsQ0FBRSxJQUFGLENBQTdCLENBQXpCO0FBQ0EsU0FGTSxDQUFQO0FBR0E7O0FBRURHLGFBQU8sR0FBR0YsY0FBYyxDQUFFaCtCLEtBQUYsQ0FBeEI7O0FBRUEsVUFBS2srQixPQUFPLENBQUMza0MsTUFBYixFQUFzQjtBQUNyQixlQUFVRyxJQUFJLEdBQUcsS0FBTUosQ0FBQyxFQUFQLENBQWpCLEVBQWlDO0FBQ2hDNmtDLGtCQUFRLEdBQUdKLFFBQVEsQ0FBRXJrQyxJQUFGLENBQW5CO0FBQ0FvWixhQUFHLEdBQUdwWixJQUFJLENBQUN5SSxRQUFMLEtBQWtCLENBQWxCLElBQXlCLE1BQU0yN0IsZ0JBQWdCLENBQUVLLFFBQUYsQ0FBdEIsR0FBcUMsR0FBcEU7O0FBRUEsY0FBS3JyQixHQUFMLEVBQVc7QUFDVm5JLGFBQUMsR0FBRyxDQUFKOztBQUNBLG1CQUFVeXpCLEtBQUssR0FBR0YsT0FBTyxDQUFFdnpCLENBQUMsRUFBSCxDQUF6QixFQUFxQztBQUNwQyxrQkFBS21JLEdBQUcsQ0FBQ3pZLE9BQUosQ0FBYSxNQUFNK2pDLEtBQU4sR0FBYyxHQUEzQixJQUFtQyxDQUF4QyxFQUE0QztBQUMzQ3RyQixtQkFBRyxJQUFJc3JCLEtBQUssR0FBRyxHQUFmO0FBQ0E7QUFDRCxhQU5TLENBUVY7OztBQUNBQyxzQkFBVSxHQUFHUCxnQkFBZ0IsQ0FBRWhyQixHQUFGLENBQTdCOztBQUNBLGdCQUFLcXJCLFFBQVEsS0FBS0UsVUFBbEIsRUFBK0I7QUFDOUIza0Msa0JBQUksQ0FBQ3lQLFlBQUwsQ0FBbUIsT0FBbkIsRUFBNEJrMUIsVUFBNUI7QUFDQTtBQUNEO0FBQ0Q7QUFDRDs7QUFFRCxhQUFPLElBQVA7QUFDQSxLQXBDZ0I7QUFzQ2pCQyxlQUFXLEVBQUUsVUFBVXQrQixLQUFWLEVBQWtCO0FBQzlCLFVBQUlrK0IsT0FBSjtBQUFBLFVBQWF4a0MsSUFBYjtBQUFBLFVBQW1Cb1osR0FBbkI7QUFBQSxVQUF3QnFyQixRQUF4QjtBQUFBLFVBQWtDQyxLQUFsQztBQUFBLFVBQXlDenpCLENBQXpDO0FBQUEsVUFBNEMwekIsVUFBNUM7QUFBQSxVQUNDL2tDLENBQUMsR0FBRyxDQURMOztBQUdBLFVBQUtpUCxVQUFVLENBQUV2SSxLQUFGLENBQWYsRUFBMkI7QUFDMUIsZUFBTyxLQUFLaUssSUFBTCxDQUFXLFVBQVVVLENBQVYsRUFBYztBQUMvQnRMLGdCQUFNLENBQUUsSUFBRixDQUFOLENBQWVpL0IsV0FBZixDQUE0QnQrQixLQUFLLENBQUM3RCxJQUFOLENBQVksSUFBWixFQUFrQndPLENBQWxCLEVBQXFCb3pCLFFBQVEsQ0FBRSxJQUFGLENBQTdCLENBQTVCO0FBQ0EsU0FGTSxDQUFQO0FBR0E7O0FBRUQsVUFBSyxDQUFDbGdDLFNBQVMsQ0FBQ3RFLE1BQWhCLEVBQXlCO0FBQ3hCLGVBQU8sS0FBSytGLElBQUwsQ0FBVyxPQUFYLEVBQW9CLEVBQXBCLENBQVA7QUFDQTs7QUFFRDQrQixhQUFPLEdBQUdGLGNBQWMsQ0FBRWgrQixLQUFGLENBQXhCOztBQUVBLFVBQUtrK0IsT0FBTyxDQUFDM2tDLE1BQWIsRUFBc0I7QUFDckIsZUFBVUcsSUFBSSxHQUFHLEtBQU1KLENBQUMsRUFBUCxDQUFqQixFQUFpQztBQUNoQzZrQyxrQkFBUSxHQUFHSixRQUFRLENBQUVya0MsSUFBRixDQUFuQixDQURnQyxDQUdoQzs7QUFDQW9aLGFBQUcsR0FBR3BaLElBQUksQ0FBQ3lJLFFBQUwsS0FBa0IsQ0FBbEIsSUFBeUIsTUFBTTI3QixnQkFBZ0IsQ0FBRUssUUFBRixDQUF0QixHQUFxQyxHQUFwRTs7QUFFQSxjQUFLcnJCLEdBQUwsRUFBVztBQUNWbkksYUFBQyxHQUFHLENBQUo7O0FBQ0EsbUJBQVV5ekIsS0FBSyxHQUFHRixPQUFPLENBQUV2ekIsQ0FBQyxFQUFILENBQXpCLEVBQXFDO0FBRXBDO0FBQ0EscUJBQVFtSSxHQUFHLENBQUN6WSxPQUFKLENBQWEsTUFBTStqQyxLQUFOLEdBQWMsR0FBM0IsSUFBbUMsQ0FBQyxDQUE1QyxFQUFnRDtBQUMvQ3RyQixtQkFBRyxHQUFHQSxHQUFHLENBQUN4VSxPQUFKLENBQWEsTUFBTTgvQixLQUFOLEdBQWMsR0FBM0IsRUFBZ0MsR0FBaEMsQ0FBTjtBQUNBO0FBQ0QsYUFSUyxDQVVWOzs7QUFDQUMsc0JBQVUsR0FBR1AsZ0JBQWdCLENBQUVockIsR0FBRixDQUE3Qjs7QUFDQSxnQkFBS3FyQixRQUFRLEtBQUtFLFVBQWxCLEVBQStCO0FBQzlCM2tDLGtCQUFJLENBQUN5UCxZQUFMLENBQW1CLE9BQW5CLEVBQTRCazFCLFVBQTVCO0FBQ0E7QUFDRDtBQUNEO0FBQ0Q7O0FBRUQsYUFBTyxJQUFQO0FBQ0EsS0FqRmdCO0FBbUZqQkUsZUFBVyxFQUFFLFVBQVV2K0IsS0FBVixFQUFpQncrQixRQUFqQixFQUE0QjtBQUN4QyxVQUFJMWhDLElBQUksR0FBRyxPQUFPa0QsS0FBbEI7QUFBQSxVQUNDeStCLFlBQVksR0FBRzNoQyxJQUFJLEtBQUssUUFBVCxJQUFxQmpCLEtBQUssQ0FBQ0csT0FBTixDQUFlZ0UsS0FBZixDQURyQzs7QUFHQSxVQUFLLE9BQU93K0IsUUFBUCxLQUFvQixTQUFwQixJQUFpQ0MsWUFBdEMsRUFBcUQ7QUFDcEQsZUFBT0QsUUFBUSxHQUFHLEtBQUtQLFFBQUwsQ0FBZWorQixLQUFmLENBQUgsR0FBNEIsS0FBS3MrQixXQUFMLENBQWtCdCtCLEtBQWxCLENBQTNDO0FBQ0E7O0FBRUQsVUFBS3VJLFVBQVUsQ0FBRXZJLEtBQUYsQ0FBZixFQUEyQjtBQUMxQixlQUFPLEtBQUtpSyxJQUFMLENBQVcsVUFBVTNRLENBQVYsRUFBYztBQUMvQitGLGdCQUFNLENBQUUsSUFBRixDQUFOLENBQWVrL0IsV0FBZixDQUNDditCLEtBQUssQ0FBQzdELElBQU4sQ0FBWSxJQUFaLEVBQWtCN0MsQ0FBbEIsRUFBcUJ5a0MsUUFBUSxDQUFFLElBQUYsQ0FBN0IsRUFBdUNTLFFBQXZDLENBREQsRUFFQ0EsUUFGRDtBQUlBLFNBTE0sQ0FBUDtBQU1BOztBQUVELGFBQU8sS0FBS3YwQixJQUFMLENBQVcsWUFBVztBQUM1QixZQUFJckssU0FBSixFQUFldEcsQ0FBZixFQUFrQjhqQixJQUFsQixFQUF3QnNoQixVQUF4Qjs7QUFFQSxZQUFLRCxZQUFMLEVBQW9CO0FBRW5CO0FBQ0FubEMsV0FBQyxHQUFHLENBQUo7QUFDQThqQixjQUFJLEdBQUcvZCxNQUFNLENBQUUsSUFBRixDQUFiO0FBQ0FxL0Isb0JBQVUsR0FBR1YsY0FBYyxDQUFFaCtCLEtBQUYsQ0FBM0I7O0FBRUEsaUJBQVVKLFNBQVMsR0FBRzgrQixVQUFVLENBQUVwbEMsQ0FBQyxFQUFILENBQWhDLEVBQTRDO0FBRTNDO0FBQ0EsZ0JBQUs4akIsSUFBSSxDQUFDdWhCLFFBQUwsQ0FBZS8rQixTQUFmLENBQUwsRUFBa0M7QUFDakN3ZCxrQkFBSSxDQUFDa2hCLFdBQUwsQ0FBa0IxK0IsU0FBbEI7QUFDQSxhQUZELE1BRU87QUFDTndkLGtCQUFJLENBQUM2Z0IsUUFBTCxDQUFlcitCLFNBQWY7QUFDQTtBQUNELFdBZmtCLENBaUJwQjs7QUFDQyxTQWxCRCxNQWtCTyxJQUFLSSxLQUFLLEtBQUsvRCxTQUFWLElBQXVCYSxJQUFJLEtBQUssU0FBckMsRUFBaUQ7QUFDdkQ4QyxtQkFBUyxHQUFHbStCLFFBQVEsQ0FBRSxJQUFGLENBQXBCOztBQUNBLGNBQUtuK0IsU0FBTCxFQUFpQjtBQUVoQjtBQUNBK2tCLG9CQUFRLENBQUNGLEdBQVQsQ0FBYyxJQUFkLEVBQW9CLGVBQXBCLEVBQXFDN2tCLFNBQXJDO0FBQ0EsV0FOc0QsQ0FRdkQ7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLGNBQUssS0FBS3VKLFlBQVYsRUFBeUI7QUFDeEIsaUJBQUtBLFlBQUwsQ0FBbUIsT0FBbkIsRUFDQ3ZKLFNBQVMsSUFBSUksS0FBSyxLQUFLLEtBQXZCLEdBQ0EsRUFEQSxHQUVBMmtCLFFBQVEsQ0FBQy9hLEdBQVQsQ0FBYyxJQUFkLEVBQW9CLGVBQXBCLEtBQXlDLEVBSDFDO0FBS0E7QUFDRDtBQUNELE9BekNNLENBQVA7QUEwQ0EsS0E5SWdCO0FBZ0pqQiswQixZQUFRLEVBQUUsVUFBVWhsQyxRQUFWLEVBQXFCO0FBQzlCLFVBQUlpRyxTQUFKO0FBQUEsVUFBZWxHLElBQWY7QUFBQSxVQUNDSixDQUFDLEdBQUcsQ0FETDtBQUdBc0csZUFBUyxHQUFHLE1BQU1qRyxRQUFOLEdBQWlCLEdBQTdCOztBQUNBLGFBQVVELElBQUksR0FBRyxLQUFNSixDQUFDLEVBQVAsQ0FBakIsRUFBaUM7QUFDaEMsWUFBS0ksSUFBSSxDQUFDeUksUUFBTCxLQUFrQixDQUFsQixJQUNKLENBQUUsTUFBTTI3QixnQkFBZ0IsQ0FBRUMsUUFBUSxDQUFFcmtDLElBQUYsQ0FBVixDQUF0QixHQUE2QyxHQUEvQyxFQUFxRFcsT0FBckQsQ0FBOER1RixTQUE5RCxJQUE0RSxDQUFDLENBRDlFLEVBQ2tGO0FBQ2hGLGlCQUFPLElBQVA7QUFDRDtBQUNEOztBQUVELGFBQU8sS0FBUDtBQUNBO0FBN0pnQixHQUFsQjtBQW1LQSxNQUFJZy9CLE9BQU8sR0FBRyxLQUFkO0FBRUF2L0IsUUFBTSxDQUFDOEgsRUFBUCxDQUFVOUwsTUFBVixDQUFrQjtBQUNqQjJOLE9BQUcsRUFBRSxVQUFVaEosS0FBVixFQUFrQjtBQUN0QixVQUFJcWxCLEtBQUo7QUFBQSxVQUFXdmIsR0FBWDtBQUFBLFVBQWdCaW5CLGVBQWhCO0FBQUEsVUFDQ3IzQixJQUFJLEdBQUcsS0FBTSxDQUFOLENBRFI7O0FBR0EsVUFBSyxDQUFDbUUsU0FBUyxDQUFDdEUsTUFBaEIsRUFBeUI7QUFDeEIsWUFBS0csSUFBTCxFQUFZO0FBQ1gyckIsZUFBSyxHQUFHaG1CLE1BQU0sQ0FBQ3cvQixRQUFQLENBQWlCbmxDLElBQUksQ0FBQ29ELElBQXRCLEtBQ1B1QyxNQUFNLENBQUN3L0IsUUFBUCxDQUFpQm5sQyxJQUFJLENBQUNnTCxRQUFMLENBQWNoRyxXQUFkLEVBQWpCLENBREQ7O0FBR0EsY0FBSzJtQixLQUFLLElBQ1QsU0FBU0EsS0FETCxJQUVKLENBQUV2YixHQUFHLEdBQUd1YixLQUFLLENBQUN6YixHQUFOLENBQVdsUSxJQUFYLEVBQWlCLE9BQWpCLENBQVIsTUFBeUN1QyxTQUYxQyxFQUdFO0FBQ0QsbUJBQU82TixHQUFQO0FBQ0E7O0FBRURBLGFBQUcsR0FBR3BRLElBQUksQ0FBQ3NHLEtBQVgsQ0FYVyxDQWFYOztBQUNBLGNBQUssT0FBTzhKLEdBQVAsS0FBZSxRQUFwQixFQUErQjtBQUM5QixtQkFBT0EsR0FBRyxDQUFDeEwsT0FBSixDQUFhc2dDLE9BQWIsRUFBc0IsRUFBdEIsQ0FBUDtBQUNBLFdBaEJVLENBa0JYOzs7QUFDQSxpQkFBTzkwQixHQUFHLElBQUksSUFBUCxHQUFjLEVBQWQsR0FBbUJBLEdBQTFCO0FBQ0E7O0FBRUQ7QUFDQTs7QUFFRGluQixxQkFBZSxHQUFHeG9CLFVBQVUsQ0FBRXZJLEtBQUYsQ0FBNUI7QUFFQSxhQUFPLEtBQUtpSyxJQUFMLENBQVcsVUFBVTNRLENBQVYsRUFBYztBQUMvQixZQUFJMFAsR0FBSjs7QUFFQSxZQUFLLEtBQUs3RyxRQUFMLEtBQWtCLENBQXZCLEVBQTJCO0FBQzFCO0FBQ0E7O0FBRUQsWUFBSzR1QixlQUFMLEVBQXVCO0FBQ3RCL25CLGFBQUcsR0FBR2hKLEtBQUssQ0FBQzdELElBQU4sQ0FBWSxJQUFaLEVBQWtCN0MsQ0FBbEIsRUFBcUIrRixNQUFNLENBQUUsSUFBRixDQUFOLENBQWUySixHQUFmLEVBQXJCLENBQU47QUFDQSxTQUZELE1BRU87QUFDTkEsYUFBRyxHQUFHaEosS0FBTjtBQUNBLFNBWDhCLENBYS9COzs7QUFDQSxZQUFLZ0osR0FBRyxJQUFJLElBQVosRUFBbUI7QUFDbEJBLGFBQUcsR0FBRyxFQUFOO0FBRUEsU0FIRCxNQUdPLElBQUssT0FBT0EsR0FBUCxLQUFlLFFBQXBCLEVBQStCO0FBQ3JDQSxhQUFHLElBQUksRUFBUDtBQUVBLFNBSE0sTUFHQSxJQUFLbk4sS0FBSyxDQUFDRyxPQUFOLENBQWVnTixHQUFmLENBQUwsRUFBNEI7QUFDbENBLGFBQUcsR0FBRzNKLE1BQU0sQ0FBQzZLLEdBQVAsQ0FBWWxCLEdBQVosRUFBaUIsVUFBVWhKLEtBQVYsRUFBa0I7QUFDeEMsbUJBQU9BLEtBQUssSUFBSSxJQUFULEdBQWdCLEVBQWhCLEdBQXFCQSxLQUFLLEdBQUcsRUFBcEM7QUFDQSxXQUZLLENBQU47QUFHQTs7QUFFRHFsQixhQUFLLEdBQUdobUIsTUFBTSxDQUFDdy9CLFFBQVAsQ0FBaUIsS0FBSy9oQyxJQUF0QixLQUFnQ3VDLE1BQU0sQ0FBQ3cvQixRQUFQLENBQWlCLEtBQUtuNkIsUUFBTCxDQUFjaEcsV0FBZCxFQUFqQixDQUF4QyxDQTFCK0IsQ0E0Qi9COztBQUNBLFlBQUssQ0FBQzJtQixLQUFELElBQVUsRUFBRyxTQUFTQSxLQUFaLENBQVYsSUFBaUNBLEtBQUssQ0FBQ1osR0FBTixDQUFXLElBQVgsRUFBaUJ6YixHQUFqQixFQUFzQixPQUF0QixNQUFvQy9NLFNBQTFFLEVBQXNGO0FBQ3JGLGVBQUsrRCxLQUFMLEdBQWFnSixHQUFiO0FBQ0E7QUFDRCxPQWhDTSxDQUFQO0FBaUNBO0FBbEVnQixHQUFsQjtBQXFFQTNKLFFBQU0sQ0FBQ2hFLE1BQVAsQ0FBZTtBQUNkd2pDLFlBQVEsRUFBRTtBQUNUOVcsWUFBTSxFQUFFO0FBQ1BuZSxXQUFHLEVBQUUsVUFBVWxRLElBQVYsRUFBaUI7QUFFckIsY0FBSXNQLEdBQUcsR0FBRzNKLE1BQU0sQ0FBQytVLElBQVAsQ0FBWTlVLElBQVosQ0FBa0I1RixJQUFsQixFQUF3QixPQUF4QixDQUFWO0FBQ0EsaUJBQU9zUCxHQUFHLElBQUksSUFBUCxHQUNOQSxHQURNLEdBR047QUFDQTtBQUNBO0FBQ0E7QUFDQTgwQiwwQkFBZ0IsQ0FBRXorQixNQUFNLENBQUM2SixJQUFQLENBQWF4UCxJQUFiLENBQUYsQ0FQakI7QUFRQTtBQVpNLE9BREM7QUFlVG9ULFlBQU0sRUFBRTtBQUNQbEQsV0FBRyxFQUFFLFVBQVVsUSxJQUFWLEVBQWlCO0FBQ3JCLGNBQUlzRyxLQUFKO0FBQUEsY0FBVytuQixNQUFYO0FBQUEsY0FBbUJ6dUIsQ0FBbkI7QUFBQSxjQUNDa0csT0FBTyxHQUFHOUYsSUFBSSxDQUFDOEYsT0FEaEI7QUFBQSxjQUVDNUUsS0FBSyxHQUFHbEIsSUFBSSxDQUFDaWYsYUFGZDtBQUFBLGNBR0NzUixHQUFHLEdBQUd2d0IsSUFBSSxDQUFDb0QsSUFBTCxLQUFjLFlBSHJCO0FBQUEsY0FJQ3NxQixNQUFNLEdBQUc2QyxHQUFHLEdBQUcsSUFBSCxHQUFVLEVBSnZCO0FBQUEsY0FLQytMLEdBQUcsR0FBRy9MLEdBQUcsR0FBR3J2QixLQUFLLEdBQUcsQ0FBWCxHQUFlNEUsT0FBTyxDQUFDakcsTUFMakM7O0FBT0EsY0FBS3FCLEtBQUssR0FBRyxDQUFiLEVBQWlCO0FBQ2hCdEIsYUFBQyxHQUFHMDhCLEdBQUo7QUFFQSxXQUhELE1BR087QUFDTjE4QixhQUFDLEdBQUcyd0IsR0FBRyxHQUFHcnZCLEtBQUgsR0FBVyxDQUFsQjtBQUNBLFdBYm9CLENBZXJCOzs7QUFDQSxpQkFBUXRCLENBQUMsR0FBRzA4QixHQUFaLEVBQWlCMThCLENBQUMsRUFBbEIsRUFBdUI7QUFDdEJ5dUIsa0JBQU0sR0FBR3ZvQixPQUFPLENBQUVsRyxDQUFGLENBQWhCLENBRHNCLENBR3RCO0FBQ0E7O0FBQ0EsZ0JBQUssQ0FBRXl1QixNQUFNLENBQUNyUCxRQUFQLElBQW1CcGYsQ0FBQyxLQUFLc0IsS0FBM0IsS0FFSDtBQUNBLGFBQUNtdEIsTUFBTSxDQUFDdlgsUUFITCxLQUlELENBQUN1WCxNQUFNLENBQUN4ckIsVUFBUCxDQUFrQmlVLFFBQW5CLElBQ0QsQ0FBQzlMLFFBQVEsQ0FBRXFqQixNQUFNLENBQUN4ckIsVUFBVCxFQUFxQixVQUFyQixDQUxQLENBQUwsRUFLa0Q7QUFFakQ7QUFDQXlELG1CQUFLLEdBQUdYLE1BQU0sQ0FBRTBvQixNQUFGLENBQU4sQ0FBaUIvZSxHQUFqQixFQUFSLENBSGlELENBS2pEOztBQUNBLGtCQUFLaWhCLEdBQUwsRUFBVztBQUNWLHVCQUFPanFCLEtBQVA7QUFDQSxlQVJnRCxDQVVqRDs7O0FBQ0FvbkIsb0JBQU0sQ0FBQzlzQixJQUFQLENBQWEwRixLQUFiO0FBQ0E7QUFDRDs7QUFFRCxpQkFBT29uQixNQUFQO0FBQ0EsU0EzQ007QUE2Q1AzQyxXQUFHLEVBQUUsVUFBVS9xQixJQUFWLEVBQWdCc0csS0FBaEIsRUFBd0I7QUFDNUIsY0FBSTgrQixTQUFKO0FBQUEsY0FBZS9XLE1BQWY7QUFBQSxjQUNDdm9CLE9BQU8sR0FBRzlGLElBQUksQ0FBQzhGLE9BRGhCO0FBQUEsY0FFQzRuQixNQUFNLEdBQUcvbkIsTUFBTSxDQUFDdkQsU0FBUCxDQUFrQmtFLEtBQWxCLENBRlY7QUFBQSxjQUdDMUcsQ0FBQyxHQUFHa0csT0FBTyxDQUFDakcsTUFIYjs7QUFLQSxpQkFBUUQsQ0FBQyxFQUFULEVBQWM7QUFDYnl1QixrQkFBTSxHQUFHdm9CLE9BQU8sQ0FBRWxHLENBQUYsQ0FBaEI7QUFFQTs7QUFFQSxnQkFBS3l1QixNQUFNLENBQUNyUCxRQUFQLEdBQ0pyWixNQUFNLENBQUN3TSxPQUFQLENBQWdCeE0sTUFBTSxDQUFDdy9CLFFBQVAsQ0FBZ0I5VyxNQUFoQixDQUF1Qm5lLEdBQXZCLENBQTRCbWUsTUFBNUIsQ0FBaEIsRUFBc0RYLE1BQXRELElBQWlFLENBQUMsQ0FEbkUsRUFFRTtBQUNEMFgsdUJBQVMsR0FBRyxJQUFaO0FBQ0E7QUFFRDs7QUFDQSxXQWxCMkIsQ0FvQjVCOzs7QUFDQSxjQUFLLENBQUNBLFNBQU4sRUFBa0I7QUFDakJwbEMsZ0JBQUksQ0FBQ2lmLGFBQUwsR0FBcUIsQ0FBQyxDQUF0QjtBQUNBOztBQUNELGlCQUFPeU8sTUFBUDtBQUNBO0FBdEVNO0FBZkM7QUFESSxHQUFmLEVBOXdRaUYsQ0F5MlFqRjs7QUFDQS9uQixRQUFNLENBQUM0SyxJQUFQLENBQWEsQ0FBRSxPQUFGLEVBQVcsVUFBWCxDQUFiLEVBQXNDLFlBQVc7QUFDaEQ1SyxVQUFNLENBQUN3L0IsUUFBUCxDQUFpQixJQUFqQixJQUEwQjtBQUN6QnBhLFNBQUcsRUFBRSxVQUFVL3FCLElBQVYsRUFBZ0JzRyxLQUFoQixFQUF3QjtBQUM1QixZQUFLbkUsS0FBSyxDQUFDRyxPQUFOLENBQWVnRSxLQUFmLENBQUwsRUFBOEI7QUFDN0IsaUJBQVN0RyxJQUFJLENBQUMrZSxPQUFMLEdBQWVwWixNQUFNLENBQUN3TSxPQUFQLENBQWdCeE0sTUFBTSxDQUFFM0YsSUFBRixDQUFOLENBQWVzUCxHQUFmLEVBQWhCLEVBQXNDaEosS0FBdEMsSUFBZ0QsQ0FBQyxDQUF6RTtBQUNBO0FBQ0Q7QUFMd0IsS0FBMUI7O0FBT0EsUUFBSyxDQUFDc0ksT0FBTyxDQUFDdzBCLE9BQWQsRUFBd0I7QUFDdkJ6OUIsWUFBTSxDQUFDdy9CLFFBQVAsQ0FBaUIsSUFBakIsRUFBd0JqMUIsR0FBeEIsR0FBOEIsVUFBVWxRLElBQVYsRUFBaUI7QUFDOUMsZUFBT0EsSUFBSSxDQUFDNkYsWUFBTCxDQUFtQixPQUFuQixNQUFpQyxJQUFqQyxHQUF3QyxJQUF4QyxHQUErQzdGLElBQUksQ0FBQ3NHLEtBQTNEO0FBQ0EsT0FGRDtBQUdBO0FBQ0QsR0FiRCxFQTEyUWlGLENBNDNRakY7O0FBR0FzSSxTQUFPLENBQUN5MkIsT0FBUixHQUFrQixlQUFlbm1DLE1BQWpDOztBQUdBLE1BQUlvbUMsV0FBVyxHQUFHLGlDQUFsQjtBQUFBLE1BQ0NDLHVCQUF1QixHQUFHLFVBQVVydUIsQ0FBVixFQUFjO0FBQ3ZDQSxLQUFDLENBQUNtYixlQUFGO0FBQ0EsR0FIRjs7QUFLQTFzQixRQUFNLENBQUNoRSxNQUFQLENBQWVnRSxNQUFNLENBQUN4QyxLQUF0QixFQUE2QjtBQUU1Qml3QixXQUFPLEVBQUUsVUFBVWp3QixLQUFWLEVBQWlCaUQsSUFBakIsRUFBdUJwRyxJQUF2QixFQUE2QndsQyxZQUE3QixFQUE0QztBQUVwRCxVQUFJNWxDLENBQUo7QUFBQSxVQUFPd1osR0FBUDtBQUFBLFVBQVl5QixHQUFaO0FBQUEsVUFBaUI0cUIsVUFBakI7QUFBQSxVQUE2QkMsTUFBN0I7QUFBQSxVQUFxQ3pVLE1BQXJDO0FBQUEsVUFBNkNuSixPQUE3QztBQUFBLFVBQXNENmQsV0FBdEQ7QUFBQSxVQUNDQyxTQUFTLEdBQUcsQ0FBRTVsQyxJQUFJLElBQUk4QyxRQUFWLENBRGI7QUFBQSxVQUVDTSxJQUFJLEdBQUdvTCxNQUFNLENBQUMvTCxJQUFQLENBQWFVLEtBQWIsRUFBb0IsTUFBcEIsSUFBK0JBLEtBQUssQ0FBQ0MsSUFBckMsR0FBNENELEtBRnBEO0FBQUEsVUFHQzJ0QixVQUFVLEdBQUd0aUIsTUFBTSxDQUFDL0wsSUFBUCxDQUFhVSxLQUFiLEVBQW9CLFdBQXBCLElBQW9DQSxLQUFLLENBQUNpQyxTQUFOLENBQWdCd04sS0FBaEIsQ0FBdUIsR0FBdkIsQ0FBcEMsR0FBbUUsRUFIakY7QUFLQXdHLFNBQUcsR0FBR3VzQixXQUFXLEdBQUc5cUIsR0FBRyxHQUFHN2EsSUFBSSxHQUFHQSxJQUFJLElBQUk4QyxRQUF6QyxDQVBvRCxDQVNwRDs7QUFDQSxVQUFLOUMsSUFBSSxDQUFDeUksUUFBTCxLQUFrQixDQUFsQixJQUF1QnpJLElBQUksQ0FBQ3lJLFFBQUwsS0FBa0IsQ0FBOUMsRUFBa0Q7QUFDakQ7QUFDQSxPQVptRCxDQWNwRDs7O0FBQ0EsVUFBSzY4QixXQUFXLENBQUN0dEIsSUFBWixDQUFrQjVVLElBQUksR0FBR3VDLE1BQU0sQ0FBQ3hDLEtBQVAsQ0FBYSt0QixTQUF0QyxDQUFMLEVBQXlEO0FBQ3hEO0FBQ0E7O0FBRUQsVUFBSzl0QixJQUFJLENBQUN6QyxPQUFMLENBQWMsR0FBZCxJQUFzQixDQUFDLENBQTVCLEVBQWdDO0FBRS9CO0FBQ0Ftd0Isa0JBQVUsR0FBRzF0QixJQUFJLENBQUN3UCxLQUFMLENBQVksR0FBWixDQUFiO0FBQ0F4UCxZQUFJLEdBQUcwdEIsVUFBVSxDQUFDblksS0FBWCxFQUFQO0FBQ0FtWSxrQkFBVSxDQUFDM2YsSUFBWDtBQUNBOztBQUNEdTBCLFlBQU0sR0FBR3RpQyxJQUFJLENBQUN6QyxPQUFMLENBQWMsR0FBZCxJQUFzQixDQUF0QixJQUEyQixPQUFPeUMsSUFBM0MsQ0ExQm9ELENBNEJwRDs7QUFDQUQsV0FBSyxHQUFHQSxLQUFLLENBQUV3QyxNQUFNLENBQUNnTSxPQUFULENBQUwsR0FDUHhPLEtBRE8sR0FFUCxJQUFJd0MsTUFBTSxDQUFDaXRCLEtBQVgsQ0FBa0J4dkIsSUFBbEIsRUFBd0IsT0FBT0QsS0FBUCxLQUFpQixRQUFqQixJQUE2QkEsS0FBckQsQ0FGRCxDQTdCb0QsQ0FpQ3BEOztBQUNBQSxXQUFLLENBQUNzd0IsU0FBTixHQUFrQitSLFlBQVksR0FBRyxDQUFILEdBQU8sQ0FBckM7QUFDQXJpQyxXQUFLLENBQUNpQyxTQUFOLEdBQWtCMHJCLFVBQVUsQ0FBQzFZLElBQVgsQ0FBaUIsR0FBakIsQ0FBbEI7QUFDQWpWLFdBQUssQ0FBQ2d2QixVQUFOLEdBQW1CaHZCLEtBQUssQ0FBQ2lDLFNBQU4sR0FDbEIsSUFBSTZQLE1BQUosQ0FBWSxZQUFZNmIsVUFBVSxDQUFDMVksSUFBWCxDQUFpQixlQUFqQixDQUFaLEdBQWlELFNBQTdELENBRGtCLEdBRWxCLElBRkQsQ0FwQ29ELENBd0NwRDs7QUFDQWpWLFdBQUssQ0FBQzhaLE1BQU4sR0FBZTFhLFNBQWY7O0FBQ0EsVUFBSyxDQUFDWSxLQUFLLENBQUNxTyxNQUFaLEVBQXFCO0FBQ3BCck8sYUFBSyxDQUFDcU8sTUFBTixHQUFleFIsSUFBZjtBQUNBLE9BNUNtRCxDQThDcEQ7OztBQUNBb0csVUFBSSxHQUFHQSxJQUFJLElBQUksSUFBUixHQUNOLENBQUVqRCxLQUFGLENBRE0sR0FFTndDLE1BQU0sQ0FBQ3ZELFNBQVAsQ0FBa0JnRSxJQUFsQixFQUF3QixDQUFFakQsS0FBRixDQUF4QixDQUZELENBL0NvRCxDQW1EcEQ7O0FBQ0Eya0IsYUFBTyxHQUFHbmlCLE1BQU0sQ0FBQ3hDLEtBQVAsQ0FBYTJrQixPQUFiLENBQXNCMWtCLElBQXRCLEtBQWdDLEVBQTFDOztBQUNBLFVBQUssQ0FBQ29pQyxZQUFELElBQWlCMWQsT0FBTyxDQUFDc0wsT0FBekIsSUFBb0N0TCxPQUFPLENBQUNzTCxPQUFSLENBQWdCNXhCLEtBQWhCLENBQXVCeEIsSUFBdkIsRUFBNkJvRyxJQUE3QixNQUF3QyxLQUFqRixFQUF5RjtBQUN4RjtBQUNBLE9BdkRtRCxDQXlEcEQ7QUFDQTs7O0FBQ0EsVUFBSyxDQUFDby9CLFlBQUQsSUFBaUIsQ0FBQzFkLE9BQU8sQ0FBQ21MLFFBQTFCLElBQXNDLENBQUNua0IsUUFBUSxDQUFFOU8sSUFBRixDQUFwRCxFQUErRDtBQUU5RHlsQyxrQkFBVSxHQUFHM2QsT0FBTyxDQUFDc0osWUFBUixJQUF3Qmh1QixJQUFyQzs7QUFDQSxZQUFLLENBQUNraUMsV0FBVyxDQUFDdHRCLElBQVosQ0FBa0J5dEIsVUFBVSxHQUFHcmlDLElBQS9CLENBQU4sRUFBOEM7QUFDN0NnVyxhQUFHLEdBQUdBLEdBQUcsQ0FBQ3ZXLFVBQVY7QUFDQTs7QUFDRCxlQUFRdVcsR0FBUixFQUFhQSxHQUFHLEdBQUdBLEdBQUcsQ0FBQ3ZXLFVBQXZCLEVBQW9DO0FBQ25DK2lDLG1CQUFTLENBQUNobEMsSUFBVixDQUFnQndZLEdBQWhCO0FBQ0F5QixhQUFHLEdBQUd6QixHQUFOO0FBQ0EsU0FUNkQsQ0FXOUQ7OztBQUNBLFlBQUt5QixHQUFHLE1BQU83YSxJQUFJLENBQUMwWCxhQUFMLElBQXNCNVUsUUFBN0IsQ0FBUixFQUFrRDtBQUNqRDhpQyxtQkFBUyxDQUFDaGxDLElBQVYsQ0FBZ0JpYSxHQUFHLENBQUNYLFdBQUosSUFBbUJXLEdBQUcsQ0FBQ2dyQixZQUF2QixJQUF1QzNtQyxNQUF2RDtBQUNBO0FBQ0QsT0ExRW1ELENBNEVwRDs7O0FBQ0FVLE9BQUMsR0FBRyxDQUFKOztBQUNBLGFBQVEsQ0FBRXdaLEdBQUcsR0FBR3dzQixTQUFTLENBQUVobUMsQ0FBQyxFQUFILENBQWpCLEtBQThCLENBQUN1RCxLQUFLLENBQUM2dUIsb0JBQU4sRUFBdkMsRUFBc0U7QUFDckUyVCxtQkFBVyxHQUFHdnNCLEdBQWQ7QUFDQWpXLGFBQUssQ0FBQ0MsSUFBTixHQUFheEQsQ0FBQyxHQUFHLENBQUosR0FDWjZsQyxVQURZLEdBRVozZCxPQUFPLENBQUN1SixRQUFSLElBQW9CanVCLElBRnJCLENBRnFFLENBTXJFOztBQUNBNnRCLGNBQU0sR0FBRyxDQUNQaEcsUUFBUSxDQUFDL2EsR0FBVCxDQUFja0osR0FBZCxFQUFtQixRQUFuQixLQUFpQ3hPLE1BQU0sQ0FBQ0MsTUFBUCxDQUFlLElBQWYsQ0FEMUIsRUFFTDFILEtBQUssQ0FBQ0MsSUFGRCxLQUdSNm5CLFFBQVEsQ0FBQy9hLEdBQVQsQ0FBY2tKLEdBQWQsRUFBbUIsUUFBbkIsQ0FIRDs7QUFJQSxZQUFLNlgsTUFBTCxFQUFjO0FBQ2JBLGdCQUFNLENBQUN6dkIsS0FBUCxDQUFjNFgsR0FBZCxFQUFtQmhULElBQW5CO0FBQ0EsU0Fib0UsQ0FlckU7OztBQUNBNnFCLGNBQU0sR0FBR3lVLE1BQU0sSUFBSXRzQixHQUFHLENBQUVzc0IsTUFBRixDQUF0Qjs7QUFDQSxZQUFLelUsTUFBTSxJQUFJQSxNQUFNLENBQUN6dkIsS0FBakIsSUFBMEJpcEIsVUFBVSxDQUFFclIsR0FBRixDQUF6QyxFQUFtRDtBQUNsRGpXLGVBQUssQ0FBQzhaLE1BQU4sR0FBZWdVLE1BQU0sQ0FBQ3p2QixLQUFQLENBQWM0WCxHQUFkLEVBQW1CaFQsSUFBbkIsQ0FBZjs7QUFDQSxjQUFLakQsS0FBSyxDQUFDOFosTUFBTixLQUFpQixLQUF0QixFQUE4QjtBQUM3QjlaLGlCQUFLLENBQUNpdkIsY0FBTjtBQUNBO0FBQ0Q7QUFDRDs7QUFDRGp2QixXQUFLLENBQUNDLElBQU4sR0FBYUEsSUFBYixDQXRHb0QsQ0F3R3BEOztBQUNBLFVBQUssQ0FBQ29pQyxZQUFELElBQWlCLENBQUNyaUMsS0FBSyxDQUFDeXdCLGtCQUFOLEVBQXZCLEVBQW9EO0FBRW5ELFlBQUssQ0FBRSxDQUFDOUwsT0FBTyxDQUFDNkcsUUFBVCxJQUNON0csT0FBTyxDQUFDNkcsUUFBUixDQUFpQm50QixLQUFqQixDQUF3Qm9rQyxTQUFTLENBQUNweEIsR0FBVixFQUF4QixFQUF5Q3BPLElBQXpDLE1BQW9ELEtBRGhELEtBRUpxa0IsVUFBVSxDQUFFenFCLElBQUYsQ0FGWCxFQUVzQjtBQUVyQjtBQUNBO0FBQ0EsY0FBSzBsQyxNQUFNLElBQUk3MkIsVUFBVSxDQUFFN08sSUFBSSxDQUFFb0QsSUFBRixDQUFOLENBQXBCLElBQXdDLENBQUMwTCxRQUFRLENBQUU5TyxJQUFGLENBQXRELEVBQWlFO0FBRWhFO0FBQ0E2YSxlQUFHLEdBQUc3YSxJQUFJLENBQUUwbEMsTUFBRixDQUFWOztBQUVBLGdCQUFLN3FCLEdBQUwsRUFBVztBQUNWN2Esa0JBQUksQ0FBRTBsQyxNQUFGLENBQUosR0FBaUIsSUFBakI7QUFDQSxhQVArRCxDQVNoRTs7O0FBQ0EvL0Isa0JBQU0sQ0FBQ3hDLEtBQVAsQ0FBYSt0QixTQUFiLEdBQXlCOXRCLElBQXpCOztBQUVBLGdCQUFLRCxLQUFLLENBQUM2dUIsb0JBQU4sRUFBTCxFQUFvQztBQUNuQzJULHlCQUFXLENBQUNsaEMsZ0JBQVosQ0FBOEJyQixJQUE5QixFQUFvQ21pQyx1QkFBcEM7QUFDQTs7QUFFRHZsQyxnQkFBSSxDQUFFb0QsSUFBRixDQUFKOztBQUVBLGdCQUFLRCxLQUFLLENBQUM2dUIsb0JBQU4sRUFBTCxFQUFvQztBQUNuQzJULHlCQUFXLENBQUNyNEIsbUJBQVosQ0FBaUNsSyxJQUFqQyxFQUF1Q21pQyx1QkFBdkM7QUFDQTs7QUFFRDUvQixrQkFBTSxDQUFDeEMsS0FBUCxDQUFhK3RCLFNBQWIsR0FBeUIzdUIsU0FBekI7O0FBRUEsZ0JBQUtzWSxHQUFMLEVBQVc7QUFDVjdhLGtCQUFJLENBQUUwbEMsTUFBRixDQUFKLEdBQWlCN3FCLEdBQWpCO0FBQ0E7QUFDRDtBQUNEO0FBQ0Q7O0FBRUQsYUFBTzFYLEtBQUssQ0FBQzhaLE1BQWI7QUFDQSxLQW5KMkI7QUFxSjVCO0FBQ0E7QUFDQTZvQixZQUFRLEVBQUUsVUFBVTFpQyxJQUFWLEVBQWdCcEQsSUFBaEIsRUFBc0JtRCxLQUF0QixFQUE4QjtBQUN2QyxVQUFJK1QsQ0FBQyxHQUFHdlIsTUFBTSxDQUFDaEUsTUFBUCxDQUNQLElBQUlnRSxNQUFNLENBQUNpdEIsS0FBWCxFQURPLEVBRVB6dkIsS0FGTyxFQUdQO0FBQ0NDLFlBQUksRUFBRUEsSUFEUDtBQUVDNndCLG1CQUFXLEVBQUU7QUFGZCxPQUhPLENBQVI7QUFTQXR1QixZQUFNLENBQUN4QyxLQUFQLENBQWFpd0IsT0FBYixDQUFzQmxjLENBQXRCLEVBQXlCLElBQXpCLEVBQStCbFgsSUFBL0I7QUFDQTtBQWxLMkIsR0FBN0I7QUFzS0EyRixRQUFNLENBQUM4SCxFQUFQLENBQVU5TCxNQUFWLENBQWtCO0FBRWpCeXhCLFdBQU8sRUFBRSxVQUFVaHdCLElBQVYsRUFBZ0JnRCxJQUFoQixFQUF1QjtBQUMvQixhQUFPLEtBQUttSyxJQUFMLENBQVcsWUFBVztBQUM1QjVLLGNBQU0sQ0FBQ3hDLEtBQVAsQ0FBYWl3QixPQUFiLENBQXNCaHdCLElBQXRCLEVBQTRCZ0QsSUFBNUIsRUFBa0MsSUFBbEM7QUFDQSxPQUZNLENBQVA7QUFHQSxLQU5nQjtBQU9qQjIvQixrQkFBYyxFQUFFLFVBQVUzaUMsSUFBVixFQUFnQmdELElBQWhCLEVBQXVCO0FBQ3RDLFVBQUlwRyxJQUFJLEdBQUcsS0FBTSxDQUFOLENBQVg7O0FBQ0EsVUFBS0EsSUFBTCxFQUFZO0FBQ1gsZUFBTzJGLE1BQU0sQ0FBQ3hDLEtBQVAsQ0FBYWl3QixPQUFiLENBQXNCaHdCLElBQXRCLEVBQTRCZ0QsSUFBNUIsRUFBa0NwRyxJQUFsQyxFQUF3QyxJQUF4QyxDQUFQO0FBQ0E7QUFDRDtBQVpnQixHQUFsQixFQTdpUmlGLENBNmpSakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxNQUFLLENBQUM0TyxPQUFPLENBQUN5MkIsT0FBZCxFQUF3QjtBQUN2QjEvQixVQUFNLENBQUM0SyxJQUFQLENBQWE7QUFBRXNsQixXQUFLLEVBQUUsU0FBVDtBQUFvQkMsVUFBSSxFQUFFO0FBQTFCLEtBQWIsRUFBcUQsVUFBVUssSUFBVixFQUFnQnRFLEdBQWhCLEVBQXNCO0FBRTFFO0FBQ0EsVUFBSTVZLE9BQU8sR0FBRyxVQUFVOVYsS0FBVixFQUFrQjtBQUMvQndDLGNBQU0sQ0FBQ3hDLEtBQVAsQ0FBYTJpQyxRQUFiLENBQXVCalUsR0FBdkIsRUFBNEIxdUIsS0FBSyxDQUFDcU8sTUFBbEMsRUFBMEM3TCxNQUFNLENBQUN4QyxLQUFQLENBQWEwdUIsR0FBYixDQUFrQjF1QixLQUFsQixDQUExQztBQUNBLE9BRkQ7O0FBSUF3QyxZQUFNLENBQUN4QyxLQUFQLENBQWEya0IsT0FBYixDQUFzQitKLEdBQXRCLElBQThCO0FBQzdCaHFCLGFBQUssRUFBRSxZQUFXO0FBRWpCO0FBQ0E7QUFDQSxjQUFJd0gsR0FBRyxHQUFHLEtBQUtxSSxhQUFMLElBQXNCLEtBQUs1VSxRQUEzQixJQUF1QyxJQUFqRDtBQUFBLGNBQ0NrakMsUUFBUSxHQUFHL2EsUUFBUSxDQUFDdEIsTUFBVCxDQUFpQnRhLEdBQWpCLEVBQXNCd2lCLEdBQXRCLENBRFo7O0FBR0EsY0FBSyxDQUFDbVUsUUFBTixFQUFpQjtBQUNoQjMyQixlQUFHLENBQUM1SyxnQkFBSixDQUFzQjB4QixJQUF0QixFQUE0QmxkLE9BQTVCLEVBQXFDLElBQXJDO0FBQ0E7O0FBQ0RnUyxrQkFBUSxDQUFDdEIsTUFBVCxDQUFpQnRhLEdBQWpCLEVBQXNCd2lCLEdBQXRCLEVBQTJCLENBQUVtVSxRQUFRLElBQUksQ0FBZCxJQUFvQixDQUEvQztBQUNBLFNBWjRCO0FBYTdCdlUsZ0JBQVEsRUFBRSxZQUFXO0FBQ3BCLGNBQUlwaUIsR0FBRyxHQUFHLEtBQUtxSSxhQUFMLElBQXNCLEtBQUs1VSxRQUEzQixJQUF1QyxJQUFqRDtBQUFBLGNBQ0NrakMsUUFBUSxHQUFHL2EsUUFBUSxDQUFDdEIsTUFBVCxDQUFpQnRhLEdBQWpCLEVBQXNCd2lCLEdBQXRCLElBQThCLENBRDFDOztBQUdBLGNBQUssQ0FBQ21VLFFBQU4sRUFBaUI7QUFDaEIzMkIsZUFBRyxDQUFDL0IsbUJBQUosQ0FBeUI2b0IsSUFBekIsRUFBK0JsZCxPQUEvQixFQUF3QyxJQUF4QztBQUNBZ1Msb0JBQVEsQ0FBQ2hGLE1BQVQsQ0FBaUI1VyxHQUFqQixFQUFzQndpQixHQUF0QjtBQUVBLFdBSkQsTUFJTztBQUNONUcsb0JBQVEsQ0FBQ3RCLE1BQVQsQ0FBaUJ0YSxHQUFqQixFQUFzQndpQixHQUF0QixFQUEyQm1VLFFBQTNCO0FBQ0E7QUFDRDtBQXhCNEIsT0FBOUI7QUEwQkEsS0FqQ0Q7QUFrQ0E7O0FBQ0QsTUFBSXRuQixRQUFRLEdBQUd4ZixNQUFNLENBQUN3ZixRQUF0QjtBQUVBLE1BQUkxUCxLQUFLLEdBQUc7QUFBRXlELFFBQUksRUFBRXFCLElBQUksQ0FBQ2tnQixHQUFMO0FBQVIsR0FBWjtBQUVBLE1BQUlpUyxNQUFNLEdBQUssSUFBZixDQTdtUmlGLENBaW5SakY7O0FBQ0F0Z0MsUUFBTSxDQUFDdWdDLFFBQVAsR0FBa0IsVUFBVTkvQixJQUFWLEVBQWlCO0FBQ2xDLFFBQUlvWCxHQUFKOztBQUNBLFFBQUssQ0FBQ3BYLElBQUQsSUFBUyxPQUFPQSxJQUFQLEtBQWdCLFFBQTlCLEVBQXlDO0FBQ3hDLGFBQU8sSUFBUDtBQUNBLEtBSmlDLENBTWxDO0FBQ0E7OztBQUNBLFFBQUk7QUFDSG9YLFNBQUcsR0FBSyxJQUFJdGUsTUFBTSxDQUFDaW5DLFNBQVgsRUFBRixDQUEyQkMsZUFBM0IsQ0FBNENoZ0MsSUFBNUMsRUFBa0QsVUFBbEQsQ0FBTjtBQUNBLEtBRkQsQ0FFRSxPQUFROFEsQ0FBUixFQUFZO0FBQ2JzRyxTQUFHLEdBQUdqYixTQUFOO0FBQ0E7O0FBRUQsUUFBSyxDQUFDaWIsR0FBRCxJQUFRQSxHQUFHLENBQUMzRixvQkFBSixDQUEwQixhQUExQixFQUEwQ2hZLE1BQXZELEVBQWdFO0FBQy9EOEYsWUFBTSxDQUFDTSxLQUFQLENBQWMsa0JBQWtCRyxJQUFoQztBQUNBOztBQUNELFdBQU9vWCxHQUFQO0FBQ0EsR0FsQkQ7O0FBcUJBLE1BQ0M2b0IsUUFBUSxHQUFHLE9BRFo7QUFBQSxNQUVDQyxLQUFLLEdBQUcsUUFGVDtBQUFBLE1BR0NDLGVBQWUsR0FBRyx1Q0FIbkI7QUFBQSxNQUlDQyxZQUFZLEdBQUcsb0NBSmhCOztBQU1BLFdBQVNDLFdBQVQsQ0FBc0IzbUMsTUFBdEIsRUFBOEJ1QyxHQUE5QixFQUFtQ3FrQyxXQUFuQyxFQUFnRGxpQixHQUFoRCxFQUFzRDtBQUNyRCxRQUFJcFQsSUFBSjs7QUFFQSxRQUFLalAsS0FBSyxDQUFDRyxPQUFOLENBQWVELEdBQWYsQ0FBTCxFQUE0QjtBQUUzQjtBQUNBc0QsWUFBTSxDQUFDNEssSUFBUCxDQUFhbE8sR0FBYixFQUFrQixVQUFVekMsQ0FBVixFQUFhMm1CLENBQWIsRUFBaUI7QUFDbEMsWUFBS21nQixXQUFXLElBQUlMLFFBQVEsQ0FBQ3J1QixJQUFULENBQWVsWSxNQUFmLENBQXBCLEVBQThDO0FBRTdDO0FBQ0Ewa0IsYUFBRyxDQUFFMWtCLE1BQUYsRUFBVXltQixDQUFWLENBQUg7QUFFQSxTQUxELE1BS087QUFFTjtBQUNBa2dCLHFCQUFXLENBQ1YzbUMsTUFBTSxHQUFHLEdBQVQsSUFBaUIsT0FBT3ltQixDQUFQLEtBQWEsUUFBYixJQUF5QkEsQ0FBQyxJQUFJLElBQTlCLEdBQXFDM21CLENBQXJDLEdBQXlDLEVBQTFELElBQWlFLEdBRHZELEVBRVYybUIsQ0FGVSxFQUdWbWdCLFdBSFUsRUFJVmxpQixHQUpVLENBQVg7QUFNQTtBQUNELE9BaEJEO0FBa0JBLEtBckJELE1BcUJPLElBQUssQ0FBQ2tpQixXQUFELElBQWdCLzJCLE1BQU0sQ0FBRXROLEdBQUYsQ0FBTixLQUFrQixRQUF2QyxFQUFrRDtBQUV4RDtBQUNBLFdBQU0rTyxJQUFOLElBQWMvTyxHQUFkLEVBQW9CO0FBQ25Cb2tDLG1CQUFXLENBQUUzbUMsTUFBTSxHQUFHLEdBQVQsR0FBZXNSLElBQWYsR0FBc0IsR0FBeEIsRUFBNkIvTyxHQUFHLENBQUUrTyxJQUFGLENBQWhDLEVBQTBDczFCLFdBQTFDLEVBQXVEbGlCLEdBQXZELENBQVg7QUFDQTtBQUVELEtBUE0sTUFPQTtBQUVOO0FBQ0FBLFNBQUcsQ0FBRTFrQixNQUFGLEVBQVV1QyxHQUFWLENBQUg7QUFDQTtBQUNELEdBanJSZ0YsQ0FtclJqRjtBQUNBOzs7QUFDQXNELFFBQU0sQ0FBQ2doQyxLQUFQLEdBQWUsVUFBVS9rQyxDQUFWLEVBQWE4a0MsV0FBYixFQUEyQjtBQUN6QyxRQUFJNW1DLE1BQUo7QUFBQSxRQUNDOG1DLENBQUMsR0FBRyxFQURMO0FBQUEsUUFFQ3BpQixHQUFHLEdBQUcsVUFBVS9MLEdBQVYsRUFBZW91QixlQUFmLEVBQWlDO0FBRXRDO0FBQ0EsVUFBSXZnQyxLQUFLLEdBQUd1SSxVQUFVLENBQUVnNEIsZUFBRixDQUFWLEdBQ1hBLGVBQWUsRUFESixHQUVYQSxlQUZEO0FBSUFELE9BQUMsQ0FBRUEsQ0FBQyxDQUFDL21DLE1BQUosQ0FBRCxHQUFnQmluQyxrQkFBa0IsQ0FBRXJ1QixHQUFGLENBQWxCLEdBQTRCLEdBQTVCLEdBQ2ZxdUIsa0JBQWtCLENBQUV4Z0MsS0FBSyxJQUFJLElBQVQsR0FBZ0IsRUFBaEIsR0FBcUJBLEtBQXZCLENBRG5CO0FBRUEsS0FYRjs7QUFhQSxRQUFLMUUsQ0FBQyxJQUFJLElBQVYsRUFBaUI7QUFDaEIsYUFBTyxFQUFQO0FBQ0EsS0FoQndDLENBa0J6Qzs7O0FBQ0EsUUFBS08sS0FBSyxDQUFDRyxPQUFOLENBQWVWLENBQWYsS0FBd0JBLENBQUMsQ0FBQ21PLE1BQUYsSUFBWSxDQUFDcEssTUFBTSxDQUFDK0wsYUFBUCxDQUFzQjlQLENBQXRCLENBQTFDLEVBQXdFO0FBRXZFO0FBQ0ErRCxZQUFNLENBQUM0SyxJQUFQLENBQWEzTyxDQUFiLEVBQWdCLFlBQVc7QUFDMUI0aUIsV0FBRyxDQUFFLEtBQUtwVCxJQUFQLEVBQWEsS0FBSzlLLEtBQWxCLENBQUg7QUFDQSxPQUZEO0FBSUEsS0FQRCxNQU9PO0FBRU47QUFDQTtBQUNBLFdBQU14RyxNQUFOLElBQWdCOEIsQ0FBaEIsRUFBb0I7QUFDbkI2a0MsbUJBQVcsQ0FBRTNtQyxNQUFGLEVBQVU4QixDQUFDLENBQUU5QixNQUFGLENBQVgsRUFBdUI0bUMsV0FBdkIsRUFBb0NsaUIsR0FBcEMsQ0FBWDtBQUNBO0FBQ0QsS0FqQ3dDLENBbUN6Qzs7O0FBQ0EsV0FBT29pQixDQUFDLENBQUN4dUIsSUFBRixDQUFRLEdBQVIsQ0FBUDtBQUNBLEdBckNEOztBQXVDQXpTLFFBQU0sQ0FBQzhILEVBQVAsQ0FBVTlMLE1BQVYsQ0FBa0I7QUFDakJvbEMsYUFBUyxFQUFFLFlBQVc7QUFDckIsYUFBT3BoQyxNQUFNLENBQUNnaEMsS0FBUCxDQUFjLEtBQUtLLGNBQUwsRUFBZCxDQUFQO0FBQ0EsS0FIZ0I7QUFJakJBLGtCQUFjLEVBQUUsWUFBVztBQUMxQixhQUFPLEtBQUt4MkIsR0FBTCxDQUFVLFlBQVc7QUFFM0I7QUFDQSxZQUFJbEcsUUFBUSxHQUFHM0UsTUFBTSxDQUFDN0QsSUFBUCxDQUFhLElBQWIsRUFBbUIsVUFBbkIsQ0FBZjtBQUNBLGVBQU93SSxRQUFRLEdBQUczRSxNQUFNLENBQUN2RCxTQUFQLENBQWtCa0ksUUFBbEIsQ0FBSCxHQUFrQyxJQUFqRDtBQUNBLE9BTE0sRUFNTmtRLE1BTk0sQ0FNRSxZQUFXO0FBQ25CLFlBQUlwWCxJQUFJLEdBQUcsS0FBS0EsSUFBaEIsQ0FEbUIsQ0FHbkI7O0FBQ0EsZUFBTyxLQUFLZ08sSUFBTCxJQUFhLENBQUN6TCxNQUFNLENBQUUsSUFBRixDQUFOLENBQWVzZCxFQUFmLENBQW1CLFdBQW5CLENBQWQsSUFDTnVqQixZQUFZLENBQUN4dUIsSUFBYixDQUFtQixLQUFLaE4sUUFBeEIsQ0FETSxJQUNnQyxDQUFDdTdCLGVBQWUsQ0FBQ3Z1QixJQUFoQixDQUFzQjVVLElBQXRCLENBRGpDLEtBRUosS0FBSzJiLE9BQUwsSUFBZ0IsQ0FBQzhPLGNBQWMsQ0FBQzdWLElBQWYsQ0FBcUI1VSxJQUFyQixDQUZiLENBQVA7QUFHQSxPQWJNLEVBY05vTixHQWRNLENBY0QsVUFBVXFDLEVBQVYsRUFBYzdTLElBQWQsRUFBcUI7QUFDMUIsWUFBSXNQLEdBQUcsR0FBRzNKLE1BQU0sQ0FBRSxJQUFGLENBQU4sQ0FBZTJKLEdBQWYsRUFBVjs7QUFFQSxZQUFLQSxHQUFHLElBQUksSUFBWixFQUFtQjtBQUNsQixpQkFBTyxJQUFQO0FBQ0E7O0FBRUQsWUFBS25OLEtBQUssQ0FBQ0csT0FBTixDQUFlZ04sR0FBZixDQUFMLEVBQTRCO0FBQzNCLGlCQUFPM0osTUFBTSxDQUFDNkssR0FBUCxDQUFZbEIsR0FBWixFQUFpQixVQUFVQSxHQUFWLEVBQWdCO0FBQ3ZDLG1CQUFPO0FBQUU4QixrQkFBSSxFQUFFcFIsSUFBSSxDQUFDb1IsSUFBYjtBQUFtQjlLLG1CQUFLLEVBQUVnSixHQUFHLENBQUMxSyxPQUFKLENBQWEwaEMsS0FBYixFQUFvQixNQUFwQjtBQUExQixhQUFQO0FBQ0EsV0FGTSxDQUFQO0FBR0E7O0FBRUQsZUFBTztBQUFFbDFCLGNBQUksRUFBRXBSLElBQUksQ0FBQ29SLElBQWI7QUFBbUI5SyxlQUFLLEVBQUVnSixHQUFHLENBQUMxSyxPQUFKLENBQWEwaEMsS0FBYixFQUFvQixNQUFwQjtBQUExQixTQUFQO0FBQ0EsT0E1Qk0sRUE0QkhwMkIsR0E1QkcsRUFBUDtBQTZCQTtBQWxDZ0IsR0FBbEI7QUFzQ0EsTUFDQysyQixHQUFHLEdBQUcsTUFEUDtBQUFBLE1BRUNDLEtBQUssR0FBRyxNQUZUO0FBQUEsTUFHQ0MsVUFBVSxHQUFHLGVBSGQ7QUFBQSxNQUlDQyxRQUFRLEdBQUcsNEJBSlo7QUFBQSxNQU1DO0FBQ0FDLGdCQUFjLEdBQUcsMkRBUGxCO0FBQUEsTUFRQ0MsVUFBVSxHQUFHLGdCQVJkO0FBQUEsTUFTQ0MsU0FBUyxHQUFHLE9BVGI7O0FBV0M7Ozs7Ozs7OztBQVNBbkcsWUFBVSxHQUFHLEVBcEJkOztBQXNCQzs7Ozs7QUFLQW9HLFlBQVUsR0FBRyxFQTNCZDtBQUFBLE1BNkJDO0FBQ0FDLFVBQVEsR0FBRyxLQUFLaGlDLE1BQUwsQ0FBYSxHQUFiLENBOUJaO0FBQUEsTUFnQ0M7QUFDQWlpQyxjQUFZLEdBQUc1a0MsUUFBUSxDQUFDZ0YsYUFBVCxDQUF3QixHQUF4QixDQWpDaEI7QUFrQ0M0L0IsY0FBWSxDQUFDN29CLElBQWIsR0FBb0JILFFBQVEsQ0FBQ0csSUFBN0IsQ0FweVJnRixDQXN5UmpGOztBQUNBLFdBQVM4b0IsMkJBQVQsQ0FBc0NDLFNBQXRDLEVBQWtEO0FBRWpEO0FBQ0EsV0FBTyxVQUFVQyxrQkFBVixFQUE4QjdnQixJQUE5QixFQUFxQztBQUUzQyxVQUFLLE9BQU82Z0Isa0JBQVAsS0FBOEIsUUFBbkMsRUFBOEM7QUFDN0M3Z0IsWUFBSSxHQUFHNmdCLGtCQUFQO0FBQ0FBLDBCQUFrQixHQUFHLEdBQXJCO0FBQ0E7O0FBRUQsVUFBSUMsUUFBSjtBQUFBLFVBQ0Nsb0MsQ0FBQyxHQUFHLENBREw7QUFBQSxVQUVDbW9DLFNBQVMsR0FBR0Ysa0JBQWtCLENBQUM3aUMsV0FBbkIsR0FBaUNILEtBQWpDLENBQXdDc2dCLGFBQXhDLEtBQTJELEVBRnhFOztBQUlBLFVBQUt0VyxVQUFVLENBQUVtWSxJQUFGLENBQWYsRUFBMEI7QUFFekI7QUFDQSxlQUFVOGdCLFFBQVEsR0FBR0MsU0FBUyxDQUFFbm9DLENBQUMsRUFBSCxDQUE5QixFQUEwQztBQUV6QztBQUNBLGNBQUtrb0MsUUFBUSxDQUFFLENBQUYsQ0FBUixLQUFrQixHQUF2QixFQUE2QjtBQUM1QkEsb0JBQVEsR0FBR0EsUUFBUSxDQUFDeG1DLEtBQVQsQ0FBZ0IsQ0FBaEIsS0FBdUIsR0FBbEM7QUFDQSxhQUFFc21DLFNBQVMsQ0FBRUUsUUFBRixDQUFULEdBQXdCRixTQUFTLENBQUVFLFFBQUYsQ0FBVCxJQUF5QixFQUFuRCxFQUF3RGpzQixPQUF4RCxDQUFpRW1MLElBQWpFLEVBRjRCLENBSTdCO0FBQ0MsV0FMRCxNQUtPO0FBQ04sYUFBRTRnQixTQUFTLENBQUVFLFFBQUYsQ0FBVCxHQUF3QkYsU0FBUyxDQUFFRSxRQUFGLENBQVQsSUFBeUIsRUFBbkQsRUFBd0RsbkMsSUFBeEQsQ0FBOERvbUIsSUFBOUQ7QUFDQTtBQUNEO0FBQ0Q7QUFDRCxLQTNCRDtBQTRCQSxHQXQwUmdGLENBdzBSakY7OztBQUNBLFdBQVNnaEIsNkJBQVQsQ0FBd0NKLFNBQXhDLEVBQW1EOWhDLE9BQW5ELEVBQTREMjdCLGVBQTVELEVBQTZFd0csS0FBN0UsRUFBcUY7QUFFcEYsUUFBSUMsU0FBUyxHQUFHLEVBQWhCO0FBQUEsUUFDQ0MsZ0JBQWdCLEdBQUtQLFNBQVMsS0FBS0osVUFEcEM7O0FBR0EsYUFBU1ksT0FBVCxDQUFrQk4sUUFBbEIsRUFBNkI7QUFDNUIsVUFBSTlvQixRQUFKO0FBQ0FrcEIsZUFBUyxDQUFFSixRQUFGLENBQVQsR0FBd0IsSUFBeEI7QUFDQW5pQyxZQUFNLENBQUM0SyxJQUFQLENBQWFxM0IsU0FBUyxDQUFFRSxRQUFGLENBQVQsSUFBeUIsRUFBdEMsRUFBMEMsVUFBVXhpQixDQUFWLEVBQWEraUIsa0JBQWIsRUFBa0M7QUFDM0UsWUFBSUMsbUJBQW1CLEdBQUdELGtCQUFrQixDQUFFdmlDLE9BQUYsRUFBVzI3QixlQUFYLEVBQTRCd0csS0FBNUIsQ0FBNUM7O0FBQ0EsWUFBSyxPQUFPSyxtQkFBUCxLQUErQixRQUEvQixJQUNKLENBQUNILGdCQURHLElBQ2lCLENBQUNELFNBQVMsQ0FBRUksbUJBQUYsQ0FEaEMsRUFDMEQ7QUFFekR4aUMsaUJBQU8sQ0FBQ2lpQyxTQUFSLENBQWtCbHNCLE9BQWxCLENBQTJCeXNCLG1CQUEzQjtBQUNBRixpQkFBTyxDQUFFRSxtQkFBRixDQUFQO0FBQ0EsaUJBQU8sS0FBUDtBQUNBLFNBTkQsTUFNTyxJQUFLSCxnQkFBTCxFQUF3QjtBQUM5QixpQkFBTyxFQUFHbnBCLFFBQVEsR0FBR3NwQixtQkFBZCxDQUFQO0FBQ0E7QUFDRCxPQVhEO0FBWUEsYUFBT3RwQixRQUFQO0FBQ0E7O0FBRUQsV0FBT29wQixPQUFPLENBQUV0aUMsT0FBTyxDQUFDaWlDLFNBQVIsQ0FBbUIsQ0FBbkIsQ0FBRixDQUFQLElBQXFDLENBQUNHLFNBQVMsQ0FBRSxHQUFGLENBQVYsSUFBcUJFLE9BQU8sQ0FBRSxHQUFGLENBQXhFO0FBQ0EsR0FqMlJnRixDQW0yUmpGO0FBQ0E7QUFDQTs7O0FBQ0EsV0FBU0csVUFBVCxDQUFxQi8yQixNQUFyQixFQUE2QnRFLEdBQTdCLEVBQW1DO0FBQ2xDLFFBQUl1TCxHQUFKO0FBQUEsUUFBU2hILElBQVQ7QUFBQSxRQUNDKzJCLFdBQVcsR0FBRzdpQyxNQUFNLENBQUM4aUMsWUFBUCxDQUFvQkQsV0FBcEIsSUFBbUMsRUFEbEQ7O0FBR0EsU0FBTS92QixHQUFOLElBQWF2TCxHQUFiLEVBQW1CO0FBQ2xCLFVBQUtBLEdBQUcsQ0FBRXVMLEdBQUYsQ0FBSCxLQUFlbFcsU0FBcEIsRUFBZ0M7QUFDL0IsU0FBRWltQyxXQUFXLENBQUUvdkIsR0FBRixDQUFYLEdBQXFCakgsTUFBckIsR0FBZ0NDLElBQUksS0FBTUEsSUFBSSxHQUFHLEVBQWIsQ0FBdEMsRUFBNkRnSCxHQUE3RCxJQUFxRXZMLEdBQUcsQ0FBRXVMLEdBQUYsQ0FBeEU7QUFDQTtBQUNEOztBQUNELFFBQUtoSCxJQUFMLEVBQVk7QUFDWDlMLFlBQU0sQ0FBQ2hFLE1BQVAsQ0FBZSxJQUFmLEVBQXFCNlAsTUFBckIsRUFBNkJDLElBQTdCO0FBQ0E7O0FBRUQsV0FBT0QsTUFBUDtBQUNBO0FBRUQ7Ozs7OztBQUlBLFdBQVNrM0IsbUJBQVQsQ0FBOEI5QixDQUE5QixFQUFpQ3FCLEtBQWpDLEVBQXdDVSxTQUF4QyxFQUFvRDtBQUVuRCxRQUFJQyxFQUFKO0FBQUEsUUFBUXhsQyxJQUFSO0FBQUEsUUFBY3lsQyxhQUFkO0FBQUEsUUFBNkJDLGFBQTdCO0FBQUEsUUFDQzdrQixRQUFRLEdBQUcyaUIsQ0FBQyxDQUFDM2lCLFFBRGQ7QUFBQSxRQUVDOGpCLFNBQVMsR0FBR25CLENBQUMsQ0FBQ21CLFNBRmYsQ0FGbUQsQ0FNbkQ7O0FBQ0EsV0FBUUEsU0FBUyxDQUFFLENBQUYsQ0FBVCxLQUFtQixHQUEzQixFQUFpQztBQUNoQ0EsZUFBUyxDQUFDcHZCLEtBQVY7O0FBQ0EsVUFBS2l3QixFQUFFLEtBQUtybUMsU0FBWixFQUF3QjtBQUN2QnFtQyxVQUFFLEdBQUdoQyxDQUFDLENBQUNtQyxRQUFGLElBQWNkLEtBQUssQ0FBQ2UsaUJBQU4sQ0FBeUIsY0FBekIsQ0FBbkI7QUFDQTtBQUNELEtBWmtELENBY25EOzs7QUFDQSxRQUFLSixFQUFMLEVBQVU7QUFDVCxXQUFNeGxDLElBQU4sSUFBYzZnQixRQUFkLEVBQXlCO0FBQ3hCLFlBQUtBLFFBQVEsQ0FBRTdnQixJQUFGLENBQVIsSUFBb0I2Z0IsUUFBUSxDQUFFN2dCLElBQUYsQ0FBUixDQUFpQjRVLElBQWpCLENBQXVCNHdCLEVBQXZCLENBQXpCLEVBQXVEO0FBQ3REYixtQkFBUyxDQUFDbHNCLE9BQVYsQ0FBbUJ6WSxJQUFuQjtBQUNBO0FBQ0E7QUFDRDtBQUNELEtBdEJrRCxDQXdCbkQ7OztBQUNBLFFBQUsya0MsU0FBUyxDQUFFLENBQUYsQ0FBVCxJQUFrQlksU0FBdkIsRUFBbUM7QUFDbENFLG1CQUFhLEdBQUdkLFNBQVMsQ0FBRSxDQUFGLENBQXpCO0FBQ0EsS0FGRCxNQUVPO0FBRU47QUFDQSxXQUFNM2tDLElBQU4sSUFBY3VsQyxTQUFkLEVBQTBCO0FBQ3pCLFlBQUssQ0FBQ1osU0FBUyxDQUFFLENBQUYsQ0FBVixJQUFtQm5CLENBQUMsQ0FBQ3FDLFVBQUYsQ0FBYzdsQyxJQUFJLEdBQUcsR0FBUCxHQUFhMmtDLFNBQVMsQ0FBRSxDQUFGLENBQXBDLENBQXhCLEVBQXNFO0FBQ3JFYyx1QkFBYSxHQUFHemxDLElBQWhCO0FBQ0E7QUFDQTs7QUFDRCxZQUFLLENBQUMwbEMsYUFBTixFQUFzQjtBQUNyQkEsdUJBQWEsR0FBRzFsQyxJQUFoQjtBQUNBO0FBQ0QsT0FYSyxDQWFOOzs7QUFDQXlsQyxtQkFBYSxHQUFHQSxhQUFhLElBQUlDLGFBQWpDO0FBQ0EsS0ExQ2tELENBNENuRDtBQUNBO0FBQ0E7OztBQUNBLFFBQUtELGFBQUwsRUFBcUI7QUFDcEIsVUFBS0EsYUFBYSxLQUFLZCxTQUFTLENBQUUsQ0FBRixDQUFoQyxFQUF3QztBQUN2Q0EsaUJBQVMsQ0FBQ2xzQixPQUFWLENBQW1CZ3RCLGFBQW5CO0FBQ0E7O0FBQ0QsYUFBT0YsU0FBUyxDQUFFRSxhQUFGLENBQWhCO0FBQ0E7QUFDRDtBQUVEOzs7OztBQUdBLFdBQVNLLFdBQVQsQ0FBc0J0QyxDQUF0QixFQUF5QnVDLFFBQXpCLEVBQW1DbEIsS0FBbkMsRUFBMENtQixTQUExQyxFQUFzRDtBQUNyRCxRQUFJQyxLQUFKO0FBQUEsUUFBV0MsT0FBWDtBQUFBLFFBQW9CQyxJQUFwQjtBQUFBLFFBQTBCMXVCLEdBQTFCO0FBQUEsUUFBK0JxSixJQUEvQjtBQUFBLFFBQ0Mra0IsVUFBVSxHQUFHLEVBRGQ7QUFBQSxRQUdDO0FBQ0FsQixhQUFTLEdBQUduQixDQUFDLENBQUNtQixTQUFGLENBQVl6bUMsS0FBWixFQUpiLENBRHFELENBT3JEOztBQUNBLFFBQUt5bUMsU0FBUyxDQUFFLENBQUYsQ0FBZCxFQUFzQjtBQUNyQixXQUFNd0IsSUFBTixJQUFjM0MsQ0FBQyxDQUFDcUMsVUFBaEIsRUFBNkI7QUFDNUJBLGtCQUFVLENBQUVNLElBQUksQ0FBQ3ZrQyxXQUFMLEVBQUYsQ0FBVixHQUFtQzRoQyxDQUFDLENBQUNxQyxVQUFGLENBQWNNLElBQWQsQ0FBbkM7QUFDQTtBQUNEOztBQUVERCxXQUFPLEdBQUd2QixTQUFTLENBQUNwdkIsS0FBVixFQUFWLENBZHFELENBZ0JyRDs7QUFDQSxXQUFRMndCLE9BQVIsRUFBa0I7QUFFakIsVUFBSzFDLENBQUMsQ0FBQzRDLGNBQUYsQ0FBa0JGLE9BQWxCLENBQUwsRUFBbUM7QUFDbENyQixhQUFLLENBQUVyQixDQUFDLENBQUM0QyxjQUFGLENBQWtCRixPQUFsQixDQUFGLENBQUwsR0FBdUNILFFBQXZDO0FBQ0EsT0FKZ0IsQ0FNakI7OztBQUNBLFVBQUssQ0FBQ2psQixJQUFELElBQVNrbEIsU0FBVCxJQUFzQnhDLENBQUMsQ0FBQzZDLFVBQTdCLEVBQTBDO0FBQ3pDTixnQkFBUSxHQUFHdkMsQ0FBQyxDQUFDNkMsVUFBRixDQUFjTixRQUFkLEVBQXdCdkMsQ0FBQyxDQUFDa0IsUUFBMUIsQ0FBWDtBQUNBOztBQUVENWpCLFVBQUksR0FBR29sQixPQUFQO0FBQ0FBLGFBQU8sR0FBR3ZCLFNBQVMsQ0FBQ3B2QixLQUFWLEVBQVY7O0FBRUEsVUFBSzJ3QixPQUFMLEVBQWU7QUFFZDtBQUNBLFlBQUtBLE9BQU8sS0FBSyxHQUFqQixFQUF1QjtBQUV0QkEsaUJBQU8sR0FBR3BsQixJQUFWLENBRnNCLENBSXZCO0FBQ0MsU0FMRCxNQUtPLElBQUtBLElBQUksS0FBSyxHQUFULElBQWdCQSxJQUFJLEtBQUtvbEIsT0FBOUIsRUFBd0M7QUFFOUM7QUFDQUMsY0FBSSxHQUFHTixVQUFVLENBQUUva0IsSUFBSSxHQUFHLEdBQVAsR0FBYW9sQixPQUFmLENBQVYsSUFBc0NMLFVBQVUsQ0FBRSxPQUFPSyxPQUFULENBQXZELENBSDhDLENBSzlDOztBQUNBLGNBQUssQ0FBQ0MsSUFBTixFQUFhO0FBQ1osaUJBQU1GLEtBQU4sSUFBZUosVUFBZixFQUE0QjtBQUUzQjtBQUNBcHVCLGlCQUFHLEdBQUd3dUIsS0FBSyxDQUFDejJCLEtBQU4sQ0FBYSxHQUFiLENBQU47O0FBQ0Esa0JBQUtpSSxHQUFHLENBQUUsQ0FBRixDQUFILEtBQWF5dUIsT0FBbEIsRUFBNEI7QUFFM0I7QUFDQUMsb0JBQUksR0FBR04sVUFBVSxDQUFFL2tCLElBQUksR0FBRyxHQUFQLEdBQWFySixHQUFHLENBQUUsQ0FBRixDQUFsQixDQUFWLElBQ05vdUIsVUFBVSxDQUFFLE9BQU9wdUIsR0FBRyxDQUFFLENBQUYsQ0FBWixDQURYOztBQUVBLG9CQUFLMHVCLElBQUwsRUFBWTtBQUVYO0FBQ0Esc0JBQUtBLElBQUksS0FBSyxJQUFkLEVBQXFCO0FBQ3BCQSx3QkFBSSxHQUFHTixVQUFVLENBQUVJLEtBQUYsQ0FBakIsQ0FEb0IsQ0FHckI7QUFDQyxtQkFKRCxNQUlPLElBQUtKLFVBQVUsQ0FBRUksS0FBRixDQUFWLEtBQXdCLElBQTdCLEVBQW9DO0FBQzFDQywyQkFBTyxHQUFHenVCLEdBQUcsQ0FBRSxDQUFGLENBQWI7QUFDQWt0Qiw2QkFBUyxDQUFDbHNCLE9BQVYsQ0FBbUJoQixHQUFHLENBQUUsQ0FBRixDQUF0QjtBQUNBOztBQUNEO0FBQ0E7QUFDRDtBQUNEO0FBQ0QsV0EvQjZDLENBaUM5Qzs7O0FBQ0EsY0FBSzB1QixJQUFJLEtBQUssSUFBZCxFQUFxQjtBQUVwQjtBQUNBLGdCQUFLQSxJQUFJLElBQUkzQyxDQUFDLENBQUM4QyxNQUFmLEVBQXdCO0FBQ3ZCUCxzQkFBUSxHQUFHSSxJQUFJLENBQUVKLFFBQUYsQ0FBZjtBQUNBLGFBRkQsTUFFTztBQUNOLGtCQUFJO0FBQ0hBLHdCQUFRLEdBQUdJLElBQUksQ0FBRUosUUFBRixDQUFmO0FBQ0EsZUFGRCxDQUVFLE9BQVFqeUIsQ0FBUixFQUFZO0FBQ2IsdUJBQU87QUFDTmdRLHVCQUFLLEVBQUUsYUFERDtBQUVOamhCLHVCQUFLLEVBQUVzakMsSUFBSSxHQUFHcnlCLENBQUgsR0FBTyx3QkFBd0JnTixJQUF4QixHQUErQixNQUEvQixHQUF3Q29sQjtBQUZwRCxpQkFBUDtBQUlBO0FBQ0Q7QUFDRDtBQUNEO0FBQ0Q7QUFDRDs7QUFFRCxXQUFPO0FBQUVwaUIsV0FBSyxFQUFFLFNBQVQ7QUFBb0I5Z0IsVUFBSSxFQUFFK2lDO0FBQTFCLEtBQVA7QUFDQTs7QUFFRHhqQyxRQUFNLENBQUNoRSxNQUFQLENBQWU7QUFFZDtBQUNBZ29DLFVBQU0sRUFBRSxDQUhNO0FBS2Q7QUFDQUMsZ0JBQVksRUFBRSxFQU5BO0FBT2RDLFFBQUksRUFBRSxFQVBRO0FBU2RwQixnQkFBWSxFQUFFO0FBQ2I3OEIsU0FBRyxFQUFFOFMsUUFBUSxDQUFDRyxJQUREO0FBRWJ6YixVQUFJLEVBQUUsS0FGTztBQUdiMG1DLGFBQU8sRUFBRXpDLGNBQWMsQ0FBQ3J2QixJQUFmLENBQXFCMEcsUUFBUSxDQUFDcXJCLFFBQTlCLENBSEk7QUFJYjdwQyxZQUFNLEVBQUUsSUFKSztBQUtiOHBDLGlCQUFXLEVBQUUsSUFMQTtBQU1iQyxXQUFLLEVBQUUsSUFOTTtBQU9iQyxpQkFBVyxFQUFFLGtEQVBBOztBQVNiOzs7Ozs7Ozs7OztBQVlBQyxhQUFPLEVBQUU7QUFDUixhQUFLMUMsUUFERztBQUVSajRCLFlBQUksRUFBRSxZQUZFO0FBR1I4bkIsWUFBSSxFQUFFLFdBSEU7QUFJUjlaLFdBQUcsRUFBRSwyQkFKRztBQUtSNHNCLFlBQUksRUFBRTtBQUxFLE9BckJJO0FBNkJibm1CLGNBQVEsRUFBRTtBQUNUekcsV0FBRyxFQUFFLFNBREk7QUFFVDhaLFlBQUksRUFBRSxRQUZHO0FBR1Q4UyxZQUFJLEVBQUU7QUFIRyxPQTdCRztBQW1DYlosb0JBQWMsRUFBRTtBQUNmaHNCLFdBQUcsRUFBRSxhQURVO0FBRWZoTyxZQUFJLEVBQUUsY0FGUztBQUdmNDZCLFlBQUksRUFBRTtBQUhTLE9BbkNIO0FBeUNiO0FBQ0E7QUFDQW5CLGdCQUFVLEVBQUU7QUFFWDtBQUNBLGtCQUFVN3lCLE1BSEM7QUFLWDtBQUNBLHFCQUFhLElBTkY7QUFRWDtBQUNBLHFCQUFhclEsSUFBSSxDQUFDQyxLQVRQO0FBV1g7QUFDQSxvQkFBWUwsTUFBTSxDQUFDdWdDO0FBWlIsT0EzQ0M7QUEwRGI7QUFDQTtBQUNBO0FBQ0E7QUFDQXNDLGlCQUFXLEVBQUU7QUFDWjU4QixXQUFHLEVBQUUsSUFETztBQUVaaUUsZUFBTyxFQUFFO0FBRkc7QUE5REEsS0FUQTtBQTZFZDtBQUNBO0FBQ0E7QUFDQXc2QixhQUFTLEVBQUUsVUFBVTc0QixNQUFWLEVBQWtCODRCLFFBQWxCLEVBQTZCO0FBQ3ZDLGFBQU9BLFFBQVEsR0FFZDtBQUNBL0IsZ0JBQVUsQ0FBRUEsVUFBVSxDQUFFLzJCLE1BQUYsRUFBVTdMLE1BQU0sQ0FBQzhpQyxZQUFqQixDQUFaLEVBQTZDNkIsUUFBN0MsQ0FISSxHQUtkO0FBQ0EvQixnQkFBVSxDQUFFNWlDLE1BQU0sQ0FBQzhpQyxZQUFULEVBQXVCajNCLE1BQXZCLENBTlg7QUFPQSxLQXhGYTtBQTBGZCs0QixpQkFBYSxFQUFFNUMsMkJBQTJCLENBQUV2RyxVQUFGLENBMUY1QjtBQTJGZG9KLGlCQUFhLEVBQUU3QywyQkFBMkIsQ0FBRUgsVUFBRixDQTNGNUI7QUE2RmQ7QUFDQWlELFFBQUksRUFBRSxVQUFVNytCLEdBQVYsRUFBZTlGLE9BQWYsRUFBeUI7QUFFOUI7QUFDQSxVQUFLLE9BQU84RixHQUFQLEtBQWUsUUFBcEIsRUFBK0I7QUFDOUI5RixlQUFPLEdBQUc4RixHQUFWO0FBQ0FBLFdBQUcsR0FBR3JKLFNBQU47QUFDQSxPQU42QixDQVE5Qjs7O0FBQ0F1RCxhQUFPLEdBQUdBLE9BQU8sSUFBSSxFQUFyQjtBQUVBLFVBQUk0a0MsU0FBSjtBQUFBLFVBRUM7QUFDQUMsY0FIRDtBQUFBLFVBS0M7QUFDQUMsMkJBTkQ7QUFBQSxVQU9DQyxlQVBEO0FBQUEsVUFTQztBQUNBQyxrQkFWRDtBQUFBLFVBWUM7QUFDQUMsZUFiRDtBQUFBLFVBZUM7QUFDQXRoQixlQWhCRDtBQUFBLFVBa0JDO0FBQ0F1aEIsaUJBbkJEO0FBQUEsVUFxQkM7QUFDQXByQyxPQXRCRDtBQUFBLFVBd0JDO0FBQ0FxckMsY0F6QkQ7QUFBQSxVQTJCQztBQUNBckUsT0FBQyxHQUFHamhDLE1BQU0sQ0FBQzBrQyxTQUFQLENBQWtCLEVBQWxCLEVBQXNCdmtDLE9BQXRCLENBNUJMO0FBQUEsVUE4QkM7QUFDQW9sQyxxQkFBZSxHQUFHdEUsQ0FBQyxDQUFDLzJCLE9BQUYsSUFBYSsyQixDQS9CaEM7QUFBQSxVQWlDQztBQUNBdUUsd0JBQWtCLEdBQUd2RSxDQUFDLENBQUMvMkIsT0FBRixLQUNsQnE3QixlQUFlLENBQUN6aUMsUUFBaEIsSUFBNEJ5aUMsZUFBZSxDQUFDbjdCLE1BRDFCLElBRW5CcEssTUFBTSxDQUFFdWxDLGVBQUYsQ0FGYSxHQUduQnZsQyxNQUFNLENBQUN4QyxLQXJDVjtBQUFBLFVBdUNDO0FBQ0Fpa0IsY0FBUSxHQUFHemhCLE1BQU0sQ0FBQzhFLFFBQVAsRUF4Q1o7QUFBQSxVQXlDQzJnQyxnQkFBZ0IsR0FBR3psQyxNQUFNLENBQUM2ZixTQUFQLENBQWtCLGFBQWxCLENBekNwQjtBQUFBLFVBMkNDO0FBQ0E2bEIsZ0JBQVUsR0FBR3pFLENBQUMsQ0FBQ3lFLFVBQUYsSUFBZ0IsRUE1QzlCO0FBQUEsVUE4Q0M7QUFDQUMsb0JBQWMsR0FBRyxFQS9DbEI7QUFBQSxVQWdEQ0MsbUJBQW1CLEdBQUcsRUFoRHZCO0FBQUEsVUFrREM7QUFDQUMsY0FBUSxHQUFHLFVBbkRaO0FBQUEsVUFxREM7QUFDQXZELFdBQUssR0FBRztBQUNQempDLGtCQUFVLEVBQUUsQ0FETDtBQUdQO0FBQ0F3a0MseUJBQWlCLEVBQUUsVUFBVXZ3QixHQUFWLEVBQWdCO0FBQ2xDLGNBQUk1VCxLQUFKOztBQUNBLGNBQUs0a0IsU0FBTCxFQUFpQjtBQUNoQixnQkFBSyxDQUFDb2hCLGVBQU4sRUFBd0I7QUFDdkJBLDZCQUFlLEdBQUcsRUFBbEI7O0FBQ0EscUJBQVVobUMsS0FBSyxHQUFHdWlDLFFBQVEsQ0FBQzE3QixJQUFULENBQWVrL0IscUJBQWYsQ0FBbEIsRUFBNkQ7QUFDNURDLCtCQUFlLENBQUVobUMsS0FBSyxDQUFFLENBQUYsQ0FBTCxDQUFXRyxXQUFYLEtBQTJCLEdBQTdCLENBQWYsR0FDQyxDQUFFNmxDLGVBQWUsQ0FBRWhtQyxLQUFLLENBQUUsQ0FBRixDQUFMLENBQVdHLFdBQVgsS0FBMkIsR0FBN0IsQ0FBZixJQUFxRCxFQUF2RCxFQUNFUyxNQURGLENBQ1VaLEtBQUssQ0FBRSxDQUFGLENBRGYsQ0FERDtBQUdBO0FBQ0Q7O0FBQ0RBLGlCQUFLLEdBQUdnbUMsZUFBZSxDQUFFcHlCLEdBQUcsQ0FBQ3pULFdBQUosS0FBb0IsR0FBdEIsQ0FBdkI7QUFDQTs7QUFDRCxpQkFBT0gsS0FBSyxJQUFJLElBQVQsR0FBZ0IsSUFBaEIsR0FBdUJBLEtBQUssQ0FBQ3VULElBQU4sQ0FBWSxJQUFaLENBQTlCO0FBQ0EsU0FsQk07QUFvQlA7QUFDQXF6Qiw2QkFBcUIsRUFBRSxZQUFXO0FBQ2pDLGlCQUFPaGlCLFNBQVMsR0FBR21oQixxQkFBSCxHQUEyQixJQUEzQztBQUNBLFNBdkJNO0FBeUJQO0FBQ0FjLHdCQUFnQixFQUFFLFVBQVV0NkIsSUFBVixFQUFnQjlLLEtBQWhCLEVBQXdCO0FBQ3pDLGNBQUttakIsU0FBUyxJQUFJLElBQWxCLEVBQXlCO0FBQ3hCclksZ0JBQUksR0FBR202QixtQkFBbUIsQ0FBRW42QixJQUFJLENBQUNwTSxXQUFMLEVBQUYsQ0FBbkIsR0FDTnVtQyxtQkFBbUIsQ0FBRW42QixJQUFJLENBQUNwTSxXQUFMLEVBQUYsQ0FBbkIsSUFBNkNvTSxJQUQ5QztBQUVBazZCLDBCQUFjLENBQUVsNkIsSUFBRixDQUFkLEdBQXlCOUssS0FBekI7QUFDQTs7QUFDRCxpQkFBTyxJQUFQO0FBQ0EsU0FqQ007QUFtQ1A7QUFDQXFsQyx3QkFBZ0IsRUFBRSxVQUFVdm9DLElBQVYsRUFBaUI7QUFDbEMsY0FBS3FtQixTQUFTLElBQUksSUFBbEIsRUFBeUI7QUFDeEJtZCxhQUFDLENBQUNtQyxRQUFGLEdBQWEzbEMsSUFBYjtBQUNBOztBQUNELGlCQUFPLElBQVA7QUFDQSxTQXpDTTtBQTJDUDtBQUNBaW9DLGtCQUFVLEVBQUUsVUFBVTc2QixHQUFWLEVBQWdCO0FBQzNCLGNBQUlyQixJQUFKOztBQUNBLGNBQUtxQixHQUFMLEVBQVc7QUFDVixnQkFBS2laLFNBQUwsRUFBaUI7QUFFaEI7QUFDQXdlLG1CQUFLLENBQUM5Z0IsTUFBTixDQUFjM1csR0FBRyxDQUFFeTNCLEtBQUssQ0FBQzJELE1BQVIsQ0FBakI7QUFDQSxhQUpELE1BSU87QUFFTjtBQUNBLG1CQUFNejhCLElBQU4sSUFBY3FCLEdBQWQsRUFBb0I7QUFDbkI2NkIsMEJBQVUsQ0FBRWw4QixJQUFGLENBQVYsR0FBcUIsQ0FBRWs4QixVQUFVLENBQUVsOEIsSUFBRixDQUFaLEVBQXNCcUIsR0FBRyxDQUFFckIsSUFBRixDQUF6QixDQUFyQjtBQUNBO0FBQ0Q7QUFDRDs7QUFDRCxpQkFBTyxJQUFQO0FBQ0EsU0E1RE07QUE4RFA7QUFDQTA4QixhQUFLLEVBQUUsVUFBVUMsVUFBVixFQUF1QjtBQUM3QixjQUFJQyxTQUFTLEdBQUdELFVBQVUsSUFBSU4sUUFBOUI7O0FBQ0EsY0FBS2QsU0FBTCxFQUFpQjtBQUNoQkEscUJBQVMsQ0FBQ21CLEtBQVYsQ0FBaUJFLFNBQWpCO0FBQ0E7O0FBQ0Q5M0IsY0FBSSxDQUFFLENBQUYsRUFBSzgzQixTQUFMLENBQUo7QUFDQSxpQkFBTyxJQUFQO0FBQ0E7QUF0RU0sT0F0RFQsQ0FYOEIsQ0EwSTlCOztBQUNBM2tCLGNBQVEsQ0FBQ3paLE9BQVQsQ0FBa0JzNkIsS0FBbEIsRUEzSThCLENBNkk5QjtBQUNBO0FBQ0E7O0FBQ0FyQixPQUFDLENBQUNoN0IsR0FBRixHQUFRLENBQUUsQ0FBRUEsR0FBRyxJQUFJZzdCLENBQUMsQ0FBQ2g3QixHQUFULElBQWdCOFMsUUFBUSxDQUFDRyxJQUEzQixJQUFvQyxFQUF0QyxFQUNOamEsT0FETSxDQUNHMmlDLFNBREgsRUFDYzdvQixRQUFRLENBQUNxckIsUUFBVCxHQUFvQixJQURsQyxDQUFSLENBaEo4QixDQW1KOUI7O0FBQ0FuRCxPQUFDLENBQUN4akMsSUFBRixHQUFTMEMsT0FBTyxDQUFDL0YsTUFBUixJQUFrQitGLE9BQU8sQ0FBQzFDLElBQTFCLElBQWtDd2pDLENBQUMsQ0FBQzdtQyxNQUFwQyxJQUE4QzZtQyxDQUFDLENBQUN4akMsSUFBekQsQ0FwSjhCLENBc0o5Qjs7QUFDQXdqQyxPQUFDLENBQUNtQixTQUFGLEdBQWMsQ0FBRW5CLENBQUMsQ0FBQ2tCLFFBQUYsSUFBYyxHQUFoQixFQUFzQjlpQyxXQUF0QixHQUFvQ0gsS0FBcEMsQ0FBMkNzZ0IsYUFBM0MsS0FBOEQsQ0FBRSxFQUFGLENBQTVFLENBdko4QixDQXlKOUI7O0FBQ0EsVUFBS3loQixDQUFDLENBQUNvRixXQUFGLElBQWlCLElBQXRCLEVBQTZCO0FBQzVCakIsaUJBQVMsR0FBR2pvQyxRQUFRLENBQUNnRixhQUFULENBQXdCLEdBQXhCLENBQVosQ0FENEIsQ0FHNUI7QUFDQTtBQUNBOztBQUNBLFlBQUk7QUFDSGlqQyxtQkFBUyxDQUFDbHNCLElBQVYsR0FBaUIrbkIsQ0FBQyxDQUFDaDdCLEdBQW5CLENBREcsQ0FHSDtBQUNBOztBQUNBbS9CLG1CQUFTLENBQUNsc0IsSUFBVixHQUFpQmtzQixTQUFTLENBQUNsc0IsSUFBM0I7QUFDQStuQixXQUFDLENBQUNvRixXQUFGLEdBQWdCdEUsWUFBWSxDQUFDcUMsUUFBYixHQUF3QixJQUF4QixHQUErQnJDLFlBQVksQ0FBQ3VFLElBQTVDLEtBQ2ZsQixTQUFTLENBQUNoQixRQUFWLEdBQXFCLElBQXJCLEdBQTRCZ0IsU0FBUyxDQUFDa0IsSUFEdkM7QUFFQSxTQVJELENBUUUsT0FBUS8wQixDQUFSLEVBQVk7QUFFYjtBQUNBO0FBQ0EwdkIsV0FBQyxDQUFDb0YsV0FBRixHQUFnQixJQUFoQjtBQUNBO0FBQ0QsT0E5SzZCLENBZ0w5Qjs7O0FBQ0EsVUFBS3BGLENBQUMsQ0FBQ3hnQyxJQUFGLElBQVV3Z0MsQ0FBQyxDQUFDb0QsV0FBWixJQUEyQixPQUFPcEQsQ0FBQyxDQUFDeGdDLElBQVQsS0FBa0IsUUFBbEQsRUFBNkQ7QUFDNUR3Z0MsU0FBQyxDQUFDeGdDLElBQUYsR0FBU1QsTUFBTSxDQUFDZ2hDLEtBQVAsQ0FBY0MsQ0FBQyxDQUFDeGdDLElBQWhCLEVBQXNCd2dDLENBQUMsQ0FBQ0YsV0FBeEIsQ0FBVDtBQUNBLE9Bbkw2QixDQXFMOUI7OztBQUNBc0IsbUNBQTZCLENBQUU1RyxVQUFGLEVBQWN3RixDQUFkLEVBQWlCOWdDLE9BQWpCLEVBQTBCbWlDLEtBQTFCLENBQTdCLENBdEw4QixDQXdMOUI7O0FBQ0EsVUFBS3hlLFNBQUwsRUFBaUI7QUFDaEIsZUFBT3dlLEtBQVA7QUFDQSxPQTNMNkIsQ0E2TDlCO0FBQ0E7OztBQUNBK0MsaUJBQVcsR0FBR3JsQyxNQUFNLENBQUN4QyxLQUFQLElBQWdCeWpDLENBQUMsQ0FBQzFtQyxNQUFoQyxDQS9MOEIsQ0FpTTlCOztBQUNBLFVBQUs4cUMsV0FBVyxJQUFJcmxDLE1BQU0sQ0FBQ2drQyxNQUFQLE9BQW9CLENBQXhDLEVBQTRDO0FBQzNDaGtDLGNBQU0sQ0FBQ3hDLEtBQVAsQ0FBYWl3QixPQUFiLENBQXNCLFdBQXRCO0FBQ0EsT0FwTTZCLENBc005Qjs7O0FBQ0F3VCxPQUFDLENBQUN4akMsSUFBRixHQUFTd2pDLENBQUMsQ0FBQ3hqQyxJQUFGLENBQU9rbkIsV0FBUCxFQUFULENBdk04QixDQXlNOUI7O0FBQ0FzYyxPQUFDLENBQUNzRixVQUFGLEdBQWUsQ0FBQzVFLFVBQVUsQ0FBQ3R2QixJQUFYLENBQWlCNHVCLENBQUMsQ0FBQ3hqQyxJQUFuQixDQUFoQixDQTFNOEIsQ0E0TTlCO0FBQ0E7QUFDQTs7QUFDQXVuQyxjQUFRLEdBQUcvRCxDQUFDLENBQUNoN0IsR0FBRixDQUFNaEgsT0FBTixDQUFlc2lDLEtBQWYsRUFBc0IsRUFBdEIsQ0FBWCxDQS9NOEIsQ0FpTjlCOztBQUNBLFVBQUssQ0FBQ04sQ0FBQyxDQUFDc0YsVUFBUixFQUFxQjtBQUVwQjtBQUNBakIsZ0JBQVEsR0FBR3JFLENBQUMsQ0FBQ2g3QixHQUFGLENBQU10SyxLQUFOLENBQWFxcEMsUUFBUSxDQUFDOXFDLE1BQXRCLENBQVgsQ0FIb0IsQ0FLcEI7O0FBQ0EsWUFBSyttQyxDQUFDLENBQUN4Z0MsSUFBRixLQUFZd2dDLENBQUMsQ0FBQ29ELFdBQUYsSUFBaUIsT0FBT3BELENBQUMsQ0FBQ3hnQyxJQUFULEtBQWtCLFFBQS9DLENBQUwsRUFBaUU7QUFDaEV1a0Msa0JBQVEsSUFBSSxDQUFFMUUsTUFBTSxDQUFDanVCLElBQVAsQ0FBYTJ5QixRQUFiLElBQTBCLEdBQTFCLEdBQWdDLEdBQWxDLElBQTBDL0QsQ0FBQyxDQUFDeGdDLElBQXhELENBRGdFLENBR2hFOztBQUNBLGlCQUFPd2dDLENBQUMsQ0FBQ3hnQyxJQUFUO0FBQ0EsU0FYbUIsQ0FhcEI7OztBQUNBLFlBQUt3Z0MsQ0FBQyxDQUFDcHVCLEtBQUYsS0FBWSxLQUFqQixFQUF5QjtBQUN4Qm15QixrQkFBUSxHQUFHQSxRQUFRLENBQUMvbEMsT0FBVCxDQUFrQnVpQyxVQUFsQixFQUE4QixJQUE5QixDQUFYO0FBQ0E4RCxrQkFBUSxHQUFHLENBQUVoRixNQUFNLENBQUNqdUIsSUFBUCxDQUFhMnlCLFFBQWIsSUFBMEIsR0FBMUIsR0FBZ0MsR0FBbEMsSUFBMEMsSUFBMUMsR0FBbUQzN0IsS0FBSyxDQUFDeUQsSUFBTixFQUFuRCxHQUNWdzRCLFFBREQ7QUFFQSxTQWxCbUIsQ0FvQnBCOzs7QUFDQXJFLFNBQUMsQ0FBQ2g3QixHQUFGLEdBQVErK0IsUUFBUSxHQUFHTSxRQUFuQixDQXJCb0IsQ0F1QnJCO0FBQ0MsT0F4QkQsTUF3Qk8sSUFBS3JFLENBQUMsQ0FBQ3hnQyxJQUFGLElBQVV3Z0MsQ0FBQyxDQUFDb0QsV0FBWixJQUNYLENBQUVwRCxDQUFDLENBQUNzRCxXQUFGLElBQWlCLEVBQW5CLEVBQXdCdnBDLE9BQXhCLENBQWlDLG1DQUFqQyxNQUEyRSxDQURyRSxFQUN5RTtBQUMvRWltQyxTQUFDLENBQUN4Z0MsSUFBRixHQUFTd2dDLENBQUMsQ0FBQ3hnQyxJQUFGLENBQU94QixPQUFQLENBQWdCcWlDLEdBQWhCLEVBQXFCLEdBQXJCLENBQVQ7QUFDQSxPQTdPNkIsQ0ErTzlCOzs7QUFDQSxVQUFLTCxDQUFDLENBQUN1RixVQUFQLEVBQW9CO0FBQ25CLFlBQUt4bUMsTUFBTSxDQUFDaWtDLFlBQVAsQ0FBcUJlLFFBQXJCLENBQUwsRUFBdUM7QUFDdEMxQyxlQUFLLENBQUN5RCxnQkFBTixDQUF3QixtQkFBeEIsRUFBNkMvbEMsTUFBTSxDQUFDaWtDLFlBQVAsQ0FBcUJlLFFBQXJCLENBQTdDO0FBQ0E7O0FBQ0QsWUFBS2hsQyxNQUFNLENBQUNra0MsSUFBUCxDQUFhYyxRQUFiLENBQUwsRUFBK0I7QUFDOUIxQyxlQUFLLENBQUN5RCxnQkFBTixDQUF3QixlQUF4QixFQUF5Qy9sQyxNQUFNLENBQUNra0MsSUFBUCxDQUFhYyxRQUFiLENBQXpDO0FBQ0E7QUFDRCxPQXZQNkIsQ0F5UDlCOzs7QUFDQSxVQUFLL0QsQ0FBQyxDQUFDeGdDLElBQUYsSUFBVXdnQyxDQUFDLENBQUNzRixVQUFaLElBQTBCdEYsQ0FBQyxDQUFDc0QsV0FBRixLQUFrQixLQUE1QyxJQUFxRHBrQyxPQUFPLENBQUNva0MsV0FBbEUsRUFBZ0Y7QUFDL0VqQyxhQUFLLENBQUN5RCxnQkFBTixDQUF3QixjQUF4QixFQUF3QzlFLENBQUMsQ0FBQ3NELFdBQTFDO0FBQ0EsT0E1UDZCLENBOFA5Qjs7O0FBQ0FqQyxXQUFLLENBQUN5RCxnQkFBTixDQUNDLFFBREQsRUFFQzlFLENBQUMsQ0FBQ21CLFNBQUYsQ0FBYSxDQUFiLEtBQW9CbkIsQ0FBQyxDQUFDdUQsT0FBRixDQUFXdkQsQ0FBQyxDQUFDbUIsU0FBRixDQUFhLENBQWIsQ0FBWCxDQUFwQixHQUNDbkIsQ0FBQyxDQUFDdUQsT0FBRixDQUFXdkQsQ0FBQyxDQUFDbUIsU0FBRixDQUFhLENBQWIsQ0FBWCxLQUNHbkIsQ0FBQyxDQUFDbUIsU0FBRixDQUFhLENBQWIsTUFBcUIsR0FBckIsR0FBMkIsT0FBT04sUUFBUCxHQUFrQixVQUE3QyxHQUEwRCxFQUQ3RCxDQURELEdBR0NiLENBQUMsQ0FBQ3VELE9BQUYsQ0FBVyxHQUFYLENBTEYsRUEvUDhCLENBdVE5Qjs7QUFDQSxXQUFNdnFDLENBQU4sSUFBV2duQyxDQUFDLENBQUN3RixPQUFiLEVBQXVCO0FBQ3RCbkUsYUFBSyxDQUFDeUQsZ0JBQU4sQ0FBd0I5ckMsQ0FBeEIsRUFBMkJnbkMsQ0FBQyxDQUFDd0YsT0FBRixDQUFXeHNDLENBQVgsQ0FBM0I7QUFDQSxPQTFRNkIsQ0E0UTlCOzs7QUFDQSxVQUFLZ25DLENBQUMsQ0FBQ3lGLFVBQUYsS0FDRnpGLENBQUMsQ0FBQ3lGLFVBQUYsQ0FBYTVwQyxJQUFiLENBQW1CeW9DLGVBQW5CLEVBQW9DakQsS0FBcEMsRUFBMkNyQixDQUEzQyxNQUFtRCxLQUFuRCxJQUE0RG5kLFNBRDFELENBQUwsRUFDNkU7QUFFNUU7QUFDQSxlQUFPd2UsS0FBSyxDQUFDNEQsS0FBTixFQUFQO0FBQ0EsT0FsUjZCLENBb1I5Qjs7O0FBQ0FMLGNBQVEsR0FBRyxPQUFYLENBclI4QixDQXVSOUI7O0FBQ0FKLHNCQUFnQixDQUFDNW1CLEdBQWpCLENBQXNCb2lCLENBQUMsQ0FBQ3o2QixRQUF4QjtBQUNBODdCLFdBQUssQ0FBQ2gwQixJQUFOLENBQVkyeUIsQ0FBQyxDQUFDMEYsT0FBZDtBQUNBckUsV0FBSyxDQUFDbmhCLElBQU4sQ0FBWThmLENBQUMsQ0FBQzNnQyxLQUFkLEVBMVI4QixDQTRSOUI7O0FBQ0F5a0MsZUFBUyxHQUFHMUMsNkJBQTZCLENBQUVSLFVBQUYsRUFBY1osQ0FBZCxFQUFpQjlnQyxPQUFqQixFQUEwQm1pQyxLQUExQixDQUF6QyxDQTdSOEIsQ0ErUjlCOztBQUNBLFVBQUssQ0FBQ3lDLFNBQU4sRUFBa0I7QUFDakJ6MkIsWUFBSSxDQUFFLENBQUMsQ0FBSCxFQUFNLGNBQU4sQ0FBSjtBQUNBLE9BRkQsTUFFTztBQUNOZzBCLGFBQUssQ0FBQ3pqQyxVQUFOLEdBQW1CLENBQW5CLENBRE0sQ0FHTjs7QUFDQSxZQUFLd21DLFdBQUwsRUFBbUI7QUFDbEJHLDRCQUFrQixDQUFDL1gsT0FBbkIsQ0FBNEIsVUFBNUIsRUFBd0MsQ0FBRTZVLEtBQUYsRUFBU3JCLENBQVQsQ0FBeEM7QUFDQSxTQU5LLENBUU47OztBQUNBLFlBQUtuZCxTQUFMLEVBQWlCO0FBQ2hCLGlCQUFPd2UsS0FBUDtBQUNBLFNBWEssQ0FhTjs7O0FBQ0EsWUFBS3JCLENBQUMsQ0FBQ3FELEtBQUYsSUFBV3JELENBQUMsQ0FBQzNpQyxPQUFGLEdBQVksQ0FBNUIsRUFBZ0M7QUFDL0I2bUMsc0JBQVksR0FBRzVyQyxNQUFNLENBQUNtRixVQUFQLENBQW1CLFlBQVc7QUFDNUM0akMsaUJBQUssQ0FBQzRELEtBQU4sQ0FBYSxTQUFiO0FBQ0EsV0FGYyxFQUVaakYsQ0FBQyxDQUFDM2lDLE9BRlUsQ0FBZjtBQUdBOztBQUVELFlBQUk7QUFDSHdsQixtQkFBUyxHQUFHLEtBQVo7QUFDQWloQixtQkFBUyxDQUFDNkIsSUFBVixDQUFnQmpCLGNBQWhCLEVBQWdDcjNCLElBQWhDO0FBQ0EsU0FIRCxDQUdFLE9BQVFpRCxDQUFSLEVBQVk7QUFFYjtBQUNBLGNBQUt1UyxTQUFMLEVBQWlCO0FBQ2hCLGtCQUFNdlMsQ0FBTjtBQUNBLFdBTFksQ0FPYjs7O0FBQ0FqRCxjQUFJLENBQUUsQ0FBQyxDQUFILEVBQU1pRCxDQUFOLENBQUo7QUFDQTtBQUNELE9BblU2QixDQXFVOUI7OztBQUNBLGVBQVNqRCxJQUFULENBQWUyM0IsTUFBZixFQUF1QlksZ0JBQXZCLEVBQXlDN0QsU0FBekMsRUFBb0R5RCxPQUFwRCxFQUE4RDtBQUM3RCxZQUFJaEQsU0FBSjtBQUFBLFlBQWVrRCxPQUFmO0FBQUEsWUFBd0JybUMsS0FBeEI7QUFBQSxZQUErQmtqQyxRQUEvQjtBQUFBLFlBQXlDc0QsUUFBekM7QUFBQSxZQUNDWCxVQUFVLEdBQUdVLGdCQURkLENBRDZELENBSTdEOztBQUNBLFlBQUsvaUIsU0FBTCxFQUFpQjtBQUNoQjtBQUNBOztBQUVEQSxpQkFBUyxHQUFHLElBQVosQ0FUNkQsQ0FXN0Q7O0FBQ0EsWUFBS3FoQixZQUFMLEVBQW9CO0FBQ25CNXJDLGdCQUFNLENBQUNnRixZQUFQLENBQXFCNG1DLFlBQXJCO0FBQ0EsU0FkNEQsQ0FnQjdEO0FBQ0E7OztBQUNBSixpQkFBUyxHQUFHbm9DLFNBQVosQ0FsQjZELENBb0I3RDs7QUFDQXFvQyw2QkFBcUIsR0FBR3dCLE9BQU8sSUFBSSxFQUFuQyxDQXJCNkQsQ0F1QjdEOztBQUNBbkUsYUFBSyxDQUFDempDLFVBQU4sR0FBbUJvbkMsTUFBTSxHQUFHLENBQVQsR0FBYSxDQUFiLEdBQWlCLENBQXBDLENBeEI2RCxDQTBCN0Q7O0FBQ0F4QyxpQkFBUyxHQUFHd0MsTUFBTSxJQUFJLEdBQVYsSUFBaUJBLE1BQU0sR0FBRyxHQUExQixJQUFpQ0EsTUFBTSxLQUFLLEdBQXhELENBM0I2RCxDQTZCN0Q7O0FBQ0EsWUFBS2pELFNBQUwsRUFBaUI7QUFDaEJRLGtCQUFRLEdBQUdULG1CQUFtQixDQUFFOUIsQ0FBRixFQUFLcUIsS0FBTCxFQUFZVSxTQUFaLENBQTlCO0FBQ0EsU0FoQzRELENBa0M3RDs7O0FBQ0EsWUFBSyxDQUFDUyxTQUFELElBQWN6akMsTUFBTSxDQUFDd00sT0FBUCxDQUFnQixRQUFoQixFQUEwQnkwQixDQUFDLENBQUNtQixTQUE1QixJQUEwQyxDQUFDLENBQTlELEVBQWtFO0FBQ2pFbkIsV0FBQyxDQUFDcUMsVUFBRixDQUFjLGFBQWQsSUFBZ0MsWUFBVyxDQUFFLENBQTdDO0FBQ0EsU0FyQzRELENBdUM3RDs7O0FBQ0FFLGdCQUFRLEdBQUdELFdBQVcsQ0FBRXRDLENBQUYsRUFBS3VDLFFBQUwsRUFBZWxCLEtBQWYsRUFBc0JtQixTQUF0QixDQUF0QixDQXhDNkQsQ0EwQzdEOztBQUNBLFlBQUtBLFNBQUwsRUFBaUI7QUFFaEI7QUFDQSxjQUFLeEMsQ0FBQyxDQUFDdUYsVUFBUCxFQUFvQjtBQUNuQk0sb0JBQVEsR0FBR3hFLEtBQUssQ0FBQ2UsaUJBQU4sQ0FBeUIsZUFBekIsQ0FBWDs7QUFDQSxnQkFBS3lELFFBQUwsRUFBZ0I7QUFDZjltQyxvQkFBTSxDQUFDaWtDLFlBQVAsQ0FBcUJlLFFBQXJCLElBQWtDOEIsUUFBbEM7QUFDQTs7QUFDREEsb0JBQVEsR0FBR3hFLEtBQUssQ0FBQ2UsaUJBQU4sQ0FBeUIsTUFBekIsQ0FBWDs7QUFDQSxnQkFBS3lELFFBQUwsRUFBZ0I7QUFDZjltQyxvQkFBTSxDQUFDa2tDLElBQVAsQ0FBYWMsUUFBYixJQUEwQjhCLFFBQTFCO0FBQ0E7QUFDRCxXQVplLENBY2hCOzs7QUFDQSxjQUFLYixNQUFNLEtBQUssR0FBWCxJQUFrQmhGLENBQUMsQ0FBQ3hqQyxJQUFGLEtBQVcsTUFBbEMsRUFBMkM7QUFDMUMwb0Msc0JBQVUsR0FBRyxXQUFiLENBRDBDLENBRzNDO0FBQ0MsV0FKRCxNQUlPLElBQUtGLE1BQU0sS0FBSyxHQUFoQixFQUFzQjtBQUM1QkUsc0JBQVUsR0FBRyxhQUFiLENBRDRCLENBRzdCO0FBQ0MsV0FKTSxNQUlBO0FBQ05BLHNCQUFVLEdBQUczQyxRQUFRLENBQUNqaUIsS0FBdEI7QUFDQW9sQixtQkFBTyxHQUFHbkQsUUFBUSxDQUFDL2lDLElBQW5CO0FBQ0FILGlCQUFLLEdBQUdrakMsUUFBUSxDQUFDbGpDLEtBQWpCO0FBQ0FtakMscUJBQVMsR0FBRyxDQUFDbmpDLEtBQWI7QUFDQTtBQUNELFNBN0JELE1BNkJPO0FBRU47QUFDQUEsZUFBSyxHQUFHNmxDLFVBQVI7O0FBQ0EsY0FBS0YsTUFBTSxJQUFJLENBQUNFLFVBQWhCLEVBQTZCO0FBQzVCQSxzQkFBVSxHQUFHLE9BQWI7O0FBQ0EsZ0JBQUtGLE1BQU0sR0FBRyxDQUFkLEVBQWtCO0FBQ2pCQSxvQkFBTSxHQUFHLENBQVQ7QUFDQTtBQUNEO0FBQ0QsU0FsRjRELENBb0Y3RDs7O0FBQ0EzRCxhQUFLLENBQUMyRCxNQUFOLEdBQWVBLE1BQWY7QUFDQTNELGFBQUssQ0FBQzZELFVBQU4sR0FBbUIsQ0FBRVUsZ0JBQWdCLElBQUlWLFVBQXRCLElBQXFDLEVBQXhELENBdEY2RCxDQXdGN0Q7O0FBQ0EsWUFBSzFDLFNBQUwsRUFBaUI7QUFDaEJoaUIsa0JBQVEsQ0FBQ2UsV0FBVCxDQUFzQitpQixlQUF0QixFQUF1QyxDQUFFb0IsT0FBRixFQUFXUixVQUFYLEVBQXVCN0QsS0FBdkIsQ0FBdkM7QUFDQSxTQUZELE1BRU87QUFDTjdnQixrQkFBUSxDQUFDbUIsVUFBVCxDQUFxQjJpQixlQUFyQixFQUFzQyxDQUFFakQsS0FBRixFQUFTNkQsVUFBVCxFQUFxQjdsQyxLQUFyQixDQUF0QztBQUNBLFNBN0Y0RCxDQStGN0Q7OztBQUNBZ2lDLGFBQUssQ0FBQ29ELFVBQU4sQ0FBa0JBLFVBQWxCO0FBQ0FBLGtCQUFVLEdBQUc5b0MsU0FBYjs7QUFFQSxZQUFLeW9DLFdBQUwsRUFBbUI7QUFDbEJHLDRCQUFrQixDQUFDL1gsT0FBbkIsQ0FBNEJnVyxTQUFTLEdBQUcsYUFBSCxHQUFtQixXQUF4RCxFQUNDLENBQUVuQixLQUFGLEVBQVNyQixDQUFULEVBQVl3QyxTQUFTLEdBQUdrRCxPQUFILEdBQWFybUMsS0FBbEMsQ0FERDtBQUVBLFNBdEc0RCxDQXdHN0Q7OztBQUNBbWxDLHdCQUFnQixDQUFDL2tCLFFBQWpCLENBQTJCNmtCLGVBQTNCLEVBQTRDLENBQUVqRCxLQUFGLEVBQVM2RCxVQUFULENBQTVDOztBQUVBLFlBQUtkLFdBQUwsRUFBbUI7QUFDbEJHLDRCQUFrQixDQUFDL1gsT0FBbkIsQ0FBNEIsY0FBNUIsRUFBNEMsQ0FBRTZVLEtBQUYsRUFBU3JCLENBQVQsQ0FBNUMsRUFEa0IsQ0FHbEI7O0FBQ0EsY0FBSyxDQUFHLEdBQUVqaEMsTUFBTSxDQUFDZ2tDLE1BQWpCLEVBQTRCO0FBQzNCaGtDLGtCQUFNLENBQUN4QyxLQUFQLENBQWFpd0IsT0FBYixDQUFzQixVQUF0QjtBQUNBO0FBQ0Q7QUFDRDs7QUFFRCxhQUFPNlUsS0FBUDtBQUNBLEtBMWhCYTtBQTRoQmR5RSxXQUFPLEVBQUUsVUFBVTlnQyxHQUFWLEVBQWV4RixJQUFmLEVBQXFCN0IsUUFBckIsRUFBZ0M7QUFDeEMsYUFBT29CLE1BQU0sQ0FBQ3VLLEdBQVAsQ0FBWXRFLEdBQVosRUFBaUJ4RixJQUFqQixFQUF1QjdCLFFBQXZCLEVBQWlDLE1BQWpDLENBQVA7QUFDQSxLQTloQmE7QUFnaUJkb29DLGFBQVMsRUFBRSxVQUFVL2dDLEdBQVYsRUFBZXJILFFBQWYsRUFBMEI7QUFDcEMsYUFBT29CLE1BQU0sQ0FBQ3VLLEdBQVAsQ0FBWXRFLEdBQVosRUFBaUJySixTQUFqQixFQUE0QmdDLFFBQTVCLEVBQXNDLFFBQXRDLENBQVA7QUFDQTtBQWxpQmEsR0FBZjtBQXFpQkFvQixRQUFNLENBQUM0SyxJQUFQLENBQWEsQ0FBRSxLQUFGLEVBQVMsTUFBVCxDQUFiLEVBQWdDLFVBQVVzQyxFQUFWLEVBQWM5UyxNQUFkLEVBQXVCO0FBQ3RENEYsVUFBTSxDQUFFNUYsTUFBRixDQUFOLEdBQW1CLFVBQVU2TCxHQUFWLEVBQWV4RixJQUFmLEVBQXFCN0IsUUFBckIsRUFBK0JuQixJQUEvQixFQUFzQztBQUV4RDtBQUNBLFVBQUt5TCxVQUFVLENBQUV6SSxJQUFGLENBQWYsRUFBMEI7QUFDekJoRCxZQUFJLEdBQUdBLElBQUksSUFBSW1CLFFBQWY7QUFDQUEsZ0JBQVEsR0FBRzZCLElBQVg7QUFDQUEsWUFBSSxHQUFHN0QsU0FBUDtBQUNBLE9BUHVELENBU3hEOzs7QUFDQSxhQUFPb0QsTUFBTSxDQUFDOGtDLElBQVAsQ0FBYTlrQyxNQUFNLENBQUNoRSxNQUFQLENBQWU7QUFDbENpSyxXQUFHLEVBQUVBLEdBRDZCO0FBRWxDeEksWUFBSSxFQUFFckQsTUFGNEI7QUFHbEMrbkMsZ0JBQVEsRUFBRTFrQyxJQUh3QjtBQUlsQ2dELFlBQUksRUFBRUEsSUFKNEI7QUFLbENrbUMsZUFBTyxFQUFFL25DO0FBTHlCLE9BQWYsRUFNakJvQixNQUFNLENBQUMrTCxhQUFQLENBQXNCOUYsR0FBdEIsS0FBK0JBLEdBTmQsQ0FBYixDQUFQO0FBT0EsS0FqQkQ7QUFrQkEsR0FuQkQ7QUFxQkFqRyxRQUFNLENBQUM0a0MsYUFBUCxDQUFzQixVQUFVM0QsQ0FBVixFQUFjO0FBQ25DLFFBQUlobkMsQ0FBSjs7QUFDQSxTQUFNQSxDQUFOLElBQVdnbkMsQ0FBQyxDQUFDd0YsT0FBYixFQUF1QjtBQUN0QixVQUFLeHNDLENBQUMsQ0FBQ29GLFdBQUYsT0FBb0IsY0FBekIsRUFBMEM7QUFDekM0aEMsU0FBQyxDQUFDc0QsV0FBRixHQUFnQnRELENBQUMsQ0FBQ3dGLE9BQUYsQ0FBV3hzQyxDQUFYLEtBQWtCLEVBQWxDO0FBQ0E7QUFDRDtBQUNELEdBUEQ7O0FBVUErRixRQUFNLENBQUM0eEIsUUFBUCxHQUFrQixVQUFVM3JCLEdBQVYsRUFBZTlGLE9BQWYsRUFBd0J1SixHQUF4QixFQUE4QjtBQUMvQyxXQUFPMUosTUFBTSxDQUFDOGtDLElBQVAsQ0FBYTtBQUNuQjcrQixTQUFHLEVBQUVBLEdBRGM7QUFHbkI7QUFDQXhJLFVBQUksRUFBRSxLQUphO0FBS25CMGtDLGNBQVEsRUFBRSxRQUxTO0FBTW5CdHZCLFdBQUssRUFBRSxJQU5ZO0FBT25CeXhCLFdBQUssRUFBRSxLQVBZO0FBUW5CL3BDLFlBQU0sRUFBRSxLQVJXO0FBVW5CO0FBQ0E7QUFDQTtBQUNBK29DLGdCQUFVLEVBQUU7QUFDWCx1QkFBZSxZQUFXLENBQUU7QUFEakIsT0FiTztBQWdCbkJRLGdCQUFVLEVBQUUsVUFBVU4sUUFBVixFQUFxQjtBQUNoQ3hqQyxjQUFNLENBQUNzTSxVQUFQLENBQW1CazNCLFFBQW5CLEVBQTZCcmpDLE9BQTdCLEVBQXNDdUosR0FBdEM7QUFDQTtBQWxCa0IsS0FBYixDQUFQO0FBb0JBLEdBckJEOztBQXdCQTFKLFFBQU0sQ0FBQzhILEVBQVAsQ0FBVTlMLE1BQVYsQ0FBa0I7QUFDakJpckMsV0FBTyxFQUFFLFVBQVV0VixJQUFWLEVBQWlCO0FBQ3pCLFVBQUk3SCxJQUFKOztBQUVBLFVBQUssS0FBTSxDQUFOLENBQUwsRUFBaUI7QUFDaEIsWUFBSzVnQixVQUFVLENBQUV5b0IsSUFBRixDQUFmLEVBQTBCO0FBQ3pCQSxjQUFJLEdBQUdBLElBQUksQ0FBQzcwQixJQUFMLENBQVcsS0FBTSxDQUFOLENBQVgsQ0FBUDtBQUNBLFNBSGUsQ0FLaEI7OztBQUNBZ3RCLFlBQUksR0FBRzlwQixNQUFNLENBQUUyeEIsSUFBRixFQUFRLEtBQU0sQ0FBTixFQUFVNWYsYUFBbEIsQ0FBTixDQUF3Q2hILEVBQXhDLENBQTRDLENBQTVDLEVBQWdEYSxLQUFoRCxDQUF1RCxJQUF2RCxDQUFQOztBQUVBLFlBQUssS0FBTSxDQUFOLEVBQVUxTyxVQUFmLEVBQTRCO0FBQzNCNHNCLGNBQUksQ0FBQ3lJLFlBQUwsQ0FBbUIsS0FBTSxDQUFOLENBQW5CO0FBQ0E7O0FBRUR6SSxZQUFJLENBQUNqZixHQUFMLENBQVUsWUFBVztBQUNwQixjQUFJeFEsSUFBSSxHQUFHLElBQVg7O0FBRUEsaUJBQVFBLElBQUksQ0FBQzZzQyxpQkFBYixFQUFpQztBQUNoQzdzQyxnQkFBSSxHQUFHQSxJQUFJLENBQUM2c0MsaUJBQVo7QUFDQTs7QUFFRCxpQkFBTzdzQyxJQUFQO0FBQ0EsU0FSRCxFQVFJZzRCLE1BUkosQ0FRWSxJQVJaO0FBU0E7O0FBRUQsYUFBTyxJQUFQO0FBQ0EsS0E1QmdCO0FBOEJqQjhVLGFBQVMsRUFBRSxVQUFVeFYsSUFBVixFQUFpQjtBQUMzQixVQUFLem9CLFVBQVUsQ0FBRXlvQixJQUFGLENBQWYsRUFBMEI7QUFDekIsZUFBTyxLQUFLL21CLElBQUwsQ0FBVyxVQUFVM1EsQ0FBVixFQUFjO0FBQy9CK0YsZ0JBQU0sQ0FBRSxJQUFGLENBQU4sQ0FBZW1uQyxTQUFmLENBQTBCeFYsSUFBSSxDQUFDNzBCLElBQUwsQ0FBVyxJQUFYLEVBQWlCN0MsQ0FBakIsQ0FBMUI7QUFDQSxTQUZNLENBQVA7QUFHQTs7QUFFRCxhQUFPLEtBQUsyUSxJQUFMLENBQVcsWUFBVztBQUM1QixZQUFJbVQsSUFBSSxHQUFHL2QsTUFBTSxDQUFFLElBQUYsQ0FBakI7QUFBQSxZQUNDc2UsUUFBUSxHQUFHUCxJQUFJLENBQUNPLFFBQUwsRUFEWjs7QUFHQSxZQUFLQSxRQUFRLENBQUNwa0IsTUFBZCxFQUF1QjtBQUN0Qm9rQixrQkFBUSxDQUFDMm9CLE9BQVQsQ0FBa0J0VixJQUFsQjtBQUVBLFNBSEQsTUFHTztBQUNONVQsY0FBSSxDQUFDc1UsTUFBTCxDQUFhVixJQUFiO0FBQ0E7QUFDRCxPQVZNLENBQVA7QUFXQSxLQWhEZ0I7QUFrRGpCN0gsUUFBSSxFQUFFLFVBQVU2SCxJQUFWLEVBQWlCO0FBQ3RCLFVBQUl5VixjQUFjLEdBQUdsK0IsVUFBVSxDQUFFeW9CLElBQUYsQ0FBL0I7QUFFQSxhQUFPLEtBQUsvbUIsSUFBTCxDQUFXLFVBQVUzUSxDQUFWLEVBQWM7QUFDL0IrRixjQUFNLENBQUUsSUFBRixDQUFOLENBQWVpbkMsT0FBZixDQUF3QkcsY0FBYyxHQUFHelYsSUFBSSxDQUFDNzBCLElBQUwsQ0FBVyxJQUFYLEVBQWlCN0MsQ0FBakIsQ0FBSCxHQUEwQjAzQixJQUFoRTtBQUNBLE9BRk0sQ0FBUDtBQUdBLEtBeERnQjtBQTBEakIwVixVQUFNLEVBQUUsVUFBVS9zQyxRQUFWLEVBQXFCO0FBQzVCLFdBQUs0ZCxNQUFMLENBQWE1ZCxRQUFiLEVBQXdCd2pCLEdBQXhCLENBQTZCLE1BQTdCLEVBQXNDbFQsSUFBdEMsQ0FBNEMsWUFBVztBQUN0RDVLLGNBQU0sQ0FBRSxJQUFGLENBQU4sQ0FBZTB5QixXQUFmLENBQTRCLEtBQUtwaEIsVUFBakM7QUFDQSxPQUZEO0FBR0EsYUFBTyxJQUFQO0FBQ0E7QUEvRGdCLEdBQWxCOztBQW1FQXRSLFFBQU0sQ0FBQ21XLElBQVAsQ0FBWS9HLE9BQVosQ0FBb0IwcUIsTUFBcEIsR0FBNkIsVUFBVXovQixJQUFWLEVBQWlCO0FBQzdDLFdBQU8sQ0FBQzJGLE1BQU0sQ0FBQ21XLElBQVAsQ0FBWS9HLE9BQVosQ0FBb0JrNEIsT0FBcEIsQ0FBNkJqdEMsSUFBN0IsQ0FBUjtBQUNBLEdBRkQ7O0FBR0EyRixRQUFNLENBQUNtVyxJQUFQLENBQVkvRyxPQUFaLENBQW9CazRCLE9BQXBCLEdBQThCLFVBQVVqdEMsSUFBVixFQUFpQjtBQUM5QyxXQUFPLENBQUMsRUFBR0EsSUFBSSxDQUFDMkksV0FBTCxJQUFvQjNJLElBQUksQ0FBQzRJLFlBQXpCLElBQXlDNUksSUFBSSxDQUFDbTlCLGNBQUwsR0FBc0J0OUIsTUFBbEUsQ0FBUjtBQUNBLEdBRkQ7O0FBT0E4RixRQUFNLENBQUM4aUMsWUFBUCxDQUFvQnlFLEdBQXBCLEdBQTBCLFlBQVc7QUFDcEMsUUFBSTtBQUNILGFBQU8sSUFBSWh1QyxNQUFNLENBQUNpdUMsY0FBWCxFQUFQO0FBQ0EsS0FGRCxDQUVFLE9BQVFqMkIsQ0FBUixFQUFZLENBQUU7QUFDaEIsR0FKRDs7QUFNQSxNQUFJazJCLGdCQUFnQixHQUFHO0FBRXJCO0FBQ0EsT0FBRyxHQUhrQjtBQUtyQjtBQUNBO0FBQ0EsVUFBTTtBQVBlLEdBQXZCO0FBQUEsTUFTQ0MsWUFBWSxHQUFHMW5DLE1BQU0sQ0FBQzhpQyxZQUFQLENBQW9CeUUsR0FBcEIsRUFUaEI7QUFXQXQrQixTQUFPLENBQUMwK0IsSUFBUixHQUFlLENBQUMsQ0FBQ0QsWUFBRixJQUFvQixxQkFBcUJBLFlBQXhEO0FBQ0F6K0IsU0FBTyxDQUFDNjdCLElBQVIsR0FBZTRDLFlBQVksR0FBRyxDQUFDLENBQUNBLFlBQWhDO0FBRUExbkMsUUFBTSxDQUFDNmtDLGFBQVAsQ0FBc0IsVUFBVTFrQyxPQUFWLEVBQW9CO0FBQ3pDLFFBQUl2QixRQUFKLEVBQWNncEMsYUFBZCxDQUR5QyxDQUd6Qzs7QUFDQSxRQUFLMytCLE9BQU8sQ0FBQzArQixJQUFSLElBQWdCRCxZQUFZLElBQUksQ0FBQ3ZuQyxPQUFPLENBQUNrbUMsV0FBOUMsRUFBNEQ7QUFDM0QsYUFBTztBQUNOTyxZQUFJLEVBQUUsVUFBVUgsT0FBVixFQUFtQmpnQyxRQUFuQixFQUE4QjtBQUNuQyxjQUFJdk0sQ0FBSjtBQUFBLGNBQ0NzdEMsR0FBRyxHQUFHcG5DLE9BQU8sQ0FBQ29uQyxHQUFSLEVBRFA7QUFHQUEsYUFBRyxDQUFDTSxJQUFKLENBQ0MxbkMsT0FBTyxDQUFDMUMsSUFEVCxFQUVDMEMsT0FBTyxDQUFDOEYsR0FGVCxFQUdDOUYsT0FBTyxDQUFDbWtDLEtBSFQsRUFJQ25rQyxPQUFPLENBQUMybkMsUUFKVCxFQUtDM25DLE9BQU8sQ0FBQ3daLFFBTFQsRUFKbUMsQ0FZbkM7O0FBQ0EsY0FBS3haLE9BQU8sQ0FBQzRuQyxTQUFiLEVBQXlCO0FBQ3hCLGlCQUFNOXRDLENBQU4sSUFBV2tHLE9BQU8sQ0FBQzRuQyxTQUFuQixFQUErQjtBQUM5QlIsaUJBQUcsQ0FBRXR0QyxDQUFGLENBQUgsR0FBV2tHLE9BQU8sQ0FBQzRuQyxTQUFSLENBQW1COXRDLENBQW5CLENBQVg7QUFDQTtBQUNELFdBakJrQyxDQW1CbkM7OztBQUNBLGNBQUtrRyxPQUFPLENBQUNpakMsUUFBUixJQUFvQm1FLEdBQUcsQ0FBQ3ZCLGdCQUE3QixFQUFnRDtBQUMvQ3VCLGVBQUcsQ0FBQ3ZCLGdCQUFKLENBQXNCN2xDLE9BQU8sQ0FBQ2lqQyxRQUE5QjtBQUNBLFdBdEJrQyxDQXdCbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsY0FBSyxDQUFDampDLE9BQU8sQ0FBQ2ttQyxXQUFULElBQXdCLENBQUNJLE9BQU8sQ0FBRSxrQkFBRixDQUFyQyxFQUE4RDtBQUM3REEsbUJBQU8sQ0FBRSxrQkFBRixDQUFQLEdBQWdDLGdCQUFoQztBQUNBLFdBL0JrQyxDQWlDbkM7OztBQUNBLGVBQU14c0MsQ0FBTixJQUFXd3NDLE9BQVgsRUFBcUI7QUFDcEJjLGVBQUcsQ0FBQ3hCLGdCQUFKLENBQXNCOXJDLENBQXRCLEVBQXlCd3NDLE9BQU8sQ0FBRXhzQyxDQUFGLENBQWhDO0FBQ0EsV0FwQ2tDLENBc0NuQzs7O0FBQ0EyRSxrQkFBUSxHQUFHLFVBQVVuQixJQUFWLEVBQWlCO0FBQzNCLG1CQUFPLFlBQVc7QUFDakIsa0JBQUttQixRQUFMLEVBQWdCO0FBQ2ZBLHdCQUFRLEdBQUdncEMsYUFBYSxHQUFHTCxHQUFHLENBQUMvL0IsTUFBSixHQUMxQisvQixHQUFHLENBQUM3L0IsT0FBSixHQUFjNi9CLEdBQUcsQ0FBQ1MsT0FBSixHQUFjVCxHQUFHLENBQUNVLFNBQUosR0FDM0JWLEdBQUcsQ0FBQ1csa0JBQUosR0FBeUIsSUFGM0I7O0FBSUEsb0JBQUt6cUMsSUFBSSxLQUFLLE9BQWQsRUFBd0I7QUFDdkI4cEMscUJBQUcsQ0FBQ3JCLEtBQUo7QUFDQSxpQkFGRCxNQUVPLElBQUt6b0MsSUFBSSxLQUFLLE9BQWQsRUFBd0I7QUFFOUI7QUFDQTtBQUNBO0FBQ0Esc0JBQUssT0FBTzhwQyxHQUFHLENBQUN0QixNQUFYLEtBQXNCLFFBQTNCLEVBQXNDO0FBQ3JDei9CLDRCQUFRLENBQUUsQ0FBRixFQUFLLE9BQUwsQ0FBUjtBQUNBLG1CQUZELE1BRU87QUFDTkEsNEJBQVEsRUFFUDtBQUNBK2dDLHVCQUFHLENBQUN0QixNQUhHLEVBSVBzQixHQUFHLENBQUNwQixVQUpHLENBQVI7QUFNQTtBQUNELGlCQWZNLE1BZUE7QUFDTjMvQiwwQkFBUSxDQUNQaWhDLGdCQUFnQixDQUFFRixHQUFHLENBQUN0QixNQUFOLENBQWhCLElBQWtDc0IsR0FBRyxDQUFDdEIsTUFEL0IsRUFFUHNCLEdBQUcsQ0FBQ3BCLFVBRkcsRUFJUDtBQUNBO0FBQ0E7QUFDQSxtQkFBRW9CLEdBQUcsQ0FBQ1ksWUFBSixJQUFvQixNQUF0QixNQUFtQyxNQUFuQyxJQUNBLE9BQU9aLEdBQUcsQ0FBQ2EsWUFBWCxLQUE0QixRQUQ1QixHQUVDO0FBQUVDLDBCQUFNLEVBQUVkLEdBQUcsQ0FBQy9EO0FBQWQsbUJBRkQsR0FHQztBQUFFMzVCLHdCQUFJLEVBQUUwOUIsR0FBRyxDQUFDYTtBQUFaLG1CQVZNLEVBV1BiLEdBQUcsQ0FBQ3pCLHFCQUFKLEVBWE8sQ0FBUjtBQWFBO0FBQ0Q7QUFDRCxhQXZDRDtBQXdDQSxXQXpDRCxDQXZDbUMsQ0FrRm5DOzs7QUFDQXlCLGFBQUcsQ0FBQy8vQixNQUFKLEdBQWE1SSxRQUFRLEVBQXJCO0FBQ0FncEMsdUJBQWEsR0FBR0wsR0FBRyxDQUFDNy9CLE9BQUosR0FBYzYvQixHQUFHLENBQUNVLFNBQUosR0FBZ0JycEMsUUFBUSxDQUFFLE9BQUYsQ0FBdEQsQ0FwRm1DLENBc0ZuQztBQUNBO0FBQ0E7O0FBQ0EsY0FBSzJvQyxHQUFHLENBQUNTLE9BQUosS0FBZ0JwckMsU0FBckIsRUFBaUM7QUFDaEMycUMsZUFBRyxDQUFDUyxPQUFKLEdBQWNKLGFBQWQ7QUFDQSxXQUZELE1BRU87QUFDTkwsZUFBRyxDQUFDVyxrQkFBSixHQUF5QixZQUFXO0FBRW5DO0FBQ0Esa0JBQUtYLEdBQUcsQ0FBQzFvQyxVQUFKLEtBQW1CLENBQXhCLEVBQTRCO0FBRTNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0F0RixzQkFBTSxDQUFDbUYsVUFBUCxDQUFtQixZQUFXO0FBQzdCLHNCQUFLRSxRQUFMLEVBQWdCO0FBQ2ZncEMsaUNBQWE7QUFDYjtBQUNELGlCQUpEO0FBS0E7QUFDRCxhQWZEO0FBZ0JBLFdBNUdrQyxDQThHbkM7OztBQUNBaHBDLGtCQUFRLEdBQUdBLFFBQVEsQ0FBRSxPQUFGLENBQW5COztBQUVBLGNBQUk7QUFFSDtBQUNBMm9DLGVBQUcsQ0FBQ1gsSUFBSixDQUFVem1DLE9BQU8sQ0FBQ29tQyxVQUFSLElBQXNCcG1DLE9BQU8sQ0FBQ00sSUFBOUIsSUFBc0MsSUFBaEQ7QUFDQSxXQUpELENBSUUsT0FBUThRLENBQVIsRUFBWTtBQUViO0FBQ0EsZ0JBQUszUyxRQUFMLEVBQWdCO0FBQ2Ysb0JBQU0yUyxDQUFOO0FBQ0E7QUFDRDtBQUNELFNBN0hLO0FBK0hOMjBCLGFBQUssRUFBRSxZQUFXO0FBQ2pCLGNBQUt0bkMsUUFBTCxFQUFnQjtBQUNmQSxvQkFBUTtBQUNSO0FBQ0Q7QUFuSUssT0FBUDtBQXFJQTtBQUNELEdBM0lELEVBanRUaUYsQ0FpMlRqRjs7QUFDQW9CLFFBQU0sQ0FBQzRrQyxhQUFQLENBQXNCLFVBQVUzRCxDQUFWLEVBQWM7QUFDbkMsUUFBS0EsQ0FBQyxDQUFDb0YsV0FBUCxFQUFxQjtBQUNwQnBGLE9BQUMsQ0FBQzNpQixRQUFGLENBQVcxVSxNQUFYLEdBQW9CLEtBQXBCO0FBQ0E7QUFDRCxHQUpELEVBbDJUaUYsQ0F3MlRqRjs7QUFDQTVKLFFBQU0sQ0FBQzBrQyxTQUFQLENBQWtCO0FBQ2pCRixXQUFPLEVBQUU7QUFDUjU2QixZQUFNLEVBQUUsOENBQ1A7QUFGTyxLQURRO0FBS2pCMFUsWUFBUSxFQUFFO0FBQ1QxVSxZQUFNLEVBQUU7QUFEQyxLQUxPO0FBUWpCMDVCLGNBQVUsRUFBRTtBQUNYLHFCQUFlLFVBQVV6NUIsSUFBVixFQUFpQjtBQUMvQjdKLGNBQU0sQ0FBQ3NNLFVBQVAsQ0FBbUJ6QyxJQUFuQjtBQUNBLGVBQU9BLElBQVA7QUFDQTtBQUpVO0FBUkssR0FBbEIsRUF6MlRpRixDQXkzVGpGOztBQUNBN0osUUFBTSxDQUFDNGtDLGFBQVAsQ0FBc0IsUUFBdEIsRUFBZ0MsVUFBVTNELENBQVYsRUFBYztBQUM3QyxRQUFLQSxDQUFDLENBQUNwdUIsS0FBRixLQUFZalcsU0FBakIsRUFBNkI7QUFDNUJxa0MsT0FBQyxDQUFDcHVCLEtBQUYsR0FBVSxLQUFWO0FBQ0E7O0FBQ0QsUUFBS291QixDQUFDLENBQUNvRixXQUFQLEVBQXFCO0FBQ3BCcEYsT0FBQyxDQUFDeGpDLElBQUYsR0FBUyxLQUFUO0FBQ0E7QUFDRCxHQVBELEVBMTNUaUYsQ0FtNFRqRjs7QUFDQXVDLFFBQU0sQ0FBQzZrQyxhQUFQLENBQXNCLFFBQXRCLEVBQWdDLFVBQVU1RCxDQUFWLEVBQWM7QUFFN0M7QUFDQSxRQUFLQSxDQUFDLENBQUNvRixXQUFGLElBQWlCcEYsQ0FBQyxDQUFDcUgsV0FBeEIsRUFBc0M7QUFDckMsVUFBSTErQixNQUFKLEVBQVloTCxRQUFaO0FBQ0EsYUFBTztBQUNOZ29DLFlBQUksRUFBRSxVQUFVam5CLENBQVYsRUFBYW5aLFFBQWIsRUFBd0I7QUFDN0JvRCxnQkFBTSxHQUFHNUosTUFBTSxDQUFFLFVBQUYsQ0FBTixDQUNQQyxJQURPLENBQ0RnaEMsQ0FBQyxDQUFDcUgsV0FBRixJQUFpQixFQURoQixFQUVQbnNDLElBRk8sQ0FFRDtBQUFFb3NDLG1CQUFPLEVBQUV0SCxDQUFDLENBQUN1SCxhQUFiO0FBQTRCamhDLGVBQUcsRUFBRTA1QixDQUFDLENBQUNoN0I7QUFBbkMsV0FGQyxFQUdQdkwsRUFITyxDQUdILFlBSEcsRUFHV2tFLFFBQVEsR0FBRyxVQUFVNnBDLEdBQVYsRUFBZ0I7QUFDN0M3K0Isa0JBQU0sQ0FBQzBXLE1BQVA7QUFDQTFoQixvQkFBUSxHQUFHLElBQVg7O0FBQ0EsZ0JBQUs2cEMsR0FBTCxFQUFXO0FBQ1ZqaUMsc0JBQVEsQ0FBRWlpQyxHQUFHLENBQUNockMsSUFBSixLQUFhLE9BQWIsR0FBdUIsR0FBdkIsR0FBNkIsR0FBL0IsRUFBb0NnckMsR0FBRyxDQUFDaHJDLElBQXhDLENBQVI7QUFDQTtBQUNELFdBVE8sQ0FBVCxDQUQ2QixDQVk3Qjs7QUFDQU4sa0JBQVEsQ0FBQzRNLElBQVQsQ0FBY3RILFdBQWQsQ0FBMkJtSCxNQUFNLENBQUUsQ0FBRixDQUFqQztBQUNBLFNBZks7QUFnQk5zOEIsYUFBSyxFQUFFLFlBQVc7QUFDakIsY0FBS3RuQyxRQUFMLEVBQWdCO0FBQ2ZBLG9CQUFRO0FBQ1I7QUFDRDtBQXBCSyxPQUFQO0FBc0JBO0FBQ0QsR0E1QkQ7QUFpQ0EsTUFBSThwQyxZQUFZLEdBQUcsRUFBbkI7QUFBQSxNQUNDQyxNQUFNLEdBQUcsbUJBRFYsQ0FyNlRpRixDQXc2VGpGOztBQUNBM29DLFFBQU0sQ0FBQzBrQyxTQUFQLENBQWtCO0FBQ2pCa0UsU0FBSyxFQUFFLFVBRFU7QUFFakJDLGlCQUFhLEVBQUUsWUFBVztBQUN6QixVQUFJanFDLFFBQVEsR0FBRzhwQyxZQUFZLENBQUM3NUIsR0FBYixNQUF3QjdPLE1BQU0sQ0FBQ2dNLE9BQVAsR0FBaUIsR0FBakIsR0FBeUIzQyxLQUFLLENBQUN5RCxJQUFOLEVBQWhFO0FBQ0EsV0FBTWxPLFFBQU4sSUFBbUIsSUFBbkI7QUFDQSxhQUFPQSxRQUFQO0FBQ0E7QUFOZ0IsR0FBbEIsRUF6NlRpRixDQWs3VGpGOztBQUNBb0IsUUFBTSxDQUFDNGtDLGFBQVAsQ0FBc0IsWUFBdEIsRUFBb0MsVUFBVTNELENBQVYsRUFBYTZILGdCQUFiLEVBQStCeEcsS0FBL0IsRUFBdUM7QUFFMUUsUUFBSXlHLFlBQUo7QUFBQSxRQUFrQkMsV0FBbEI7QUFBQSxRQUErQkMsaUJBQS9CO0FBQUEsUUFDQ0MsUUFBUSxHQUFHakksQ0FBQyxDQUFDMkgsS0FBRixLQUFZLEtBQVosS0FBdUJELE1BQU0sQ0FBQ3QyQixJQUFQLENBQWE0dUIsQ0FBQyxDQUFDaDdCLEdBQWYsSUFDakMsS0FEaUMsR0FFakMsT0FBT2c3QixDQUFDLENBQUN4Z0MsSUFBVCxLQUFrQixRQUFsQixJQUNDLENBQUV3Z0MsQ0FBQyxDQUFDc0QsV0FBRixJQUFpQixFQUFuQixFQUNFdnBDLE9BREYsQ0FDVyxtQ0FEWCxNQUNxRCxDQUZ0RCxJQUdDMnRDLE1BQU0sQ0FBQ3QyQixJQUFQLENBQWE0dUIsQ0FBQyxDQUFDeGdDLElBQWYsQ0FIRCxJQUcwQixNQUxoQixDQURaLENBRjBFLENBVzFFOztBQUNBLFFBQUt5b0MsUUFBUSxJQUFJakksQ0FBQyxDQUFDbUIsU0FBRixDQUFhLENBQWIsTUFBcUIsT0FBdEMsRUFBZ0Q7QUFFL0M7QUFDQTJHLGtCQUFZLEdBQUc5SCxDQUFDLENBQUM0SCxhQUFGLEdBQWtCMy9CLFVBQVUsQ0FBRSszQixDQUFDLENBQUM0SCxhQUFKLENBQVYsR0FDaEM1SCxDQUFDLENBQUM0SCxhQUFGLEVBRGdDLEdBRWhDNUgsQ0FBQyxDQUFDNEgsYUFGSCxDQUgrQyxDQU8vQzs7QUFDQSxVQUFLSyxRQUFMLEVBQWdCO0FBQ2ZqSSxTQUFDLENBQUVpSSxRQUFGLENBQUQsR0FBZ0JqSSxDQUFDLENBQUVpSSxRQUFGLENBQUQsQ0FBY2pxQyxPQUFkLENBQXVCMHBDLE1BQXZCLEVBQStCLE9BQU9JLFlBQXRDLENBQWhCO0FBQ0EsT0FGRCxNQUVPLElBQUs5SCxDQUFDLENBQUMySCxLQUFGLEtBQVksS0FBakIsRUFBeUI7QUFDL0IzSCxTQUFDLENBQUNoN0IsR0FBRixJQUFTLENBQUVxNkIsTUFBTSxDQUFDanVCLElBQVAsQ0FBYTR1QixDQUFDLENBQUNoN0IsR0FBZixJQUF1QixHQUF2QixHQUE2QixHQUEvQixJQUF1Q2c3QixDQUFDLENBQUMySCxLQUF6QyxHQUFpRCxHQUFqRCxHQUF1REcsWUFBaEU7QUFDQSxPQVo4QyxDQWMvQzs7O0FBQ0E5SCxPQUFDLENBQUNxQyxVQUFGLENBQWMsYUFBZCxJQUFnQyxZQUFXO0FBQzFDLFlBQUssQ0FBQzJGLGlCQUFOLEVBQTBCO0FBQ3pCanBDLGdCQUFNLENBQUNNLEtBQVAsQ0FBY3lvQyxZQUFZLEdBQUcsaUJBQTdCO0FBQ0E7O0FBQ0QsZUFBT0UsaUJBQWlCLENBQUUsQ0FBRixDQUF4QjtBQUNBLE9BTEQsQ0FmK0MsQ0FzQi9DOzs7QUFDQWhJLE9BQUMsQ0FBQ21CLFNBQUYsQ0FBYSxDQUFiLElBQW1CLE1BQW5CLENBdkIrQyxDQXlCL0M7O0FBQ0E0RyxpQkFBVyxHQUFHenZDLE1BQU0sQ0FBRXd2QyxZQUFGLENBQXBCOztBQUNBeHZDLFlBQU0sQ0FBRXd2QyxZQUFGLENBQU4sR0FBeUIsWUFBVztBQUNuQ0UseUJBQWlCLEdBQUd6cUMsU0FBcEI7QUFDQSxPQUZELENBM0IrQyxDQStCL0M7OztBQUNBOGpDLFdBQUssQ0FBQzlnQixNQUFOLENBQWMsWUFBVztBQUV4QjtBQUNBLFlBQUt3bkIsV0FBVyxLQUFLcHNDLFNBQXJCLEVBQWlDO0FBQ2hDb0QsZ0JBQU0sQ0FBRXpHLE1BQUYsQ0FBTixDQUFpQitrQyxVQUFqQixDQUE2QnlLLFlBQTdCLEVBRGdDLENBR2pDO0FBQ0MsU0FKRCxNQUlPO0FBQ054dkMsZ0JBQU0sQ0FBRXd2QyxZQUFGLENBQU4sR0FBeUJDLFdBQXpCO0FBQ0EsU0FUdUIsQ0FXeEI7OztBQUNBLFlBQUsvSCxDQUFDLENBQUU4SCxZQUFGLENBQU4sRUFBeUI7QUFFeEI7QUFDQTlILFdBQUMsQ0FBQzRILGFBQUYsR0FBa0JDLGdCQUFnQixDQUFDRCxhQUFuQyxDQUh3QixDQUt4Qjs7QUFDQUgsc0JBQVksQ0FBQ3p0QyxJQUFiLENBQW1COHRDLFlBQW5CO0FBQ0EsU0FuQnVCLENBcUJ4Qjs7O0FBQ0EsWUFBS0UsaUJBQWlCLElBQUkvL0IsVUFBVSxDQUFFOC9CLFdBQUYsQ0FBcEMsRUFBc0Q7QUFDckRBLHFCQUFXLENBQUVDLGlCQUFpQixDQUFFLENBQUYsQ0FBbkIsQ0FBWDtBQUNBOztBQUVEQSx5QkFBaUIsR0FBR0QsV0FBVyxHQUFHcHNDLFNBQWxDO0FBQ0EsT0EzQkQsRUFoQytDLENBNkQvQzs7QUFDQSxhQUFPLFFBQVA7QUFDQTtBQUNELEdBNUVELEVBbjdUaUYsQ0FvZ1VqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBcU0sU0FBTyxDQUFDa2dDLGtCQUFSLEdBQStCLFlBQVc7QUFDekMsUUFBSS9yQyxJQUFJLEdBQUdELFFBQVEsQ0FBQ2lzQyxjQUFULENBQXdCRCxrQkFBeEIsQ0FBNEMsRUFBNUMsRUFBaUQvckMsSUFBNUQ7QUFDQUEsUUFBSSxDQUFDZ1ksU0FBTCxHQUFpQiw0QkFBakI7QUFDQSxXQUFPaFksSUFBSSxDQUFDa1UsVUFBTCxDQUFnQnBYLE1BQWhCLEtBQTJCLENBQWxDO0FBQ0EsR0FKNEIsRUFBN0IsQ0F6Z1VpRixDQWdoVWpGO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQThGLFFBQU0sQ0FBQ2tlLFNBQVAsR0FBbUIsVUFBVXpkLElBQVYsRUFBZ0J5SixPQUFoQixFQUF5Qm0vQixXQUF6QixFQUF1QztBQUN6RCxRQUFLLE9BQU81b0MsSUFBUCxLQUFnQixRQUFyQixFQUFnQztBQUMvQixhQUFPLEVBQVA7QUFDQTs7QUFDRCxRQUFLLE9BQU95SixPQUFQLEtBQW1CLFNBQXhCLEVBQW9DO0FBQ25DbS9CLGlCQUFXLEdBQUduL0IsT0FBZDtBQUNBQSxhQUFPLEdBQUcsS0FBVjtBQUNBOztBQUVELFFBQUltUSxJQUFKLEVBQVVpdkIsTUFBVixFQUFrQjNmLE9BQWxCOztBQUVBLFFBQUssQ0FBQ3pmLE9BQU4sRUFBZ0I7QUFFZjtBQUNBO0FBQ0EsVUFBS2pCLE9BQU8sQ0FBQ2tnQyxrQkFBYixFQUFrQztBQUNqQ2ovQixlQUFPLEdBQUcvTSxRQUFRLENBQUNpc0MsY0FBVCxDQUF3QkQsa0JBQXhCLENBQTRDLEVBQTVDLENBQVYsQ0FEaUMsQ0FHakM7QUFDQTtBQUNBOztBQUNBOXVCLFlBQUksR0FBR25RLE9BQU8sQ0FBQy9ILGFBQVIsQ0FBdUIsTUFBdkIsQ0FBUDtBQUNBa1ksWUFBSSxDQUFDbkIsSUFBTCxHQUFZL2IsUUFBUSxDQUFDNGIsUUFBVCxDQUFrQkcsSUFBOUI7QUFDQWhQLGVBQU8sQ0FBQ0gsSUFBUixDQUFhdEgsV0FBYixDQUEwQjRYLElBQTFCO0FBQ0EsT0FURCxNQVNPO0FBQ05uUSxlQUFPLEdBQUcvTSxRQUFWO0FBQ0E7QUFDRDs7QUFFRG1zQyxVQUFNLEdBQUczckIsVUFBVSxDQUFDNVgsSUFBWCxDQUFpQnRGLElBQWpCLENBQVQ7QUFDQWtwQixXQUFPLEdBQUcsQ0FBQzBmLFdBQUQsSUFBZ0IsRUFBMUIsQ0E5QnlELENBZ0N6RDs7QUFDQSxRQUFLQyxNQUFMLEVBQWM7QUFDYixhQUFPLENBQUVwL0IsT0FBTyxDQUFDL0gsYUFBUixDQUF1Qm1uQyxNQUFNLENBQUUsQ0FBRixDQUE3QixDQUFGLENBQVA7QUFDQTs7QUFFREEsVUFBTSxHQUFHNWYsYUFBYSxDQUFFLENBQUVqcEIsSUFBRixDQUFGLEVBQVl5SixPQUFaLEVBQXFCeWYsT0FBckIsQ0FBdEI7O0FBRUEsUUFBS0EsT0FBTyxJQUFJQSxPQUFPLENBQUN6dkIsTUFBeEIsRUFBaUM7QUFDaEM4RixZQUFNLENBQUUycEIsT0FBRixDQUFOLENBQWtCckosTUFBbEI7QUFDQTs7QUFFRCxXQUFPdGdCLE1BQU0sQ0FBQzBLLEtBQVAsQ0FBYyxFQUFkLEVBQWtCNCtCLE1BQU0sQ0FBQ2g0QixVQUF6QixDQUFQO0FBQ0EsR0E1Q0Q7QUErQ0E7Ozs7O0FBR0F0UixRQUFNLENBQUM4SCxFQUFQLENBQVV1bEIsSUFBVixHQUFpQixVQUFVcG5CLEdBQVYsRUFBZXNqQyxNQUFmLEVBQXVCM3FDLFFBQXZCLEVBQWtDO0FBQ2xELFFBQUl0RSxRQUFKO0FBQUEsUUFBY21ELElBQWQ7QUFBQSxRQUFvQitsQyxRQUFwQjtBQUFBLFFBQ0N6bEIsSUFBSSxHQUFHLElBRFI7QUFBQSxRQUVDemlCLEdBQUcsR0FBRzJLLEdBQUcsQ0FBQ2pMLE9BQUosQ0FBYSxHQUFiLENBRlA7O0FBSUEsUUFBS00sR0FBRyxHQUFHLENBQUMsQ0FBWixFQUFnQjtBQUNmaEIsY0FBUSxHQUFHbWtDLGdCQUFnQixDQUFFeDRCLEdBQUcsQ0FBQ3RLLEtBQUosQ0FBV0wsR0FBWCxDQUFGLENBQTNCO0FBQ0EySyxTQUFHLEdBQUdBLEdBQUcsQ0FBQ3RLLEtBQUosQ0FBVyxDQUFYLEVBQWNMLEdBQWQsQ0FBTjtBQUNBLEtBUmlELENBVWxEOzs7QUFDQSxRQUFLNE4sVUFBVSxDQUFFcWdDLE1BQUYsQ0FBZixFQUE0QjtBQUUzQjtBQUNBM3FDLGNBQVEsR0FBRzJxQyxNQUFYO0FBQ0FBLFlBQU0sR0FBRzNzQyxTQUFULENBSjJCLENBTTVCO0FBQ0MsS0FQRCxNQU9PLElBQUsyc0MsTUFBTSxJQUFJLE9BQU9BLE1BQVAsS0FBa0IsUUFBakMsRUFBNEM7QUFDbEQ5ckMsVUFBSSxHQUFHLE1BQVA7QUFDQSxLQXBCaUQsQ0FzQmxEOzs7QUFDQSxRQUFLc2dCLElBQUksQ0FBQzdqQixNQUFMLEdBQWMsQ0FBbkIsRUFBdUI7QUFDdEI4RixZQUFNLENBQUM4a0MsSUFBUCxDQUFhO0FBQ1o3K0IsV0FBRyxFQUFFQSxHQURPO0FBR1o7QUFDQTtBQUNBO0FBQ0F4SSxZQUFJLEVBQUVBLElBQUksSUFBSSxLQU5GO0FBT1owa0MsZ0JBQVEsRUFBRSxNQVBFO0FBUVoxaEMsWUFBSSxFQUFFOG9DO0FBUk0sT0FBYixFQVNJajdCLElBVEosQ0FTVSxVQUFVODVCLFlBQVYsRUFBeUI7QUFFbEM7QUFDQTVFLGdCQUFRLEdBQUdobEMsU0FBWDtBQUVBdWYsWUFBSSxDQUFDNFQsSUFBTCxDQUFXcjNCLFFBQVEsR0FFbEI7QUFDQTtBQUNBMEYsY0FBTSxDQUFFLE9BQUYsQ0FBTixDQUFrQnF5QixNQUFsQixDQUEwQnJ5QixNQUFNLENBQUNrZSxTQUFQLENBQWtCa3FCLFlBQWxCLENBQTFCLEVBQTZEcnpCLElBQTdELENBQW1FemEsUUFBbkUsQ0FKa0IsR0FNbEI7QUFDQTh0QyxvQkFQRCxFQUxrQyxDQWNuQztBQUNBO0FBQ0E7QUFDQyxPQTFCRCxFQTBCSTVtQixNQTFCSixDQTBCWTVpQixRQUFRLElBQUksVUFBVTBqQyxLQUFWLEVBQWlCMkQsTUFBakIsRUFBMEI7QUFDakRsb0IsWUFBSSxDQUFDblQsSUFBTCxDQUFXLFlBQVc7QUFDckJoTSxrQkFBUSxDQUFDL0MsS0FBVCxDQUFnQixJQUFoQixFQUFzQjJuQyxRQUFRLElBQUksQ0FBRWxCLEtBQUssQ0FBQzhGLFlBQVIsRUFBc0JuQyxNQUF0QixFQUE4QjNELEtBQTlCLENBQWxDO0FBQ0EsU0FGRDtBQUdBLE9BOUJEO0FBK0JBOztBQUVELFdBQU8sSUFBUDtBQUNBLEdBMUREOztBQStEQXRpQyxRQUFNLENBQUNtVyxJQUFQLENBQVkvRyxPQUFaLENBQW9CbzZCLFFBQXBCLEdBQStCLFVBQVVudkMsSUFBVixFQUFpQjtBQUMvQyxXQUFPMkYsTUFBTSxDQUFDa0wsSUFBUCxDQUFhbEwsTUFBTSxDQUFDNjhCLE1BQXBCLEVBQTRCLFVBQVUvMEIsRUFBVixFQUFlO0FBQ2pELGFBQU96TixJQUFJLEtBQUt5TixFQUFFLENBQUN6TixJQUFuQjtBQUNBLEtBRk0sRUFFSEgsTUFGSjtBQUdBLEdBSkQ7O0FBU0E4RixRQUFNLENBQUN5cEMsTUFBUCxHQUFnQjtBQUNmQyxhQUFTLEVBQUUsVUFBVXJ2QyxJQUFWLEVBQWdCOEYsT0FBaEIsRUFBeUJsRyxDQUF6QixFQUE2QjtBQUN2QyxVQUFJMHZDLFdBQUo7QUFBQSxVQUFpQkMsT0FBakI7QUFBQSxVQUEwQkMsU0FBMUI7QUFBQSxVQUFxQ0MsTUFBckM7QUFBQSxVQUE2Q0MsU0FBN0M7QUFBQSxVQUF3REMsVUFBeEQ7QUFBQSxVQUFvRUMsaUJBQXBFO0FBQUEsVUFDQy9WLFFBQVEsR0FBR2wwQixNQUFNLENBQUMrbUIsR0FBUCxDQUFZMXNCLElBQVosRUFBa0IsVUFBbEIsQ0FEWjtBQUFBLFVBRUM2dkMsT0FBTyxHQUFHbHFDLE1BQU0sQ0FBRTNGLElBQUYsQ0FGakI7QUFBQSxVQUdDMnpCLEtBQUssR0FBRyxFQUhULENBRHVDLENBTXZDOztBQUNBLFVBQUtrRyxRQUFRLEtBQUssUUFBbEIsRUFBNkI7QUFDNUI3NUIsWUFBSSxDQUFDeUgsS0FBTCxDQUFXb3lCLFFBQVgsR0FBc0IsVUFBdEI7QUFDQTs7QUFFRDZWLGVBQVMsR0FBR0csT0FBTyxDQUFDVCxNQUFSLEVBQVo7QUFDQUksZUFBUyxHQUFHN3BDLE1BQU0sQ0FBQyttQixHQUFQLENBQVkxc0IsSUFBWixFQUFrQixLQUFsQixDQUFaO0FBQ0EydkMsZ0JBQVUsR0FBR2hxQyxNQUFNLENBQUMrbUIsR0FBUCxDQUFZMXNCLElBQVosRUFBa0IsTUFBbEIsQ0FBYjtBQUNBNHZDLHVCQUFpQixHQUFHLENBQUUvVixRQUFRLEtBQUssVUFBYixJQUEyQkEsUUFBUSxLQUFLLE9BQTFDLEtBQ25CLENBQUUyVixTQUFTLEdBQUdHLFVBQWQsRUFBMkJodkMsT0FBM0IsQ0FBb0MsTUFBcEMsSUFBK0MsQ0FBQyxDQURqRCxDQWR1QyxDQWlCdkM7QUFDQTs7QUFDQSxVQUFLaXZDLGlCQUFMLEVBQXlCO0FBQ3hCTixtQkFBVyxHQUFHTyxPQUFPLENBQUNoVyxRQUFSLEVBQWQ7QUFDQTRWLGNBQU0sR0FBR0gsV0FBVyxDQUFDbjFCLEdBQXJCO0FBQ0FvMUIsZUFBTyxHQUFHRCxXQUFXLENBQUMxUixJQUF0QjtBQUVBLE9BTEQsTUFLTztBQUNONlIsY0FBTSxHQUFHbHBDLFVBQVUsQ0FBRWlwQyxTQUFGLENBQVYsSUFBMkIsQ0FBcEM7QUFDQUQsZUFBTyxHQUFHaHBDLFVBQVUsQ0FBRW9wQyxVQUFGLENBQVYsSUFBNEIsQ0FBdEM7QUFDQTs7QUFFRCxVQUFLOWdDLFVBQVUsQ0FBRS9JLE9BQUYsQ0FBZixFQUE2QjtBQUU1QjtBQUNBQSxlQUFPLEdBQUdBLE9BQU8sQ0FBQ3JELElBQVIsQ0FBY3pDLElBQWQsRUFBb0JKLENBQXBCLEVBQXVCK0YsTUFBTSxDQUFDaEUsTUFBUCxDQUFlLEVBQWYsRUFBbUIrdEMsU0FBbkIsQ0FBdkIsQ0FBVjtBQUNBOztBQUVELFVBQUs1cEMsT0FBTyxDQUFDcVUsR0FBUixJQUFlLElBQXBCLEVBQTJCO0FBQzFCd1osYUFBSyxDQUFDeFosR0FBTixHQUFjclUsT0FBTyxDQUFDcVUsR0FBUixHQUFjdTFCLFNBQVMsQ0FBQ3YxQixHQUExQixHQUFrQ3MxQixNQUE5QztBQUNBOztBQUNELFVBQUszcEMsT0FBTyxDQUFDODNCLElBQVIsSUFBZ0IsSUFBckIsRUFBNEI7QUFDM0JqSyxhQUFLLENBQUNpSyxJQUFOLEdBQWU5M0IsT0FBTyxDQUFDODNCLElBQVIsR0FBZThSLFNBQVMsQ0FBQzlSLElBQTNCLEdBQW9DMlIsT0FBakQ7QUFDQTs7QUFFRCxVQUFLLFdBQVd6cEMsT0FBaEIsRUFBMEI7QUFDekJBLGVBQU8sQ0FBQ2dxQyxLQUFSLENBQWNydEMsSUFBZCxDQUFvQnpDLElBQXBCLEVBQTBCMnpCLEtBQTFCO0FBRUEsT0FIRCxNQUdPO0FBQ04sWUFBSyxPQUFPQSxLQUFLLENBQUN4WixHQUFiLEtBQXFCLFFBQTFCLEVBQXFDO0FBQ3BDd1osZUFBSyxDQUFDeFosR0FBTixJQUFhLElBQWI7QUFDQTs7QUFDRCxZQUFLLE9BQU93WixLQUFLLENBQUNpSyxJQUFiLEtBQXNCLFFBQTNCLEVBQXNDO0FBQ3JDakssZUFBSyxDQUFDaUssSUFBTixJQUFjLElBQWQ7QUFDQTs7QUFDRGlTLGVBQU8sQ0FBQ25qQixHQUFSLENBQWFpSCxLQUFiO0FBQ0E7QUFDRDtBQXZEYyxHQUFoQjtBQTBEQWh1QixRQUFNLENBQUM4SCxFQUFQLENBQVU5TCxNQUFWLENBQWtCO0FBRWpCO0FBQ0F5dEMsVUFBTSxFQUFFLFVBQVV0cEMsT0FBVixFQUFvQjtBQUUzQjtBQUNBLFVBQUszQixTQUFTLENBQUN0RSxNQUFmLEVBQXdCO0FBQ3ZCLGVBQU9pRyxPQUFPLEtBQUt2RCxTQUFaLEdBQ04sSUFETSxHQUVOLEtBQUtnTyxJQUFMLENBQVcsVUFBVTNRLENBQVYsRUFBYztBQUN4QitGLGdCQUFNLENBQUN5cEMsTUFBUCxDQUFjQyxTQUFkLENBQXlCLElBQXpCLEVBQStCdnBDLE9BQS9CLEVBQXdDbEcsQ0FBeEM7QUFDQSxTQUZELENBRkQ7QUFLQTs7QUFFRCxVQUFJbXdDLElBQUo7QUFBQSxVQUFVQyxHQUFWO0FBQUEsVUFDQ2h3QyxJQUFJLEdBQUcsS0FBTSxDQUFOLENBRFI7O0FBR0EsVUFBSyxDQUFDQSxJQUFOLEVBQWE7QUFDWjtBQUNBLE9BaEIwQixDQWtCM0I7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFVBQUssQ0FBQ0EsSUFBSSxDQUFDbTlCLGNBQUwsR0FBc0J0OUIsTUFBNUIsRUFBcUM7QUFDcEMsZUFBTztBQUFFc2EsYUFBRyxFQUFFLENBQVA7QUFBVXlqQixjQUFJLEVBQUU7QUFBaEIsU0FBUDtBQUNBLE9BeEIwQixDQTBCM0I7OztBQUNBbVMsVUFBSSxHQUFHL3ZDLElBQUksQ0FBQzA5QixxQkFBTCxFQUFQO0FBQ0FzUyxTQUFHLEdBQUdod0MsSUFBSSxDQUFDMFgsYUFBTCxDQUFtQndDLFdBQXpCO0FBQ0EsYUFBTztBQUNOQyxXQUFHLEVBQUU0MUIsSUFBSSxDQUFDNTFCLEdBQUwsR0FBVzYxQixHQUFHLENBQUNDLFdBRGQ7QUFFTnJTLFlBQUksRUFBRW1TLElBQUksQ0FBQ25TLElBQUwsR0FBWW9TLEdBQUcsQ0FBQ0U7QUFGaEIsT0FBUDtBQUlBLEtBcENnQjtBQXNDakI7QUFDQTtBQUNBclcsWUFBUSxFQUFFLFlBQVc7QUFDcEIsVUFBSyxDQUFDLEtBQU0sQ0FBTixDQUFOLEVBQWtCO0FBQ2pCO0FBQ0E7O0FBRUQsVUFBSXNXLFlBQUo7QUFBQSxVQUFrQmYsTUFBbEI7QUFBQSxVQUEwQi8vQixHQUExQjtBQUFBLFVBQ0NyUCxJQUFJLEdBQUcsS0FBTSxDQUFOLENBRFI7QUFBQSxVQUVDb3dDLFlBQVksR0FBRztBQUFFajJCLFdBQUcsRUFBRSxDQUFQO0FBQVV5akIsWUFBSSxFQUFFO0FBQWhCLE9BRmhCLENBTG9CLENBU3BCOztBQUNBLFVBQUtqNEIsTUFBTSxDQUFDK21CLEdBQVAsQ0FBWTFzQixJQUFaLEVBQWtCLFVBQWxCLE1BQW1DLE9BQXhDLEVBQWtEO0FBRWpEO0FBQ0FvdkMsY0FBTSxHQUFHcHZDLElBQUksQ0FBQzA5QixxQkFBTCxFQUFUO0FBRUEsT0FMRCxNQUtPO0FBQ04wUixjQUFNLEdBQUcsS0FBS0EsTUFBTCxFQUFULENBRE0sQ0FHTjtBQUNBOztBQUNBLy9CLFdBQUcsR0FBR3JQLElBQUksQ0FBQzBYLGFBQVg7QUFDQXk0QixvQkFBWSxHQUFHbndDLElBQUksQ0FBQ213QyxZQUFMLElBQXFCOWdDLEdBQUcsQ0FBQ2xILGVBQXhDOztBQUNBLGVBQVFnb0MsWUFBWSxLQUNqQkEsWUFBWSxLQUFLOWdDLEdBQUcsQ0FBQ3RNLElBQXJCLElBQTZCb3RDLFlBQVksS0FBSzlnQyxHQUFHLENBQUNsSCxlQURqQyxDQUFaLElBRVB4QyxNQUFNLENBQUMrbUIsR0FBUCxDQUFZeWpCLFlBQVosRUFBMEIsVUFBMUIsTUFBMkMsUUFGNUMsRUFFdUQ7QUFFdERBLHNCQUFZLEdBQUdBLFlBQVksQ0FBQ3R0QyxVQUE1QjtBQUNBOztBQUNELFlBQUtzdEMsWUFBWSxJQUFJQSxZQUFZLEtBQUtud0MsSUFBakMsSUFBeUNtd0MsWUFBWSxDQUFDMW5DLFFBQWIsS0FBMEIsQ0FBeEUsRUFBNEU7QUFFM0U7QUFDQTJuQyxzQkFBWSxHQUFHenFDLE1BQU0sQ0FBRXdxQyxZQUFGLENBQU4sQ0FBdUJmLE1BQXZCLEVBQWY7QUFDQWdCLHNCQUFZLENBQUNqMkIsR0FBYixJQUFvQnhVLE1BQU0sQ0FBQyttQixHQUFQLENBQVl5akIsWUFBWixFQUEwQixnQkFBMUIsRUFBNEMsSUFBNUMsQ0FBcEI7QUFDQUMsc0JBQVksQ0FBQ3hTLElBQWIsSUFBcUJqNEIsTUFBTSxDQUFDK21CLEdBQVAsQ0FBWXlqQixZQUFaLEVBQTBCLGlCQUExQixFQUE2QyxJQUE3QyxDQUFyQjtBQUNBO0FBQ0QsT0FuQ21CLENBcUNwQjs7O0FBQ0EsYUFBTztBQUNOaDJCLFdBQUcsRUFBRWkxQixNQUFNLENBQUNqMUIsR0FBUCxHQUFhaTJCLFlBQVksQ0FBQ2oyQixHQUExQixHQUFnQ3hVLE1BQU0sQ0FBQyttQixHQUFQLENBQVkxc0IsSUFBWixFQUFrQixXQUFsQixFQUErQixJQUEvQixDQUQvQjtBQUVONDlCLFlBQUksRUFBRXdSLE1BQU0sQ0FBQ3hSLElBQVAsR0FBY3dTLFlBQVksQ0FBQ3hTLElBQTNCLEdBQWtDajRCLE1BQU0sQ0FBQyttQixHQUFQLENBQVkxc0IsSUFBWixFQUFrQixZQUFsQixFQUFnQyxJQUFoQztBQUZsQyxPQUFQO0FBSUEsS0FsRmdCO0FBb0ZqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBbXdDLGdCQUFZLEVBQUUsWUFBVztBQUN4QixhQUFPLEtBQUszL0IsR0FBTCxDQUFVLFlBQVc7QUFDM0IsWUFBSTIvQixZQUFZLEdBQUcsS0FBS0EsWUFBeEI7O0FBRUEsZUFBUUEsWUFBWSxJQUFJeHFDLE1BQU0sQ0FBQyttQixHQUFQLENBQVl5akIsWUFBWixFQUEwQixVQUExQixNQUEyQyxRQUFuRSxFQUE4RTtBQUM3RUEsc0JBQVksR0FBR0EsWUFBWSxDQUFDQSxZQUE1QjtBQUNBOztBQUVELGVBQU9BLFlBQVksSUFBSWhvQyxlQUF2QjtBQUNBLE9BUk0sQ0FBUDtBQVNBO0FBeEdnQixHQUFsQixFQXhzVWlGLENBbXpVakY7O0FBQ0F4QyxRQUFNLENBQUM0SyxJQUFQLENBQWE7QUFBRXV1QixjQUFVLEVBQUUsYUFBZDtBQUE2QkQsYUFBUyxFQUFFO0FBQXhDLEdBQWIsRUFBc0UsVUFBVTkrQixNQUFWLEVBQWtCK0IsSUFBbEIsRUFBeUI7QUFDOUYsUUFBSXFZLEdBQUcsR0FBRyxrQkFBa0JyWSxJQUE1Qjs7QUFFQTZELFVBQU0sQ0FBQzhILEVBQVAsQ0FBVzFOLE1BQVgsSUFBc0IsVUFBVXVQLEdBQVYsRUFBZ0I7QUFDckMsYUFBT3FhLE1BQU0sQ0FBRSxJQUFGLEVBQVEsVUFBVTNwQixJQUFWLEVBQWdCRCxNQUFoQixFQUF3QnVQLEdBQXhCLEVBQThCO0FBRWxEO0FBQ0EsWUFBSTBnQyxHQUFKOztBQUNBLFlBQUtsaEMsUUFBUSxDQUFFOU8sSUFBRixDQUFiLEVBQXdCO0FBQ3ZCZ3dDLGFBQUcsR0FBR2h3QyxJQUFOO0FBQ0EsU0FGRCxNQUVPLElBQUtBLElBQUksQ0FBQ3lJLFFBQUwsS0FBa0IsQ0FBdkIsRUFBMkI7QUFDakN1bkMsYUFBRyxHQUFHaHdDLElBQUksQ0FBQ2thLFdBQVg7QUFDQTs7QUFFRCxZQUFLNUssR0FBRyxLQUFLL00sU0FBYixFQUF5QjtBQUN4QixpQkFBT3l0QyxHQUFHLEdBQUdBLEdBQUcsQ0FBRWx1QyxJQUFGLENBQU4sR0FBaUI5QixJQUFJLENBQUVELE1BQUYsQ0FBL0I7QUFDQTs7QUFFRCxZQUFLaXdDLEdBQUwsRUFBVztBQUNWQSxhQUFHLENBQUNLLFFBQUosQ0FDQyxDQUFDbDJCLEdBQUQsR0FBTzdLLEdBQVAsR0FBYTBnQyxHQUFHLENBQUNFLFdBRGxCLEVBRUMvMUIsR0FBRyxHQUFHN0ssR0FBSCxHQUFTMGdDLEdBQUcsQ0FBQ0MsV0FGakI7QUFLQSxTQU5ELE1BTU87QUFDTmp3QyxjQUFJLENBQUVELE1BQUYsQ0FBSixHQUFpQnVQLEdBQWpCO0FBQ0E7QUFDRCxPQXZCWSxFQXVCVnZQLE1BdkJVLEVBdUJGdVAsR0F2QkUsRUF1QkduTCxTQUFTLENBQUN0RSxNQXZCYixDQUFiO0FBd0JBLEtBekJEO0FBMEJBLEdBN0JELEVBcHpVaUYsQ0FtMVVqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E4RixRQUFNLENBQUM0SyxJQUFQLENBQWEsQ0FBRSxLQUFGLEVBQVMsTUFBVCxDQUFiLEVBQWdDLFVBQVVzQyxFQUFWLEVBQWMvUSxJQUFkLEVBQXFCO0FBQ3BENkQsVUFBTSxDQUFDeTNCLFFBQVAsQ0FBaUJ0N0IsSUFBakIsSUFBMEJvNUIsWUFBWSxDQUFFdHNCLE9BQU8sQ0FBQ3lyQixhQUFWLEVBQ3JDLFVBQVVyNkIsSUFBVixFQUFnQjg2QixRQUFoQixFQUEyQjtBQUMxQixVQUFLQSxRQUFMLEVBQWdCO0FBQ2ZBLGdCQUFRLEdBQUdELE1BQU0sQ0FBRTc2QixJQUFGLEVBQVE4QixJQUFSLENBQWpCLENBRGUsQ0FHZjs7QUFDQSxlQUFPKzJCLFNBQVMsQ0FBQzdnQixJQUFWLENBQWdCOGlCLFFBQWhCLElBQ05uMUIsTUFBTSxDQUFFM0YsSUFBRixDQUFOLENBQWU2NUIsUUFBZixHQUEyQi8zQixJQUEzQixJQUFvQyxJQUQ5QixHQUVOZzVCLFFBRkQ7QUFHQTtBQUNELEtBVm9DLENBQXRDO0FBWUEsR0FiRCxFQXoxVWlGLENBeTJVakY7O0FBQ0FuMUIsUUFBTSxDQUFDNEssSUFBUCxDQUFhO0FBQUUrL0IsVUFBTSxFQUFFLFFBQVY7QUFBb0JDLFNBQUssRUFBRTtBQUEzQixHQUFiLEVBQW1ELFVBQVVuL0IsSUFBVixFQUFnQmhPLElBQWhCLEVBQXVCO0FBQ3pFdUMsVUFBTSxDQUFDNEssSUFBUCxDQUFhO0FBQUV4SSxhQUFPLEVBQUUsVUFBVXFKLElBQXJCO0FBQTJCNlQsYUFBTyxFQUFFN2hCLElBQXBDO0FBQTBDLFVBQUksVUFBVWdPO0FBQXhELEtBQWIsRUFDQyxVQUFVby9CLFlBQVYsRUFBd0JDLFFBQXhCLEVBQW1DO0FBRW5DO0FBQ0E5cUMsWUFBTSxDQUFDOEgsRUFBUCxDQUFXZ2pDLFFBQVgsSUFBd0IsVUFBVTVTLE1BQVYsRUFBa0J2M0IsS0FBbEIsRUFBMEI7QUFDakQsWUFBSXNqQixTQUFTLEdBQUd6bEIsU0FBUyxDQUFDdEUsTUFBVixLQUFzQjJ3QyxZQUFZLElBQUksT0FBTzNTLE1BQVAsS0FBa0IsU0FBeEQsQ0FBaEI7QUFBQSxZQUNDakIsS0FBSyxHQUFHNFQsWUFBWSxLQUFNM1MsTUFBTSxLQUFLLElBQVgsSUFBbUJ2M0IsS0FBSyxLQUFLLElBQTdCLEdBQW9DLFFBQXBDLEdBQStDLFFBQXJELENBRHJCO0FBR0EsZUFBT3FqQixNQUFNLENBQUUsSUFBRixFQUFRLFVBQVUzcEIsSUFBVixFQUFnQm9ELElBQWhCLEVBQXNCa0QsS0FBdEIsRUFBOEI7QUFDbEQsY0FBSStJLEdBQUo7O0FBRUEsY0FBS1AsUUFBUSxDQUFFOU8sSUFBRixDQUFiLEVBQXdCO0FBRXZCO0FBQ0EsbUJBQU95d0MsUUFBUSxDQUFDOXZDLE9BQVQsQ0FBa0IsT0FBbEIsTUFBZ0MsQ0FBaEMsR0FDTlgsSUFBSSxDQUFFLFVBQVVvUixJQUFaLENBREUsR0FFTnBSLElBQUksQ0FBQzhDLFFBQUwsQ0FBY3FGLGVBQWQsQ0FBK0IsV0FBV2lKLElBQTFDLENBRkQ7QUFHQSxXQVRpRCxDQVdsRDs7O0FBQ0EsY0FBS3BSLElBQUksQ0FBQ3lJLFFBQUwsS0FBa0IsQ0FBdkIsRUFBMkI7QUFDMUI0RyxlQUFHLEdBQUdyUCxJQUFJLENBQUNtSSxlQUFYLENBRDBCLENBRzFCO0FBQ0E7O0FBQ0EsbUJBQU9FLElBQUksQ0FBQ2kwQixHQUFMLENBQ050OEIsSUFBSSxDQUFDK0MsSUFBTCxDQUFXLFdBQVdxTyxJQUF0QixDQURNLEVBQ3dCL0IsR0FBRyxDQUFFLFdBQVcrQixJQUFiLENBRDNCLEVBRU5wUixJQUFJLENBQUMrQyxJQUFMLENBQVcsV0FBV3FPLElBQXRCLENBRk0sRUFFd0IvQixHQUFHLENBQUUsV0FBVytCLElBQWIsQ0FGM0IsRUFHTi9CLEdBQUcsQ0FBRSxXQUFXK0IsSUFBYixDQUhHLENBQVA7QUFLQTs7QUFFRCxpQkFBTzlLLEtBQUssS0FBSy9ELFNBQVYsR0FFTjtBQUNBb0QsZ0JBQU0sQ0FBQyttQixHQUFQLENBQVkxc0IsSUFBWixFQUFrQm9ELElBQWxCLEVBQXdCdzVCLEtBQXhCLENBSE0sR0FLTjtBQUNBajNCLGdCQUFNLENBQUM4QixLQUFQLENBQWN6SCxJQUFkLEVBQW9Cb0QsSUFBcEIsRUFBMEJrRCxLQUExQixFQUFpQ3MyQixLQUFqQyxDQU5EO0FBT0EsU0EvQlksRUErQlZ4NUIsSUEvQlUsRUErQkp3bUIsU0FBUyxHQUFHaVUsTUFBSCxHQUFZdDdCLFNBL0JqQixFQStCNEJxbkIsU0EvQjVCLENBQWI7QUFnQ0EsT0FwQ0Q7QUFxQ0EsS0F6Q0Q7QUEwQ0EsR0EzQ0Q7QUE4Q0Fqa0IsUUFBTSxDQUFDNEssSUFBUCxDQUFhLENBQ1osV0FEWSxFQUVaLFVBRlksRUFHWixjQUhZLEVBSVosV0FKWSxFQUtaLGFBTFksRUFNWixVQU5ZLENBQWIsRUFPRyxVQUFVc0MsRUFBVixFQUFjelAsSUFBZCxFQUFxQjtBQUN2QnVDLFVBQU0sQ0FBQzhILEVBQVAsQ0FBV3JLLElBQVgsSUFBb0IsVUFBVXFLLEVBQVYsRUFBZTtBQUNsQyxhQUFPLEtBQUtwTixFQUFMLENBQVMrQyxJQUFULEVBQWVxSyxFQUFmLENBQVA7QUFDQSxLQUZEO0FBR0EsR0FYRDtBQWdCQTlILFFBQU0sQ0FBQzhILEVBQVAsQ0FBVTlMLE1BQVYsQ0FBa0I7QUFFakJnSixRQUFJLEVBQUUsVUFBVTJsQixLQUFWLEVBQWlCbHFCLElBQWpCLEVBQXVCcUgsRUFBdkIsRUFBNEI7QUFDakMsYUFBTyxLQUFLcE4sRUFBTCxDQUFTaXdCLEtBQVQsRUFBZ0IsSUFBaEIsRUFBc0JscUIsSUFBdEIsRUFBNEJxSCxFQUE1QixDQUFQO0FBQ0EsS0FKZ0I7QUFLakJpakMsVUFBTSxFQUFFLFVBQVVwZ0IsS0FBVixFQUFpQjdpQixFQUFqQixFQUFzQjtBQUM3QixhQUFPLEtBQUt4TSxHQUFMLENBQVVxdkIsS0FBVixFQUFpQixJQUFqQixFQUF1QjdpQixFQUF2QixDQUFQO0FBQ0EsS0FQZ0I7QUFTakJrakMsWUFBUSxFQUFFLFVBQVUxd0MsUUFBVixFQUFvQnF3QixLQUFwQixFQUEyQmxxQixJQUEzQixFQUFpQ3FILEVBQWpDLEVBQXNDO0FBQy9DLGFBQU8sS0FBS3BOLEVBQUwsQ0FBU2l3QixLQUFULEVBQWdCcndCLFFBQWhCLEVBQTBCbUcsSUFBMUIsRUFBZ0NxSCxFQUFoQyxDQUFQO0FBQ0EsS0FYZ0I7QUFZakJtakMsY0FBVSxFQUFFLFVBQVUzd0MsUUFBVixFQUFvQnF3QixLQUFwQixFQUEyQjdpQixFQUEzQixFQUFnQztBQUUzQztBQUNBLGFBQU90SixTQUFTLENBQUN0RSxNQUFWLEtBQXFCLENBQXJCLEdBQ04sS0FBS29CLEdBQUwsQ0FBVWhCLFFBQVYsRUFBb0IsSUFBcEIsQ0FETSxHQUVOLEtBQUtnQixHQUFMLENBQVVxdkIsS0FBVixFQUFpQnJ3QixRQUFRLElBQUksSUFBN0IsRUFBbUN3TixFQUFuQyxDQUZEO0FBR0EsS0FsQmdCO0FBb0JqQm9qQyxTQUFLLEVBQUUsVUFBVUMsTUFBVixFQUFrQkMsS0FBbEIsRUFBMEI7QUFDaEMsYUFBTyxLQUFLaGIsVUFBTCxDQUFpQithLE1BQWpCLEVBQTBCOWEsVUFBMUIsQ0FBc0MrYSxLQUFLLElBQUlELE1BQS9DLENBQVA7QUFDQTtBQXRCZ0IsR0FBbEI7QUF5QkFuckMsUUFBTSxDQUFDNEssSUFBUCxDQUFhLENBQUUsOERBQ2QsdUVBRGMsR0FFZCx5REFGWSxFQUVnRHFDLEtBRmhELENBRXVELEdBRnZELENBQWIsRUFHQyxVQUFVQyxFQUFWLEVBQWN6QixJQUFkLEVBQXFCO0FBRXBCO0FBQ0F6TCxVQUFNLENBQUM4SCxFQUFQLENBQVcyRCxJQUFYLElBQW9CLFVBQVVoTCxJQUFWLEVBQWdCcUgsRUFBaEIsRUFBcUI7QUFDeEMsYUFBT3RKLFNBQVMsQ0FBQ3RFLE1BQVYsR0FBbUIsQ0FBbkIsR0FDTixLQUFLUSxFQUFMLENBQVMrUSxJQUFULEVBQWUsSUFBZixFQUFxQmhMLElBQXJCLEVBQTJCcUgsRUFBM0IsQ0FETSxHQUVOLEtBQUsybEIsT0FBTCxDQUFjaGlCLElBQWQsQ0FGRDtBQUdBLEtBSkQ7QUFLQSxHQVhGLEVBajhVaUYsQ0FpOVVqRjtBQUNBOztBQUNBLE1BQUk4RCxLQUFLLEdBQUcsb0NBQVosQ0FuOVVpRixDQXE5VWpGO0FBQ0E7QUFDQTtBQUNBOztBQUNBdlAsUUFBTSxDQUFDcXJDLEtBQVAsR0FBZSxVQUFVdmpDLEVBQVYsRUFBY29DLE9BQWQsRUFBd0I7QUFDdEMsUUFBSWdMLEdBQUosRUFBU3haLElBQVQsRUFBZTJ2QyxLQUFmOztBQUVBLFFBQUssT0FBT25oQyxPQUFQLEtBQW1CLFFBQXhCLEVBQW1DO0FBQ2xDZ0wsU0FBRyxHQUFHcE4sRUFBRSxDQUFFb0MsT0FBRixDQUFSO0FBQ0FBLGFBQU8sR0FBR3BDLEVBQVY7QUFDQUEsUUFBRSxHQUFHb04sR0FBTDtBQUNBLEtBUHFDLENBU3RDO0FBQ0E7OztBQUNBLFFBQUssQ0FBQ2hNLFVBQVUsQ0FBRXBCLEVBQUYsQ0FBaEIsRUFBeUI7QUFDeEIsYUFBT2xMLFNBQVA7QUFDQSxLQWJxQyxDQWV0Qzs7O0FBQ0FsQixRQUFJLEdBQUdDLEtBQUssQ0FBQ21CLElBQU4sQ0FBWTBCLFNBQVosRUFBdUIsQ0FBdkIsQ0FBUDs7QUFDQTZzQyxTQUFLLEdBQUcsWUFBVztBQUNsQixhQUFPdmpDLEVBQUUsQ0FBQ2pNLEtBQUgsQ0FBVXFPLE9BQU8sSUFBSSxJQUFyQixFQUEyQnhPLElBQUksQ0FBQ29FLE1BQUwsQ0FBYW5FLEtBQUssQ0FBQ21CLElBQU4sQ0FBWTBCLFNBQVosQ0FBYixDQUEzQixDQUFQO0FBQ0EsS0FGRCxDQWpCc0MsQ0FxQnRDOzs7QUFDQTZzQyxTQUFLLENBQUN2K0IsSUFBTixHQUFhaEYsRUFBRSxDQUFDZ0YsSUFBSCxHQUFVaEYsRUFBRSxDQUFDZ0YsSUFBSCxJQUFXOU0sTUFBTSxDQUFDOE0sSUFBUCxFQUFsQztBQUVBLFdBQU91K0IsS0FBUDtBQUNBLEdBekJEOztBQTJCQXJyQyxRQUFNLENBQUNzckMsU0FBUCxHQUFtQixVQUFVQyxJQUFWLEVBQWlCO0FBQ25DLFFBQUtBLElBQUwsRUFBWTtBQUNYdnJDLFlBQU0sQ0FBQzRqQixTQUFQO0FBQ0EsS0FGRCxNQUVPO0FBQ041akIsWUFBTSxDQUFDbWUsS0FBUCxDQUFjLElBQWQ7QUFDQTtBQUNELEdBTkQ7O0FBT0FuZSxRQUFNLENBQUNyRCxPQUFQLEdBQWlCSCxLQUFLLENBQUNHLE9BQXZCO0FBQ0FxRCxRQUFNLENBQUN3ckMsU0FBUCxHQUFtQnByQyxJQUFJLENBQUNDLEtBQXhCO0FBQ0FMLFFBQU0sQ0FBQ3FGLFFBQVAsR0FBa0JBLFFBQWxCO0FBQ0FyRixRQUFNLENBQUNrSixVQUFQLEdBQW9CQSxVQUFwQjtBQUNBbEosUUFBTSxDQUFDbUosUUFBUCxHQUFrQkEsUUFBbEI7QUFDQW5KLFFBQU0sQ0FBQzRrQixTQUFQLEdBQW1CQSxTQUFuQjtBQUNBNWtCLFFBQU0sQ0FBQ3ZDLElBQVAsR0FBY3VNLE1BQWQ7QUFFQWhLLFFBQU0sQ0FBQ3F1QixHQUFQLEdBQWFsZ0IsSUFBSSxDQUFDa2dCLEdBQWxCOztBQUVBcnVCLFFBQU0sQ0FBQ3lyQyxTQUFQLEdBQW1CLFVBQVUvdUMsR0FBVixFQUFnQjtBQUVsQztBQUNBO0FBQ0E7QUFDQSxRQUFJZSxJQUFJLEdBQUd1QyxNQUFNLENBQUN2QyxJQUFQLENBQWFmLEdBQWIsQ0FBWDtBQUNBLFdBQU8sQ0FBRWUsSUFBSSxLQUFLLFFBQVQsSUFBcUJBLElBQUksS0FBSyxRQUFoQyxLQUVOO0FBQ0E7QUFDQTtBQUNBLEtBQUNxRCxLQUFLLENBQUVwRSxHQUFHLEdBQUdrRSxVQUFVLENBQUVsRSxHQUFGLENBQWxCLENBTFA7QUFNQSxHQVpEOztBQWNBc0QsUUFBTSxDQUFDMHJDLElBQVAsR0FBYyxVQUFVN2hDLElBQVYsRUFBaUI7QUFDOUIsV0FBT0EsSUFBSSxJQUFJLElBQVIsR0FDTixFQURNLEdBRU4sQ0FBRUEsSUFBSSxHQUFHLEVBQVQsRUFBYzVLLE9BQWQsQ0FBdUJzUSxLQUF2QixFQUE4QixFQUE5QixDQUZEO0FBR0EsR0FKRCxDQW5oVmlGLENBMmhWakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUEsTUFBSyxJQUFMLEVBQWtEO0FBQ2pEOVYscUNBQWtCLEVBQVosbUNBQWdCLFlBQVc7QUFDaEMsYUFBT3VHLE1BQVA7QUFDQSxLQUZLO0FBQUEsb0dBQU47QUFHQTs7QUFLRCxNQUVDO0FBQ0EyckMsU0FBTyxHQUFHcHlDLE1BQU0sQ0FBQ3lHLE1BSGxCO0FBQUEsTUFLQztBQUNBNHJDLElBQUUsR0FBR3J5QyxNQUFNLENBQUNnTCxDQU5iOztBQVFBdkUsUUFBTSxDQUFDNnJDLFVBQVAsR0FBb0IsVUFBVS8vQixJQUFWLEVBQWlCO0FBQ3BDLFFBQUt2UyxNQUFNLENBQUNnTCxDQUFQLEtBQWF2RSxNQUFsQixFQUEyQjtBQUMxQnpHLFlBQU0sQ0FBQ2dMLENBQVAsR0FBV3FuQyxFQUFYO0FBQ0E7O0FBRUQsUUFBSzkvQixJQUFJLElBQUl2UyxNQUFNLENBQUN5RyxNQUFQLEtBQWtCQSxNQUEvQixFQUF3QztBQUN2Q3pHLFlBQU0sQ0FBQ3lHLE1BQVAsR0FBZ0IyckMsT0FBaEI7QUFDQTs7QUFFRCxXQUFPM3JDLE1BQVA7QUFDQSxHQVZELENBempWaUYsQ0Fxa1ZqRjtBQUNBO0FBQ0E7OztBQUNBLE1BQUssT0FBT3FJLFFBQVAsS0FBb0IsV0FBekIsRUFBdUM7QUFDdEM5TyxVQUFNLENBQUN5RyxNQUFQLEdBQWdCekcsTUFBTSxDQUFDZ0wsQ0FBUCxHQUFXdkUsTUFBM0I7QUFDQTs7QUFLRCxTQUFPQSxNQUFQO0FBQ0MsQ0ExbVZELEU7Ozs7Ozs7Ozs7O0FDYkE7Ozs7Ozs7QUFRRSxXQUFVekcsTUFBVixFQUFrQkMsT0FBbEIsRUFBNEI7QUFDNUI7O0FBQ0E7O0FBQTJCO0FBQzNCLE1BQUssSUFBTCxFQUFpRDtBQUMvQztBQUNBQyxxQ0FBUSxDQUNKLG1GQURJLEVBRUosbUZBRkksQ0FBRixvQ0FJSkQsT0FKSTtBQUFBO0FBQUE7QUFBQSxvR0FBTjtBQUtELEdBUEQsTUFPTyxFQVlOO0FBRUYsQ0F4QkMsRUF3QkNELE1BeEJELEVBd0JTLFNBQVNDLE9BQVQsQ0FBa0JzeUMsUUFBbEIsRUFBNEJscEMsT0FBNUIsRUFBc0M7QUFFakQsZUFGaUQsQ0FJakQ7QUFFRTs7QUFDQSxNQUFJbXBDLE9BQU8sR0FBR0QsUUFBUSxDQUFDNW1DLE1BQVQsQ0FBZ0IsU0FBaEIsQ0FBZCxDQVArQyxDQVEvQzs7QUFDQTZtQyxTQUFPLENBQUNDLGFBQVIsQ0FBc0JDLFFBQXRCLEdBQWlDLFlBQWpDO0FBRUEsTUFBSXh4QyxLQUFLLEdBQUdzeEMsT0FBTyxDQUFDbHlDLFNBQXBCOztBQUVBWSxPQUFLLENBQUN5eEMsWUFBTixHQUFxQixZQUFXO0FBQzlCLFNBQUt0cEMsT0FBTDs7QUFDQSxTQUFLdXBDLGVBQUwsQ0FBc0IsYUFBdEIsRUFBcUMsWUFBckM7O0FBQ0EsU0FBS0EsZUFBTCxDQUFzQixRQUF0QixFQUFnQyxZQUFoQzs7QUFDQSxTQUFLQyxjQUFMLEdBSjhCLENBTTlCOztBQUNBLFNBQUtDLEtBQUwsR0FBYSxFQUFiOztBQUNBLFNBQU0sSUFBSXB5QyxDQUFDLEdBQUMsQ0FBWixFQUFlQSxDQUFDLEdBQUcsS0FBS3F5QyxJQUF4QixFQUE4QnJ5QyxDQUFDLEVBQS9CLEVBQW9DO0FBQ2xDLFdBQUtveUMsS0FBTCxDQUFXcHhDLElBQVgsQ0FBaUIsQ0FBakI7QUFDRDs7QUFFRCxTQUFLc3hDLElBQUwsR0FBWSxDQUFaO0FBQ0EsU0FBS0Msa0JBQUwsR0FBMEIsQ0FBMUI7QUFDRCxHQWREOztBQWdCQS94QyxPQUFLLENBQUMyeEMsY0FBTixHQUF1QixZQUFXO0FBQ2hDLFNBQUtLLGlCQUFMLEdBRGdDLENBRWhDOztBQUNBLFFBQUssQ0FBQyxLQUFLQyxXQUFYLEVBQXlCO0FBQ3ZCLFVBQUlDLFNBQVMsR0FBRyxLQUFLQyxLQUFMLENBQVcsQ0FBWCxDQUFoQjtBQUNBLFVBQUlDLGFBQWEsR0FBR0YsU0FBUyxJQUFJQSxTQUFTLENBQUMva0MsT0FBM0MsQ0FGdUIsQ0FHdkI7O0FBQ0EsV0FBSzhrQyxXQUFMLEdBQW1CRyxhQUFhLElBQUlqcUMsT0FBTyxDQUFFaXFDLGFBQUYsQ0FBUCxDQUF5Qm5yQyxVQUExQyxJQUNqQjtBQUNBLFdBQUtvckMsY0FGUDtBQUdEOztBQUVELFFBQUlKLFdBQVcsR0FBRyxLQUFLQSxXQUFMLElBQW9CLEtBQUtLLE1BQTNDLENBWmdDLENBY2hDOztBQUNBLFFBQUlELGNBQWMsR0FBRyxLQUFLQSxjQUFMLEdBQXNCLEtBQUtDLE1BQWhEO0FBQ0EsUUFBSVQsSUFBSSxHQUFHUSxjQUFjLEdBQUdKLFdBQTVCLENBaEJnQyxDQWlCaEM7O0FBQ0EsUUFBSXoxQixNQUFNLEdBQUd5MUIsV0FBVyxHQUFHSSxjQUFjLEdBQUdKLFdBQTVDLENBbEJnQyxDQW1CaEM7O0FBQ0EsUUFBSU0sVUFBVSxHQUFHLzFCLE1BQU0sSUFBSUEsTUFBTSxHQUFHLENBQW5CLEdBQXVCLE9BQXZCLEdBQWlDLE9BQWxEO0FBQ0FxMUIsUUFBSSxHQUFHNXBDLElBQUksQ0FBRXNxQyxVQUFGLENBQUosQ0FBb0JWLElBQXBCLENBQVA7QUFDQSxTQUFLQSxJQUFMLEdBQVk1cEMsSUFBSSxDQUFDaTBCLEdBQUwsQ0FBVTJWLElBQVYsRUFBZ0IsQ0FBaEIsQ0FBWjtBQUNELEdBdkJEOztBQXlCQTd4QyxPQUFLLENBQUNneUMsaUJBQU4sR0FBMEIsWUFBVztBQUNuQztBQUNBLFFBQUlRLFVBQVUsR0FBRyxLQUFLQyxVQUFMLENBQWdCLFVBQWhCLENBQWpCOztBQUNBLFFBQUl6WixTQUFTLEdBQUd3WixVQUFVLEdBQUcsS0FBS3JsQyxPQUFMLENBQWExSyxVQUFoQixHQUE2QixLQUFLMEssT0FBNUQsQ0FIbUMsQ0FJbkM7QUFDQTs7QUFDQSxRQUFJdkcsSUFBSSxHQUFHdUIsT0FBTyxDQUFFNndCLFNBQUYsQ0FBbEI7QUFDQSxTQUFLcVosY0FBTCxHQUFzQnpyQyxJQUFJLElBQUlBLElBQUksQ0FBQ0csVUFBbkM7QUFDRCxHQVJEOztBQVVBL0csT0FBSyxDQUFDMHlDLHNCQUFOLEdBQStCLFVBQVVDLElBQVYsRUFBaUI7QUFDOUNBLFFBQUksQ0FBQ3hxQyxPQUFMLEdBRDhDLENBRTlDOztBQUNBLFFBQUl5cUMsU0FBUyxHQUFHRCxJQUFJLENBQUMvckMsSUFBTCxDQUFVSyxVQUFWLEdBQXVCLEtBQUtnckMsV0FBNUM7QUFDQSxRQUFJTSxVQUFVLEdBQUdLLFNBQVMsSUFBSUEsU0FBUyxHQUFHLENBQXpCLEdBQTZCLE9BQTdCLEdBQXVDLE1BQXhELENBSjhDLENBSzlDOztBQUNBLFFBQUlDLE9BQU8sR0FBRzVxQyxJQUFJLENBQUVzcUMsVUFBRixDQUFKLENBQW9CSSxJQUFJLENBQUMvckMsSUFBTCxDQUFVSyxVQUFWLEdBQXVCLEtBQUtnckMsV0FBaEQsQ0FBZDtBQUNBWSxXQUFPLEdBQUc1cUMsSUFBSSxDQUFDNnFDLEdBQUwsQ0FBVUQsT0FBVixFQUFtQixLQUFLaEIsSUFBeEIsQ0FBVixDQVA4QyxDQVE5Qzs7QUFDQSxRQUFJa0IsWUFBWSxHQUFHLEtBQUtydEMsT0FBTCxDQUFhc3RDLGVBQWIsR0FDakIsMkJBRGlCLEdBQ2Esb0JBRGhDO0FBRUEsUUFBSUMsV0FBVyxHQUFHLEtBQU1GLFlBQU4sRUFBc0JGLE9BQXRCLEVBQStCRixJQUEvQixDQUFsQixDQVg4QyxDQVk5Qzs7QUFDQSxRQUFJbFosUUFBUSxHQUFHO0FBQ2J5WixPQUFDLEVBQUUsS0FBS2pCLFdBQUwsR0FBbUJnQixXQUFXLENBQUM3a0IsR0FEckI7QUFFYitrQixPQUFDLEVBQUVGLFdBQVcsQ0FBQ0U7QUFGRixLQUFmLENBYjhDLENBaUI5Qzs7QUFDQSxRQUFJQyxTQUFTLEdBQUdILFdBQVcsQ0FBQ0UsQ0FBWixHQUFnQlIsSUFBSSxDQUFDL3JDLElBQUwsQ0FBVU0sV0FBMUM7QUFDQSxRQUFJbXNDLE1BQU0sR0FBR1IsT0FBTyxHQUFHSSxXQUFXLENBQUM3a0IsR0FBbkM7O0FBQ0EsU0FBTSxJQUFJNXVCLENBQUMsR0FBR3l6QyxXQUFXLENBQUM3a0IsR0FBMUIsRUFBK0I1dUIsQ0FBQyxHQUFHNnpDLE1BQW5DLEVBQTJDN3pDLENBQUMsRUFBNUMsRUFBaUQ7QUFDL0MsV0FBS295QyxLQUFMLENBQVdweUMsQ0FBWCxJQUFnQjR6QyxTQUFoQjtBQUNEOztBQUVELFdBQU8zWixRQUFQO0FBQ0QsR0F6QkQ7O0FBMkJBejVCLE9BQUssQ0FBQ3N6QyxrQkFBTixHQUEyQixVQUFVVCxPQUFWLEVBQW9CO0FBQzdDLFFBQUlVLFFBQVEsR0FBRyxLQUFLQyxlQUFMLENBQXNCWCxPQUF0QixDQUFmLENBRDZDLENBRTdDOzs7QUFDQSxRQUFJWSxRQUFRLEdBQUd4ckMsSUFBSSxDQUFDNnFDLEdBQUwsQ0FBUzF4QyxLQUFULENBQWdCNkcsSUFBaEIsRUFBc0JzckMsUUFBdEIsQ0FBZjtBQUVBLFdBQU87QUFDTG5sQixTQUFHLEVBQUVtbEIsUUFBUSxDQUFDaHpDLE9BQVQsQ0FBa0JrekMsUUFBbEIsQ0FEQTtBQUVMTixPQUFDLEVBQUVNO0FBRkUsS0FBUDtBQUlELEdBVEQ7QUFXQTs7Ozs7O0FBSUF6ekMsT0FBSyxDQUFDd3pDLGVBQU4sR0FBd0IsVUFBVVgsT0FBVixFQUFvQjtBQUMxQyxRQUFLQSxPQUFPLEdBQUcsQ0FBZixFQUFtQjtBQUNqQjtBQUNBLGFBQU8sS0FBS2pCLEtBQVo7QUFDRDs7QUFFRCxRQUFJMkIsUUFBUSxHQUFHLEVBQWYsQ0FOMEMsQ0FPMUM7O0FBQ0EsUUFBSUcsVUFBVSxHQUFHLEtBQUs3QixJQUFMLEdBQVksQ0FBWixHQUFnQmdCLE9BQWpDLENBUjBDLENBUzFDOztBQUNBLFNBQU0sSUFBSXJ6QyxDQUFDLEdBQUcsQ0FBZCxFQUFpQkEsQ0FBQyxHQUFHazBDLFVBQXJCLEVBQWlDbDBDLENBQUMsRUFBbEMsRUFBdUM7QUFDckMrekMsY0FBUSxDQUFDL3pDLENBQUQsQ0FBUixHQUFjLEtBQUttMEMsYUFBTCxDQUFvQm4wQyxDQUFwQixFQUF1QnF6QyxPQUF2QixDQUFkO0FBQ0Q7O0FBQ0QsV0FBT1UsUUFBUDtBQUNELEdBZEQ7O0FBZ0JBdnpDLE9BQUssQ0FBQzJ6QyxhQUFOLEdBQXNCLFVBQVV2bEIsR0FBVixFQUFleWtCLE9BQWYsRUFBeUI7QUFDN0MsUUFBS0EsT0FBTyxHQUFHLENBQWYsRUFBbUI7QUFDakIsYUFBTyxLQUFLakIsS0FBTCxDQUFZeGpCLEdBQVosQ0FBUDtBQUNELEtBSDRDLENBSTdDOzs7QUFDQSxRQUFJd2xCLFVBQVUsR0FBRyxLQUFLaEMsS0FBTCxDQUFXMXdDLEtBQVgsQ0FBa0JrdEIsR0FBbEIsRUFBdUJBLEdBQUcsR0FBR3lrQixPQUE3QixDQUFqQixDQUw2QyxDQU03Qzs7QUFDQSxXQUFPNXFDLElBQUksQ0FBQ2kwQixHQUFMLENBQVM5NkIsS0FBVCxDQUFnQjZHLElBQWhCLEVBQXNCMnJDLFVBQXRCLENBQVA7QUFDRCxHQVJELENBMUgrQyxDQW9JL0M7OztBQUNBNXpDLE9BQUssQ0FBQzZ6Qyx5QkFBTixHQUFrQyxVQUFVaEIsT0FBVixFQUFtQkYsSUFBbkIsRUFBMEI7QUFDMUQsUUFBSXZrQixHQUFHLEdBQUcsS0FBSzJqQixrQkFBTCxHQUEwQixLQUFLRixJQUF6QztBQUNBLFFBQUlpQyxNQUFNLEdBQUdqQixPQUFPLEdBQUcsQ0FBVixJQUFlemtCLEdBQUcsR0FBR3lrQixPQUFOLEdBQWdCLEtBQUtoQixJQUFqRCxDQUYwRCxDQUcxRDs7QUFDQXpqQixPQUFHLEdBQUcwbEIsTUFBTSxHQUFHLENBQUgsR0FBTzFsQixHQUFuQixDQUowRCxDQUsxRDs7QUFDQSxRQUFJMmxCLE9BQU8sR0FBR3BCLElBQUksQ0FBQy9yQyxJQUFMLENBQVVLLFVBQVYsSUFBd0IwckMsSUFBSSxDQUFDL3JDLElBQUwsQ0FBVU0sV0FBaEQ7QUFDQSxTQUFLNnFDLGtCQUFMLEdBQTBCZ0MsT0FBTyxHQUFHM2xCLEdBQUcsR0FBR3lrQixPQUFULEdBQW1CLEtBQUtkLGtCQUF6RDtBQUVBLFdBQU87QUFDTDNqQixTQUFHLEVBQUVBLEdBREE7QUFFTCtrQixPQUFDLEVBQUUsS0FBS1EsYUFBTCxDQUFvQnZsQixHQUFwQixFQUF5QnlrQixPQUF6QjtBQUZFLEtBQVA7QUFJRCxHQWJEOztBQWVBN3lDLE9BQUssQ0FBQ2cwQyxZQUFOLEdBQXFCLFVBQVVDLEtBQVYsRUFBa0I7QUFDckMsUUFBSUMsU0FBUyxHQUFHL3JDLE9BQU8sQ0FBRThyQyxLQUFGLENBQXZCOztBQUNBLFFBQUlqRixNQUFNLEdBQUcsS0FBS21GLGlCQUFMLENBQXdCRixLQUF4QixDQUFiLENBRnFDLENBR3JDOzs7QUFDQSxRQUFJRyxZQUFZLEdBQUcsS0FBSzNCLFVBQUwsQ0FBZ0IsWUFBaEIsQ0FBbkI7O0FBQ0EsUUFBSTRCLE1BQU0sR0FBR0QsWUFBWSxHQUFHcEYsTUFBTSxDQUFDeFIsSUFBVixHQUFpQndSLE1BQU0sQ0FBQzFWLEtBQWpEO0FBQ0EsUUFBSWdiLEtBQUssR0FBR0QsTUFBTSxHQUFHSCxTQUFTLENBQUNqdEMsVUFBL0I7QUFDQSxRQUFJc3RDLFFBQVEsR0FBR3RzQyxJQUFJLENBQUN1c0MsS0FBTCxDQUFZSCxNQUFNLEdBQUcsS0FBS3BDLFdBQTFCLENBQWY7QUFDQXNDLFlBQVEsR0FBR3RzQyxJQUFJLENBQUNpMEIsR0FBTCxDQUFVLENBQVYsRUFBYXFZLFFBQWIsQ0FBWDtBQUNBLFFBQUlFLE9BQU8sR0FBR3hzQyxJQUFJLENBQUN1c0MsS0FBTCxDQUFZRixLQUFLLEdBQUcsS0FBS3JDLFdBQXpCLENBQWQsQ0FUcUMsQ0FVckM7O0FBQ0F3QyxXQUFPLElBQUlILEtBQUssR0FBRyxLQUFLckMsV0FBYixHQUEyQixDQUEzQixHQUErQixDQUExQztBQUNBd0MsV0FBTyxHQUFHeHNDLElBQUksQ0FBQzZxQyxHQUFMLENBQVUsS0FBS2pCLElBQUwsR0FBWSxDQUF0QixFQUF5QjRDLE9BQXpCLENBQVYsQ0FacUMsQ0FhckM7O0FBRUEsUUFBSUMsV0FBVyxHQUFHLEtBQUtqQyxVQUFMLENBQWdCLFdBQWhCLENBQWxCOztBQUNBLFFBQUlrQyxTQUFTLEdBQUcsQ0FBRUQsV0FBVyxHQUFHMUYsTUFBTSxDQUFDajFCLEdBQVYsR0FBZ0JpMUIsTUFBTSxDQUFDNEYsTUFBcEMsSUFDZFYsU0FBUyxDQUFDaHRDLFdBRFo7O0FBRUEsU0FBTSxJQUFJMUgsQ0FBQyxHQUFHKzBDLFFBQWQsRUFBd0IvMEMsQ0FBQyxJQUFJaTFDLE9BQTdCLEVBQXNDajFDLENBQUMsRUFBdkMsRUFBNEM7QUFDMUMsV0FBS295QyxLQUFMLENBQVdweUMsQ0FBWCxJQUFnQnlJLElBQUksQ0FBQ2kwQixHQUFMLENBQVV5WSxTQUFWLEVBQXFCLEtBQUsvQyxLQUFMLENBQVdweUMsQ0FBWCxDQUFyQixDQUFoQjtBQUNEO0FBQ0YsR0FyQkQ7O0FBdUJBUSxPQUFLLENBQUM2MEMsaUJBQU4sR0FBMEIsWUFBVztBQUNuQyxTQUFLL0MsSUFBTCxHQUFZN3BDLElBQUksQ0FBQ2kwQixHQUFMLENBQVM5NkIsS0FBVCxDQUFnQjZHLElBQWhCLEVBQXNCLEtBQUsycEMsS0FBM0IsQ0FBWjtBQUNBLFFBQUlockMsSUFBSSxHQUFHO0FBQ1RFLFlBQU0sRUFBRSxLQUFLZ3JDO0FBREosS0FBWDs7QUFJQSxRQUFLLEtBQUtXLFVBQUwsQ0FBZ0IsVUFBaEIsQ0FBTCxFQUFtQztBQUNqQzdyQyxVQUFJLENBQUNDLEtBQUwsR0FBYSxLQUFLaXVDLHFCQUFMLEVBQWI7QUFDRDs7QUFFRCxXQUFPbHVDLElBQVA7QUFDRCxHQVhEOztBQWFBNUcsT0FBSyxDQUFDODBDLHFCQUFOLEdBQThCLFlBQVc7QUFDdkMsUUFBSUMsVUFBVSxHQUFHLENBQWpCLENBRHVDLENBRXZDOztBQUNBLFFBQUl2MUMsQ0FBQyxHQUFHLEtBQUtxeUMsSUFBYjs7QUFDQSxXQUFRLEVBQUVyeUMsQ0FBVixFQUFjO0FBQ1osVUFBSyxLQUFLb3lDLEtBQUwsQ0FBV3B5QyxDQUFYLE1BQWtCLENBQXZCLEVBQTJCO0FBQ3pCO0FBQ0Q7O0FBQ0R1MUMsZ0JBQVU7QUFDWCxLQVRzQyxDQVV2Qzs7O0FBQ0EsV0FBTyxDQUFFLEtBQUtsRCxJQUFMLEdBQVlrRCxVQUFkLElBQTZCLEtBQUs5QyxXQUFsQyxHQUFnRCxLQUFLSyxNQUE1RDtBQUNELEdBWkQ7O0FBY0F0eUMsT0FBSyxDQUFDZzFDLGlCQUFOLEdBQTBCLFlBQVc7QUFDbkMsUUFBSUMsYUFBYSxHQUFHLEtBQUs1QyxjQUF6QjtBQUNBLFNBQUtMLGlCQUFMO0FBQ0EsV0FBT2lELGFBQWEsSUFBSSxLQUFLNUMsY0FBN0I7QUFDRCxHQUpEOztBQU1BLFNBQU9mLE9BQVA7QUFFRCxDQXRPQyxDQUFGLEM7Ozs7Ozs7Ozs7O0FDUkE7OztBQUlFLFdBQVV4eUMsTUFBVixFQUFrQkMsT0FBbEIsRUFBNEI7QUFDNUI7O0FBQ0E7O0FBQTJCO0FBQzNCLE1BQUssSUFBTCxFQUFpRDtBQUMvQztBQUNBQyxxQ0FBUSxDQUNKLDJGQURJLEVBRUosbUZBRkksQ0FBRixvQ0FJSkQsT0FKSTtBQUFBO0FBQUE7QUFBQSxvR0FBTjtBQU1ELEdBUkQsTUFRTyxFQWFOO0FBRUYsQ0ExQkMsRUEwQkNELE1BMUJELEVBMEJTLFNBQVNDLE9BQVQsQ0FBa0JnQixTQUFsQixFQUE2Qm9JLE9BQTdCLEVBQXVDO0FBQ2xELGVBRGtELENBR2xEOztBQUVBLFdBQVMrc0MsVUFBVCxDQUFxQmp6QyxHQUFyQixFQUEyQjtBQUN6QixTQUFNLElBQUlQLElBQVYsSUFBa0JPLEdBQWxCLEVBQXdCO0FBQ3RCLGFBQU8sS0FBUDtBQUNEOztBQUNEUCxRQUFJLEdBQUcsSUFBUDtBQUNBLFdBQU8sSUFBUDtBQUNELEdBWGlELENBYWxEOzs7QUFHQSxNQUFJeXpDLFlBQVksR0FBR3p5QyxRQUFRLENBQUNxRixlQUFULENBQXlCVixLQUE1QztBQUVBLE1BQUkrdEMsa0JBQWtCLEdBQUcsT0FBT0QsWUFBWSxDQUFDRSxVQUFwQixJQUFrQyxRQUFsQyxHQUN2QixZQUR1QixHQUNSLGtCQURqQjtBQUVBLE1BQUlDLGlCQUFpQixHQUFHLE9BQU9ILFlBQVksQ0FBQ0ksU0FBcEIsSUFBaUMsUUFBakMsR0FDdEIsV0FEc0IsR0FDUixpQkFEaEI7QUFHQSxNQUFJQyxrQkFBa0IsR0FBRztBQUN2QkMsb0JBQWdCLEVBQUUscUJBREs7QUFFdkJKLGNBQVUsRUFBRTtBQUZXLElBR3RCRCxrQkFIc0IsQ0FBekIsQ0F2QmtELENBNEJsRDs7QUFDQSxNQUFJTSxnQkFBZ0IsR0FBRztBQUNyQkgsYUFBUyxFQUFFRCxpQkFEVTtBQUVyQkQsY0FBVSxFQUFFRCxrQkFGUztBQUdyQk8sc0JBQWtCLEVBQUVQLGtCQUFrQixHQUFHLFVBSHBCO0FBSXJCQSxzQkFBa0IsRUFBRUEsa0JBQWtCLEdBQUcsVUFKcEI7QUFLckJRLG1CQUFlLEVBQUVSLGtCQUFrQixHQUFHO0FBTGpCLEdBQXZCLENBN0JrRCxDQXFDbEQ7O0FBRUEsV0FBU1MsSUFBVCxDQUFlMW9DLE9BQWYsRUFBd0Iyb0MsTUFBeEIsRUFBaUM7QUFDL0IsUUFBSyxDQUFDM29DLE9BQU4sRUFBZ0I7QUFDZDtBQUNEOztBQUVELFNBQUtBLE9BQUwsR0FBZUEsT0FBZixDQUwrQixDQU0vQjs7QUFDQSxTQUFLMm9DLE1BQUwsR0FBY0EsTUFBZDtBQUNBLFNBQUtyYyxRQUFMLEdBQWdCO0FBQ2R5WixPQUFDLEVBQUUsQ0FEVztBQUVkQyxPQUFDLEVBQUU7QUFGVyxLQUFoQjs7QUFLQSxTQUFLNEMsT0FBTDtBQUNELEdBckRpRCxDQXVEbEQ7OztBQUNBLE1BQUkvMUMsS0FBSyxHQUFHNjFDLElBQUksQ0FBQ3oyQyxTQUFMLEdBQWlCb0wsTUFBTSxDQUFDQyxNQUFQLENBQWUxSyxTQUFTLENBQUNYLFNBQXpCLENBQTdCO0FBQ0FZLE9BQUssQ0FBQzRQLFdBQU4sR0FBb0JpbUMsSUFBcEI7O0FBRUE3MUMsT0FBSyxDQUFDKzFDLE9BQU4sR0FBZ0IsWUFBVztBQUN6QjtBQUNBLFNBQUtDLE9BQUwsR0FBZTtBQUNiQyxtQkFBYSxFQUFFLEVBREY7QUFFYkMsV0FBSyxFQUFFLEVBRk07QUFHYkMsV0FBSyxFQUFFO0FBSE0sS0FBZjtBQU1BLFNBQUs3cEIsR0FBTCxDQUFTO0FBQ1BtTixjQUFRLEVBQUU7QUFESCxLQUFUO0FBR0QsR0FYRCxDQTNEa0QsQ0F3RWxEOzs7QUFDQXo1QixPQUFLLENBQUM4QyxXQUFOLEdBQW9CLFVBQVVDLEtBQVYsRUFBa0I7QUFDcEMsUUFBSXBELE1BQU0sR0FBRyxPQUFPb0QsS0FBSyxDQUFDQyxJQUExQjs7QUFDQSxRQUFLLEtBQU1yRCxNQUFOLENBQUwsRUFBc0I7QUFDcEIsV0FBTUEsTUFBTixFQUFnQm9ELEtBQWhCO0FBQ0Q7QUFDRixHQUxEOztBQU9BL0MsT0FBSyxDQUFDbUksT0FBTixHQUFnQixZQUFXO0FBQ3pCLFNBQUt2QixJQUFMLEdBQVl1QixPQUFPLENBQUUsS0FBS2dGLE9BQVAsQ0FBbkI7QUFDRCxHQUZEO0FBSUE7Ozs7OztBQUlBbk4sT0FBSyxDQUFDc3NCLEdBQU4sR0FBWSxVQUFVamxCLEtBQVYsRUFBa0I7QUFDNUIsUUFBSSt1QyxTQUFTLEdBQUcsS0FBS2pwQyxPQUFMLENBQWE5RixLQUE3Qjs7QUFFQSxTQUFNLElBQUkzRixJQUFWLElBQWtCMkYsS0FBbEIsRUFBMEI7QUFDeEI7QUFDQSxVQUFJZ3ZDLGFBQWEsR0FBR1gsZ0JBQWdCLENBQUVoMEMsSUFBRixDQUFoQixJQUE0QkEsSUFBaEQ7QUFDQTAwQyxlQUFTLENBQUVDLGFBQUYsQ0FBVCxHQUE2Qmh2QyxLQUFLLENBQUUzRixJQUFGLENBQWxDO0FBQ0Q7QUFDRixHQVJELENBeEZrRCxDQWtHakQ7OztBQUNEMUIsT0FBSyxDQUFDczJDLFdBQU4sR0FBb0IsWUFBVztBQUM3QixRQUFJanZDLEtBQUssR0FBR0MsZ0JBQWdCLENBQUUsS0FBSzZGLE9BQVAsQ0FBNUI7O0FBQ0EsUUFBSWluQyxZQUFZLEdBQUcsS0FBSzBCLE1BQUwsQ0FBWXJELFVBQVosQ0FBdUIsWUFBdkIsQ0FBbkI7O0FBQ0EsUUFBSWlDLFdBQVcsR0FBRyxLQUFLb0IsTUFBTCxDQUFZckQsVUFBWixDQUF1QixXQUF2QixDQUFsQjs7QUFDQSxRQUFJOEQsTUFBTSxHQUFHbHZDLEtBQUssQ0FBRStzQyxZQUFZLEdBQUcsTUFBSCxHQUFZLE9BQTFCLENBQWxCO0FBQ0EsUUFBSW9DLE1BQU0sR0FBR252QyxLQUFLLENBQUVxdEMsV0FBVyxHQUFHLEtBQUgsR0FBVyxRQUF4QixDQUFsQjtBQUNBLFFBQUl4QixDQUFDLEdBQUcvc0MsVUFBVSxDQUFFb3dDLE1BQUYsQ0FBbEI7QUFDQSxRQUFJcEQsQ0FBQyxHQUFHaHRDLFVBQVUsQ0FBRXF3QyxNQUFGLENBQWxCLENBUDZCLENBUTdCOztBQUNBLFFBQUlDLFVBQVUsR0FBRyxLQUFLWCxNQUFMLENBQVlsdkMsSUFBN0I7O0FBQ0EsUUFBSzJ2QyxNQUFNLENBQUNoMkMsT0FBUCxDQUFlLEdBQWYsS0FBdUIsQ0FBQyxDQUE3QixFQUFpQztBQUMvQjJ5QyxPQUFDLEdBQUtBLENBQUMsR0FBRyxHQUFOLEdBQWN1RCxVQUFVLENBQUM1dkMsS0FBN0I7QUFDRDs7QUFDRCxRQUFLMnZDLE1BQU0sQ0FBQ2oyQyxPQUFQLENBQWUsR0FBZixLQUF1QixDQUFDLENBQTdCLEVBQWlDO0FBQy9CNHlDLE9BQUMsR0FBS0EsQ0FBQyxHQUFHLEdBQU4sR0FBY3NELFVBQVUsQ0FBQzN2QyxNQUE3QjtBQUNELEtBZjRCLENBZ0I3Qjs7O0FBQ0Fvc0MsS0FBQyxHQUFHN3NDLEtBQUssQ0FBRTZzQyxDQUFGLENBQUwsR0FBYSxDQUFiLEdBQWlCQSxDQUFyQjtBQUNBQyxLQUFDLEdBQUc5c0MsS0FBSyxDQUFFOHNDLENBQUYsQ0FBTCxHQUFhLENBQWIsR0FBaUJBLENBQXJCLENBbEI2QixDQW1CN0I7O0FBQ0FELEtBQUMsSUFBSWtCLFlBQVksR0FBR3FDLFVBQVUsQ0FBQzl0QyxXQUFkLEdBQTRCOHRDLFVBQVUsQ0FBQzd0QyxZQUF4RDtBQUNBdXFDLEtBQUMsSUFBSXVCLFdBQVcsR0FBRytCLFVBQVUsQ0FBQzN0QyxVQUFkLEdBQTJCMnRDLFVBQVUsQ0FBQzF0QyxhQUF0RDtBQUVBLFNBQUswd0IsUUFBTCxDQUFjeVosQ0FBZCxHQUFrQkEsQ0FBbEI7QUFDQSxTQUFLelosUUFBTCxDQUFjMFosQ0FBZCxHQUFrQkEsQ0FBbEI7QUFDRCxHQXpCRCxDQW5Ha0QsQ0E4SGxEOzs7QUFDQW56QyxPQUFLLENBQUMwMkMsY0FBTixHQUF1QixZQUFXO0FBQ2hDLFFBQUlELFVBQVUsR0FBRyxLQUFLWCxNQUFMLENBQVlsdkMsSUFBN0I7QUFDQSxRQUFJUyxLQUFLLEdBQUcsRUFBWjs7QUFDQSxRQUFJK3NDLFlBQVksR0FBRyxLQUFLMEIsTUFBTCxDQUFZckQsVUFBWixDQUF1QixZQUF2QixDQUFuQjs7QUFDQSxRQUFJaUMsV0FBVyxHQUFHLEtBQUtvQixNQUFMLENBQVlyRCxVQUFaLENBQXVCLFdBQXZCLENBQWxCLENBSmdDLENBTWhDOzs7QUFDQSxRQUFJa0UsUUFBUSxHQUFHdkMsWUFBWSxHQUFHLGFBQUgsR0FBbUIsY0FBOUM7QUFDQSxRQUFJd0MsU0FBUyxHQUFHeEMsWUFBWSxHQUFHLE1BQUgsR0FBWSxPQUF4QztBQUNBLFFBQUl5QyxjQUFjLEdBQUd6QyxZQUFZLEdBQUcsT0FBSCxHQUFhLE1BQTlDO0FBRUEsUUFBSWxCLENBQUMsR0FBRyxLQUFLelosUUFBTCxDQUFjeVosQ0FBZCxHQUFrQnVELFVBQVUsQ0FBRUUsUUFBRixDQUFwQyxDQVhnQyxDQVloQzs7QUFDQXR2QyxTQUFLLENBQUV1dkMsU0FBRixDQUFMLEdBQXFCLEtBQUtFLFNBQUwsQ0FBZ0I1RCxDQUFoQixDQUFyQixDQWJnQyxDQWNoQzs7QUFDQTdyQyxTQUFLLENBQUV3dkMsY0FBRixDQUFMLEdBQTBCLEVBQTFCLENBZmdDLENBaUJoQzs7QUFDQSxRQUFJRSxRQUFRLEdBQUdyQyxXQUFXLEdBQUcsWUFBSCxHQUFrQixlQUE1QztBQUNBLFFBQUlzQyxTQUFTLEdBQUd0QyxXQUFXLEdBQUcsS0FBSCxHQUFXLFFBQXRDO0FBQ0EsUUFBSXVDLGNBQWMsR0FBR3ZDLFdBQVcsR0FBRyxRQUFILEdBQWMsS0FBOUM7QUFFQSxRQUFJdkIsQ0FBQyxHQUFHLEtBQUsxWixRQUFMLENBQWMwWixDQUFkLEdBQWtCc0QsVUFBVSxDQUFFTSxRQUFGLENBQXBDLENBdEJnQyxDQXVCaEM7O0FBQ0ExdkMsU0FBSyxDQUFFMnZDLFNBQUYsQ0FBTCxHQUFxQixLQUFLRSxTQUFMLENBQWdCL0QsQ0FBaEIsQ0FBckIsQ0F4QmdDLENBeUJoQzs7QUFDQTlyQyxTQUFLLENBQUU0dkMsY0FBRixDQUFMLEdBQTBCLEVBQTFCO0FBRUEsU0FBSzNxQixHQUFMLENBQVVqbEIsS0FBVjtBQUNBLFNBQUtyRyxTQUFMLENBQWdCLFFBQWhCLEVBQTBCLENBQUUsSUFBRixDQUExQjtBQUNELEdBOUJEOztBQWdDQWhCLE9BQUssQ0FBQzgyQyxTQUFOLEdBQWtCLFVBQVU1RCxDQUFWLEVBQWM7QUFDOUIsUUFBSWlFLFlBQVksR0FBRyxLQUFLckIsTUFBTCxDQUFZckQsVUFBWixDQUF1QixZQUF2QixDQUFuQjs7QUFDQSxXQUFPLEtBQUtxRCxNQUFMLENBQVlwd0MsT0FBWixDQUFvQjB4QyxlQUFwQixJQUF1QyxDQUFDRCxZQUF4QyxHQUNEakUsQ0FBQyxHQUFHLEtBQUs0QyxNQUFMLENBQVlsdkMsSUFBWixDQUFpQkMsS0FBdkIsR0FBaUMsR0FBbkMsR0FBMkMsR0FEdEMsR0FDNENxc0MsQ0FBQyxHQUFHLElBRHZEO0FBRUQsR0FKRDs7QUFNQWx6QyxPQUFLLENBQUNrM0MsU0FBTixHQUFrQixVQUFVL0QsQ0FBVixFQUFjO0FBQzlCLFFBQUlnRSxZQUFZLEdBQUcsS0FBS3JCLE1BQUwsQ0FBWXJELFVBQVosQ0FBdUIsWUFBdkIsQ0FBbkI7O0FBQ0EsV0FBTyxLQUFLcUQsTUFBTCxDQUFZcHdDLE9BQVosQ0FBb0IweEMsZUFBcEIsSUFBdUNELFlBQXZDLEdBQ0RoRSxDQUFDLEdBQUcsS0FBSzJDLE1BQUwsQ0FBWWx2QyxJQUFaLENBQWlCRSxNQUF2QixHQUFrQyxHQUFwQyxHQUE0QyxHQUR2QyxHQUM2Q3FzQyxDQUFDLEdBQUcsSUFEeEQ7QUFFRCxHQUpEOztBQU1BbnpDLE9BQUssQ0FBQ3EzQyxhQUFOLEdBQXNCLFVBQVVuRSxDQUFWLEVBQWFDLENBQWIsRUFBaUI7QUFDckMsU0FBS21ELFdBQUwsR0FEcUMsQ0FFckM7O0FBQ0EsUUFBSWdCLElBQUksR0FBRyxLQUFLN2QsUUFBTCxDQUFjeVosQ0FBekI7QUFDQSxRQUFJcUUsSUFBSSxHQUFHLEtBQUs5ZCxRQUFMLENBQWMwWixDQUF6QjtBQUVBLFFBQUlxRSxVQUFVLEdBQUd0RSxDQUFDLElBQUksS0FBS3paLFFBQUwsQ0FBY3laLENBQW5CLElBQXdCQyxDQUFDLElBQUksS0FBSzFaLFFBQUwsQ0FBYzBaLENBQTVELENBTnFDLENBUXJDOztBQUNBLFNBQUtzRSxXQUFMLENBQWtCdkUsQ0FBbEIsRUFBcUJDLENBQXJCLEVBVHFDLENBV3JDOztBQUNBLFFBQUtxRSxVQUFVLElBQUksQ0FBQyxLQUFLRSxlQUF6QixFQUEyQztBQUN6QyxXQUFLaEIsY0FBTDtBQUNBO0FBQ0Q7O0FBRUQsUUFBSWlCLE1BQU0sR0FBR3pFLENBQUMsR0FBR29FLElBQWpCO0FBQ0EsUUFBSU0sTUFBTSxHQUFHekUsQ0FBQyxHQUFHb0UsSUFBakI7QUFDQSxRQUFJTSxlQUFlLEdBQUcsRUFBdEI7QUFDQUEsbUJBQWUsQ0FBQ3RDLFNBQWhCLEdBQTRCLEtBQUt1QyxZQUFMLENBQW1CSCxNQUFuQixFQUEyQkMsTUFBM0IsQ0FBNUI7QUFFQSxTQUFLdkMsVUFBTCxDQUFnQjtBQUNkdlQsUUFBRSxFQUFFK1YsZUFEVTtBQUVkRSxxQkFBZSxFQUFFO0FBQ2Z4QyxpQkFBUyxFQUFFLEtBQUttQjtBQURELE9BRkg7QUFLZHNCLGdCQUFVLEVBQUU7QUFMRSxLQUFoQjtBQU9ELEdBN0JEOztBQStCQWg0QyxPQUFLLENBQUM4M0MsWUFBTixHQUFxQixVQUFVNUUsQ0FBVixFQUFhQyxDQUFiLEVBQWlCO0FBQ3BDO0FBQ0EsUUFBSWlCLFlBQVksR0FBRyxLQUFLMEIsTUFBTCxDQUFZckQsVUFBWixDQUF1QixZQUF2QixDQUFuQjs7QUFDQSxRQUFJaUMsV0FBVyxHQUFHLEtBQUtvQixNQUFMLENBQVlyRCxVQUFaLENBQXVCLFdBQXZCLENBQWxCOztBQUNBUyxLQUFDLEdBQUdrQixZQUFZLEdBQUdsQixDQUFILEdBQU8sQ0FBQ0EsQ0FBeEI7QUFDQUMsS0FBQyxHQUFHdUIsV0FBVyxHQUFHdkIsQ0FBSCxHQUFPLENBQUNBLENBQXZCO0FBQ0EsV0FBTyxpQkFBaUJELENBQWpCLEdBQXFCLE1BQXJCLEdBQThCQyxDQUE5QixHQUFrQyxRQUF6QztBQUNELEdBUEQsQ0ExTWtELENBbU5sRDs7O0FBQ0FuekMsT0FBSyxDQUFDaTRDLElBQU4sR0FBYSxVQUFVL0UsQ0FBVixFQUFhQyxDQUFiLEVBQWlCO0FBQzVCLFNBQUtzRSxXQUFMLENBQWtCdkUsQ0FBbEIsRUFBcUJDLENBQXJCO0FBQ0EsU0FBS3VELGNBQUw7QUFDRCxHQUhEOztBQUtBMTJDLE9BQUssQ0FBQ2s0QyxNQUFOLEdBQWVsNEMsS0FBSyxDQUFDcTNDLGFBQXJCOztBQUVBcjNDLE9BQUssQ0FBQ3kzQyxXQUFOLEdBQW9CLFVBQVV2RSxDQUFWLEVBQWFDLENBQWIsRUFBaUI7QUFDbkMsU0FBSzFaLFFBQUwsQ0FBY3laLENBQWQsR0FBa0Ivc0MsVUFBVSxDQUFFK3NDLENBQUYsQ0FBNUI7QUFDQSxTQUFLelosUUFBTCxDQUFjMFosQ0FBZCxHQUFrQmh0QyxVQUFVLENBQUVndEMsQ0FBRixDQUE1QjtBQUNELEdBSEQsQ0EzTmtELENBZ09sRDs7QUFFQTs7OztBQUtBOzs7QUFDQW56QyxPQUFLLENBQUNtNEMsY0FBTixHQUF1QixVQUFVbDNDLElBQVYsRUFBaUI7QUFDdEMsU0FBS3FyQixHQUFMLENBQVVyckIsSUFBSSxDQUFDNmdDLEVBQWY7O0FBQ0EsUUFBSzdnQyxJQUFJLENBQUMrMkMsVUFBVixFQUF1QjtBQUNyQixXQUFLSSxhQUFMLENBQW9CbjNDLElBQUksQ0FBQzZnQyxFQUF6QjtBQUNEOztBQUNELFNBQU0sSUFBSXBnQyxJQUFWLElBQWtCVCxJQUFJLENBQUM4MkMsZUFBdkIsRUFBeUM7QUFDdkM5MkMsVUFBSSxDQUFDODJDLGVBQUwsQ0FBc0JyMkMsSUFBdEIsRUFBNkJXLElBQTdCLENBQW1DLElBQW5DO0FBQ0Q7QUFDRixHQVJEO0FBVUE7Ozs7Ozs7Ozs7QUFRQXJDLE9BQUssQ0FBQ3ExQyxVQUFOLEdBQW1CLFVBQVVwMEMsSUFBVixFQUFpQjtBQUNsQztBQUNBLFFBQUssQ0FBQ2tGLFVBQVUsQ0FBRSxLQUFLMnZDLE1BQUwsQ0FBWXB3QyxPQUFaLENBQW9CaXdDLGtCQUF0QixDQUFoQixFQUE2RDtBQUMzRCxXQUFLd0MsY0FBTCxDQUFxQmwzQyxJQUFyQjs7QUFDQTtBQUNEOztBQUVELFFBQUlvM0MsV0FBVyxHQUFHLEtBQUtyQyxPQUF2QixDQVBrQyxDQVFsQzs7QUFDQSxTQUFNLElBQUl0MEMsSUFBVixJQUFrQlQsSUFBSSxDQUFDODJDLGVBQXZCLEVBQXlDO0FBQ3ZDTSxpQkFBVyxDQUFDbEMsS0FBWixDQUFtQnowQyxJQUFuQixJQUE0QlQsSUFBSSxDQUFDODJDLGVBQUwsQ0FBc0JyMkMsSUFBdEIsQ0FBNUI7QUFDRCxLQVhpQyxDQVlsQzs7O0FBQ0EsU0FBTUEsSUFBTixJQUFjVCxJQUFJLENBQUM2Z0MsRUFBbkIsRUFBd0I7QUFDdEJ1VyxpQkFBVyxDQUFDcEMsYUFBWixDQUEyQnYwQyxJQUEzQixJQUFvQyxJQUFwQyxDQURzQixDQUV0Qjs7QUFDQSxVQUFLVCxJQUFJLENBQUMrMkMsVUFBVixFQUF1QjtBQUNyQkssbUJBQVcsQ0FBQ25DLEtBQVosQ0FBbUJ4MEMsSUFBbkIsSUFBNEIsSUFBNUI7QUFDRDtBQUNGLEtBbkJpQyxDQXFCbEM7OztBQUNBLFFBQUtULElBQUksQ0FBQ3EzQyxJQUFWLEVBQWlCO0FBQ2YsV0FBS2hzQixHQUFMLENBQVVyckIsSUFBSSxDQUFDcTNDLElBQWYsRUFEZSxDQUVmOztBQUNBLFVBQUlDLENBQUMsR0FBRyxLQUFLcHJDLE9BQUwsQ0FBYTNFLFlBQXJCLENBSGUsQ0FJZjs7QUFDQSt2QyxPQUFDLEdBQUcsSUFBSjtBQUNELEtBNUJpQyxDQTZCbEM7OztBQUNBLFNBQUtDLGdCQUFMLENBQXVCdjNDLElBQUksQ0FBQzZnQyxFQUE1QixFQTlCa0MsQ0ErQmxDOztBQUNBLFNBQUt4VixHQUFMLENBQVVyckIsSUFBSSxDQUFDNmdDLEVBQWY7QUFFQSxTQUFLNFYsZUFBTCxHQUF1QixJQUF2QjtBQUVELEdBcENELENBMVBrRCxDQWdTbEQ7QUFDQTs7O0FBQ0EsV0FBU2UsV0FBVCxDQUFzQmwwQyxHQUF0QixFQUE0QjtBQUMxQixXQUFPQSxHQUFHLENBQUNDLE9BQUosQ0FBYSxVQUFiLEVBQXlCLFVBQVVFLEVBQVYsRUFBZTtBQUM3QyxhQUFPLE1BQU1BLEVBQUUsQ0FBQ0UsV0FBSCxFQUFiO0FBQ0QsS0FGTSxDQUFQO0FBR0Q7O0FBRUQsTUFBSTh6QyxlQUFlLEdBQUcsYUFBYUQsV0FBVyxDQUFFbkQsaUJBQUYsQ0FBOUM7O0FBRUF0MUMsT0FBSyxDQUFDdzRDLGdCQUFOLEdBQXlCO0FBQVM7QUFBYTtBQUM3QztBQUNBO0FBQ0EsUUFBSyxLQUFLZCxlQUFWLEVBQTRCO0FBQzFCO0FBQ0QsS0FMNEMsQ0FPN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFFBQUlyWixRQUFRLEdBQUcsS0FBS3lYLE1BQUwsQ0FBWXB3QyxPQUFaLENBQW9CaXdDLGtCQUFuQztBQUNBdFgsWUFBUSxHQUFHLE9BQU9BLFFBQVAsSUFBbUIsUUFBbkIsR0FBOEJBLFFBQVEsR0FBRyxJQUF6QyxHQUFnREEsUUFBM0QsQ0FsQjZDLENBbUI3Qzs7QUFDQSxTQUFLL1IsR0FBTCxDQUFTO0FBQ1A4b0Isd0JBQWtCLEVBQUVzRCxlQURiO0FBRVAvQyx3QkFBa0IsRUFBRXRYLFFBRmI7QUFHUHVYLHFCQUFlLEVBQUUsS0FBSytDLFlBQUwsSUFBcUI7QUFIL0IsS0FBVCxFQXBCNkMsQ0F5QjdDOztBQUNBLFNBQUt4ckMsT0FBTCxDQUFhOUksZ0JBQWIsQ0FBK0JteEMsa0JBQS9CLEVBQW1ELElBQW5ELEVBQXlELEtBQXpEO0FBQ0QsR0EzQkQsQ0ExU2tELENBdVVsRDs7O0FBRUF4MUMsT0FBSyxDQUFDNDRDLHFCQUFOLEdBQThCLFVBQVU3MUMsS0FBVixFQUFrQjtBQUM5QyxTQUFLODFDLGVBQUwsQ0FBc0I5MUMsS0FBdEI7QUFDRCxHQUZEOztBQUlBL0MsT0FBSyxDQUFDODRDLGdCQUFOLEdBQXlCLFVBQVUvMUMsS0FBVixFQUFrQjtBQUN6QyxTQUFLODFDLGVBQUwsQ0FBc0I5MUMsS0FBdEI7QUFDRCxHQUZELENBN1VrRCxDQWlWbEQ7OztBQUNBLE1BQUlnMkMsc0JBQXNCLEdBQUc7QUFDM0IseUJBQXFCO0FBRE0sR0FBN0I7O0FBSUEvNEMsT0FBSyxDQUFDNjRDLGVBQU4sR0FBd0IsVUFBVTkxQyxLQUFWLEVBQWtCO0FBQ3hDO0FBQ0EsUUFBS0EsS0FBSyxDQUFDcU8sTUFBTixLQUFpQixLQUFLakUsT0FBM0IsRUFBcUM7QUFDbkM7QUFDRDs7QUFDRCxRQUFJa3JDLFdBQVcsR0FBRyxLQUFLckMsT0FBdkIsQ0FMd0MsQ0FNeEM7O0FBQ0EsUUFBSWdELFlBQVksR0FBR0Qsc0JBQXNCLENBQUVoMkMsS0FBSyxDQUFDaTJDLFlBQVIsQ0FBdEIsSUFBZ0RqMkMsS0FBSyxDQUFDaTJDLFlBQXpFLENBUHdDLENBU3hDOztBQUNBLFdBQU9YLFdBQVcsQ0FBQ3BDLGFBQVosQ0FBMkIrQyxZQUEzQixDQUFQLENBVndDLENBV3hDOztBQUNBLFFBQUs5RCxVQUFVLENBQUVtRCxXQUFXLENBQUNwQyxhQUFkLENBQWYsRUFBK0M7QUFDN0M7QUFDQSxXQUFLZ0QsaUJBQUw7QUFDRCxLQWZ1QyxDQWdCeEM7OztBQUNBLFFBQUtELFlBQVksSUFBSVgsV0FBVyxDQUFDbkMsS0FBakMsRUFBeUM7QUFDdkM7QUFDQSxXQUFLL29DLE9BQUwsQ0FBYTlGLEtBQWIsQ0FBb0J0RSxLQUFLLENBQUNpMkMsWUFBMUIsSUFBMkMsRUFBM0M7QUFDQSxhQUFPWCxXQUFXLENBQUNuQyxLQUFaLENBQW1COEMsWUFBbkIsQ0FBUDtBQUNELEtBckJ1QyxDQXNCeEM7OztBQUNBLFFBQUtBLFlBQVksSUFBSVgsV0FBVyxDQUFDbEMsS0FBakMsRUFBeUM7QUFDdkMsVUFBSTRCLGVBQWUsR0FBR00sV0FBVyxDQUFDbEMsS0FBWixDQUFtQjZDLFlBQW5CLENBQXRCO0FBQ0FqQixxQkFBZSxDQUFDMTFDLElBQWhCLENBQXNCLElBQXRCO0FBQ0EsYUFBT2cyQyxXQUFXLENBQUNsQyxLQUFaLENBQW1CNkMsWUFBbkIsQ0FBUDtBQUNEOztBQUVELFNBQUtoNEMsU0FBTCxDQUFnQixlQUFoQixFQUFpQyxDQUFFLElBQUYsQ0FBakM7QUFDRCxHQTlCRDs7QUFnQ0FoQixPQUFLLENBQUNpNUMsaUJBQU4sR0FBMEIsWUFBVztBQUNuQyxTQUFLQyxzQkFBTDtBQUNBLFNBQUsvckMsT0FBTCxDQUFhRCxtQkFBYixDQUFrQ3NvQyxrQkFBbEMsRUFBc0QsSUFBdEQsRUFBNEQsS0FBNUQ7QUFDQSxTQUFLa0MsZUFBTCxHQUF1QixLQUF2QjtBQUNELEdBSkQ7QUFNQTs7Ozs7O0FBSUExM0MsT0FBSyxDQUFDbzRDLGFBQU4sR0FBc0IsVUFBVS93QyxLQUFWLEVBQWtCO0FBQ3RDO0FBQ0EsUUFBSTh4QyxVQUFVLEdBQUcsRUFBakI7O0FBQ0EsU0FBTSxJQUFJejNDLElBQVYsSUFBa0IyRixLQUFsQixFQUEwQjtBQUN4Qjh4QyxnQkFBVSxDQUFFejNDLElBQUYsQ0FBVixHQUFxQixFQUFyQjtBQUNEOztBQUNELFNBQUs0cUIsR0FBTCxDQUFVNnNCLFVBQVY7QUFDRCxHQVBEOztBQVNBLE1BQUlDLG9CQUFvQixHQUFHO0FBQ3pCaEUsc0JBQWtCLEVBQUUsRUFESztBQUV6Qk8sc0JBQWtCLEVBQUUsRUFGSztBQUd6QkMsbUJBQWUsRUFBRTtBQUhRLEdBQTNCOztBQU1BNTFDLE9BQUssQ0FBQ2s1QyxzQkFBTixHQUErQixZQUFXO0FBQ3hDO0FBQ0EsU0FBSzVzQixHQUFMLENBQVU4c0Isb0JBQVY7QUFDRCxHQUhELENBL1lrRCxDQW9abEQ7OztBQUVBcDVDLE9BQUssQ0FBQ3E1QyxPQUFOLEdBQWdCLFVBQVV2VyxLQUFWLEVBQWtCO0FBQ2hDQSxTQUFLLEdBQUd6OEIsS0FBSyxDQUFFeThCLEtBQUYsQ0FBTCxHQUFpQixDQUFqQixHQUFxQkEsS0FBN0I7QUFDQSxTQUFLNlYsWUFBTCxHQUFvQjdWLEtBQUssR0FBRyxJQUE1QjtBQUNELEdBSEQsQ0F0WmtELENBMlpsRDtBQUVBOzs7QUFDQTlpQyxPQUFLLENBQUNzNUMsVUFBTixHQUFtQixZQUFXO0FBQzVCLFNBQUtuc0MsT0FBTCxDQUFhMUssVUFBYixDQUF3QjJGLFdBQXhCLENBQXFDLEtBQUsrRSxPQUExQyxFQUQ0QixDQUU1Qjs7QUFDQSxTQUFLbWYsR0FBTCxDQUFTO0FBQUVoa0IsYUFBTyxFQUFFO0FBQVgsS0FBVDtBQUNBLFNBQUt0SCxTQUFMLENBQWdCLFFBQWhCLEVBQTBCLENBQUUsSUFBRixDQUExQjtBQUNELEdBTEQ7O0FBT0FoQixPQUFLLENBQUM2bEIsTUFBTixHQUFlLFlBQVc7QUFDeEI7QUFDQSxRQUFLLENBQUN1dkIsa0JBQUQsSUFBdUIsQ0FBQ2p2QyxVQUFVLENBQUUsS0FBSzJ2QyxNQUFMLENBQVlwd0MsT0FBWixDQUFvQml3QyxrQkFBdEIsQ0FBdkMsRUFBb0Y7QUFDbEYsV0FBSzJELFVBQUw7QUFDQTtBQUNELEtBTHVCLENBT3hCOzs7QUFDQSxTQUFLNzRDLElBQUwsQ0FBVyxlQUFYLEVBQTRCLFlBQVc7QUFDckMsV0FBSzY0QyxVQUFMO0FBQ0QsS0FGRDtBQUdBLFNBQUsvckIsSUFBTDtBQUNELEdBWkQ7O0FBY0F2dEIsT0FBSyxDQUFDdTVDLE1BQU4sR0FBZSxZQUFXO0FBQ3hCLFdBQU8sS0FBS0MsUUFBWixDQUR3QixDQUV4Qjs7QUFDQSxTQUFLbHRCLEdBQUwsQ0FBUztBQUFFaGtCLGFBQU8sRUFBRTtBQUFYLEtBQVQ7QUFFQSxRQUFJNUMsT0FBTyxHQUFHLEtBQUtvd0MsTUFBTCxDQUFZcHdDLE9BQTFCO0FBRUEsUUFBSXF5QyxlQUFlLEdBQUcsRUFBdEI7QUFDQSxRQUFJMEIscUJBQXFCLEdBQUcsS0FBS0Msa0NBQUwsQ0FBd0MsY0FBeEMsQ0FBNUI7QUFDQTNCLG1CQUFlLENBQUUwQixxQkFBRixDQUFmLEdBQTJDLEtBQUtFLHFCQUFoRDtBQUVBLFNBQUt0RSxVQUFMLENBQWdCO0FBQ2RpRCxVQUFJLEVBQUU1eUMsT0FBTyxDQUFDazBDLFdBREE7QUFFZDlYLFFBQUUsRUFBRXA4QixPQUFPLENBQUNtMEMsWUFGRTtBQUdkN0IsZ0JBQVUsRUFBRSxJQUhFO0FBSWRELHFCQUFlLEVBQUVBO0FBSkgsS0FBaEI7QUFNRCxHQWpCRDs7QUFtQkEvM0MsT0FBSyxDQUFDMjVDLHFCQUFOLEdBQThCLFlBQVc7QUFDdkM7QUFDQTtBQUNBLFFBQUssQ0FBQyxLQUFLSCxRQUFYLEVBQXNCO0FBQ3BCLFdBQUt4NEMsU0FBTCxDQUFlLFFBQWY7QUFDRDtBQUNGLEdBTkQ7QUFRQTs7Ozs7OztBQUtBaEIsT0FBSyxDQUFDMDVDLGtDQUFOLEdBQTJDLFVBQVVJLGFBQVYsRUFBMEI7QUFDbkUsUUFBSUMsV0FBVyxHQUFHLEtBQUtqRSxNQUFMLENBQVlwd0MsT0FBWixDQUFxQm8wQyxhQUFyQixDQUFsQixDQURtRSxDQUVuRTs7QUFDQSxRQUFLQyxXQUFXLENBQUM5YyxPQUFqQixFQUEyQjtBQUN6QixhQUFPLFNBQVA7QUFDRCxLQUxrRSxDQU1uRTs7O0FBQ0EsU0FBTSxJQUFJdjdCLElBQVYsSUFBa0JxNEMsV0FBbEIsRUFBZ0M7QUFDOUIsYUFBT3I0QyxJQUFQO0FBQ0Q7QUFDRixHQVZEOztBQVlBMUIsT0FBSyxDQUFDdXRCLElBQU4sR0FBYSxZQUFXO0FBQ3RCO0FBQ0EsU0FBS2lzQixRQUFMLEdBQWdCLElBQWhCLENBRnNCLENBR3RCOztBQUNBLFNBQUtsdEIsR0FBTCxDQUFTO0FBQUVoa0IsYUFBTyxFQUFFO0FBQVgsS0FBVDtBQUVBLFFBQUk1QyxPQUFPLEdBQUcsS0FBS293QyxNQUFMLENBQVlwd0MsT0FBMUI7QUFFQSxRQUFJcXlDLGVBQWUsR0FBRyxFQUF0QjtBQUNBLFFBQUkwQixxQkFBcUIsR0FBRyxLQUFLQyxrQ0FBTCxDQUF3QyxhQUF4QyxDQUE1QjtBQUNBM0IsbUJBQWUsQ0FBRTBCLHFCQUFGLENBQWYsR0FBMkMsS0FBS08sbUJBQWhEO0FBRUEsU0FBSzNFLFVBQUwsQ0FBZ0I7QUFDZGlELFVBQUksRUFBRTV5QyxPQUFPLENBQUNtMEMsWUFEQTtBQUVkL1gsUUFBRSxFQUFFcDhCLE9BQU8sQ0FBQ2swQyxXQUZFO0FBR2Q7QUFDQTVCLGdCQUFVLEVBQUUsSUFKRTtBQUtkRCxxQkFBZSxFQUFFQTtBQUxILEtBQWhCO0FBT0QsR0FuQkQ7O0FBcUJBLzNDLE9BQUssQ0FBQ2c2QyxtQkFBTixHQUE0QixZQUFXO0FBQ3JDO0FBQ0E7QUFDQSxRQUFLLEtBQUtSLFFBQVYsRUFBcUI7QUFDbkIsV0FBS2x0QixHQUFMLENBQVM7QUFBRWhrQixlQUFPLEVBQUU7QUFBWCxPQUFUO0FBQ0EsV0FBS3RILFNBQUwsQ0FBZSxNQUFmO0FBQ0Q7QUFDRixHQVBEOztBQVNBaEIsT0FBSyxDQUFDaTZDLE9BQU4sR0FBZ0IsWUFBVztBQUN6QixTQUFLM3RCLEdBQUwsQ0FBUztBQUNQbU4sY0FBUSxFQUFFLEVBREg7QUFFUCtELFVBQUksRUFBRSxFQUZDO0FBR1BsRSxXQUFLLEVBQUUsRUFIQTtBQUlQdmYsU0FBRyxFQUFFLEVBSkU7QUFLUDY2QixZQUFNLEVBQUUsRUFMRDtBQU1QUyxnQkFBVSxFQUFFLEVBTkw7QUFPUEUsZUFBUyxFQUFFO0FBUEosS0FBVDtBQVNELEdBVkQ7O0FBWUEsU0FBT00sSUFBUDtBQUVDLENBcmlCQyxDQUFGLEM7Ozs7Ozs7Ozs7O0FDSkE7Ozs7O0FBTUUsV0FBVS8yQyxNQUFWLEVBQWtCQyxPQUFsQixFQUE0QjtBQUM1QixlQUQ0QixDQUU1Qjs7QUFDQTs7QUFBMkI7O0FBQzNCLE1BQUssSUFBTCxFQUFpRDtBQUMvQztBQUNBQyxxQ0FBUSxDQUNKLDJGQURJLEVBRUosbUZBRkksRUFHSix5RkFISSxFQUlKLG9FQUpJLENBQUYsbUNBTUosVUFBVWUsU0FBVixFQUFxQm9JLE9BQXJCLEVBQThCN0csS0FBOUIsRUFBcUN1MEMsSUFBckMsRUFBNEM7QUFDMUMsYUFBTzkyQyxPQUFPLENBQUVELE1BQUYsRUFBVWlCLFNBQVYsRUFBcUJvSSxPQUFyQixFQUE4QjdHLEtBQTlCLEVBQXFDdTBDLElBQXJDLENBQWQ7QUFDRCxLQVJHO0FBQUEsb0dBQU47QUFVRCxHQVpELE1BWU8sRUFrQk47QUFFRixDQXBDQyxFQW9DQy8yQyxNQXBDRCxFQW9DUyxTQUFTQyxPQUFULENBQWtCRCxNQUFsQixFQUEwQmlCLFNBQTFCLEVBQXFDb0ksT0FBckMsRUFBOEM3RyxLQUE5QyxFQUFxRHUwQyxJQUFyRCxFQUE0RDtBQUN2RSxlQUR1RSxDQUd2RTs7QUFFQSxNQUFJaHhDLE9BQU8sR0FBRy9GLE1BQU0sQ0FBQytGLE9BQXJCO0FBQ0EsTUFBSVUsTUFBTSxHQUFHekcsTUFBTSxDQUFDeUcsTUFBcEI7O0FBQ0EsTUFBSWUsSUFBSSxHQUFHLFlBQVcsQ0FBRSxDQUF4QixDQVB1RSxDQVN2RTtBQUVBOzs7QUFDQSxNQUFJNHpDLElBQUksR0FBRyxDQUFYLENBWnVFLENBYXZFOztBQUNBLE1BQUlDLFNBQVMsR0FBRyxFQUFoQjtBQUdBOzs7Ozs7QUFLQSxXQUFTOUksUUFBVCxDQUFtQmxrQyxPQUFuQixFQUE0QnpILE9BQTVCLEVBQXNDO0FBQ3BDLFFBQUkwMEMsWUFBWSxHQUFHOTRDLEtBQUssQ0FBQ3NCLGVBQU4sQ0FBdUJ1SyxPQUF2QixDQUFuQjs7QUFDQSxRQUFLLENBQUNpdEMsWUFBTixFQUFxQjtBQUNuQixVQUFLdjFDLE9BQUwsRUFBZTtBQUNiQSxlQUFPLENBQUNnQixLQUFSLENBQWUscUJBQXFCLEtBQUsrSixXQUFMLENBQWlCNUssU0FBdEMsR0FDYixJQURhLElBQ0pvMUMsWUFBWSxJQUFJanRDLE9BRFosQ0FBZjtBQUVEOztBQUNEO0FBQ0Q7O0FBQ0QsU0FBS0EsT0FBTCxHQUFlaXRDLFlBQWYsQ0FUb0MsQ0FVcEM7O0FBQ0EsUUFBSzcwQyxNQUFMLEVBQWM7QUFDWixXQUFLODBDLFFBQUwsR0FBZ0I5MEMsTUFBTSxDQUFFLEtBQUs0SCxPQUFQLENBQXRCO0FBQ0QsS0FibUMsQ0FlcEM7OztBQUNBLFNBQUt6SCxPQUFMLEdBQWVwRSxLQUFLLENBQUNDLE1BQU4sQ0FBYyxFQUFkLEVBQWtCLEtBQUtxTyxXQUFMLENBQWlCMHFDLFFBQW5DLENBQWY7QUFDQSxTQUFLcnNCLE1BQUwsQ0FBYXZvQixPQUFiLEVBakJvQyxDQW1CcEM7O0FBQ0EsUUFBSThSLEVBQUUsR0FBRyxFQUFFMGlDLElBQVg7QUFDQSxTQUFLL3NDLE9BQUwsQ0FBYW90QyxZQUFiLEdBQTRCL2lDLEVBQTVCLENBckJvQyxDQXFCSjs7QUFDaEMyaUMsYUFBUyxDQUFFM2lDLEVBQUYsQ0FBVCxHQUFrQixJQUFsQixDQXRCb0MsQ0FzQlo7QUFFeEI7O0FBQ0EsU0FBS3UrQixPQUFMOztBQUVBLFFBQUl5RSxZQUFZLEdBQUcsS0FBSy9ILFVBQUwsQ0FBZ0IsWUFBaEIsQ0FBbkI7O0FBQ0EsUUFBSytILFlBQUwsRUFBb0I7QUFDbEIsV0FBSzFFLE1BQUw7QUFDRDtBQUNGLEdBckRzRSxDQXVEdkU7OztBQUNBekUsVUFBUSxDQUFDcnNDLFNBQVQsR0FBcUIsVUFBckI7QUFDQXFzQyxVQUFRLENBQUN3RSxJQUFULEdBQWdCQSxJQUFoQixDQXpEdUUsQ0EyRHZFOztBQUNBeEUsVUFBUSxDQUFDaUosUUFBVCxHQUFvQjtBQUNsQkcsa0JBQWMsRUFBRTtBQUNkaGhCLGNBQVEsRUFBRTtBQURJLEtBREU7QUFJbEJpaEIsY0FBVSxFQUFFLElBSk07QUFLbEJDLGNBQVUsRUFBRSxJQUxNO0FBTWxCQyxhQUFTLEVBQUUsSUFOTztBQU9sQkMsVUFBTSxFQUFFLElBUFU7QUFRbEJDLG1CQUFlLEVBQUUsSUFSQztBQVNsQjtBQUNBbkYsc0JBQWtCLEVBQUUsTUFWRjtBQVdsQmlFLGVBQVcsRUFBRTtBQUNYM2MsYUFBTyxFQUFFLENBREU7QUFFWHNZLGVBQVMsRUFBRTtBQUZBLEtBWEs7QUFlbEJzRSxnQkFBWSxFQUFFO0FBQ1o1YyxhQUFPLEVBQUUsQ0FERztBQUVac1ksZUFBUyxFQUFFO0FBRkM7QUFmSSxHQUFwQjtBQXFCQSxNQUFJdjFDLEtBQUssR0FBR3F4QyxRQUFRLENBQUNqeUMsU0FBckIsQ0FqRnVFLENBa0Z2RTs7QUFDQWtDLE9BQUssQ0FBQ0MsTUFBTixDQUFjdkIsS0FBZCxFQUFxQkQsU0FBUyxDQUFDWCxTQUEvQjtBQUVBOzs7OztBQUlBWSxPQUFLLENBQUNpdUIsTUFBTixHQUFlLFVBQVVnUyxJQUFWLEVBQWlCO0FBQzlCMytCLFNBQUssQ0FBQ0MsTUFBTixDQUFjLEtBQUttRSxPQUFuQixFQUE0QnU2QixJQUE1QjtBQUNELEdBRkQ7QUFJQTs7Ozs7QUFHQWpnQyxPQUFLLENBQUN5eUMsVUFBTixHQUFtQixVQUFVeGtCLE1BQVYsRUFBbUI7QUFDcEMsUUFBSThzQixTQUFTLEdBQUcsS0FBS25yQyxXQUFMLENBQWlCMmhDLGFBQWpCLENBQWdDdGpCLE1BQWhDLENBQWhCO0FBQ0EsV0FBTzhzQixTQUFTLElBQUksS0FBS3IxQyxPQUFMLENBQWNxMUMsU0FBZCxNQUE4QjU0QyxTQUEzQyxHQUNMLEtBQUt1RCxPQUFMLENBQWNxMUMsU0FBZCxDQURLLEdBQ3VCLEtBQUtyMUMsT0FBTCxDQUFjdW9CLE1BQWQsQ0FEOUI7QUFFRCxHQUpEOztBQU1Bb2pCLFVBQVEsQ0FBQ0UsYUFBVCxHQUF5QjtBQUN2QjtBQUNBbUosY0FBVSxFQUFFLGNBRlc7QUFHdkJNLGNBQVUsRUFBRSxjQUhXO0FBSXZCQyxpQkFBYSxFQUFFLGlCQUpRO0FBS3ZCTixjQUFVLEVBQUUsY0FMVztBQU12QkMsYUFBUyxFQUFFLGFBTlk7QUFPdkJDLFVBQU0sRUFBRSxlQVBlO0FBUXZCQyxtQkFBZSxFQUFFO0FBUk0sR0FBekI7O0FBV0E5NkMsT0FBSyxDQUFDKzFDLE9BQU4sR0FBZ0IsWUFBVztBQUN6QjtBQUNBLFNBQUttRixXQUFMLEdBRnlCLENBR3pCOztBQUNBLFNBQUtDLE1BQUwsR0FBYyxFQUFkO0FBQ0EsU0FBS2xILEtBQUwsQ0FBWSxLQUFLdnVDLE9BQUwsQ0FBYXV1QyxLQUF6QixFQUx5QixDQU16Qjs7QUFDQTN5QyxTQUFLLENBQUNDLE1BQU4sQ0FBYyxLQUFLNEwsT0FBTCxDQUFhOUYsS0FBM0IsRUFBa0MsS0FBSzNCLE9BQUwsQ0FBYSswQyxjQUEvQyxFQVB5QixDQVN6Qjs7QUFDQSxRQUFJVyxhQUFhLEdBQUcsS0FBSzNJLFVBQUwsQ0FBZ0IsUUFBaEIsQ0FBcEI7O0FBQ0EsUUFBSzJJLGFBQUwsRUFBcUI7QUFDbkIsV0FBS0MsVUFBTDtBQUNEO0FBQ0YsR0FkRCxDQWpIdUUsQ0FpSXZFOzs7QUFDQXI3QyxPQUFLLENBQUNrN0MsV0FBTixHQUFvQixZQUFXO0FBQzdCO0FBQ0EsU0FBSy9JLEtBQUwsR0FBYSxLQUFLbUosUUFBTCxDQUFlLEtBQUtudUMsT0FBTCxDQUFhaEMsUUFBNUIsQ0FBYjtBQUNELEdBSEQ7QUFNQTs7Ozs7OztBQUtBbkwsT0FBSyxDQUFDczdDLFFBQU4sR0FBaUIsVUFBVXA0QyxLQUFWLEVBQWtCO0FBRWpDLFFBQUlxNEMsU0FBUyxHQUFHLEtBQUtDLHVCQUFMLENBQThCdDRDLEtBQTlCLENBQWhCOztBQUNBLFFBQUkyeUMsSUFBSSxHQUFHLEtBQUtqbUMsV0FBTCxDQUFpQmltQyxJQUE1QixDQUhpQyxDQUtqQzs7QUFDQSxRQUFJMUQsS0FBSyxHQUFHLEVBQVo7O0FBQ0EsU0FBTSxJQUFJM3lDLENBQUMsR0FBQyxDQUFaLEVBQWVBLENBQUMsR0FBRys3QyxTQUFTLENBQUM5N0MsTUFBN0IsRUFBcUNELENBQUMsRUFBdEMsRUFBMkM7QUFDekMsVUFBSUksSUFBSSxHQUFHMjdDLFNBQVMsQ0FBQy83QyxDQUFELENBQXBCO0FBQ0EsVUFBSW16QyxJQUFJLEdBQUcsSUFBSWtELElBQUosQ0FBVWoyQyxJQUFWLEVBQWdCLElBQWhCLENBQVg7QUFDQXV5QyxXQUFLLENBQUMzeEMsSUFBTixDQUFZbXlDLElBQVo7QUFDRDs7QUFFRCxXQUFPUixLQUFQO0FBQ0QsR0FkRDtBQWdCQTs7Ozs7OztBQUtBbnlDLE9BQUssQ0FBQ3c3Qyx1QkFBTixHQUFnQyxVQUFVdDRDLEtBQVYsRUFBa0I7QUFDaEQsV0FBTzVCLEtBQUssQ0FBQzJCLGtCQUFOLENBQTBCQyxLQUExQixFQUFpQyxLQUFLd0MsT0FBTCxDQUFhKzFDLFlBQTlDLENBQVA7QUFDRCxHQUZEO0FBSUE7Ozs7OztBQUlBejdDLE9BQUssQ0FBQzA3QyxlQUFOLEdBQXdCLFlBQVc7QUFDakMsV0FBTyxLQUFLdkosS0FBTCxDQUFXL2hDLEdBQVgsQ0FBZ0IsVUFBVXVpQyxJQUFWLEVBQWlCO0FBQ3RDLGFBQU9BLElBQUksQ0FBQ3hsQyxPQUFaO0FBQ0QsS0FGTSxDQUFQO0FBR0QsR0FKRCxDQTFLdUUsQ0FnTHZFOztBQUVBOzs7OztBQUdBbk4sT0FBSyxDQUFDODFDLE1BQU4sR0FBZSxZQUFXO0FBQ3hCLFNBQUtyRSxZQUFMOztBQUNBLFNBQUtrSyxhQUFMLEdBRndCLENBSXhCOzs7QUFDQSxRQUFJVixhQUFhLEdBQUcsS0FBS3hJLFVBQUwsQ0FBZ0IsZUFBaEIsQ0FBcEI7O0FBQ0EsUUFBSW1KLFNBQVMsR0FBR1gsYUFBYSxLQUFLOTRDLFNBQWxCLEdBQ2Q4NEMsYUFEYyxHQUNFLENBQUMsS0FBS1ksZUFEeEI7QUFFQSxTQUFLQyxXQUFMLENBQWtCLEtBQUszSixLQUF2QixFQUE4QnlKLFNBQTlCLEVBUndCLENBVXhCOztBQUNBLFNBQUtDLGVBQUwsR0FBdUIsSUFBdkI7QUFDRCxHQVpELENBckx1RSxDQW1NdkU7OztBQUNBNzdDLE9BQUssQ0FBQys3QyxLQUFOLEdBQWMvN0MsS0FBSyxDQUFDODFDLE1BQXBCO0FBRUE7Ozs7QUFHQTkxQyxPQUFLLENBQUN5eEMsWUFBTixHQUFxQixZQUFXO0FBQzlCLFNBQUt0cEMsT0FBTDtBQUNELEdBRkQ7O0FBS0FuSSxPQUFLLENBQUNtSSxPQUFOLEdBQWdCLFlBQVc7QUFDekIsU0FBS3ZCLElBQUwsR0FBWXVCLE9BQU8sQ0FBRSxLQUFLZ0YsT0FBUCxDQUFuQjtBQUNELEdBRkQ7QUFJQTs7Ozs7Ozs7Ozs7O0FBVUFuTixPQUFLLENBQUMweEMsZUFBTixHQUF3QixVQUFVdnFDLFdBQVYsRUFBdUJQLElBQXZCLEVBQThCO0FBQ3BELFFBQUlxbkIsTUFBTSxHQUFHLEtBQUt2b0IsT0FBTCxDQUFjeUIsV0FBZCxDQUFiO0FBQ0EsUUFBSXZILElBQUo7O0FBQ0EsUUFBSyxDQUFDcXVCLE1BQU4sRUFBZTtBQUNiO0FBQ0EsV0FBTTltQixXQUFOLElBQXNCLENBQXRCO0FBQ0QsS0FIRCxNQUdPO0FBQ0w7QUFDQSxVQUFLLE9BQU84bUIsTUFBUCxJQUFpQixRQUF0QixFQUFpQztBQUMvQnJ1QixZQUFJLEdBQUcsS0FBS3VOLE9BQUwsQ0FBYXRLLGFBQWIsQ0FBNEJvckIsTUFBNUIsQ0FBUDtBQUNELE9BRkQsTUFFTyxJQUFLQSxNQUFNLFlBQVk1cUIsV0FBdkIsRUFBcUM7QUFDMUN6RCxZQUFJLEdBQUdxdUIsTUFBUDtBQUNELE9BTkksQ0FPTDs7O0FBQ0EsV0FBTTltQixXQUFOLElBQXNCdkgsSUFBSSxHQUFHdUksT0FBTyxDQUFFdkksSUFBRixDQUFQLENBQWlCZ0gsSUFBakIsQ0FBSCxHQUE2QnFuQixNQUF2RDtBQUNEO0FBQ0YsR0FoQkQ7QUFrQkE7Ozs7OztBQUlBanVCLE9BQUssQ0FBQzg3QyxXQUFOLEdBQW9CLFVBQVUzSixLQUFWLEVBQWlCeUosU0FBakIsRUFBNkI7QUFDL0N6SixTQUFLLEdBQUcsS0FBSzZKLGtCQUFMLENBQXlCN0osS0FBekIsQ0FBUjs7QUFFQSxTQUFLOEosWUFBTCxDQUFtQjlKLEtBQW5CLEVBQTBCeUosU0FBMUI7O0FBRUEsU0FBS00sV0FBTDtBQUNELEdBTkQ7QUFRQTs7Ozs7Ozs7QUFNQWw4QyxPQUFLLENBQUNnOEMsa0JBQU4sR0FBMkIsVUFBVTdKLEtBQVYsRUFBa0I7QUFDM0MsV0FBT0EsS0FBSyxDQUFDLzNCLE1BQU4sQ0FBYyxVQUFVdTRCLElBQVYsRUFBaUI7QUFDcEMsYUFBTyxDQUFDQSxJQUFJLENBQUN3SixTQUFiO0FBQ0QsS0FGTSxDQUFQO0FBR0QsR0FKRDtBQU1BOzs7Ozs7O0FBS0FuOEMsT0FBSyxDQUFDaThDLFlBQU4sR0FBcUIsVUFBVTlKLEtBQVYsRUFBaUJ5SixTQUFqQixFQUE2QjtBQUNoRCxTQUFLUSxvQkFBTCxDQUEyQixRQUEzQixFQUFxQ2pLLEtBQXJDOztBQUVBLFFBQUssQ0FBQ0EsS0FBRCxJQUFVLENBQUNBLEtBQUssQ0FBQzF5QyxNQUF0QixFQUErQjtBQUM3QjtBQUNBO0FBQ0Q7O0FBRUQsUUFBSWdtQixLQUFLLEdBQUcsRUFBWjtBQUVBMHNCLFNBQUssQ0FBQy91QyxPQUFOLENBQWUsVUFBVXV2QyxJQUFWLEVBQWlCO0FBQzlCO0FBQ0EsVUFBSWxaLFFBQVEsR0FBRyxLQUFLaVosc0JBQUwsQ0FBNkJDLElBQTdCLENBQWYsQ0FGOEIsQ0FHOUI7OztBQUNBbFosY0FBUSxDQUFDa1osSUFBVCxHQUFnQkEsSUFBaEI7QUFDQWxaLGNBQVEsQ0FBQ21pQixTQUFULEdBQXFCQSxTQUFTLElBQUlqSixJQUFJLENBQUMwSixlQUF2QztBQUNBNTJCLFdBQUssQ0FBQ2psQixJQUFOLENBQVlpNUIsUUFBWjtBQUNELEtBUEQsRUFPRyxJQVBIOztBQVNBLFNBQUs2aUIsbUJBQUwsQ0FBMEI3MkIsS0FBMUI7QUFDRCxHQXBCRDtBQXNCQTs7Ozs7OztBQUtBemxCLE9BQUssQ0FBQzB5QyxzQkFBTixHQUErQjtBQUFVO0FBQWE7QUFDcEQsV0FBTztBQUNMUSxPQUFDLEVBQUUsQ0FERTtBQUVMQyxPQUFDLEVBQUU7QUFGRSxLQUFQO0FBSUQsR0FMRDtBQU9BOzs7Ozs7OztBQU1BbnpDLE9BQUssQ0FBQ3M4QyxtQkFBTixHQUE0QixVQUFVNzJCLEtBQVYsRUFBa0I7QUFDNUMsU0FBSzgyQixhQUFMO0FBQ0E5MkIsU0FBSyxDQUFDcmlCLE9BQU4sQ0FBZSxVQUFVbkIsR0FBVixFQUFlekMsQ0FBZixFQUFtQjtBQUNoQyxXQUFLZzlDLGFBQUwsQ0FBb0J2NkMsR0FBRyxDQUFDMHdDLElBQXhCLEVBQThCMXdDLEdBQUcsQ0FBQ2l4QyxDQUFsQyxFQUFxQ2p4QyxHQUFHLENBQUNreEMsQ0FBekMsRUFBNENseEMsR0FBRyxDQUFDMjVDLFNBQWhELEVBQTJEcDhDLENBQTNEO0FBQ0QsS0FGRCxFQUVHLElBRkg7QUFHRCxHQUxELENBblR1RSxDQTBUdkU7OztBQUNBUSxPQUFLLENBQUN1OEMsYUFBTixHQUFzQixZQUFXO0FBQy9CLFFBQUlsRCxPQUFPLEdBQUcsS0FBSzN6QyxPQUFMLENBQWEyekMsT0FBM0I7O0FBQ0EsUUFBS0EsT0FBTyxLQUFLLElBQVosSUFBb0JBLE9BQU8sS0FBS2wzQyxTQUFyQyxFQUFpRDtBQUMvQyxXQUFLazNDLE9BQUwsR0FBZSxDQUFmO0FBQ0E7QUFDRDs7QUFDRCxTQUFLQSxPQUFMLEdBQWVvRCxlQUFlLENBQUVwRCxPQUFGLENBQTlCO0FBQ0EsV0FBTyxLQUFLQSxPQUFaO0FBQ0QsR0FSRDtBQVVBOzs7Ozs7Ozs7QUFPQXI1QyxPQUFLLENBQUN3OEMsYUFBTixHQUFzQixVQUFVN0osSUFBVixFQUFnQk8sQ0FBaEIsRUFBbUJDLENBQW5CLEVBQXNCeUksU0FBdEIsRUFBaUNwOEMsQ0FBakMsRUFBcUM7QUFDekQsUUFBS284QyxTQUFMLEVBQWlCO0FBQ2Y7QUFDQWpKLFVBQUksQ0FBQ3NGLElBQUwsQ0FBVy9FLENBQVgsRUFBY0MsQ0FBZDtBQUNELEtBSEQsTUFHTztBQUNMUixVQUFJLENBQUMwRyxPQUFMLENBQWM3NUMsQ0FBQyxHQUFHLEtBQUs2NUMsT0FBdkI7QUFDQTFHLFVBQUksQ0FBQ3VGLE1BQUwsQ0FBYWhGLENBQWIsRUFBZ0JDLENBQWhCO0FBQ0Q7QUFDRixHQVJEO0FBVUE7Ozs7OztBQUlBbnpDLE9BQUssQ0FBQ2s4QyxXQUFOLEdBQW9CLFlBQVc7QUFDN0IsU0FBS3BCLGVBQUw7QUFDRCxHQUZEOztBQUlBOTZDLE9BQUssQ0FBQzg2QyxlQUFOLEdBQXdCLFlBQVc7QUFDakMsUUFBSTRCLG1CQUFtQixHQUFHLEtBQUtqSyxVQUFMLENBQWdCLGlCQUFoQixDQUExQjs7QUFDQSxRQUFLLENBQUNpSyxtQkFBTixFQUE0QjtBQUMxQjtBQUNEOztBQUNELFFBQUk5MUMsSUFBSSxHQUFHLEtBQUtpdUMsaUJBQUwsRUFBWDs7QUFDQSxRQUFLanVDLElBQUwsRUFBWTtBQUNWLFdBQUsrMUMsb0JBQUwsQ0FBMkIvMUMsSUFBSSxDQUFDQyxLQUFoQyxFQUF1QyxJQUF2Qzs7QUFDQSxXQUFLODFDLG9CQUFMLENBQTJCLzFDLElBQUksQ0FBQ0UsTUFBaEMsRUFBd0MsS0FBeEM7QUFDRDtBQUNGLEdBVkQ7QUFZQTs7Ozs7Ozs7QUFNQTlHLE9BQUssQ0FBQzYwQyxpQkFBTixHQUEwQnZ1QyxJQUExQjtBQUVBOzs7OztBQUlBdEcsT0FBSyxDQUFDMjhDLG9CQUFOLEdBQTZCLFVBQVVoakIsT0FBVixFQUFtQmlqQixPQUFuQixFQUE2QjtBQUN4RCxRQUFLampCLE9BQU8sS0FBS3gzQixTQUFqQixFQUE2QjtBQUMzQjtBQUNEOztBQUVELFFBQUkwNkMsUUFBUSxHQUFHLEtBQUtqMkMsSUFBcEIsQ0FMd0QsQ0FNeEQ7O0FBQ0EsUUFBS2kyQyxRQUFRLENBQUNwMEMsV0FBZCxFQUE0QjtBQUMxQmt4QixhQUFPLElBQUlpakIsT0FBTyxHQUFHQyxRQUFRLENBQUNsMEMsV0FBVCxHQUF1QmswQyxRQUFRLENBQUNqMEMsWUFBaEMsR0FDbkJpMEMsUUFBUSxDQUFDdnpDLGVBRFUsR0FDUXV6QyxRQUFRLENBQUN0ekMsZ0JBRHBCLEdBRWhCc3pDLFFBQVEsQ0FBQzl6QyxhQUFULEdBQXlCOHpDLFFBQVEsQ0FBQy96QyxVQUFsQyxHQUNBK3pDLFFBQVEsQ0FBQ3B6QyxjQURULEdBQzBCb3pDLFFBQVEsQ0FBQ256QyxpQkFIckM7QUFJRDs7QUFFRGl3QixXQUFPLEdBQUcxeEIsSUFBSSxDQUFDaTBCLEdBQUwsQ0FBVXZDLE9BQVYsRUFBbUIsQ0FBbkIsQ0FBVjtBQUNBLFNBQUt4c0IsT0FBTCxDQUFhOUYsS0FBYixDQUFvQnUxQyxPQUFPLEdBQUcsT0FBSCxHQUFhLFFBQXhDLElBQXFEampCLE9BQU8sR0FBRyxJQUEvRDtBQUNELEdBaEJEO0FBa0JBOzs7Ozs7O0FBS0EzNUIsT0FBSyxDQUFDbzhDLG9CQUFOLEdBQTZCLFVBQVVsOEMsU0FBVixFQUFxQml5QyxLQUFyQixFQUE2QjtBQUN4RCxRQUFJbnVDLEtBQUssR0FBRyxJQUFaOztBQUNBLGFBQVM4NEMsVUFBVCxHQUFzQjtBQUNwQjk0QyxXQUFLLENBQUMrNEMsYUFBTixDQUFxQjc4QyxTQUFTLEdBQUcsVUFBakMsRUFBNkMsSUFBN0MsRUFBbUQsQ0FBRWl5QyxLQUFGLENBQW5EO0FBQ0Q7O0FBRUQsUUFBSXZtQixLQUFLLEdBQUd1bUIsS0FBSyxDQUFDMXlDLE1BQWxCOztBQUNBLFFBQUssQ0FBQzB5QyxLQUFELElBQVUsQ0FBQ3ZtQixLQUFoQixFQUF3QjtBQUN0Qmt4QixnQkFBVTtBQUNWO0FBQ0Q7O0FBRUQsUUFBSUUsU0FBUyxHQUFHLENBQWhCOztBQUNBLGFBQVN4ZCxJQUFULEdBQWdCO0FBQ2R3ZCxlQUFTOztBQUNULFVBQUtBLFNBQVMsSUFBSXB4QixLQUFsQixFQUEwQjtBQUN4Qmt4QixrQkFBVTtBQUNYO0FBQ0YsS0FsQnVELENBb0J4RDs7O0FBQ0EzSyxTQUFLLENBQUMvdUMsT0FBTixDQUFlLFVBQVV1dkMsSUFBVixFQUFpQjtBQUM5QkEsVUFBSSxDQUFDbHlDLElBQUwsQ0FBV1AsU0FBWCxFQUFzQnMvQixJQUF0QjtBQUNELEtBRkQ7QUFHRCxHQXhCRDtBQTBCQTs7Ozs7Ozs7QUFNQXgvQixPQUFLLENBQUMrOEMsYUFBTixHQUFzQixVQUFVLzVDLElBQVYsRUFBZ0JELEtBQWhCLEVBQXVCOUIsSUFBdkIsRUFBOEI7QUFDbEQ7QUFDQSxRQUFJZzhDLFFBQVEsR0FBR2w2QyxLQUFLLEdBQUcsQ0FBRUEsS0FBRixFQUFVc0MsTUFBVixDQUFrQnBFLElBQWxCLENBQUgsR0FBOEJBLElBQWxEO0FBQ0EsU0FBS0QsU0FBTCxDQUFnQmdDLElBQWhCLEVBQXNCaTZDLFFBQXRCOztBQUVBLFFBQUsxM0MsTUFBTCxFQUFjO0FBQ1o7QUFDQSxXQUFLODBDLFFBQUwsR0FBZ0IsS0FBS0EsUUFBTCxJQUFpQjkwQyxNQUFNLENBQUUsS0FBSzRILE9BQVAsQ0FBdkM7O0FBQ0EsVUFBS3BLLEtBQUwsRUFBYTtBQUNYO0FBQ0EsWUFBSW02QyxNQUFNLEdBQUczM0MsTUFBTSxDQUFDaXRCLEtBQVAsQ0FBY3p2QixLQUFkLENBQWI7QUFDQW02QyxjQUFNLENBQUNsNkMsSUFBUCxHQUFjQSxJQUFkO0FBQ0EsYUFBS3EzQyxRQUFMLENBQWNybkIsT0FBZCxDQUF1QmtxQixNQUF2QixFQUErQmo4QyxJQUEvQjtBQUNELE9BTEQsTUFLTztBQUNMO0FBQ0EsYUFBS281QyxRQUFMLENBQWNybkIsT0FBZCxDQUF1Qmh3QixJQUF2QixFQUE2Qi9CLElBQTdCO0FBQ0Q7QUFDRjtBQUNGLEdBbEJELENBN2F1RSxDQWljdkU7O0FBR0E7Ozs7Ozs7QUFLQWpCLE9BQUssQ0FBQ205QyxNQUFOLEdBQWUsVUFBVXY5QyxJQUFWLEVBQWlCO0FBQzlCLFFBQUkreUMsSUFBSSxHQUFHLEtBQUt5SyxPQUFMLENBQWN4OUMsSUFBZCxDQUFYOztBQUNBLFFBQUsreUMsSUFBTCxFQUFZO0FBQ1ZBLFVBQUksQ0FBQ3dKLFNBQUwsR0FBaUIsSUFBakI7QUFDRDtBQUNGLEdBTEQ7QUFPQTs7Ozs7O0FBSUFuOEMsT0FBSyxDQUFDcTlDLFFBQU4sR0FBaUIsVUFBVXo5QyxJQUFWLEVBQWlCO0FBQ2hDLFFBQUkreUMsSUFBSSxHQUFHLEtBQUt5SyxPQUFMLENBQWN4OUMsSUFBZCxDQUFYOztBQUNBLFFBQUsreUMsSUFBTCxFQUFZO0FBQ1YsYUFBT0EsSUFBSSxDQUFDd0osU0FBWjtBQUNEO0FBQ0YsR0FMRDtBQU9BOzs7Ozs7QUFJQW44QyxPQUFLLENBQUNpMEMsS0FBTixHQUFjLFVBQVUvd0MsS0FBVixFQUFrQjtBQUM5QkEsU0FBSyxHQUFHLEtBQUtvNkMsS0FBTCxDQUFZcDZDLEtBQVosQ0FBUjs7QUFDQSxRQUFLLENBQUNBLEtBQU4sRUFBYztBQUNaO0FBQ0Q7O0FBRUQsU0FBS2k0QyxNQUFMLEdBQWMsS0FBS0EsTUFBTCxDQUFZOTFDLE1BQVosQ0FBb0JuQyxLQUFwQixDQUFkLENBTjhCLENBTzlCOztBQUNBQSxTQUFLLENBQUNFLE9BQU4sQ0FBZSxLQUFLKzVDLE1BQXBCLEVBQTRCLElBQTVCO0FBQ0QsR0FURDtBQVdBOzs7Ozs7QUFJQW45QyxPQUFLLENBQUN1OUMsT0FBTixHQUFnQixVQUFVcjZDLEtBQVYsRUFBa0I7QUFDaENBLFNBQUssR0FBRyxLQUFLbzZDLEtBQUwsQ0FBWXA2QyxLQUFaLENBQVI7O0FBQ0EsUUFBSyxDQUFDQSxLQUFOLEVBQWE7QUFDWDtBQUNEOztBQUVEQSxTQUFLLENBQUNFLE9BQU4sQ0FBZSxVQUFVeEQsSUFBVixFQUFpQjtBQUM5QjtBQUNBMEIsV0FBSyxDQUFDZ0IsVUFBTixDQUFrQixLQUFLNjRDLE1BQXZCLEVBQStCdjdDLElBQS9CO0FBQ0EsV0FBS3k5QyxRQUFMLENBQWV6OUMsSUFBZjtBQUNELEtBSkQsRUFJRyxJQUpIO0FBS0QsR0FYRDtBQWFBOzs7Ozs7O0FBS0FJLE9BQUssQ0FBQ3M5QyxLQUFOLEdBQWMsVUFBVXA2QyxLQUFWLEVBQWtCO0FBQzlCLFFBQUssQ0FBQ0EsS0FBTixFQUFjO0FBQ1o7QUFDRCxLQUg2QixDQUk5Qjs7O0FBQ0EsUUFBSyxPQUFPQSxLQUFQLElBQWdCLFFBQXJCLEVBQWdDO0FBQzlCQSxXQUFLLEdBQUcsS0FBS2lLLE9BQUwsQ0FBYTVKLGdCQUFiLENBQStCTCxLQUEvQixDQUFSO0FBQ0Q7O0FBQ0RBLFNBQUssR0FBRzVCLEtBQUssQ0FBQ1UsU0FBTixDQUFpQmtCLEtBQWpCLENBQVI7QUFDQSxXQUFPQSxLQUFQO0FBQ0QsR0FWRDs7QUFZQWxELE9BQUssQ0FBQzI3QyxhQUFOLEdBQXNCLFlBQVc7QUFDL0IsUUFBSyxDQUFDLEtBQUtSLE1BQU4sSUFBZ0IsQ0FBQyxLQUFLQSxNQUFMLENBQVkxN0MsTUFBbEMsRUFBMkM7QUFDekM7QUFDRDs7QUFFRCxTQUFLKzlDLGdCQUFMOztBQUVBLFNBQUtyQyxNQUFMLENBQVkvM0MsT0FBWixDQUFxQixLQUFLNHdDLFlBQTFCLEVBQXdDLElBQXhDO0FBQ0QsR0FSRCxDQTVnQnVFLENBc2hCdkU7OztBQUNBaDBDLE9BQUssQ0FBQ3c5QyxnQkFBTixHQUF5QixZQUFXO0FBQ2xDO0FBQ0EsUUFBSUMsWUFBWSxHQUFHLEtBQUt0d0MsT0FBTCxDQUFhbXdCLHFCQUFiLEVBQW5CO0FBQ0EsUUFBSTEyQixJQUFJLEdBQUcsS0FBS0EsSUFBaEI7QUFDQSxTQUFLODJDLGFBQUwsR0FBcUI7QUFDbkJsZ0IsVUFBSSxFQUFFaWdCLFlBQVksQ0FBQ2pnQixJQUFiLEdBQW9CNTJCLElBQUksQ0FBQytCLFdBQXpCLEdBQXVDL0IsSUFBSSxDQUFDMEMsZUFEL0I7QUFFbkJ5USxTQUFHLEVBQUUwakMsWUFBWSxDQUFDMWpDLEdBQWIsR0FBbUJuVCxJQUFJLENBQUNrQyxVQUF4QixHQUFxQ2xDLElBQUksQ0FBQzZDLGNBRjVCO0FBR25CNnZCLFdBQUssRUFBRW1rQixZQUFZLENBQUNua0IsS0FBYixJQUF1QjF5QixJQUFJLENBQUNnQyxZQUFMLEdBQW9CaEMsSUFBSSxDQUFDMkMsZ0JBQWhELENBSFk7QUFJbkJxckMsWUFBTSxFQUFFNkksWUFBWSxDQUFDN0ksTUFBYixJQUF3Qmh1QyxJQUFJLENBQUNtQyxhQUFMLEdBQXFCbkMsSUFBSSxDQUFDOEMsaUJBQWxEO0FBSlcsS0FBckI7QUFNRCxHQVZEO0FBWUE7Ozs7O0FBR0ExSixPQUFLLENBQUNnMEMsWUFBTixHQUFxQjF0QyxJQUFyQjtBQUVBOzs7Ozs7QUFLQXRHLE9BQUssQ0FBQ20wQyxpQkFBTixHQUEwQixVQUFVdjBDLElBQVYsRUFBaUI7QUFDekMsUUFBSTY5QyxZQUFZLEdBQUc3OUMsSUFBSSxDQUFDMDlCLHFCQUFMLEVBQW5CO0FBQ0EsUUFBSXFnQixRQUFRLEdBQUcsS0FBS0QsYUFBcEI7QUFDQSxRQUFJOTJDLElBQUksR0FBR3VCLE9BQU8sQ0FBRXZJLElBQUYsQ0FBbEI7QUFDQSxRQUFJb3ZDLE1BQU0sR0FBRztBQUNYeFIsVUFBSSxFQUFFaWdCLFlBQVksQ0FBQ2pnQixJQUFiLEdBQW9CbWdCLFFBQVEsQ0FBQ25nQixJQUE3QixHQUFvQzUyQixJQUFJLENBQUNxQyxVQURwQztBQUVYOFEsU0FBRyxFQUFFMGpDLFlBQVksQ0FBQzFqQyxHQUFiLEdBQW1CNGpDLFFBQVEsQ0FBQzVqQyxHQUE1QixHQUFrQ25ULElBQUksQ0FBQ3dDLFNBRmpDO0FBR1hrd0IsV0FBSyxFQUFFcWtCLFFBQVEsQ0FBQ3JrQixLQUFULEdBQWlCbWtCLFlBQVksQ0FBQ25rQixLQUE5QixHQUFzQzF5QixJQUFJLENBQUNzQyxXQUh2QztBQUlYMHJDLFlBQU0sRUFBRStJLFFBQVEsQ0FBQy9JLE1BQVQsR0FBa0I2SSxZQUFZLENBQUM3SSxNQUEvQixHQUF3Q2h1QyxJQUFJLENBQUN5QztBQUoxQyxLQUFiO0FBTUEsV0FBTzJsQyxNQUFQO0FBQ0QsR0FYRCxDQTdpQnVFLENBMGpCdkU7QUFFQTtBQUNBOzs7QUFDQWh2QyxPQUFLLENBQUM4QyxXQUFOLEdBQW9CeEIsS0FBSyxDQUFDd0IsV0FBMUI7QUFFQTs7OztBQUdBOUMsT0FBSyxDQUFDcTdDLFVBQU4sR0FBbUIsWUFBVztBQUM1QnY4QyxVQUFNLENBQUN1RixnQkFBUCxDQUF5QixRQUF6QixFQUFtQyxJQUFuQztBQUNBLFNBQUt1NUMsYUFBTCxHQUFxQixJQUFyQjtBQUNELEdBSEQ7QUFLQTs7Ozs7QUFHQTU5QyxPQUFLLENBQUM2OUMsWUFBTixHQUFxQixZQUFXO0FBQzlCLytDLFVBQU0sQ0FBQ29PLG1CQUFQLENBQTRCLFFBQTVCLEVBQXNDLElBQXRDO0FBQ0EsU0FBSzB3QyxhQUFMLEdBQXFCLEtBQXJCO0FBQ0QsR0FIRDs7QUFLQTU5QyxPQUFLLENBQUM4OUMsUUFBTixHQUFpQixZQUFXO0FBQzFCLFNBQUtqRCxNQUFMO0FBQ0QsR0FGRDs7QUFJQXY1QyxPQUFLLENBQUNrQyxjQUFOLENBQXNCNnRDLFFBQXRCLEVBQWdDLFVBQWhDLEVBQTRDLEdBQTVDOztBQUVBcnhDLE9BQUssQ0FBQzY2QyxNQUFOLEdBQWUsWUFBVztBQUN4QjtBQUNBO0FBQ0EsUUFBSyxDQUFDLEtBQUsrQyxhQUFOLElBQXVCLENBQUMsS0FBSzVJLGlCQUFMLEVBQTdCLEVBQXdEO0FBQ3REO0FBQ0Q7O0FBRUQsU0FBS2MsTUFBTDtBQUNELEdBUkQ7QUFVQTs7Ozs7O0FBSUE5MUMsT0FBSyxDQUFDZzFDLGlCQUFOLEdBQTBCLFlBQVc7QUFDbkMsUUFBSXB1QyxJQUFJLEdBQUd1QixPQUFPLENBQUUsS0FBS2dGLE9BQVAsQ0FBbEIsQ0FEbUMsQ0FFbkM7QUFDQTs7QUFDQSxRQUFJNHdDLFFBQVEsR0FBRyxLQUFLbjNDLElBQUwsSUFBYUEsSUFBNUI7QUFDQSxXQUFPbTNDLFFBQVEsSUFBSW4zQyxJQUFJLENBQUNHLFVBQUwsS0FBb0IsS0FBS0gsSUFBTCxDQUFVRyxVQUFqRDtBQUNELEdBTkQsQ0FwbUJ1RSxDQTRtQnZFOztBQUVBOzs7Ozs7O0FBS0EvRyxPQUFLLENBQUNnK0MsUUFBTixHQUFpQixVQUFVOTZDLEtBQVYsRUFBa0I7QUFDakMsUUFBSWl2QyxLQUFLLEdBQUcsS0FBS21KLFFBQUwsQ0FBZXA0QyxLQUFmLENBQVosQ0FEaUMsQ0FFakM7OztBQUNBLFFBQUtpdkMsS0FBSyxDQUFDMXlDLE1BQVgsRUFBb0I7QUFDbEIsV0FBSzB5QyxLQUFMLEdBQWEsS0FBS0EsS0FBTCxDQUFXOXNDLE1BQVgsQ0FBbUI4c0MsS0FBbkIsQ0FBYjtBQUNEOztBQUNELFdBQU9BLEtBQVA7QUFDRCxHQVBEO0FBU0E7Ozs7OztBQUlBbnlDLE9BQUssQ0FBQ2krQyxRQUFOLEdBQWlCLFVBQVUvNkMsS0FBVixFQUFrQjtBQUNqQyxRQUFJaXZDLEtBQUssR0FBRyxLQUFLNkwsUUFBTCxDQUFlOTZDLEtBQWYsQ0FBWjs7QUFDQSxRQUFLLENBQUNpdkMsS0FBSyxDQUFDMXlDLE1BQVosRUFBcUI7QUFDbkI7QUFDRCxLQUpnQyxDQUtqQzs7O0FBQ0EsU0FBS3E4QyxXQUFMLENBQWtCM0osS0FBbEIsRUFBeUIsSUFBekI7QUFDQSxTQUFLb0gsTUFBTCxDQUFhcEgsS0FBYjtBQUNELEdBUkQ7QUFVQTs7Ozs7O0FBSUFueUMsT0FBSyxDQUFDaytDLFNBQU4sR0FBa0IsVUFBVWg3QyxLQUFWLEVBQWtCO0FBQ2xDLFFBQUlpdkMsS0FBSyxHQUFHLEtBQUttSixRQUFMLENBQWVwNEMsS0FBZixDQUFaOztBQUNBLFFBQUssQ0FBQ2l2QyxLQUFLLENBQUMxeUMsTUFBWixFQUFxQjtBQUNuQjtBQUNELEtBSmlDLENBS2xDOzs7QUFDQSxRQUFJMCtDLGFBQWEsR0FBRyxLQUFLaE0sS0FBTCxDQUFXanhDLEtBQVgsQ0FBaUIsQ0FBakIsQ0FBcEI7QUFDQSxTQUFLaXhDLEtBQUwsR0FBYUEsS0FBSyxDQUFDOXNDLE1BQU4sQ0FBYzg0QyxhQUFkLENBQWIsQ0FQa0MsQ0FRbEM7O0FBQ0EsU0FBSzFNLFlBQUw7O0FBQ0EsU0FBS2tLLGFBQUwsR0FWa0MsQ0FXbEM7OztBQUNBLFNBQUtHLFdBQUwsQ0FBa0IzSixLQUFsQixFQUF5QixJQUF6QjtBQUNBLFNBQUtvSCxNQUFMLENBQWFwSCxLQUFiLEVBYmtDLENBY2xDOztBQUNBLFNBQUsySixXQUFMLENBQWtCcUMsYUFBbEI7QUFDRCxHQWhCRDtBQWtCQTs7Ozs7O0FBSUFuK0MsT0FBSyxDQUFDdTVDLE1BQU4sR0FBZSxVQUFVcEgsS0FBVixFQUFrQjtBQUMvQixTQUFLaUssb0JBQUwsQ0FBMkIsUUFBM0IsRUFBcUNqSyxLQUFyQzs7QUFDQSxRQUFLLENBQUNBLEtBQUQsSUFBVSxDQUFDQSxLQUFLLENBQUMxeUMsTUFBdEIsRUFBK0I7QUFDN0I7QUFDRDs7QUFDRCxRQUFJNDVDLE9BQU8sR0FBRyxLQUFLa0QsYUFBTCxFQUFkO0FBQ0FwSyxTQUFLLENBQUMvdUMsT0FBTixDQUFlLFVBQVV1dkMsSUFBVixFQUFnQm56QyxDQUFoQixFQUFvQjtBQUNqQ216QyxVQUFJLENBQUMwRyxPQUFMLENBQWM3NUMsQ0FBQyxHQUFHNjVDLE9BQWxCO0FBQ0ExRyxVQUFJLENBQUM0RyxNQUFMO0FBQ0QsS0FIRDtBQUlELEdBVkQ7QUFZQTs7Ozs7O0FBSUF2NUMsT0FBSyxDQUFDdXRCLElBQU4sR0FBYSxVQUFVNGtCLEtBQVYsRUFBa0I7QUFDN0IsU0FBS2lLLG9CQUFMLENBQTJCLE1BQTNCLEVBQW1DakssS0FBbkM7O0FBQ0EsUUFBSyxDQUFDQSxLQUFELElBQVUsQ0FBQ0EsS0FBSyxDQUFDMXlDLE1BQXRCLEVBQStCO0FBQzdCO0FBQ0Q7O0FBQ0QsUUFBSTQ1QyxPQUFPLEdBQUcsS0FBS2tELGFBQUwsRUFBZDtBQUNBcEssU0FBSyxDQUFDL3VDLE9BQU4sQ0FBZSxVQUFVdXZDLElBQVYsRUFBZ0JuekMsQ0FBaEIsRUFBb0I7QUFDakNtekMsVUFBSSxDQUFDMEcsT0FBTCxDQUFjNzVDLENBQUMsR0FBRzY1QyxPQUFsQjtBQUNBMUcsVUFBSSxDQUFDcGxCLElBQUw7QUFDRCxLQUhEO0FBSUQsR0FWRDtBQVlBOzs7Ozs7QUFJQXZ0QixPQUFLLENBQUNvK0Msa0JBQU4sR0FBMkIsVUFBVWw3QyxLQUFWLEVBQWtCO0FBQzNDLFFBQUlpdkMsS0FBSyxHQUFHLEtBQUtrTSxRQUFMLENBQWVuN0MsS0FBZixDQUFaO0FBQ0EsU0FBS3EyQyxNQUFMLENBQWFwSCxLQUFiO0FBQ0QsR0FIRDtBQUtBOzs7Ozs7QUFJQW55QyxPQUFLLENBQUNzK0MsZ0JBQU4sR0FBeUIsVUFBVXA3QyxLQUFWLEVBQWtCO0FBQ3pDLFFBQUlpdkMsS0FBSyxHQUFHLEtBQUtrTSxRQUFMLENBQWVuN0MsS0FBZixDQUFaO0FBQ0EsU0FBS3FxQixJQUFMLENBQVc0a0IsS0FBWDtBQUNELEdBSEQ7QUFLQTs7Ozs7Ozs7QUFNQW55QyxPQUFLLENBQUNvOUMsT0FBTixHQUFnQixVQUFVeDlDLElBQVYsRUFBaUI7QUFDL0I7QUFDQSxTQUFNLElBQUlKLENBQUMsR0FBQyxDQUFaLEVBQWVBLENBQUMsR0FBRyxLQUFLMnlDLEtBQUwsQ0FBVzF5QyxNQUE5QixFQUFzQ0QsQ0FBQyxFQUF2QyxFQUE0QztBQUMxQyxVQUFJbXpDLElBQUksR0FBRyxLQUFLUixLQUFMLENBQVczeUMsQ0FBWCxDQUFYOztBQUNBLFVBQUttekMsSUFBSSxDQUFDeGxDLE9BQUwsSUFBZ0J2TixJQUFyQixFQUE0QjtBQUMxQjtBQUNBLGVBQU8reUMsSUFBUDtBQUNEO0FBQ0Y7QUFDRixHQVREO0FBV0E7Ozs7Ozs7QUFLQTN5QyxPQUFLLENBQUNxK0MsUUFBTixHQUFpQixVQUFVbjdDLEtBQVYsRUFBa0I7QUFDakNBLFNBQUssR0FBRzVCLEtBQUssQ0FBQ1UsU0FBTixDQUFpQmtCLEtBQWpCLENBQVI7QUFDQSxRQUFJaXZDLEtBQUssR0FBRyxFQUFaO0FBQ0FqdkMsU0FBSyxDQUFDRSxPQUFOLENBQWUsVUFBVXhELElBQVYsRUFBaUI7QUFDOUIsVUFBSSt5QyxJQUFJLEdBQUcsS0FBS3lLLE9BQUwsQ0FBY3g5QyxJQUFkLENBQVg7O0FBQ0EsVUFBSyt5QyxJQUFMLEVBQVk7QUFDVlIsYUFBSyxDQUFDM3hDLElBQU4sQ0FBWW15QyxJQUFaO0FBQ0Q7QUFDRixLQUxELEVBS0csSUFMSDtBQU9BLFdBQU9SLEtBQVA7QUFDRCxHQVhEO0FBYUE7Ozs7OztBQUlBbnlDLE9BQUssQ0FBQzZsQixNQUFOLEdBQWUsVUFBVTNpQixLQUFWLEVBQWtCO0FBQy9CLFFBQUlxN0MsV0FBVyxHQUFHLEtBQUtGLFFBQUwsQ0FBZW43QyxLQUFmLENBQWxCOztBQUVBLFNBQUtrNUMsb0JBQUwsQ0FBMkIsUUFBM0IsRUFBcUNtQyxXQUFyQyxFQUgrQixDQUsvQjs7O0FBQ0EsUUFBSyxDQUFDQSxXQUFELElBQWdCLENBQUNBLFdBQVcsQ0FBQzkrQyxNQUFsQyxFQUEyQztBQUN6QztBQUNEOztBQUVEOCtDLGVBQVcsQ0FBQ243QyxPQUFaLENBQXFCLFVBQVV1dkMsSUFBVixFQUFpQjtBQUNwQ0EsVUFBSSxDQUFDOXNCLE1BQUwsR0FEb0MsQ0FFcEM7O0FBQ0F2a0IsV0FBSyxDQUFDZ0IsVUFBTixDQUFrQixLQUFLNnZDLEtBQXZCLEVBQThCUSxJQUE5QjtBQUNELEtBSkQsRUFJRyxJQUpIO0FBS0QsR0FmRCxDQXp2QnVFLENBMHdCdkU7QUFFQTs7O0FBQ0EzeUMsT0FBSyxDQUFDaTZDLE9BQU4sR0FBZ0IsWUFBVztBQUN6QjtBQUNBLFFBQUk1eUMsS0FBSyxHQUFHLEtBQUs4RixPQUFMLENBQWE5RixLQUF6QjtBQUNBQSxTQUFLLENBQUNQLE1BQU4sR0FBZSxFQUFmO0FBQ0FPLFNBQUssQ0FBQ295QixRQUFOLEdBQWlCLEVBQWpCO0FBQ0FweUIsU0FBSyxDQUFDUixLQUFOLEdBQWMsRUFBZCxDQUx5QixDQU16Qjs7QUFDQSxTQUFLc3JDLEtBQUwsQ0FBVy91QyxPQUFYLENBQW9CLFVBQVV1dkMsSUFBVixFQUFpQjtBQUNuQ0EsVUFBSSxDQUFDc0gsT0FBTDtBQUNELEtBRkQ7QUFJQSxTQUFLNEQsWUFBTDtBQUVBLFFBQUlybUMsRUFBRSxHQUFHLEtBQUtySyxPQUFMLENBQWFvdEMsWUFBdEI7QUFDQSxXQUFPSixTQUFTLENBQUUzaUMsRUFBRixDQUFoQixDQWR5QixDQWNEOztBQUN4QixXQUFPLEtBQUtySyxPQUFMLENBQWFvdEMsWUFBcEIsQ0FmeUIsQ0FnQnpCOztBQUNBLFFBQUtoMUMsTUFBTCxFQUFjO0FBQ1pBLFlBQU0sQ0FBQzJsQixVQUFQLENBQW1CLEtBQUsvZCxPQUF4QixFQUFpQyxLQUFLeUMsV0FBTCxDQUFpQjVLLFNBQWxEO0FBQ0Q7QUFFRixHQXJCRCxDQTd3QnVFLENBb3lCdkU7O0FBRUE7Ozs7Ozs7QUFLQXFzQyxVQUFRLENBQUNyckMsSUFBVCxHQUFnQixVQUFVcEcsSUFBVixFQUFpQjtBQUMvQkEsUUFBSSxHQUFHMEIsS0FBSyxDQUFDc0IsZUFBTixDQUF1QmhELElBQXZCLENBQVA7QUFDQSxRQUFJNFgsRUFBRSxHQUFHNVgsSUFBSSxJQUFJQSxJQUFJLENBQUMyNkMsWUFBdEI7QUFDQSxXQUFPL2lDLEVBQUUsSUFBSTJpQyxTQUFTLENBQUUzaUMsRUFBRixDQUF0QjtBQUNELEdBSkQsQ0EzeUJ1RSxDQWt6QnZFOztBQUVBOzs7Ozs7QUFJQTY1QixVQUFRLENBQUM1bUMsTUFBVCxHQUFrQixVQUFVekYsU0FBVixFQUFxQlUsT0FBckIsRUFBK0I7QUFDL0M7QUFDQSxRQUFJODRDLE1BQU0sR0FBR0MsUUFBUSxDQUFFcE4sUUFBRixDQUFyQixDQUYrQyxDQUcvQzs7QUFDQW1OLFVBQU0sQ0FBQ2xFLFFBQVAsR0FBa0JoNUMsS0FBSyxDQUFDQyxNQUFOLENBQWMsRUFBZCxFQUFrQjh2QyxRQUFRLENBQUNpSixRQUEzQixDQUFsQjtBQUNBaDVDLFNBQUssQ0FBQ0MsTUFBTixDQUFjaTlDLE1BQU0sQ0FBQ2xFLFFBQXJCLEVBQStCNTBDLE9BQS9CO0FBQ0E4NEMsVUFBTSxDQUFDak4sYUFBUCxHQUF1Qmp3QyxLQUFLLENBQUNDLE1BQU4sQ0FBYyxFQUFkLEVBQWtCOHZDLFFBQVEsQ0FBQ0UsYUFBM0IsQ0FBdkI7QUFFQWlOLFVBQU0sQ0FBQ3g1QyxTQUFQLEdBQW1CQSxTQUFuQjtBQUVBdzVDLFVBQU0sQ0FBQ3g0QyxJQUFQLEdBQWNxckMsUUFBUSxDQUFDcnJDLElBQXZCLENBVitDLENBWS9DOztBQUNBdzRDLFVBQU0sQ0FBQzNJLElBQVAsR0FBYzRJLFFBQVEsQ0FBRTVJLElBQUYsQ0FBdEIsQ0FiK0MsQ0FlL0M7O0FBRUF2MEMsU0FBSyxDQUFDd0QsUUFBTixDQUFnQjA1QyxNQUFoQixFQUF3Qng1QyxTQUF4QixFQWpCK0MsQ0FtQi9DO0FBRUE7O0FBQ0EsUUFBS08sTUFBTSxJQUFJQSxNQUFNLENBQUNtNUMsT0FBdEIsRUFBZ0M7QUFDOUJuNUMsWUFBTSxDQUFDbTVDLE9BQVAsQ0FBZ0IxNUMsU0FBaEIsRUFBMkJ3NUMsTUFBM0I7QUFDRDs7QUFFRCxXQUFPQSxNQUFQO0FBQ0QsR0EzQkQ7O0FBNkJBLFdBQVNDLFFBQVQsQ0FBbUJFLE1BQW5CLEVBQTRCO0FBQzFCLGFBQVNDLFFBQVQsR0FBb0I7QUFDbEJELFlBQU0sQ0FBQ3Y5QyxLQUFQLENBQWMsSUFBZCxFQUFvQjJDLFNBQXBCO0FBQ0Q7O0FBRUQ2NkMsWUFBUSxDQUFDeC9DLFNBQVQsR0FBcUJvTCxNQUFNLENBQUNDLE1BQVAsQ0FBZWswQyxNQUFNLENBQUN2L0MsU0FBdEIsQ0FBckI7QUFDQXcvQyxZQUFRLENBQUN4L0MsU0FBVCxDQUFtQndRLFdBQW5CLEdBQWlDZ3ZDLFFBQWpDO0FBRUEsV0FBT0EsUUFBUDtBQUNELEdBOTFCc0UsQ0FnMkJ2RTtBQUVBOzs7QUFDQSxNQUFJQyxPQUFPLEdBQUc7QUFDWkMsTUFBRSxFQUFFLENBRFE7QUFFWnRZLEtBQUMsRUFBRTtBQUZTLEdBQWQsQ0FuMkJ1RSxDQXcyQnZFO0FBQ0E7O0FBQ0EsV0FBU2lXLGVBQVQsQ0FBMEIxWixJQUExQixFQUFpQztBQUMvQixRQUFLLE9BQU9BLElBQVAsSUFBZSxRQUFwQixFQUErQjtBQUM3QixhQUFPQSxJQUFQO0FBQ0Q7O0FBQ0QsUUFBSTFqQyxPQUFPLEdBQUcwakMsSUFBSSxDQUFDdCtCLEtBQUwsQ0FBWSxtQkFBWixDQUFkO0FBQ0EsUUFBSTdDLEdBQUcsR0FBR3ZDLE9BQU8sSUFBSUEsT0FBTyxDQUFDLENBQUQsQ0FBNUI7QUFDQSxRQUFJMHRCLElBQUksR0FBRzF0QixPQUFPLElBQUlBLE9BQU8sQ0FBQyxDQUFELENBQTdCOztBQUNBLFFBQUssQ0FBQ3VDLEdBQUcsQ0FBQ25DLE1BQVYsRUFBbUI7QUFDakIsYUFBTyxDQUFQO0FBQ0Q7O0FBQ0RtQyxPQUFHLEdBQUd1RSxVQUFVLENBQUV2RSxHQUFGLENBQWhCO0FBQ0EsUUFBSW05QyxJQUFJLEdBQUdGLE9BQU8sQ0FBRTl4QixJQUFGLENBQVAsSUFBbUIsQ0FBOUI7QUFDQSxXQUFPbnJCLEdBQUcsR0FBR205QyxJQUFiO0FBQ0QsR0F2M0JzRSxDQXkzQnZFO0FBRUE7OztBQUNBMU4sVUFBUSxDQUFDd0UsSUFBVCxHQUFnQkEsSUFBaEI7QUFFQSxTQUFPeEUsUUFBUDtBQUVDLENBcDZCQyxDQUFGLEM7Ozs7Ozs7Ozs7O0FDTkE7Ozs7OztBQUtBOzs7Ozs7Ozs7Ozs7QUFZQTs7QUFBQyxDQUFDLFVBQVN2bkMsQ0FBVCxFQUFZaEwsTUFBWixFQUFvQjRELFFBQXBCLEVBQThCUCxTQUE5QixFQUF5QztBQUUxQzs7Ozs7OztBQU9BLFdBQVM2OEMsR0FBVCxDQUFhN3hDLE9BQWIsRUFBc0J6SCxPQUF0QixFQUErQjtBQUU5Qjs7OztBQUlBLFNBQUt3a0MsUUFBTCxHQUFnQixJQUFoQjtBQUVBOzs7OztBQUlBLFNBQUt4a0MsT0FBTCxHQUFlb0UsQ0FBQyxDQUFDdkksTUFBRixDQUFTLEVBQVQsRUFBYXk5QyxHQUFHLENBQUNDLFFBQWpCLEVBQTJCdjVDLE9BQTNCLENBQWY7QUFFQTs7Ozs7QUFJQSxTQUFLMjBDLFFBQUwsR0FBZ0J2d0MsQ0FBQyxDQUFDcUQsT0FBRCxDQUFqQjtBQUVBOzs7OztBQUlBLFNBQUsreEMsU0FBTCxHQUFpQixFQUFqQjtBQUVBOzs7OztBQUlBLFNBQUtDLFFBQUwsR0FBZ0IsRUFBaEI7QUFFQTs7Ozs7QUFJQSxTQUFLQyxRQUFMLEdBQWdCLEVBQWhCO0FBRUE7Ozs7O0FBSUEsU0FBS0MsUUFBTCxHQUFnQixJQUFoQjtBQUVBOzs7OztBQUlBLFNBQUtDLE1BQUwsR0FBYyxJQUFkO0FBRUE7Ozs7OztBQUtBLFNBQUtDLFlBQUwsR0FBb0IsRUFBcEI7QUFFQTs7Ozs7O0FBS0EsU0FBS0MsV0FBTCxHQUFtQixJQUFuQjtBQUVBOzs7O0FBR0EsU0FBS0MsTUFBTCxHQUFjLElBQWQ7QUFFQTs7Ozs7QUFJQSxTQUFLQyxNQUFMLEdBQWMsRUFBZDtBQUVBOzs7OztBQUlBLFNBQUtDLE9BQUwsR0FBZSxFQUFmO0FBRUE7Ozs7OztBQUtBLFNBQUtDLFFBQUwsR0FBZ0IsRUFBaEI7QUFFQTs7OztBQUdBLFNBQUtDLE9BQUwsR0FBZSxFQUFmO0FBRUE7Ozs7O0FBSUEsU0FBS0MsWUFBTCxHQUFvQixFQUFwQjtBQUVBOzs7OztBQUlBLFNBQUtDLEtBQUwsR0FBYSxFQUFiO0FBRUE7Ozs7OztBQUtBLFNBQUtDLEtBQUwsR0FBYTtBQUNaamQsVUFBSSxFQUFFLElBRE07QUFFWjN4QixZQUFNLEVBQUUsSUFGSTtBQUdaNnVDLGFBQU8sRUFBRSxJQUhHO0FBSVpDLFdBQUssRUFBRTtBQUNOMWlDLGFBQUssRUFBRSxJQUREO0FBRU4wckIsZUFBTyxFQUFFO0FBRkgsT0FKSztBQVFaaVgsZUFBUyxFQUFFO0FBUkMsS0FBYjtBQVdBOzs7Ozs7QUFLQSxTQUFLQyxPQUFMLEdBQWU7QUFDZGxYLGFBQU8sRUFBRSxFQURLO0FBRWRtWCxVQUFJLEVBQUU7QUFDTCx3QkFBZ0IsQ0FBRSxNQUFGLENBRFg7QUFFTCxxQkFBYSxDQUFFLE1BQUYsQ0FGUjtBQUdMLG9CQUFZLENBQUUsYUFBRjtBQUhQO0FBRlEsS0FBZjtBQVNBdjJDLEtBQUMsQ0FBQ3FHLElBQUYsQ0FBTyxDQUFFLFVBQUYsRUFBYyxtQkFBZCxDQUFQLEVBQTRDckcsQ0FBQyxDQUFDOG1DLEtBQUYsQ0FBUSxVQUFTcHhDLENBQVQsRUFBWXFaLE9BQVosRUFBcUI7QUFDeEUsV0FBS3FtQyxTQUFMLENBQWVybUMsT0FBZixJQUEwQi9PLENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsS0FBSy8zQixPQUFMLENBQVIsRUFBdUIsSUFBdkIsQ0FBMUI7QUFDQSxLQUYyQyxFQUV6QyxJQUZ5QyxDQUE1QztBQUlBL08sS0FBQyxDQUFDcUcsSUFBRixDQUFPNnVDLEdBQUcsQ0FBQ3NCLE9BQVgsRUFBb0J4MkMsQ0FBQyxDQUFDOG1DLEtBQUYsQ0FBUSxVQUFTdjRCLEdBQVQsRUFBY2tvQyxNQUFkLEVBQXNCO0FBQ2pELFdBQUtwQixRQUFMLENBQWM5bUMsR0FBRyxDQUFDbW9DLE1BQUosQ0FBVyxDQUFYLEVBQWM1N0MsV0FBZCxLQUE4QnlULEdBQUcsQ0FBQ25YLEtBQUosQ0FBVSxDQUFWLENBQTVDLElBQ0csSUFBSXEvQyxNQUFKLENBQVcsSUFBWCxDQURIO0FBRUEsS0FIbUIsRUFHakIsSUFIaUIsQ0FBcEI7QUFLQXoyQyxLQUFDLENBQUNxRyxJQUFGLENBQU82dUMsR0FBRyxDQUFDeUIsT0FBWCxFQUFvQjMyQyxDQUFDLENBQUM4bUMsS0FBRixDQUFRLFVBQVM4UCxRQUFULEVBQW1CQyxNQUFuQixFQUEyQjtBQUN0RCxXQUFLWixLQUFMLENBQVd2L0MsSUFBWCxDQUFnQjtBQUNmLGtCQUFVbWdELE1BQU0sQ0FBQ3ZtQyxNQURGO0FBRWYsZUFBT3RRLENBQUMsQ0FBQzhtQyxLQUFGLENBQVErUCxNQUFNLENBQUN6aUIsR0FBZixFQUFvQixJQUFwQjtBQUZRLE9BQWhCO0FBSUEsS0FMbUIsRUFLakIsSUFMaUIsQ0FBcEI7QUFPQSxTQUFLejJCLEtBQUw7QUFDQSxTQUFLbTVDLFVBQUw7QUFDQTtBQUVEOzs7Ozs7QUFJQTVCLEtBQUcsQ0FBQ0MsUUFBSixHQUFlO0FBQ2Q5TSxTQUFLLEVBQUUsQ0FETztBQUVkME8sUUFBSSxFQUFFLEtBRlE7QUFHZEMsVUFBTSxFQUFFLEtBSE07QUFJZEMsVUFBTSxFQUFFLEtBSk07QUFLZEMsbUJBQWUsRUFBRSxJQUxIO0FBT2RDLGFBQVMsRUFBRSxJQVBHO0FBUWRDLGFBQVMsRUFBRSxJQVJHO0FBU2RDLFlBQVEsRUFBRSxJQVRJO0FBVWRDLFlBQVEsRUFBRSxLQVZJO0FBWWQzakIsVUFBTSxFQUFFLENBWk07QUFhZDRqQixnQkFBWSxFQUFFLENBYkE7QUFlZHB4QyxTQUFLLEVBQUUsS0FmTztBQWdCZHF4QyxZQUFRLEVBQUUsSUFoQkk7QUFpQmRDLGFBQVMsRUFBRSxLQWpCRztBQW1CZEMsaUJBQWEsRUFBRSxDQW5CRDtBQW9CZEMsT0FBRyxFQUFFLEtBcEJTO0FBc0JkQyxjQUFVLEVBQUUsR0F0QkU7QUF1QmRDLGNBQVUsRUFBRSxLQXZCRTtBQXdCZEMsZ0JBQVksRUFBRSxLQXhCQTtBQTBCZEMsY0FBVSxFQUFFLEVBMUJFO0FBMkJkQyx5QkFBcUIsRUFBRSxHQTNCVDtBQTRCZEMseUJBQXFCLEVBQUVqakQsTUE1QlQ7QUE4QmRrakQsa0JBQWMsRUFBRSxPQTlCRjtBQStCZEMsbUJBQWUsRUFBRSxFQS9CSDtBQWlDZEMsUUFBSSxFQUFFLEtBakNRO0FBbUNkQyxzQkFBa0IsRUFBRSxLQW5DTjtBQW9DZEMsZUFBVyxFQUFFLEtBcENDO0FBcUNkQyxnQkFBWSxFQUFFLEtBckNBO0FBdUNkQyxnQkFBWSxFQUFFLGFBdkNBO0FBd0NkQyxlQUFXLEVBQUUsWUF4Q0M7QUF5Q2RDLGdCQUFZLEVBQUUsYUF6Q0E7QUEwQ2RDLFlBQVEsRUFBRSxTQTFDSTtBQTJDZEMsbUJBQWUsRUFBRSxnQkEzQ0g7QUE0Q2RDLGFBQVMsRUFBRSxVQTVDRztBQTZDZEMsYUFBUyxFQUFFLFVBN0NHO0FBOENkQyxjQUFVLEVBQUUsV0E5Q0U7QUErQ2RDLG1CQUFlLEVBQUUsaUJBL0NIO0FBZ0RkQyxhQUFTLEVBQUU7QUFoREcsR0FBZjtBQW1EQTs7Ozs7OztBQU1BL0QsS0FBRyxDQUFDN08sS0FBSixHQUFZO0FBQ1g2UyxXQUFPLEVBQUUsU0FERTtBQUVYQyxTQUFLLEVBQUUsT0FGSTtBQUdYQyxTQUFLLEVBQUU7QUFISSxHQUFaO0FBTUE7Ozs7Ozs7QUFNQWxFLEtBQUcsQ0FBQ21FLElBQUosR0FBVztBQUNWM3dCLFNBQUssRUFBRSxPQURHO0FBRVY0d0IsU0FBSyxFQUFFO0FBRkcsR0FBWDtBQUtBOzs7OztBQUlBcEUsS0FBRyxDQUFDc0IsT0FBSixHQUFjLEVBQWQ7QUFFQTs7OztBQUdBdEIsS0FBRyxDQUFDeUIsT0FBSixHQUFjLENBQUU7QUFDZnJtQyxVQUFNLEVBQUUsQ0FBRSxPQUFGLEVBQVcsVUFBWCxDQURPO0FBRWY4akIsT0FBRyxFQUFFLFlBQVc7QUFDZixXQUFLdWhCLE1BQUwsR0FBYyxLQUFLcEYsUUFBTCxDQUFjeHpDLEtBQWQsRUFBZDtBQUNBO0FBSmMsR0FBRixFQUtYO0FBQ0Z1VCxVQUFNLEVBQUUsQ0FBRSxPQUFGLEVBQVcsT0FBWCxFQUFvQixVQUFwQixDQUROO0FBRUY4akIsT0FBRyxFQUFFLFVBQVM5bEIsS0FBVCxFQUFnQjtBQUNwQkEsV0FBSyxDQUFDOHdCLE9BQU4sR0FBZ0IsS0FBS3dXLE1BQUwsSUFBZSxLQUFLQSxNQUFMLENBQVksS0FBS3BqQyxRQUFMLENBQWMsS0FBSytpQyxRQUFuQixDQUFaLENBQS9CO0FBQ0E7QUFKQyxHQUxXLEVBVVg7QUFDRmpsQyxVQUFNLEVBQUUsQ0FBRSxPQUFGLEVBQVcsVUFBWCxDQUROO0FBRUY4akIsT0FBRyxFQUFFLFlBQVc7QUFDZixXQUFLbWxCLE1BQUwsQ0FBWWw0QyxRQUFaLENBQXFCLFNBQXJCLEVBQWdDMGEsTUFBaEM7QUFDQTtBQUpDLEdBVlcsRUFlWDtBQUNGekwsVUFBTSxFQUFFLENBQUUsT0FBRixFQUFXLE9BQVgsRUFBb0IsVUFBcEIsQ0FETjtBQUVGOGpCLE9BQUcsRUFBRSxVQUFTOWxCLEtBQVQsRUFBZ0I7QUFDcEIsVUFBSXFsQixNQUFNLEdBQUcsS0FBS3lNLFFBQUwsQ0FBY3pNLE1BQWQsSUFBd0IsRUFBckM7QUFBQSxVQUNDNmxCLElBQUksR0FBRyxDQUFDLEtBQUtwWixRQUFMLENBQWNxWCxTQUR2QjtBQUFBLFVBRUNFLEdBQUcsR0FBRyxLQUFLdlgsUUFBTCxDQUFjdVgsR0FGckI7QUFBQSxVQUdDbjFCLEdBQUcsR0FBRztBQUNMLGlCQUFTLE1BREo7QUFFTCx1QkFBZW0xQixHQUFHLEdBQUdoa0IsTUFBSCxHQUFZLEVBRnpCO0FBR0wsd0JBQWdCZ2tCLEdBQUcsR0FBRyxFQUFILEdBQVFoa0I7QUFIdEIsT0FIUDtBQVNBLE9BQUM2bEIsSUFBRCxJQUFTLEtBQUtELE1BQUwsQ0FBWWw0QyxRQUFaLEdBQXVCbWhCLEdBQXZCLENBQTJCQSxHQUEzQixDQUFUO0FBRUFsVSxXQUFLLENBQUNrVSxHQUFOLEdBQVlBLEdBQVo7QUFDQTtBQWZDLEdBZlcsRUErQlg7QUFDRmxTLFVBQU0sRUFBRSxDQUFFLE9BQUYsRUFBVyxPQUFYLEVBQW9CLFVBQXBCLENBRE47QUFFRjhqQixPQUFHLEVBQUUsVUFBUzlsQixLQUFULEVBQWdCO0FBQ3BCLFVBQUl2UixLQUFLLEdBQUcsQ0FBQyxLQUFLQSxLQUFMLEtBQWUsS0FBS3FqQyxRQUFMLENBQWNpSSxLQUE5QixFQUFxQ29SLE9BQXJDLENBQTZDLENBQTdDLElBQWtELEtBQUtyWixRQUFMLENBQWN6TSxNQUE1RTtBQUFBLFVBQ0N4dEIsS0FBSyxHQUFHLElBRFQ7QUFBQSxVQUVDc0MsUUFBUSxHQUFHLEtBQUttdEMsTUFBTCxDQUFZamdELE1BRnhCO0FBQUEsVUFHQzZqRCxJQUFJLEdBQUcsQ0FBQyxLQUFLcFosUUFBTCxDQUFjcVgsU0FIdkI7QUFBQSxVQUlDaUMsTUFBTSxHQUFHLEVBSlY7QUFNQXByQyxXQUFLLENBQUMrNUIsS0FBTixHQUFjO0FBQ2JsaUMsYUFBSyxFQUFFLEtBRE07QUFFYnBKLGFBQUssRUFBRUE7QUFGTSxPQUFkOztBQUtBLGFBQU8wTCxRQUFRLEVBQWYsRUFBbUI7QUFDbEJ0QyxhQUFLLEdBQUcsS0FBSzJ2QyxRQUFMLENBQWNydEMsUUFBZCxDQUFSO0FBQ0F0QyxhQUFLLEdBQUcsS0FBS2k2QixRQUFMLENBQWNvWCxRQUFkLElBQTBCcjVDLElBQUksQ0FBQzZxQyxHQUFMLENBQVM3aUMsS0FBVCxFQUFnQixLQUFLaTZCLFFBQUwsQ0FBY2lJLEtBQTlCLENBQTFCLElBQWtFbGlDLEtBQTFFO0FBRUFtSSxhQUFLLENBQUMrNUIsS0FBTixDQUFZbGlDLEtBQVosR0FBb0JBLEtBQUssR0FBRyxDQUFSLElBQWFtSSxLQUFLLENBQUMrNUIsS0FBTixDQUFZbGlDLEtBQTdDO0FBRUF1ekMsY0FBTSxDQUFDanhDLFFBQUQsQ0FBTixHQUFtQixDQUFDK3dDLElBQUQsR0FBUSxLQUFLNUQsTUFBTCxDQUFZbnRDLFFBQVosRUFBc0IxTCxLQUF0QixFQUFSLEdBQXdDQSxLQUFLLEdBQUdvSixLQUFuRTtBQUNBOztBQUVELFdBQUs0dkMsT0FBTCxHQUFlMkQsTUFBZjtBQUNBO0FBeEJDLEdBL0JXLEVBd0RYO0FBQ0ZwcEMsVUFBTSxFQUFFLENBQUUsT0FBRixFQUFXLFVBQVgsQ0FETjtBQUVGOGpCLE9BQUcsRUFBRSxZQUFXO0FBQ2YsVUFBSXVsQixNQUFNLEdBQUcsRUFBYjtBQUFBLFVBQ0N0UixLQUFLLEdBQUcsS0FBS3VOLE1BRGQ7QUFBQSxVQUVDeFYsUUFBUSxHQUFHLEtBQUtBLFFBRmpCO0FBQUEsVUFHQztBQUNBelYsVUFBSSxHQUFHeHNCLElBQUksQ0FBQ2kwQixHQUFMLENBQVNnTyxRQUFRLENBQUNpSSxLQUFULEdBQWlCLENBQTFCLEVBQTZCLENBQTdCLENBSlI7QUFBQSxVQUtDdnJDLElBQUksR0FBR3FCLElBQUksQ0FBQ3kwQixJQUFMLENBQVV5VixLQUFLLENBQUMxeUMsTUFBTixHQUFlLENBQXpCLElBQThCLENBTHRDO0FBQUEsVUFNQ2lrRCxNQUFNLEdBQUd4WixRQUFRLENBQUMyVyxJQUFULElBQWlCMU8sS0FBSyxDQUFDMXlDLE1BQXZCLEdBQWdDeXFDLFFBQVEsQ0FBQzZXLE1BQVQsR0FBa0J0c0IsSUFBbEIsR0FBeUJ4c0IsSUFBSSxDQUFDaTBCLEdBQUwsQ0FBU3pILElBQVQsRUFBZTd0QixJQUFmLENBQXpELEdBQWdGLENBTjFGO0FBQUEsVUFPQ2d4QixNQUFNLEdBQUcsRUFQVjtBQUFBLFVBUUNDLE9BQU8sR0FBRyxFQVJYO0FBVUE2ckIsWUFBTSxJQUFJLENBQVY7O0FBRUEsYUFBT0EsTUFBTSxHQUFHLENBQWhCLEVBQW1CO0FBQ2xCO0FBQ0FELGNBQU0sQ0FBQ2pqRCxJQUFQLENBQVksS0FBS21qRCxTQUFMLENBQWVGLE1BQU0sQ0FBQ2hrRCxNQUFQLEdBQWdCLENBQS9CLEVBQWtDLElBQWxDLENBQVo7QUFDQW00QixjQUFNLEdBQUdBLE1BQU0sR0FBR3VhLEtBQUssQ0FBQ3NSLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDaGtELE1BQVAsR0FBZ0IsQ0FBakIsQ0FBUCxDQUFMLENBQWlDLENBQWpDLEVBQW9DbWtELFNBQXREO0FBQ0FILGNBQU0sQ0FBQ2pqRCxJQUFQLENBQVksS0FBS21qRCxTQUFMLENBQWV4UixLQUFLLENBQUMxeUMsTUFBTixHQUFlLENBQWYsR0FBbUIsQ0FBQ2drRCxNQUFNLENBQUNoa0QsTUFBUCxHQUFnQixDQUFqQixJQUFzQixDQUF4RCxFQUEyRCxJQUEzRCxDQUFaO0FBQ0FvNEIsZUFBTyxHQUFHc2EsS0FBSyxDQUFDc1IsTUFBTSxDQUFDQSxNQUFNLENBQUNoa0QsTUFBUCxHQUFnQixDQUFqQixDQUFQLENBQUwsQ0FBaUMsQ0FBakMsRUFBb0Nta0QsU0FBcEMsR0FBZ0QvckIsT0FBMUQ7QUFDQTZyQixjQUFNLElBQUksQ0FBVjtBQUNBOztBQUVELFdBQUsvRCxPQUFMLEdBQWU4RCxNQUFmO0FBRUEzNUMsT0FBQyxDQUFDOHRCLE1BQUQsQ0FBRCxDQUFVdU0sUUFBVixDQUFtQixRQUFuQixFQUE2QmhNLFFBQTdCLENBQXNDLEtBQUtrckIsTUFBM0M7QUFDQXY1QyxPQUFDLENBQUMrdEIsT0FBRCxDQUFELENBQVdzTSxRQUFYLENBQW9CLFFBQXBCLEVBQThCL0wsU0FBOUIsQ0FBd0MsS0FBS2lyQixNQUE3QztBQUNBO0FBNUJDLEdBeERXLEVBcUZYO0FBQ0ZqcEMsVUFBTSxFQUFFLENBQUUsT0FBRixFQUFXLE9BQVgsRUFBb0IsVUFBcEIsQ0FETjtBQUVGOGpCLE9BQUcsRUFBRSxZQUFXO0FBQ2YsVUFBSXVqQixHQUFHLEdBQUcsS0FBS3ZYLFFBQUwsQ0FBY3VYLEdBQWQsR0FBb0IsQ0FBcEIsR0FBd0IsQ0FBQyxDQUFuQztBQUFBLFVBQ0M3NkMsSUFBSSxHQUFHLEtBQUsrNEMsT0FBTCxDQUFhbGdELE1BQWIsR0FBc0IsS0FBS2lnRCxNQUFMLENBQVlqZ0QsTUFEMUM7QUFBQSxVQUVDOFMsUUFBUSxHQUFHLENBQUMsQ0FGYjtBQUFBLFVBR0NzeEMsUUFBUSxHQUFHLENBSFo7QUFBQSxVQUlDM2EsT0FBTyxHQUFHLENBSlg7QUFBQSxVQUtDNGEsV0FBVyxHQUFHLEVBTGY7O0FBT0EsYUFBTyxFQUFFdnhDLFFBQUYsR0FBYTNMLElBQXBCLEVBQTBCO0FBQ3pCaTlDLGdCQUFRLEdBQUdDLFdBQVcsQ0FBQ3Z4QyxRQUFRLEdBQUcsQ0FBWixDQUFYLElBQTZCLENBQXhDO0FBQ0EyMkIsZUFBTyxHQUFHLEtBQUsyVyxPQUFMLENBQWEsS0FBS3ZqQyxRQUFMLENBQWMvSixRQUFkLENBQWIsSUFBd0MsS0FBSzIzQixRQUFMLENBQWN6TSxNQUFoRTtBQUNBcW1CLG1CQUFXLENBQUN0akQsSUFBWixDQUFpQnFqRCxRQUFRLEdBQUczYSxPQUFPLEdBQUd1WSxHQUF0QztBQUNBOztBQUVELFdBQUtsQyxZQUFMLEdBQW9CdUUsV0FBcEI7QUFDQTtBQWpCQyxHQXJGVyxFQXVHWDtBQUNGMXBDLFVBQU0sRUFBRSxDQUFFLE9BQUYsRUFBVyxPQUFYLEVBQW9CLFVBQXBCLENBRE47QUFFRjhqQixPQUFHLEVBQUUsWUFBVztBQUNmLFVBQUl2MkIsT0FBTyxHQUFHLEtBQUt1aUMsUUFBTCxDQUFjbVgsWUFBNUI7QUFBQSxVQUNDeUMsV0FBVyxHQUFHLEtBQUt2RSxZQURwQjtBQUFBLFVBRUNqekIsR0FBRyxHQUFHO0FBQ0wsaUJBQVNya0IsSUFBSSxDQUFDeTBCLElBQUwsQ0FBVXowQixJQUFJLENBQUM4N0MsR0FBTCxDQUFTRCxXQUFXLENBQUNBLFdBQVcsQ0FBQ3JrRCxNQUFaLEdBQXFCLENBQXRCLENBQXBCLENBQVYsSUFBMkRrSSxPQUFPLEdBQUcsQ0FEekU7QUFFTCx3QkFBZ0JBLE9BQU8sSUFBSSxFQUZ0QjtBQUdMLHlCQUFpQkEsT0FBTyxJQUFJO0FBSHZCLE9BRlA7QUFRQSxXQUFLMDdDLE1BQUwsQ0FBWS8yQixHQUFaLENBQWdCQSxHQUFoQjtBQUNBO0FBWkMsR0F2R1csRUFvSFg7QUFDRmxTLFVBQU0sRUFBRSxDQUFFLE9BQUYsRUFBVyxPQUFYLEVBQW9CLFVBQXBCLENBRE47QUFFRjhqQixPQUFHLEVBQUUsVUFBUzlsQixLQUFULEVBQWdCO0FBQ3BCLFVBQUk3RixRQUFRLEdBQUcsS0FBS2d0QyxZQUFMLENBQWtCOS9DLE1BQWpDO0FBQUEsVUFDQzZqRCxJQUFJLEdBQUcsQ0FBQyxLQUFLcFosUUFBTCxDQUFjcVgsU0FEdkI7QUFBQSxVQUVDcFAsS0FBSyxHQUFHLEtBQUtrUixNQUFMLENBQVlsNEMsUUFBWixFQUZUOztBQUlBLFVBQUltNEMsSUFBSSxJQUFJbHJDLEtBQUssQ0FBQys1QixLQUFOLENBQVlsaUMsS0FBeEIsRUFBK0I7QUFDOUIsZUFBT3NDLFFBQVEsRUFBZixFQUFtQjtBQUNsQjZGLGVBQUssQ0FBQ2tVLEdBQU4sQ0FBVXpsQixLQUFWLEdBQWtCLEtBQUtnNUMsT0FBTCxDQUFhLEtBQUt2akMsUUFBTCxDQUFjL0osUUFBZCxDQUFiLENBQWxCO0FBQ0E0L0IsZUFBSyxDQUFDN2hDLEVBQU4sQ0FBU2lDLFFBQVQsRUFBbUIrWixHQUFuQixDQUF1QmxVLEtBQUssQ0FBQ2tVLEdBQTdCO0FBQ0E7QUFDRCxPQUxELE1BS08sSUFBSWczQixJQUFKLEVBQVU7QUFDaEJsckMsYUFBSyxDQUFDa1UsR0FBTixDQUFVemxCLEtBQVYsR0FBa0J1UixLQUFLLENBQUMrNUIsS0FBTixDQUFZdHJDLEtBQTlCO0FBQ0FzckMsYUFBSyxDQUFDN2xCLEdBQU4sQ0FBVWxVLEtBQUssQ0FBQ2tVLEdBQWhCO0FBQ0E7QUFDRDtBQWhCQyxHQXBIVyxFQXFJWDtBQUNGbFMsVUFBTSxFQUFFLENBQUUsT0FBRixDQUROO0FBRUY4akIsT0FBRyxFQUFFLFlBQVc7QUFDZixXQUFLcWhCLFlBQUwsQ0FBa0I5L0MsTUFBbEIsR0FBMkIsQ0FBM0IsSUFBZ0MsS0FBSzRqRCxNQUFMLENBQVlqZ0IsVUFBWixDQUF1QixPQUF2QixDQUFoQztBQUNBO0FBSkMsR0FySVcsRUEwSVg7QUFDRmhwQixVQUFNLEVBQUUsQ0FBRSxPQUFGLEVBQVcsT0FBWCxFQUFvQixVQUFwQixDQUROO0FBRUY4akIsT0FBRyxFQUFFLFVBQVM5bEIsS0FBVCxFQUFnQjtBQUNwQkEsV0FBSyxDQUFDOHdCLE9BQU4sR0FBZ0I5d0IsS0FBSyxDQUFDOHdCLE9BQU4sR0FBZ0IsS0FBS21hLE1BQUwsQ0FBWWw0QyxRQUFaLEdBQXVCckssS0FBdkIsQ0FBNkJzWCxLQUFLLENBQUM4d0IsT0FBbkMsQ0FBaEIsR0FBOEQsQ0FBOUU7QUFDQTl3QixXQUFLLENBQUM4d0IsT0FBTixHQUFnQmpoQyxJQUFJLENBQUNpMEIsR0FBTCxDQUFTLEtBQUs4bkIsT0FBTCxFQUFULEVBQXlCLzdDLElBQUksQ0FBQzZxQyxHQUFMLENBQVMsS0FBS21SLE9BQUwsRUFBVCxFQUF5QjdyQyxLQUFLLENBQUM4d0IsT0FBL0IsQ0FBekIsQ0FBaEI7QUFDQSxXQUFLOXBCLEtBQUwsQ0FBV2hILEtBQUssQ0FBQzh3QixPQUFqQjtBQUNBO0FBTkMsR0ExSVcsRUFpSlg7QUFDRjl1QixVQUFNLEVBQUUsQ0FBRSxVQUFGLENBRE47QUFFRjhqQixPQUFHLEVBQUUsWUFBVztBQUNmLFdBQUs2RCxPQUFMLENBQWEsS0FBSytoQixXQUFMLENBQWlCLEtBQUt6RSxRQUF0QixDQUFiO0FBQ0E7QUFKQyxHQWpKVyxFQXNKWDtBQUNGamxDLFVBQU0sRUFBRSxDQUFFLE9BQUYsRUFBVyxVQUFYLEVBQXVCLE9BQXZCLEVBQWdDLFVBQWhDLENBRE47QUFFRjhqQixPQUFHLEVBQUUsWUFBVztBQUNmLFVBQUl1akIsR0FBRyxHQUFHLEtBQUt2WCxRQUFMLENBQWN1WCxHQUFkLEdBQW9CLENBQXBCLEdBQXdCLENBQUMsQ0FBbkM7QUFBQSxVQUNDOTVDLE9BQU8sR0FBRyxLQUFLdWlDLFFBQUwsQ0FBY21YLFlBQWQsR0FBNkIsQ0FEeEM7QUFBQSxVQUVDNkMsS0FBSyxHQUFHLEtBQUtKLFdBQUwsQ0FBaUIsS0FBSzVhLE9BQUwsRUFBakIsSUFBbUN2aEMsT0FGNUM7QUFBQSxVQUdDbUosR0FBRyxHQUFHb3pDLEtBQUssR0FBRyxLQUFLcjlDLEtBQUwsS0FBZTQ2QyxHQUg5QjtBQUFBLFVBSUMwQyxLQUpEO0FBQUEsVUFJUUMsS0FKUjtBQUFBLFVBSWUva0QsT0FBTyxHQUFHLEVBSnpCO0FBQUEsVUFJNkJHLENBSjdCO0FBQUEsVUFJZ0N1akIsQ0FKaEM7O0FBTUEsV0FBS3ZqQixDQUFDLEdBQUcsQ0FBSixFQUFPdWpCLENBQUMsR0FBRyxLQUFLdzhCLFlBQUwsQ0FBa0I5L0MsTUFBbEMsRUFBMENELENBQUMsR0FBR3VqQixDQUE5QyxFQUFpRHZqQixDQUFDLEVBQWxELEVBQXNEO0FBQ3JEMmtELGFBQUssR0FBRyxLQUFLNUUsWUFBTCxDQUFrQi8vQyxDQUFDLEdBQUcsQ0FBdEIsS0FBNEIsQ0FBcEM7QUFDQTRrRCxhQUFLLEdBQUduOEMsSUFBSSxDQUFDODdDLEdBQUwsQ0FBUyxLQUFLeEUsWUFBTCxDQUFrQi8vQyxDQUFsQixDQUFULElBQWlDbUksT0FBTyxHQUFHODVDLEdBQW5EOztBQUVBLFlBQUssS0FBSzRDLEVBQUwsQ0FBUUYsS0FBUixFQUFlLElBQWYsRUFBcUJELEtBQXJCLEtBQWdDLEtBQUtHLEVBQUwsQ0FBUUYsS0FBUixFQUFlLEdBQWYsRUFBb0JyekMsR0FBcEIsQ0FBakMsSUFDQyxLQUFLdXpDLEVBQUwsQ0FBUUQsS0FBUixFQUFlLEdBQWYsRUFBb0JGLEtBQXBCLEtBQThCLEtBQUtHLEVBQUwsQ0FBUUQsS0FBUixFQUFlLEdBQWYsRUFBb0J0ekMsR0FBcEIsQ0FEbkMsRUFDOEQ7QUFDN0R6UixpQkFBTyxDQUFDbUIsSUFBUixDQUFhaEIsQ0FBYjtBQUNBO0FBQ0Q7O0FBRUQsV0FBSzZqRCxNQUFMLENBQVlsNEMsUUFBWixDQUFxQixTQUFyQixFQUFnQ3E1QixXQUFoQyxDQUE0QyxRQUE1QztBQUNBLFdBQUs2ZSxNQUFMLENBQVlsNEMsUUFBWixDQUFxQixTQUFTOUwsT0FBTyxDQUFDMlksSUFBUixDQUFhLFNBQWIsQ0FBVCxHQUFtQyxHQUF4RCxFQUE2RG1zQixRQUE3RCxDQUFzRSxRQUF0RTtBQUVBLFdBQUtrZixNQUFMLENBQVlsNEMsUUFBWixDQUFxQixTQUFyQixFQUFnQ3E1QixXQUFoQyxDQUE0QyxRQUE1Qzs7QUFDQSxVQUFJLEtBQUswRixRQUFMLENBQWM0VyxNQUFsQixFQUEwQjtBQUN6QixhQUFLdUMsTUFBTCxDQUFZbDRDLFFBQVosR0FBdUJtRixFQUF2QixDQUEwQixLQUFLNDRCLE9BQUwsRUFBMUIsRUFBMEMvRSxRQUExQyxDQUFtRCxRQUFuRDtBQUNBO0FBQ0Q7QUExQkMsR0F0SlcsQ0FBZDtBQW1MQTs7OztBQUdBNmEsS0FBRyxDQUFDNS9DLFNBQUosQ0FBY2tsRCxlQUFkLEdBQWdDLFlBQVc7QUFDMUMsU0FBS2pCLE1BQUwsR0FBYyxLQUFLaEosUUFBTCxDQUFjLy9CLElBQWQsQ0FBbUIsTUFBTSxLQUFLNHZCLFFBQUwsQ0FBYzJZLFVBQXZDLENBQWQsQ0FEMEMsQ0FHMUM7O0FBQ0EsUUFBSSxLQUFLUSxNQUFMLENBQVk1akQsTUFBaEIsRUFBd0I7QUFDdkI7QUFDQTs7QUFFRCxTQUFLNDZDLFFBQUwsQ0FBY2xXLFFBQWQsQ0FBdUIsS0FBS3orQixPQUFMLENBQWE4OEMsWUFBcEMsRUFSMEMsQ0FVMUM7O0FBQ0EsU0FBS2EsTUFBTCxHQUFjdjVDLENBQUMsQ0FBQyxNQUFNLEtBQUtvZ0MsUUFBTCxDQUFjbVksWUFBcEIsR0FBbUMsR0FBcEMsRUFBeUM7QUFDdkQsZUFBUyxLQUFLblksUUFBTCxDQUFjMlk7QUFEZ0MsS0FBekMsQ0FBRCxDQUVYeHpCLElBRlcsQ0FFTHZsQixDQUFDLENBQUUsUUFBRixFQUFZO0FBQ3JCLGVBQVMsS0FBS29nQyxRQUFMLENBQWM0WTtBQURGLEtBQVosQ0FGSSxDQUFkLENBWDBDLENBaUIxQzs7QUFDQSxTQUFLekksUUFBTCxDQUFjemlCLE1BQWQsQ0FBcUIsS0FBS3lyQixNQUFMLENBQVk1bEMsTUFBWixFQUFyQjtBQUNBLEdBbkJEO0FBcUJBOzs7OztBQUdBdWhDLEtBQUcsQ0FBQzUvQyxTQUFKLENBQWNtbEQsZUFBZCxHQUFnQyxZQUFXO0FBQzFDLFFBQUlDLE1BQU0sR0FBRyxLQUFLbkssUUFBTCxDQUFjLy9CLElBQWQsQ0FBbUIsV0FBbkIsQ0FBYixDQUQwQyxDQUcxQzs7QUFDQSxRQUFJa3FDLE1BQU0sQ0FBQy9rRCxNQUFYLEVBQW1CO0FBQ2xCLFdBQUtpZ0QsTUFBTCxHQUFjOEUsTUFBTSxDQUFDMTBDLEdBQVAsR0FBYU0sR0FBYixDQUFpQixVQUFTdWlDLElBQVQsRUFBZTtBQUM3QyxlQUFPN29DLENBQUMsQ0FBQzZvQyxJQUFELENBQVI7QUFDQSxPQUZhLENBQWQ7QUFJQSxXQUFLaU4sUUFBTCxHQUFnQixLQUFLRixNQUFMLENBQVl0dkMsR0FBWixDQUFnQixZQUFXO0FBQzFDLGVBQU8sQ0FBUDtBQUNBLE9BRmUsQ0FBaEI7QUFJQSxXQUFLcTBDLE9BQUw7QUFFQTtBQUNBLEtBaEJ5QyxDQWtCMUM7OztBQUNBLFNBQUtqZ0QsT0FBTCxDQUFhLEtBQUs2MUMsUUFBTCxDQUFjbHZDLFFBQWQsR0FBeUJrWSxHQUF6QixDQUE2QixLQUFLZ2dDLE1BQUwsQ0FBWTVsQyxNQUFaLEVBQTdCLENBQWIsRUFuQjBDLENBcUIxQzs7QUFDQSxRQUFJLEtBQUtpbkMsU0FBTCxFQUFKLEVBQXNCO0FBQ3JCO0FBQ0EsV0FBS0QsT0FBTDtBQUNBLEtBSEQsTUFHTztBQUNOO0FBQ0EsV0FBS0UsVUFBTCxDQUFnQixPQUFoQjtBQUNBOztBQUVELFNBQUt0SyxRQUFMLENBQ0U3VixXQURGLENBQ2MsS0FBSzkrQixPQUFMLENBQWE4OEMsWUFEM0IsRUFFRXJlLFFBRkYsQ0FFVyxLQUFLeitCLE9BQUwsQ0FBYTY4QyxXQUZ4QjtBQUdBLEdBakNEO0FBbUNBOzs7Ozs7QUFJQXZELEtBQUcsQ0FBQzUvQyxTQUFKLENBQWN3aEQsVUFBZCxHQUEyQixZQUFXO0FBQ3JDLFNBQUtnRSxLQUFMLENBQVcsY0FBWDtBQUNBLFNBQUs1eEIsT0FBTCxDQUFhLFlBQWI7QUFFQSxTQUFLcW5CLFFBQUwsQ0FBYzVWLFdBQWQsQ0FBMEIsS0FBS3lGLFFBQUwsQ0FBY3VZLFFBQXhDLEVBQWtELEtBQUt2WSxRQUFMLENBQWN1WCxHQUFoRTs7QUFFQSxRQUFJLEtBQUt2WCxRQUFMLENBQWNxWCxTQUFkLElBQTJCLENBQUMsS0FBSzErQixFQUFMLENBQVEsYUFBUixDQUFoQyxFQUF3RDtBQUN2RCxVQUFJZ2lDLElBQUosRUFBVUMsY0FBVixFQUEwQmorQyxLQUExQjtBQUNBZytDLFVBQUksR0FBRyxLQUFLeEssUUFBTCxDQUFjLy9CLElBQWQsQ0FBbUIsS0FBbkIsQ0FBUDtBQUNBd3FDLG9CQUFjLEdBQUcsS0FBSzVhLFFBQUwsQ0FBY2lZLGtCQUFkLEdBQW1DLE1BQU0sS0FBS2pZLFFBQUwsQ0FBY2lZLGtCQUF2RCxHQUE0RWhnRCxTQUE3RjtBQUNBMEUsV0FBSyxHQUFHLEtBQUt3ekMsUUFBTCxDQUFjbHZDLFFBQWQsQ0FBdUIyNUMsY0FBdkIsRUFBdUNqK0MsS0FBdkMsRUFBUjs7QUFFQSxVQUFJZytDLElBQUksQ0FBQ3BsRCxNQUFMLElBQWVvSCxLQUFLLElBQUksQ0FBNUIsRUFBK0I7QUFDOUIsYUFBS2srQyxzQkFBTCxDQUE0QkYsSUFBNUI7QUFDQTtBQUNEOztBQUVELFNBQUtQLGVBQUw7QUFDQSxTQUFLQyxlQUFMLEdBbEJxQyxDQW9CckM7O0FBQ0EsU0FBS1MscUJBQUw7QUFFQSxTQUFLQyxLQUFMLENBQVcsY0FBWDtBQUNBLFNBQUtqeUIsT0FBTCxDQUFhLGFBQWI7QUFDQSxHQXpCRDtBQTJCQTs7Ozs7OztBQUtBZ3NCLEtBQUcsQ0FBQzUvQyxTQUFKLENBQWNzbEQsU0FBZCxHQUEwQixZQUFXO0FBQ3BDLFdBQU8sS0FBS3hhLFFBQUwsQ0FBYzhXLGVBQWQsR0FDSixLQUFLM0csUUFBTCxDQUFjeDNCLEVBQWQsQ0FBaUIsVUFBakIsQ0FESSxHQUVKLElBRkg7QUFHQSxHQUpEO0FBTUE7Ozs7Ozs7O0FBTUFtOEIsS0FBRyxDQUFDNS9DLFNBQUosQ0FBY3FJLEtBQWQsR0FBc0IsWUFBVztBQUNoQyxRQUFJeTlDLFFBQVEsR0FBRyxLQUFLQSxRQUFMLEVBQWY7QUFBQSxRQUNDQyxVQUFVLEdBQUcsS0FBS3ovQyxPQUFMLENBQWFtOEMsVUFEM0I7QUFBQSxRQUVDcDlDLEtBQUssR0FBRyxDQUFDLENBRlY7QUFBQSxRQUdDeWxDLFFBQVEsR0FBRyxJQUhaOztBQUtBLFFBQUksQ0FBQ2liLFVBQUwsRUFBaUI7QUFDaEJqYixjQUFRLEdBQUdwZ0MsQ0FBQyxDQUFDdkksTUFBRixDQUFTLEVBQVQsRUFBYSxLQUFLbUUsT0FBbEIsQ0FBWDtBQUNBLEtBRkQsTUFFTztBQUNOb0UsT0FBQyxDQUFDcUcsSUFBRixDQUFPZzFDLFVBQVAsRUFBbUIsVUFBU0MsVUFBVCxFQUFxQjtBQUN2QyxZQUFJQSxVQUFVLElBQUlGLFFBQWQsSUFBMEJFLFVBQVUsR0FBRzNnRCxLQUEzQyxFQUFrRDtBQUNqREEsZUFBSyxHQUFHNGdELE1BQU0sQ0FBQ0QsVUFBRCxDQUFkO0FBQ0E7QUFDRCxPQUpEO0FBTUFsYixjQUFRLEdBQUdwZ0MsQ0FBQyxDQUFDdkksTUFBRixDQUFTLEVBQVQsRUFBYSxLQUFLbUUsT0FBbEIsRUFBMkJ5L0MsVUFBVSxDQUFDMWdELEtBQUQsQ0FBckMsQ0FBWDs7QUFDQSxVQUFJLE9BQU95bEMsUUFBUSxDQUFDbVgsWUFBaEIsS0FBaUMsVUFBckMsRUFBaUQ7QUFDaERuWCxnQkFBUSxDQUFDbVgsWUFBVCxHQUF3Qm5YLFFBQVEsQ0FBQ21YLFlBQVQsRUFBeEI7QUFDQTs7QUFDRCxhQUFPblgsUUFBUSxDQUFDMlgsVUFBaEIsQ0FYTSxDQWFOOztBQUNBLFVBQUkzWCxRQUFRLENBQUN3WSxlQUFiLEVBQThCO0FBQzdCLGFBQUtySSxRQUFMLENBQWM3MEMsSUFBZCxDQUFtQixPQUFuQixFQUNDLEtBQUs2MEMsUUFBTCxDQUFjNzBDLElBQWQsQ0FBbUIsT0FBbkIsRUFBNEJoQixPQUE1QixDQUFvQyxJQUFJcVEsTUFBSixDQUFXLE1BQU0sS0FBS25QLE9BQUwsQ0FBYWc5QyxlQUFuQixHQUFxQyxXQUFoRCxFQUE2RCxHQUE3RCxDQUFwQyxFQUF1RyxPQUFPaitDLEtBQTlHLENBREQ7QUFHQTtBQUNEOztBQUVELFNBQUt1dUIsT0FBTCxDQUFhLFFBQWIsRUFBdUI7QUFBRXN5QixjQUFRLEVBQUU7QUFBRXQwQyxZQUFJLEVBQUUsVUFBUjtBQUFvQjlLLGFBQUssRUFBRWdrQztBQUEzQjtBQUFaLEtBQXZCO0FBQ0EsU0FBS3NWLFdBQUwsR0FBbUIvNkMsS0FBbkI7QUFDQSxTQUFLeWxDLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0EsU0FBS3lhLFVBQUwsQ0FBZ0IsVUFBaEI7QUFDQSxTQUFLM3hCLE9BQUwsQ0FBYSxTQUFiLEVBQXdCO0FBQUVzeUIsY0FBUSxFQUFFO0FBQUV0MEMsWUFBSSxFQUFFLFVBQVI7QUFBb0I5SyxhQUFLLEVBQUUsS0FBS2drQztBQUFoQztBQUFaLEtBQXhCO0FBQ0EsR0FsQ0Q7QUFvQ0E7Ozs7OztBQUlBOFUsS0FBRyxDQUFDNS9DLFNBQUosQ0FBY21tRCxZQUFkLEdBQTZCLFlBQVc7QUFDdkMsUUFBSSxLQUFLcmIsUUFBTCxDQUFjcVgsU0FBbEIsRUFBNkI7QUFDNUIsV0FBS3JYLFFBQUwsQ0FBY21YLFlBQWQsR0FBNkIsS0FBN0I7QUFDQSxXQUFLblgsUUFBTCxDQUFjajZCLEtBQWQsR0FBc0IsS0FBdEI7QUFDQTtBQUNELEdBTEQ7QUFPQTs7Ozs7Ozs7QUFNQSt1QyxLQUFHLENBQUM1L0MsU0FBSixDQUFjb21ELE9BQWQsR0FBd0IsVUFBUzdTLElBQVQsRUFBZTtBQUN0QyxRQUFJNXZDLEtBQUssR0FBRyxLQUFLaXdCLE9BQUwsQ0FBYSxTQUFiLEVBQXdCO0FBQUVuTyxhQUFPLEVBQUU4dEI7QUFBWCxLQUF4QixDQUFaOztBQUVBLFFBQUksQ0FBQzV2QyxLQUFLLENBQUNpRCxJQUFYLEVBQWlCO0FBQ2hCakQsV0FBSyxDQUFDaUQsSUFBTixHQUFhOEQsQ0FBQyxDQUFDLE1BQU0sS0FBS29nQyxRQUFMLENBQWNrWSxXQUFwQixHQUFrQyxJQUFuQyxDQUFELENBQ1hqZSxRQURXLENBQ0YsS0FBS3orQixPQUFMLENBQWFrOUMsU0FEWCxFQUNzQmhyQixNQUR0QixDQUM2QithLElBRDdCLENBQWI7QUFFQTs7QUFFRCxTQUFLM2YsT0FBTCxDQUFhLFVBQWIsRUFBeUI7QUFBRW5PLGFBQU8sRUFBRTloQixLQUFLLENBQUNpRDtBQUFqQixLQUF6QjtBQUVBLFdBQU9qRCxLQUFLLENBQUNpRCxJQUFiO0FBQ0EsR0FYRDtBQWFBOzs7Ozs7QUFJQWc1QyxLQUFHLENBQUM1L0MsU0FBSixDQUFjcW1ELE1BQWQsR0FBdUIsWUFBVztBQUNqQyxRQUFJam1ELENBQUMsR0FBRyxDQUFSO0FBQUEsUUFDQ3VqQixDQUFDLEdBQUcsS0FBS2c5QixLQUFMLENBQVd0Z0QsTUFEaEI7QUFBQSxRQUVDMmEsTUFBTSxHQUFHdFEsQ0FBQyxDQUFDOG1DLEtBQUYsQ0FBUSxVQUFTaFMsQ0FBVCxFQUFZO0FBQUUsYUFBTyxLQUFLQSxDQUFMLENBQVA7QUFBZ0IsS0FBdEMsRUFBd0MsS0FBS2toQixZQUE3QyxDQUZWO0FBQUEsUUFHQzFuQyxLQUFLLEdBQUcsRUFIVDs7QUFLQSxXQUFPNVksQ0FBQyxHQUFHdWpCLENBQVgsRUFBYztBQUNiLFVBQUksS0FBSys4QixZQUFMLENBQWtCNEYsR0FBbEIsSUFBeUI1N0MsQ0FBQyxDQUFDMkcsSUFBRixDQUFPLEtBQUtzdkMsS0FBTCxDQUFXdmdELENBQVgsRUFBYzRhLE1BQXJCLEVBQTZCQSxNQUE3QixFQUFxQzNhLE1BQXJDLEdBQThDLENBQTNFLEVBQThFO0FBQzdFLGFBQUtzZ0QsS0FBTCxDQUFXdmdELENBQVgsRUFBYzArQixHQUFkLENBQWtCOWxCLEtBQWxCO0FBQ0E7O0FBQ0Q1WSxPQUFDO0FBQ0Q7O0FBRUQsU0FBS3NnRCxZQUFMLEdBQW9CLEVBQXBCO0FBRUEsS0FBQyxLQUFLajlCLEVBQUwsQ0FBUSxPQUFSLENBQUQsSUFBcUIsS0FBSytoQyxLQUFMLENBQVcsT0FBWCxDQUFyQjtBQUNBLEdBaEJEO0FBa0JBOzs7Ozs7OztBQU1BNUYsS0FBRyxDQUFDNS9DLFNBQUosQ0FBY3lILEtBQWQsR0FBc0IsVUFBU3UxQixTQUFULEVBQW9CO0FBQ3pDQSxhQUFTLEdBQUdBLFNBQVMsSUFBSTRpQixHQUFHLENBQUM3TyxLQUFKLENBQVU2UyxPQUFuQzs7QUFDQSxZQUFRNW1CLFNBQVI7QUFDQyxXQUFLNGlCLEdBQUcsQ0FBQzdPLEtBQUosQ0FBVThTLEtBQWY7QUFDQSxXQUFLakUsR0FBRyxDQUFDN08sS0FBSixDQUFVK1MsS0FBZjtBQUNDLGVBQU8sS0FBS3pELE1BQVo7O0FBQ0Q7QUFDQyxlQUFPLEtBQUtBLE1BQUwsR0FBYyxLQUFLdlYsUUFBTCxDQUFjbVgsWUFBZCxHQUE2QixDQUEzQyxHQUErQyxLQUFLblgsUUFBTCxDQUFjek0sTUFBcEU7QUFMRjtBQU9BLEdBVEQ7QUFXQTs7Ozs7O0FBSUF1aEIsS0FBRyxDQUFDNS9DLFNBQUosQ0FBY3FsRCxPQUFkLEdBQXdCLFlBQVc7QUFDbEMsU0FBS0csS0FBTCxDQUFXLFlBQVg7QUFDQSxTQUFLNXhCLE9BQUwsQ0FBYSxTQUFiO0FBRUEsU0FBS3ZyQixLQUFMO0FBRUEsU0FBSzg5QyxZQUFMO0FBRUEsU0FBS2xMLFFBQUwsQ0FBY2xXLFFBQWQsQ0FBdUIsS0FBS3orQixPQUFMLENBQWE0OEMsWUFBcEM7QUFFQSxTQUFLbUQsTUFBTDtBQUVBLFNBQUtwTCxRQUFMLENBQWM3VixXQUFkLENBQTBCLEtBQUs5K0IsT0FBTCxDQUFhNDhDLFlBQXZDO0FBRUEsU0FBSzJDLEtBQUwsQ0FBVyxZQUFYO0FBQ0EsU0FBS2p5QixPQUFMLENBQWEsV0FBYjtBQUNBLEdBaEJEO0FBa0JBOzs7Ozs7QUFJQWdzQixLQUFHLENBQUM1L0MsU0FBSixDQUFjdW1ELGlCQUFkLEdBQWtDLFlBQVc7QUFDNUM3bUQsVUFBTSxDQUFDZ0YsWUFBUCxDQUFvQixLQUFLOGhELFdBQXpCO0FBQ0EsU0FBS0EsV0FBTCxHQUFtQjltRCxNQUFNLENBQUNtRixVQUFQLENBQWtCLEtBQUtpN0MsU0FBTCxDQUFlMkcsUUFBakMsRUFBMkMsS0FBSzNiLFFBQUwsQ0FBYzRYLHFCQUF6RCxDQUFuQjtBQUNBLEdBSEQ7QUFLQTs7Ozs7O0FBSUE5QyxLQUFHLENBQUM1L0MsU0FBSixDQUFjeW1ELFFBQWQsR0FBeUIsWUFBVztBQUNuQyxRQUFJLENBQUMsS0FBS25HLE1BQUwsQ0FBWWpnRCxNQUFqQixFQUF5QjtBQUN4QixhQUFPLEtBQVA7QUFDQTs7QUFFRCxRQUFJLEtBQUtnZ0QsTUFBTCxLQUFnQixLQUFLcEYsUUFBTCxDQUFjeHpDLEtBQWQsRUFBcEIsRUFBMkM7QUFDMUMsYUFBTyxLQUFQO0FBQ0E7O0FBRUQsUUFBSSxDQUFDLEtBQUs2OUMsU0FBTCxFQUFMLEVBQXVCO0FBQ3RCLGFBQU8sS0FBUDtBQUNBOztBQUVELFNBQUtFLEtBQUwsQ0FBVyxVQUFYOztBQUVBLFFBQUksS0FBSzV4QixPQUFMLENBQWEsUUFBYixFQUF1QlEsa0JBQXZCLEVBQUosRUFBaUQ7QUFDaEQsV0FBS3l4QixLQUFMLENBQVcsVUFBWDtBQUNBLGFBQU8sS0FBUDtBQUNBOztBQUVELFNBQUtOLFVBQUwsQ0FBZ0IsT0FBaEI7QUFFQSxTQUFLRixPQUFMO0FBRUEsU0FBS1EsS0FBTCxDQUFXLFVBQVg7QUFDQSxTQUFLanlCLE9BQUwsQ0FBYSxTQUFiO0FBQ0EsR0ExQkQ7QUE0QkE7Ozs7Ozs7O0FBTUFnc0IsS0FBRyxDQUFDNS9DLFNBQUosQ0FBYzRsRCxxQkFBZCxHQUFzQyxZQUFXO0FBQ2hELFFBQUlsN0MsQ0FBQyxDQUFDMEUsT0FBRixDQUFVNm1DLFVBQWQsRUFBMEI7QUFDekIsV0FBS2dPLE1BQUwsQ0FBWXBqRCxFQUFaLENBQWU2SixDQUFDLENBQUMwRSxPQUFGLENBQVU2bUMsVUFBVixDQUFxQnZrQyxHQUFyQixHQUEyQixXQUExQyxFQUF1RGhILENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsS0FBS21ILGVBQWIsRUFBOEIsSUFBOUIsQ0FBdkQ7QUFDQTs7QUFFRCxRQUFJLEtBQUs3TixRQUFMLENBQWMyWCxVQUFkLEtBQTZCLEtBQWpDLEVBQXdDO0FBQ3ZDLFdBQUs1aEQsRUFBTCxDQUFRbkIsTUFBUixFQUFnQixRQUFoQixFQUEwQixLQUFLb2dELFNBQUwsQ0FBZXlHLGlCQUF6QztBQUNBOztBQUVELFFBQUksS0FBS3piLFFBQUwsQ0FBYytXLFNBQWxCLEVBQTZCO0FBQzVCLFdBQUs1RyxRQUFMLENBQWNsVyxRQUFkLENBQXVCLEtBQUt6K0IsT0FBTCxDQUFhaTlDLFNBQXBDO0FBQ0EsV0FBS1UsTUFBTCxDQUFZcGpELEVBQVosQ0FBZSxvQkFBZixFQUFxQzZKLENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsS0FBS2tWLFdBQWIsRUFBMEIsSUFBMUIsQ0FBckM7QUFDQSxXQUFLekMsTUFBTCxDQUFZcGpELEVBQVosQ0FBZSx5Q0FBZixFQUEwRCxZQUFXO0FBQUUsZUFBTyxLQUFQO0FBQWMsT0FBckY7QUFDQTs7QUFFRCxRQUFJLEtBQUtpcUMsUUFBTCxDQUFjZ1gsU0FBbEIsRUFBNEI7QUFDM0IsV0FBS21DLE1BQUwsQ0FBWXBqRCxFQUFaLENBQWUscUJBQWYsRUFBc0M2SixDQUFDLENBQUM4bUMsS0FBRixDQUFRLEtBQUtrVixXQUFiLEVBQTBCLElBQTFCLENBQXRDO0FBQ0EsV0FBS3pDLE1BQUwsQ0FBWXBqRCxFQUFaLENBQWUsc0JBQWYsRUFBdUM2SixDQUFDLENBQUM4bUMsS0FBRixDQUFRLEtBQUttVixTQUFiLEVBQXdCLElBQXhCLENBQXZDO0FBQ0E7QUFDRCxHQW5CRDtBQXFCQTs7Ozs7Ozs7O0FBT0EvRyxLQUFHLENBQUM1L0MsU0FBSixDQUFjMG1ELFdBQWQsR0FBNEIsVUFBUy9pRCxLQUFULEVBQWdCO0FBQzNDLFFBQUltOUMsS0FBSyxHQUFHLElBQVo7O0FBRUEsUUFBSW45QyxLQUFLLENBQUN5eUIsS0FBTixLQUFnQixDQUFwQixFQUF1QjtBQUN0QjtBQUNBOztBQUVELFFBQUkxckIsQ0FBQyxDQUFDMEUsT0FBRixDQUFVK21DLFNBQWQsRUFBeUI7QUFDeEIySyxXQUFLLEdBQUcsS0FBS21ELE1BQUwsQ0FBWS8yQixHQUFaLENBQWdCLFdBQWhCLEVBQTZCOW5CLE9BQTdCLENBQXFDLFlBQXJDLEVBQW1ELEVBQW5ELEVBQXVEZ08sS0FBdkQsQ0FBNkQsR0FBN0QsQ0FBUjtBQUNBMHRDLFdBQUssR0FBRztBQUNQaE4sU0FBQyxFQUFFZ04sS0FBSyxDQUFDQSxLQUFLLENBQUN6Z0QsTUFBTixLQUFpQixFQUFqQixHQUFzQixFQUF0QixHQUEyQixDQUE1QixDQUREO0FBRVAwekMsU0FBQyxFQUFFK00sS0FBSyxDQUFDQSxLQUFLLENBQUN6Z0QsTUFBTixLQUFpQixFQUFqQixHQUFzQixFQUF0QixHQUEyQixDQUE1QjtBQUZELE9BQVI7QUFJQSxLQU5ELE1BTU87QUFDTnlnRCxXQUFLLEdBQUcsS0FBS21ELE1BQUwsQ0FBWTVwQixRQUFaLEVBQVI7QUFDQXltQixXQUFLLEdBQUc7QUFDUGhOLFNBQUMsRUFBRSxLQUFLaEosUUFBTCxDQUFjdVgsR0FBZCxHQUNGdkIsS0FBSyxDQUFDMWlCLElBQU4sR0FBYSxLQUFLNmxCLE1BQUwsQ0FBWXg4QyxLQUFaLEVBQWIsR0FBbUMsS0FBS0EsS0FBTCxFQUFuQyxHQUFrRCxLQUFLcWpDLFFBQUwsQ0FBY3pNLE1BRDlELEdBRUZ5aUIsS0FBSyxDQUFDMWlCLElBSEE7QUFJUDJWLFNBQUMsRUFBRStNLEtBQUssQ0FBQ25tQztBQUpGLE9BQVI7QUFNQTs7QUFFRCxRQUFJLEtBQUs4SSxFQUFMLENBQVEsV0FBUixDQUFKLEVBQTBCO0FBQ3pCL1ksT0FBQyxDQUFDMEUsT0FBRixDQUFVK21DLFNBQVYsR0FBc0IsS0FBS3hULE9BQUwsQ0FBYW1lLEtBQUssQ0FBQ2hOLENBQW5CLENBQXRCLEdBQThDLEtBQUttUSxNQUFMLENBQVk1M0IsSUFBWixFQUE5QztBQUNBLFdBQUtrNUIsVUFBTCxDQUFnQixVQUFoQjtBQUNBOztBQUVELFNBQUt0SyxRQUFMLENBQWM1VixXQUFkLENBQTBCLEtBQUsvK0IsT0FBTCxDQUFhcTlDLFNBQXZDLEVBQWtEaGdELEtBQUssQ0FBQ0MsSUFBTixLQUFlLFdBQWpFO0FBRUEsU0FBSzArQixLQUFMLENBQVcsQ0FBWDtBQUVBLFNBQUtzZSxLQUFMLENBQVdqZCxJQUFYLEdBQWtCLElBQUlydkIsSUFBSixHQUFXc3lDLE9BQVgsRUFBbEI7QUFDQSxTQUFLaEcsS0FBTCxDQUFXNXVDLE1BQVgsR0FBb0J0SCxDQUFDLENBQUMvRyxLQUFLLENBQUNxTyxNQUFQLENBQXJCO0FBQ0EsU0FBSzR1QyxLQUFMLENBQVdFLEtBQVgsQ0FBaUIxaUMsS0FBakIsR0FBeUIwaUMsS0FBekI7QUFDQSxTQUFLRixLQUFMLENBQVdFLEtBQVgsQ0FBaUJoWCxPQUFqQixHQUEyQmdYLEtBQTNCO0FBQ0EsU0FBS0YsS0FBTCxDQUFXQyxPQUFYLEdBQXFCLEtBQUtBLE9BQUwsQ0FBYWw5QyxLQUFiLENBQXJCO0FBRUErRyxLQUFDLENBQUNwSCxRQUFELENBQUQsQ0FBWXpDLEVBQVosQ0FBZSxvQ0FBZixFQUFxRDZKLENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsS0FBS21WLFNBQWIsRUFBd0IsSUFBeEIsQ0FBckQ7QUFFQWo4QyxLQUFDLENBQUNwSCxRQUFELENBQUQsQ0FBWXl0QixHQUFaLENBQWdCLHVDQUFoQixFQUF5RHJtQixDQUFDLENBQUM4bUMsS0FBRixDQUFRLFVBQVM3dEMsS0FBVCxFQUFnQjtBQUNoRixVQUFJMDVCLEtBQUssR0FBRyxLQUFLd3BCLFVBQUwsQ0FBZ0IsS0FBS2pHLEtBQUwsQ0FBV0MsT0FBM0IsRUFBb0MsS0FBS0EsT0FBTCxDQUFhbDlDLEtBQWIsQ0FBcEMsQ0FBWjtBQUVBK0csT0FBQyxDQUFDcEgsUUFBRCxDQUFELENBQVl6QyxFQUFaLENBQWUsdUNBQWYsRUFBd0Q2SixDQUFDLENBQUM4bUMsS0FBRixDQUFRLEtBQUtzVixVQUFiLEVBQXlCLElBQXpCLENBQXhEOztBQUVBLFVBQUlqK0MsSUFBSSxDQUFDODdDLEdBQUwsQ0FBU3RuQixLQUFLLENBQUN5VyxDQUFmLElBQW9CanJDLElBQUksQ0FBQzg3QyxHQUFMLENBQVN0bkIsS0FBSyxDQUFDMFcsQ0FBZixDQUFwQixJQUF5QyxLQUFLdHdCLEVBQUwsQ0FBUSxPQUFSLENBQTdDLEVBQStEO0FBQzlEO0FBQ0E7O0FBRUQ5ZixXQUFLLENBQUNpdkIsY0FBTjtBQUVBLFdBQUs0eUIsS0FBTCxDQUFXLFVBQVg7QUFDQSxXQUFLNXhCLE9BQUwsQ0FBYSxNQUFiO0FBQ0EsS0Fid0QsRUFhdEQsSUFic0QsQ0FBekQ7QUFjQSxHQXRERDtBQXdEQTs7Ozs7Ozs7QUFNQWdzQixLQUFHLENBQUM1L0MsU0FBSixDQUFjOG1ELFVBQWQsR0FBMkIsVUFBU25qRCxLQUFULEVBQWdCO0FBQzFDLFFBQUlpaEQsT0FBTyxHQUFHLElBQWQ7QUFBQSxRQUNDQyxPQUFPLEdBQUcsSUFEWDtBQUFBLFFBRUNrQyxJQUFJLEdBQUcsSUFGUjtBQUFBLFFBR0MxcEIsS0FBSyxHQUFHLEtBQUt3cEIsVUFBTCxDQUFnQixLQUFLakcsS0FBTCxDQUFXQyxPQUEzQixFQUFvQyxLQUFLQSxPQUFMLENBQWFsOUMsS0FBYixDQUFwQyxDQUhUO0FBQUEsUUFJQ205QyxLQUFLLEdBQUcsS0FBSytGLFVBQUwsQ0FBZ0IsS0FBS2pHLEtBQUwsQ0FBV0UsS0FBWCxDQUFpQjFpQyxLQUFqQyxFQUF3Q2lmLEtBQXhDLENBSlQ7O0FBTUEsUUFBSSxDQUFDLEtBQUs1WixFQUFMLENBQVEsVUFBUixDQUFMLEVBQTBCO0FBQ3pCO0FBQ0E7O0FBRUQ5ZixTQUFLLENBQUNpdkIsY0FBTjs7QUFFQSxRQUFJLEtBQUtrWSxRQUFMLENBQWMyVyxJQUFsQixFQUF3QjtBQUN2Qm1ELGFBQU8sR0FBRyxLQUFLRixXQUFMLENBQWlCLEtBQUtFLE9BQUwsRUFBakIsQ0FBVjtBQUNBQyxhQUFPLEdBQUcsS0FBS0gsV0FBTCxDQUFpQixLQUFLRyxPQUFMLEtBQWlCLENBQWxDLElBQXVDRCxPQUFqRDtBQUNBOUQsV0FBSyxDQUFDaE4sQ0FBTixHQUFXLENBQUMsQ0FBQ2dOLEtBQUssQ0FBQ2hOLENBQU4sR0FBVThRLE9BQVgsSUFBc0JDLE9BQXRCLEdBQWdDQSxPQUFqQyxJQUE0Q0EsT0FBN0MsR0FBd0RELE9BQWxFO0FBQ0EsS0FKRCxNQUlPO0FBQ05BLGFBQU8sR0FBRyxLQUFLOVosUUFBTCxDQUFjdVgsR0FBZCxHQUFvQixLQUFLcUMsV0FBTCxDQUFpQixLQUFLRyxPQUFMLEVBQWpCLENBQXBCLEdBQXVELEtBQUtILFdBQUwsQ0FBaUIsS0FBS0UsT0FBTCxFQUFqQixDQUFqRTtBQUNBQyxhQUFPLEdBQUcsS0FBSy9aLFFBQUwsQ0FBY3VYLEdBQWQsR0FBb0IsS0FBS3FDLFdBQUwsQ0FBaUIsS0FBS0UsT0FBTCxFQUFqQixDQUFwQixHQUF1RCxLQUFLRixXQUFMLENBQWlCLEtBQUtHLE9BQUwsRUFBakIsQ0FBakU7QUFDQWtDLFVBQUksR0FBRyxLQUFLamMsUUFBTCxDQUFjaVgsUUFBZCxHQUF5QixDQUFDLENBQUQsR0FBSzFrQixLQUFLLENBQUN5VyxDQUFYLEdBQWUsQ0FBeEMsR0FBNEMsQ0FBbkQ7QUFDQWdOLFdBQUssQ0FBQ2hOLENBQU4sR0FBVWpyQyxJQUFJLENBQUNpMEIsR0FBTCxDQUFTajBCLElBQUksQ0FBQzZxQyxHQUFMLENBQVNvTixLQUFLLENBQUNoTixDQUFmLEVBQWtCOFEsT0FBTyxHQUFHbUMsSUFBNUIsQ0FBVCxFQUE0Q2xDLE9BQU8sR0FBR2tDLElBQXRELENBQVY7QUFDQTs7QUFFRCxTQUFLbkcsS0FBTCxDQUFXRSxLQUFYLENBQWlCaFgsT0FBakIsR0FBMkJnWCxLQUEzQjtBQUVBLFNBQUtuZSxPQUFMLENBQWFtZSxLQUFLLENBQUNoTixDQUFuQjtBQUNBLEdBM0JEO0FBNkJBOzs7Ozs7Ozs7QUFPQThMLEtBQUcsQ0FBQzUvQyxTQUFKLENBQWMybUQsU0FBZCxHQUEwQixVQUFTaGpELEtBQVQsRUFBZ0I7QUFDekMsUUFBSTA1QixLQUFLLEdBQUcsS0FBS3dwQixVQUFMLENBQWdCLEtBQUtqRyxLQUFMLENBQVdDLE9BQTNCLEVBQW9DLEtBQUtBLE9BQUwsQ0FBYWw5QyxLQUFiLENBQXBDLENBQVo7QUFBQSxRQUNDbTlDLEtBQUssR0FBRyxLQUFLRixLQUFMLENBQVdFLEtBQVgsQ0FBaUJoWCxPQUQxQjtBQUFBLFFBRUNpWCxTQUFTLEdBQUcxakIsS0FBSyxDQUFDeVcsQ0FBTixHQUFVLENBQVYsR0FBYyxLQUFLaEosUUFBTCxDQUFjdVgsR0FBNUIsR0FBa0MsTUFBbEMsR0FBMkMsT0FGeEQ7QUFJQTMzQyxLQUFDLENBQUNwSCxRQUFELENBQUQsQ0FBWTdCLEdBQVosQ0FBZ0IsV0FBaEI7QUFFQSxTQUFLdzVDLFFBQUwsQ0FBYzdWLFdBQWQsQ0FBMEIsS0FBSzkrQixPQUFMLENBQWFxOUMsU0FBdkM7O0FBRUEsUUFBSXRtQixLQUFLLENBQUN5VyxDQUFOLEtBQVksQ0FBWixJQUFpQixLQUFLcndCLEVBQUwsQ0FBUSxVQUFSLENBQWpCLElBQXdDLENBQUMsS0FBS0EsRUFBTCxDQUFRLE9BQVIsQ0FBN0MsRUFBK0Q7QUFDOUQsV0FBSzZlLEtBQUwsQ0FBVyxLQUFLd0ksUUFBTCxDQUFjMFgsWUFBZCxJQUE4QixLQUFLMVgsUUFBTCxDQUFjd1gsVUFBdkQ7QUFDQSxXQUFLeFksT0FBTCxDQUFhLEtBQUtobEIsT0FBTCxDQUFhZzhCLEtBQUssQ0FBQ2hOLENBQW5CLEVBQXNCelcsS0FBSyxDQUFDeVcsQ0FBTixLQUFZLENBQVosR0FBZ0JpTixTQUFoQixHQUE0QixLQUFLSCxLQUFMLENBQVdHLFNBQTdELENBQWI7QUFDQSxXQUFLd0UsVUFBTCxDQUFnQixVQUFoQjtBQUNBLFdBQUtjLE1BQUw7QUFFQSxXQUFLekYsS0FBTCxDQUFXRyxTQUFYLEdBQXVCQSxTQUF2Qjs7QUFFQSxVQUFJbDRDLElBQUksQ0FBQzg3QyxHQUFMLENBQVN0bkIsS0FBSyxDQUFDeVcsQ0FBZixJQUFvQixDQUFwQixJQUF5QixJQUFJeC9CLElBQUosR0FBV3N5QyxPQUFYLEtBQXVCLEtBQUtoRyxLQUFMLENBQVdqZCxJQUFsQyxHQUF5QyxHQUF0RSxFQUEyRTtBQUMxRSxhQUFLaWQsS0FBTCxDQUFXNXVDLE1BQVgsQ0FBa0IrZSxHQUFsQixDQUFzQixnQkFBdEIsRUFBd0MsWUFBVztBQUFFLGlCQUFPLEtBQVA7QUFBZSxTQUFwRTtBQUNBO0FBQ0Q7O0FBRUQsUUFBSSxDQUFDLEtBQUt0TixFQUFMLENBQVEsVUFBUixDQUFMLEVBQTBCO0FBQ3pCO0FBQ0E7O0FBRUQsU0FBS29pQyxLQUFMLENBQVcsVUFBWDtBQUNBLFNBQUtqeUIsT0FBTCxDQUFhLFNBQWI7QUFDQSxHQTVCRDtBQThCQTs7Ozs7Ozs7OztBQVFBZ3NCLEtBQUcsQ0FBQzUvQyxTQUFKLENBQWM4a0IsT0FBZCxHQUF3QixVQUFTa2lDLFVBQVQsRUFBcUJqRyxTQUFyQixFQUFnQztBQUN2RCxRQUFJMW1CLFFBQVEsR0FBRyxDQUFDLENBQWhCO0FBQUEsUUFDQzBzQixJQUFJLEdBQUcsRUFEUjtBQUFBLFFBRUN0L0MsS0FBSyxHQUFHLEtBQUtBLEtBQUwsRUFGVDtBQUFBLFFBR0NpOUMsV0FBVyxHQUFHLEtBQUtBLFdBQUwsRUFIZjs7QUFLQSxRQUFJLENBQUMsS0FBSzVaLFFBQUwsQ0FBY2tYLFFBQW5CLEVBQTZCO0FBQzVCO0FBQ0F0M0MsT0FBQyxDQUFDcUcsSUFBRixDQUFPMnpDLFdBQVAsRUFBb0JoNkMsQ0FBQyxDQUFDOG1DLEtBQUYsQ0FBUSxVQUFTOXZDLEtBQVQsRUFBZ0JvRixLQUFoQixFQUF1QjtBQUNsRDtBQUNBLFlBQUlpNkMsU0FBUyxLQUFLLE1BQWQsSUFBd0JpRyxVQUFVLEdBQUdsZ0QsS0FBSyxHQUFHaWdELElBQTdDLElBQXFEQyxVQUFVLEdBQUdsZ0QsS0FBSyxHQUFHaWdELElBQTlFLEVBQW9GO0FBQ25GMXNCLGtCQUFRLEdBQUczNEIsS0FBWCxDQURtRixDQUVwRjtBQUNBO0FBQ0MsU0FKRCxNQUlPLElBQUlxL0MsU0FBUyxLQUFLLE9BQWQsSUFBeUJpRyxVQUFVLEdBQUdsZ0QsS0FBSyxHQUFHVyxLQUFSLEdBQWdCcy9DLElBQXRELElBQThEQyxVQUFVLEdBQUdsZ0QsS0FBSyxHQUFHVyxLQUFSLEdBQWdCcy9DLElBQS9GLEVBQXFHO0FBQzNHMXNCLGtCQUFRLEdBQUczNEIsS0FBSyxHQUFHLENBQW5CO0FBQ0EsU0FGTSxNQUVBLElBQUksS0FBS3VqRCxFQUFMLENBQVErQixVQUFSLEVBQW9CLEdBQXBCLEVBQXlCbGdELEtBQXpCLEtBQ1AsS0FBS20rQyxFQUFMLENBQVErQixVQUFSLEVBQW9CLEdBQXBCLEVBQXlCdEMsV0FBVyxDQUFDaGpELEtBQUssR0FBRyxDQUFULENBQVgsS0FBMkJxQixTQUEzQixHQUF1QzJoRCxXQUFXLENBQUNoakQsS0FBSyxHQUFHLENBQVQsQ0FBbEQsR0FBZ0VvRixLQUFLLEdBQUdXLEtBQWpHLENBREcsRUFDc0c7QUFDNUc0eUIsa0JBQVEsR0FBRzBtQixTQUFTLEtBQUssTUFBZCxHQUF1QnIvQyxLQUFLLEdBQUcsQ0FBL0IsR0FBbUNBLEtBQTlDO0FBQ0E7O0FBQ0QsZUFBTzI0QixRQUFRLEtBQUssQ0FBQyxDQUFyQjtBQUNBLE9BYm1CLEVBYWpCLElBYmlCLENBQXBCO0FBY0E7O0FBRUQsUUFBSSxDQUFDLEtBQUt5USxRQUFMLENBQWMyVyxJQUFuQixFQUF5QjtBQUN4QjtBQUNBLFVBQUksS0FBS3dELEVBQUwsQ0FBUStCLFVBQVIsRUFBb0IsR0FBcEIsRUFBeUJ0QyxXQUFXLENBQUMsS0FBS0UsT0FBTCxFQUFELENBQXBDLENBQUosRUFBMkQ7QUFDMUR2cUIsZ0JBQVEsR0FBRzJzQixVQUFVLEdBQUcsS0FBS3BDLE9BQUwsRUFBeEI7QUFDQSxPQUZELE1BRU8sSUFBSSxLQUFLSyxFQUFMLENBQVErQixVQUFSLEVBQW9CLEdBQXBCLEVBQXlCdEMsV0FBVyxDQUFDLEtBQUtHLE9BQUwsRUFBRCxDQUFwQyxDQUFKLEVBQTJEO0FBQ2pFeHFCLGdCQUFRLEdBQUcyc0IsVUFBVSxHQUFHLEtBQUtuQyxPQUFMLEVBQXhCO0FBQ0E7QUFDRDs7QUFFRCxXQUFPeHFCLFFBQVA7QUFDQSxHQWxDRDtBQW9DQTs7Ozs7Ozs7QUFNQXVsQixLQUFHLENBQUM1L0MsU0FBSixDQUFjMmlDLE9BQWQsR0FBd0IsVUFBU3FrQixVQUFULEVBQXFCO0FBQzVDLFFBQUlya0IsT0FBTyxHQUFHLEtBQUtMLEtBQUwsS0FBZSxDQUE3QjtBQUVBLFNBQUs3ZSxFQUFMLENBQVEsV0FBUixLQUF3QixLQUFLazFCLGVBQUwsRUFBeEI7O0FBRUEsUUFBSWhXLE9BQUosRUFBYTtBQUNaLFdBQUs2aUIsS0FBTCxDQUFXLFdBQVg7QUFDQSxXQUFLNXhCLE9BQUwsQ0FBYSxXQUFiO0FBQ0E7O0FBRUQsUUFBSWxwQixDQUFDLENBQUMwRSxPQUFGLENBQVU2M0MsV0FBVixJQUF5QnY4QyxDQUFDLENBQUMwRSxPQUFGLENBQVU2bUMsVUFBdkMsRUFBbUQ7QUFDbEQsV0FBS2dPLE1BQUwsQ0FBWS8yQixHQUFaLENBQWdCO0FBQ2ZpcEIsaUJBQVMsRUFBRSxpQkFBaUI2USxVQUFqQixHQUE4QixhQUQxQjtBQUVmL1Esa0JBQVUsRUFBRyxLQUFLM1QsS0FBTCxLQUFlLElBQWhCLEdBQXdCLEdBQXhCLElBQ1gsS0FBS3dJLFFBQUwsQ0FBYytYLGVBQWQsR0FBZ0MsTUFBTSxLQUFLL1gsUUFBTCxDQUFjK1gsZUFBcEQsR0FBc0UsRUFEM0Q7QUFGRyxPQUFoQjtBQU1BLEtBUEQsTUFPTyxJQUFJbGdCLE9BQUosRUFBYTtBQUNuQixXQUFLc2hCLE1BQUwsQ0FBWXRoQixPQUFaLENBQW9CO0FBQ25CdkUsWUFBSSxFQUFFNG9CLFVBQVUsR0FBRztBQURBLE9BQXBCLEVBRUcsS0FBSzFrQixLQUFMLEVBRkgsRUFFaUIsS0FBS3dJLFFBQUwsQ0FBYzhYLGNBRi9CLEVBRStDbDRDLENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsS0FBS21ILGVBQWIsRUFBOEIsSUFBOUIsQ0FGL0M7QUFHQSxLQUpNLE1BSUE7QUFDTixXQUFLc0wsTUFBTCxDQUFZLzJCLEdBQVosQ0FBZ0I7QUFDZmtSLFlBQUksRUFBRTRvQixVQUFVLEdBQUc7QUFESixPQUFoQjtBQUdBO0FBQ0QsR0ExQkQ7QUE0QkE7Ozs7Ozs7QUFLQXBILEtBQUcsQ0FBQzUvQyxTQUFKLENBQWN5akIsRUFBZCxHQUFtQixVQUFTaUUsS0FBVCxFQUFnQjtBQUNsQyxXQUFPLEtBQUtzNUIsT0FBTCxDQUFhbFgsT0FBYixDQUFxQnBpQixLQUFyQixLQUErQixLQUFLczVCLE9BQUwsQ0FBYWxYLE9BQWIsQ0FBcUJwaUIsS0FBckIsSUFBOEIsQ0FBcEU7QUFDQSxHQUZEO0FBSUE7Ozs7Ozs7O0FBTUFrNEIsS0FBRyxDQUFDNS9DLFNBQUosQ0FBYzhwQyxPQUFkLEdBQXdCLFVBQVN6UCxRQUFULEVBQW1CO0FBQzFDLFFBQUlBLFFBQVEsS0FBS3QzQixTQUFqQixFQUE0QjtBQUMzQixhQUFPLEtBQUtrOUMsUUFBWjtBQUNBOztBQUVELFFBQUksS0FBS0ssTUFBTCxDQUFZamdELE1BQVosS0FBdUIsQ0FBM0IsRUFBOEI7QUFDN0IsYUFBTzBDLFNBQVA7QUFDQTs7QUFFRHMzQixZQUFRLEdBQUcsS0FBS2txQixTQUFMLENBQWVscUIsUUFBZixDQUFYOztBQUVBLFFBQUksS0FBSzRsQixRQUFMLEtBQWtCNWxCLFFBQXRCLEVBQWdDO0FBQy9CLFVBQUkxMkIsS0FBSyxHQUFHLEtBQUtpd0IsT0FBTCxDQUFhLFFBQWIsRUFBdUI7QUFBRXN5QixnQkFBUSxFQUFFO0FBQUV0MEMsY0FBSSxFQUFFLFVBQVI7QUFBb0I5SyxlQUFLLEVBQUV1ekI7QUFBM0I7QUFBWixPQUF2QixDQUFaOztBQUVBLFVBQUkxMkIsS0FBSyxDQUFDaUQsSUFBTixLQUFlN0QsU0FBbkIsRUFBOEI7QUFDN0JzM0IsZ0JBQVEsR0FBRyxLQUFLa3FCLFNBQUwsQ0FBZTVnRCxLQUFLLENBQUNpRCxJQUFyQixDQUFYO0FBQ0E7O0FBRUQsV0FBS3E1QyxRQUFMLEdBQWdCNWxCLFFBQWhCO0FBRUEsV0FBS2tyQixVQUFMLENBQWdCLFVBQWhCO0FBRUEsV0FBSzN4QixPQUFMLENBQWEsU0FBYixFQUF3QjtBQUFFc3lCLGdCQUFRLEVBQUU7QUFBRXQwQyxjQUFJLEVBQUUsVUFBUjtBQUFvQjlLLGVBQUssRUFBRSxLQUFLbTVDO0FBQWhDO0FBQVosT0FBeEI7QUFDQTs7QUFFRCxXQUFPLEtBQUtBLFFBQVo7QUFDQSxHQTFCRDtBQTRCQTs7Ozs7OztBQUtBTCxLQUFHLENBQUM1L0MsU0FBSixDQUFjdWxELFVBQWQsR0FBMkIsVUFBUzJCLElBQVQsRUFBZTtBQUN6QyxRQUFJeDhDLENBQUMsQ0FBQzlHLElBQUYsQ0FBT3NqRCxJQUFQLE1BQWlCLFFBQXJCLEVBQStCO0FBQzlCLFdBQUt4RyxZQUFMLENBQWtCd0csSUFBbEIsSUFBMEIsSUFBMUI7QUFDQSxXQUFLempDLEVBQUwsQ0FBUSxPQUFSLEtBQW9CLEtBQUtvaUMsS0FBTCxDQUFXLE9BQVgsQ0FBcEI7QUFDQTs7QUFDRCxXQUFPbjdDLENBQUMsQ0FBQ3NHLEdBQUYsQ0FBTSxLQUFLMHZDLFlBQVgsRUFBeUIsVUFBUzM1QixDQUFULEVBQVkzbUIsQ0FBWixFQUFlO0FBQUUsYUFBT0EsQ0FBUDtBQUFVLEtBQXBELENBQVA7QUFDQSxHQU5EO0FBUUE7Ozs7Ozs7QUFLQXcvQyxLQUFHLENBQUM1L0MsU0FBSixDQUFjZ2dCLEtBQWQsR0FBc0IsVUFBU3FhLFFBQVQsRUFBbUI7QUFDeENBLFlBQVEsR0FBRyxLQUFLa3FCLFNBQUwsQ0FBZWxxQixRQUFmLENBQVg7O0FBRUEsUUFBSUEsUUFBUSxLQUFLdDNCLFNBQWpCLEVBQTRCO0FBQzNCO0FBQ0E7O0FBRUQsU0FBS205QyxNQUFMLEdBQWMsQ0FBZDtBQUNBLFNBQUtELFFBQUwsR0FBZ0I1bEIsUUFBaEI7QUFFQSxTQUFLOHNCLFFBQUwsQ0FBYyxDQUFFLFdBQUYsRUFBZSxZQUFmLENBQWQ7QUFFQSxTQUFLeGtCLE9BQUwsQ0FBYSxLQUFLK2hCLFdBQUwsQ0FBaUJycUIsUUFBakIsQ0FBYjtBQUVBLFNBQUsrc0IsT0FBTCxDQUFhLENBQUUsV0FBRixFQUFlLFlBQWYsQ0FBYjtBQUNBLEdBZkQ7QUFpQkE7Ozs7Ozs7OztBQU9BeEgsS0FBRyxDQUFDNS9DLFNBQUosQ0FBY3VrRCxTQUFkLEdBQTBCLFVBQVNscUIsUUFBVCxFQUFtQm5kLFFBQW5CLEVBQTZCO0FBQ3RELFFBQUl5RyxDQUFDLEdBQUcsS0FBSzI4QixNQUFMLENBQVlqZ0QsTUFBcEI7QUFBQSxRQUNDd1gsQ0FBQyxHQUFHcUYsUUFBUSxHQUFHLENBQUgsR0FBTyxLQUFLcWpDLE9BQUwsQ0FBYWxnRCxNQURqQzs7QUFHQSxRQUFJLENBQUMsS0FBS3V4QyxTQUFMLENBQWV2WCxRQUFmLENBQUQsSUFBNkIxVyxDQUFDLEdBQUcsQ0FBckMsRUFBd0M7QUFDdkMwVyxjQUFRLEdBQUd0M0IsU0FBWDtBQUNBLEtBRkQsTUFFTyxJQUFJczNCLFFBQVEsR0FBRyxDQUFYLElBQWdCQSxRQUFRLElBQUkxVyxDQUFDLEdBQUc5TCxDQUFwQyxFQUF1QztBQUM3Q3dpQixjQUFRLEdBQUcsQ0FBQyxDQUFDQSxRQUFRLEdBQUd4aUIsQ0FBQyxHQUFHLENBQWhCLElBQXFCOEwsQ0FBckIsR0FBeUJBLENBQTFCLElBQStCQSxDQUEvQixHQUFtQzlMLENBQUMsR0FBRyxDQUFsRDtBQUNBOztBQUVELFdBQU93aUIsUUFBUDtBQUNBLEdBWEQ7QUFhQTs7Ozs7Ozs7QUFNQXVsQixLQUFHLENBQUM1L0MsU0FBSixDQUFja2QsUUFBZCxHQUF5QixVQUFTbWQsUUFBVCxFQUFtQjtBQUMzQ0EsWUFBUSxJQUFJLEtBQUtrbUIsT0FBTCxDQUFhbGdELE1BQWIsR0FBc0IsQ0FBbEM7QUFDQSxXQUFPLEtBQUtra0QsU0FBTCxDQUFlbHFCLFFBQWYsRUFBeUIsSUFBekIsQ0FBUDtBQUNBLEdBSEQ7QUFLQTs7Ozs7Ozs7QUFNQXVsQixLQUFHLENBQUM1L0MsU0FBSixDQUFjNmtELE9BQWQsR0FBd0IsVUFBUzNuQyxRQUFULEVBQW1CO0FBQzFDLFFBQUk0dEIsUUFBUSxHQUFHLEtBQUtBLFFBQXBCO0FBQUEsUUFDQytaLE9BQU8sR0FBRyxLQUFLMUUsWUFBTCxDQUFrQjkvQyxNQUQ3QjtBQUFBLFFBRUM4UyxRQUZEO0FBQUEsUUFHQ2swQyxvQkFIRDtBQUFBLFFBSUNDLFlBSkQ7O0FBTUEsUUFBSXhjLFFBQVEsQ0FBQzJXLElBQWIsRUFBbUI7QUFDbEJvRCxhQUFPLEdBQUcsS0FBS3RFLE9BQUwsQ0FBYWxnRCxNQUFiLEdBQXNCLENBQXRCLEdBQTBCLEtBQUtpZ0QsTUFBTCxDQUFZamdELE1BQXRDLEdBQStDLENBQXpEO0FBQ0EsS0FGRCxNQUVPLElBQUl5cUMsUUFBUSxDQUFDcVgsU0FBVCxJQUFzQnJYLFFBQVEsQ0FBQ2o2QixLQUFuQyxFQUEwQztBQUNoRHNDLGNBQVEsR0FBRyxLQUFLbXRDLE1BQUwsQ0FBWWpnRCxNQUF2Qjs7QUFDQSxVQUFJOFMsUUFBSixFQUFjO0FBQ2JrMEMsNEJBQW9CLEdBQUcsS0FBSy9HLE1BQUwsQ0FBWSxFQUFFbnRDLFFBQWQsRUFBd0IxTCxLQUF4QixFQUF2QjtBQUNBNi9DLG9CQUFZLEdBQUcsS0FBS3JNLFFBQUwsQ0FBY3h6QyxLQUFkLEVBQWY7O0FBQ0EsZUFBTzBMLFFBQVEsRUFBZixFQUFtQjtBQUNsQmswQyw4QkFBb0IsSUFBSSxLQUFLL0csTUFBTCxDQUFZbnRDLFFBQVosRUFBc0IxTCxLQUF0QixLQUFnQyxLQUFLcWpDLFFBQUwsQ0FBY3pNLE1BQXRFOztBQUNBLGNBQUlncEIsb0JBQW9CLEdBQUdDLFlBQTNCLEVBQXlDO0FBQ3hDO0FBQ0E7QUFDRDtBQUNEOztBQUNEekMsYUFBTyxHQUFHMXhDLFFBQVEsR0FBRyxDQUFyQjtBQUNBLEtBYk0sTUFhQSxJQUFJMjNCLFFBQVEsQ0FBQzRXLE1BQWIsRUFBcUI7QUFDM0JtRCxhQUFPLEdBQUcsS0FBS3ZFLE1BQUwsQ0FBWWpnRCxNQUFaLEdBQXFCLENBQS9CO0FBQ0EsS0FGTSxNQUVBO0FBQ053a0QsYUFBTyxHQUFHLEtBQUt2RSxNQUFMLENBQVlqZ0QsTUFBWixHQUFxQnlxQyxRQUFRLENBQUNpSSxLQUF4QztBQUNBOztBQUVELFFBQUk3MUIsUUFBSixFQUFjO0FBQ2IybkMsYUFBTyxJQUFJLEtBQUt0RSxPQUFMLENBQWFsZ0QsTUFBYixHQUFzQixDQUFqQztBQUNBOztBQUVELFdBQU93SSxJQUFJLENBQUNpMEIsR0FBTCxDQUFTK25CLE9BQVQsRUFBa0IsQ0FBbEIsQ0FBUDtBQUNBLEdBakNEO0FBbUNBOzs7Ozs7OztBQU1BakYsS0FBRyxDQUFDNS9DLFNBQUosQ0FBYzRrRCxPQUFkLEdBQXdCLFVBQVMxbkMsUUFBVCxFQUFtQjtBQUMxQyxXQUFPQSxRQUFRLEdBQUcsQ0FBSCxHQUFPLEtBQUtxakMsT0FBTCxDQUFhbGdELE1BQWIsR0FBc0IsQ0FBNUM7QUFDQSxHQUZEO0FBSUE7Ozs7Ozs7O0FBTUF1L0MsS0FBRyxDQUFDNS9DLFNBQUosQ0FBYyt5QyxLQUFkLEdBQXNCLFVBQVMxWSxRQUFULEVBQW1CO0FBQ3hDLFFBQUlBLFFBQVEsS0FBS3QzQixTQUFqQixFQUE0QjtBQUMzQixhQUFPLEtBQUt1OUMsTUFBTCxDQUFZeCtDLEtBQVosRUFBUDtBQUNBOztBQUVEdTRCLFlBQVEsR0FBRyxLQUFLa3FCLFNBQUwsQ0FBZWxxQixRQUFmLEVBQXlCLElBQXpCLENBQVg7QUFDQSxXQUFPLEtBQUtpbUIsTUFBTCxDQUFZam1CLFFBQVosQ0FBUDtBQUNBLEdBUEQ7QUFTQTs7Ozs7Ozs7QUFNQXVsQixLQUFHLENBQUM1L0MsU0FBSixDQUFjdW5ELE9BQWQsR0FBd0IsVUFBU2x0QixRQUFULEVBQW1CO0FBQzFDLFFBQUlBLFFBQVEsS0FBS3QzQixTQUFqQixFQUE0QjtBQUMzQixhQUFPLEtBQUt5OUMsUUFBTCxDQUFjMStDLEtBQWQsRUFBUDtBQUNBOztBQUVEdTRCLFlBQVEsR0FBRyxLQUFLa3FCLFNBQUwsQ0FBZWxxQixRQUFmLEVBQXlCLElBQXpCLENBQVg7QUFDQSxXQUFPLEtBQUttbUIsUUFBTCxDQUFjbm1CLFFBQWQsQ0FBUDtBQUNBLEdBUEQ7QUFTQTs7Ozs7Ozs7QUFNQXVsQixLQUFHLENBQUM1L0MsU0FBSixDQUFjcWtELE1BQWQsR0FBdUIsVUFBU2hxQixRQUFULEVBQW1CO0FBQ3pDLFFBQUk5b0IsR0FBRyxHQUFHLEtBQUtndkMsT0FBTCxDQUFhbGdELE1BQWIsR0FBc0IsQ0FBaEM7QUFBQSxRQUNDK1EsSUFBSSxHQUFHRyxHQUFHLEdBQUcsS0FBSyt1QyxNQUFMLENBQVlqZ0QsTUFEMUI7QUFBQSxRQUVDMlEsR0FBRyxHQUFHLFVBQVN0UCxLQUFULEVBQWdCO0FBQUUsYUFBT0EsS0FBSyxHQUFHLENBQVIsS0FBYyxDQUFkLEdBQWtCMFAsSUFBSSxHQUFHMVAsS0FBSyxHQUFHLENBQWpDLEdBQXFDNlAsR0FBRyxHQUFHLENBQUM3UCxLQUFLLEdBQUcsQ0FBVCxJQUFjLENBQWhFO0FBQW1FLEtBRjVGOztBQUlBLFFBQUkyNEIsUUFBUSxLQUFLdDNCLFNBQWpCLEVBQTRCO0FBQzNCLGFBQU8ySCxDQUFDLENBQUNzRyxHQUFGLENBQU0sS0FBS3V2QyxPQUFYLEVBQW9CLFVBQVN4NUIsQ0FBVCxFQUFZM21CLENBQVosRUFBZTtBQUFFLGVBQU80USxHQUFHLENBQUM1USxDQUFELENBQVY7QUFBZSxPQUFwRCxDQUFQO0FBQ0E7O0FBRUQsV0FBT3NLLENBQUMsQ0FBQ3NHLEdBQUYsQ0FBTSxLQUFLdXZDLE9BQVgsRUFBb0IsVUFBU3g1QixDQUFULEVBQVkzbUIsQ0FBWixFQUFlO0FBQUUsYUFBTzJtQixDQUFDLEtBQUtzVCxRQUFOLEdBQWlCcnBCLEdBQUcsQ0FBQzVRLENBQUQsQ0FBcEIsR0FBMEIsSUFBakM7QUFBdUMsS0FBNUUsQ0FBUDtBQUNBLEdBVkQ7QUFZQTs7Ozs7Ozs7QUFNQXcvQyxLQUFHLENBQUM1L0MsU0FBSixDQUFjc2lDLEtBQWQsR0FBc0IsVUFBU0EsS0FBVCxFQUFnQjtBQUNyQyxRQUFJQSxLQUFLLEtBQUt2L0IsU0FBZCxFQUF5QjtBQUN4QixXQUFLbTlDLE1BQUwsR0FBYzVkLEtBQWQ7QUFDQTs7QUFFRCxXQUFPLEtBQUs0ZCxNQUFaO0FBQ0EsR0FORDtBQVFBOzs7Ozs7Ozs7QUFPQU4sS0FBRyxDQUFDNS9DLFNBQUosQ0FBYzBrRCxXQUFkLEdBQTRCLFVBQVNycUIsUUFBVCxFQUFtQjtBQUM5QyxRQUFJbXRCLFVBQVUsR0FBRyxDQUFqQjtBQUFBLFFBQ0NDLFdBQVcsR0FBR3B0QixRQUFRLEdBQUcsQ0FEMUI7QUFBQSxRQUVDMnNCLFVBRkQ7O0FBSUEsUUFBSTNzQixRQUFRLEtBQUt0M0IsU0FBakIsRUFBNEI7QUFDM0IsYUFBTzJILENBQUMsQ0FBQ3NHLEdBQUYsQ0FBTSxLQUFLbXZDLFlBQVgsRUFBeUJ6MUMsQ0FBQyxDQUFDOG1DLEtBQUYsQ0FBUSxVQUFTd1YsVUFBVCxFQUFxQnRsRCxLQUFyQixFQUE0QjtBQUNuRSxlQUFPLEtBQUtnakQsV0FBTCxDQUFpQmhqRCxLQUFqQixDQUFQO0FBQ0EsT0FGK0IsRUFFN0IsSUFGNkIsQ0FBekIsQ0FBUDtBQUdBOztBQUVELFFBQUksS0FBS29wQyxRQUFMLENBQWM0VyxNQUFsQixFQUEwQjtBQUN6QixVQUFJLEtBQUs1VyxRQUFMLENBQWN1WCxHQUFsQixFQUF1QjtBQUN0Qm1GLGtCQUFVLEdBQUcsQ0FBQyxDQUFkO0FBQ0FDLG1CQUFXLEdBQUdwdEIsUUFBUSxHQUFHLENBQXpCO0FBQ0E7O0FBRUQyc0IsZ0JBQVUsR0FBRyxLQUFLN0csWUFBTCxDQUFrQjlsQixRQUFsQixDQUFiO0FBQ0Eyc0IsZ0JBQVUsSUFBSSxDQUFDLEtBQUt2L0MsS0FBTCxLQUFldS9DLFVBQWYsSUFBNkIsS0FBSzdHLFlBQUwsQ0FBa0JzSCxXQUFsQixLQUFrQyxDQUEvRCxDQUFELElBQXNFLENBQXRFLEdBQTBFRCxVQUF4RjtBQUNBLEtBUkQsTUFRTztBQUNOUixnQkFBVSxHQUFHLEtBQUs3RyxZQUFMLENBQWtCc0gsV0FBbEIsS0FBa0MsQ0FBL0M7QUFDQTs7QUFFRFQsY0FBVSxHQUFHbitDLElBQUksQ0FBQ3kwQixJQUFMLENBQVUwcEIsVUFBVixDQUFiO0FBRUEsV0FBT0EsVUFBUDtBQUNBLEdBMUJEO0FBNEJBOzs7Ozs7Ozs7O0FBUUFwSCxLQUFHLENBQUM1L0MsU0FBSixDQUFjaS9CLFFBQWQsR0FBeUIsVUFBU2lhLElBQVQsRUFBZXhXLEVBQWYsRUFBbUJnbEIsTUFBbkIsRUFBMkI7QUFDbkQsUUFBSUEsTUFBTSxLQUFLLENBQWYsRUFBa0I7QUFDakIsYUFBTyxDQUFQO0FBQ0E7O0FBRUQsV0FBTzcrQyxJQUFJLENBQUM2cUMsR0FBTCxDQUFTN3FDLElBQUksQ0FBQ2kwQixHQUFMLENBQVNqMEIsSUFBSSxDQUFDODdDLEdBQUwsQ0FBU2ppQixFQUFFLEdBQUd3VyxJQUFkLENBQVQsRUFBOEIsQ0FBOUIsQ0FBVCxFQUEyQyxDQUEzQyxJQUFnRHJ3QyxJQUFJLENBQUM4N0MsR0FBTCxDQUFVK0MsTUFBTSxJQUFJLEtBQUs1YyxRQUFMLENBQWN3WCxVQUFsQyxDQUF2RDtBQUNBLEdBTkQ7QUFRQTs7Ozs7Ozs7QUFNQTFDLEtBQUcsQ0FBQzUvQyxTQUFKLENBQWMwaUMsRUFBZCxHQUFtQixVQUFTckksUUFBVCxFQUFtQmlJLEtBQW5CLEVBQTBCO0FBQzVDLFFBQUl3SCxPQUFPLEdBQUcsS0FBS0EsT0FBTCxFQUFkO0FBQUEsUUFDQzZkLE1BQU0sR0FBRyxJQURWO0FBQUEsUUFFQ0MsUUFBUSxHQUFHdnRCLFFBQVEsR0FBRyxLQUFLbmQsUUFBTCxDQUFjNHNCLE9BQWQsQ0FGdkI7QUFBQSxRQUdDaVgsU0FBUyxHQUFHLENBQUM2RyxRQUFRLEdBQUcsQ0FBWixLQUFrQkEsUUFBUSxHQUFHLENBQTdCLENBSGI7QUFBQSxRQUlDN1UsS0FBSyxHQUFHLEtBQUt1TixNQUFMLENBQVlqZ0QsTUFKckI7QUFBQSxRQUtDdWtELE9BQU8sR0FBRyxLQUFLQSxPQUFMLEVBTFg7QUFBQSxRQU1DQyxPQUFPLEdBQUcsS0FBS0EsT0FBTCxFQU5YOztBQVFBLFFBQUksS0FBSy9aLFFBQUwsQ0FBYzJXLElBQWxCLEVBQXdCO0FBQ3ZCLFVBQUksQ0FBQyxLQUFLM1csUUFBTCxDQUFjNlcsTUFBZixJQUF5Qjk0QyxJQUFJLENBQUM4N0MsR0FBTCxDQUFTaUQsUUFBVCxJQUFxQjdVLEtBQUssR0FBRyxDQUExRCxFQUE2RDtBQUM1RDZVLGdCQUFRLElBQUk3RyxTQUFTLEdBQUcsQ0FBQyxDQUFiLEdBQWlCaE8sS0FBN0I7QUFDQTs7QUFFRDFZLGNBQVEsR0FBR3lQLE9BQU8sR0FBRzhkLFFBQXJCO0FBQ0FELFlBQU0sR0FBRyxDQUFDLENBQUN0dEIsUUFBUSxHQUFHdXFCLE9BQVosSUFBdUI3UixLQUF2QixHQUErQkEsS0FBaEMsSUFBeUNBLEtBQXpDLEdBQWlENlIsT0FBMUQ7O0FBRUEsVUFBSStDLE1BQU0sS0FBS3R0QixRQUFYLElBQXVCc3RCLE1BQU0sR0FBR0MsUUFBVCxJQUFxQi9DLE9BQTVDLElBQXVEOEMsTUFBTSxHQUFHQyxRQUFULEdBQW9CLENBQS9FLEVBQWtGO0FBQ2pGOWQsZUFBTyxHQUFHNmQsTUFBTSxHQUFHQyxRQUFuQjtBQUNBdnRCLGdCQUFRLEdBQUdzdEIsTUFBWDtBQUNBLGFBQUszbkMsS0FBTCxDQUFXOHBCLE9BQVg7QUFDQTtBQUNELEtBYkQsTUFhTyxJQUFJLEtBQUtnQixRQUFMLENBQWM2VyxNQUFsQixFQUEwQjtBQUNoQ2tELGFBQU8sSUFBSSxDQUFYO0FBQ0F4cUIsY0FBUSxHQUFHLENBQUNBLFFBQVEsR0FBR3dxQixPQUFYLEdBQXFCQSxPQUF0QixJQUFpQ0EsT0FBNUM7QUFDQSxLQUhNLE1BR0E7QUFDTnhxQixjQUFRLEdBQUd4eEIsSUFBSSxDQUFDaTBCLEdBQUwsQ0FBUzhuQixPQUFULEVBQWtCLzdDLElBQUksQ0FBQzZxQyxHQUFMLENBQVNtUixPQUFULEVBQWtCeHFCLFFBQWxCLENBQWxCLENBQVg7QUFDQTs7QUFFRCxTQUFLaUksS0FBTCxDQUFXLEtBQUtyRCxRQUFMLENBQWM2SyxPQUFkLEVBQXVCelAsUUFBdkIsRUFBaUNpSSxLQUFqQyxDQUFYO0FBQ0EsU0FBS3dILE9BQUwsQ0FBYXpQLFFBQWI7O0FBRUEsUUFBSSxLQUFLaXJCLFNBQUwsRUFBSixFQUFzQjtBQUNyQixXQUFLZSxNQUFMO0FBQ0E7QUFDRCxHQW5DRDtBQXFDQTs7Ozs7OztBQUtBekcsS0FBRyxDQUFDNS9DLFNBQUosQ0FBY3dYLElBQWQsR0FBcUIsVUFBUzhxQixLQUFULEVBQWdCO0FBQ3BDQSxTQUFLLEdBQUdBLEtBQUssSUFBSSxLQUFqQjtBQUNBLFNBQUtJLEVBQUwsQ0FBUSxLQUFLeGxCLFFBQUwsQ0FBYyxLQUFLNHNCLE9BQUwsRUFBZCxJQUFnQyxDQUF4QyxFQUEyQ3hILEtBQTNDO0FBQ0EsR0FIRDtBQUtBOzs7Ozs7O0FBS0FzZCxLQUFHLENBQUM1L0MsU0FBSixDQUFjMGtCLElBQWQsR0FBcUIsVUFBUzRkLEtBQVQsRUFBZ0I7QUFDcENBLFNBQUssR0FBR0EsS0FBSyxJQUFJLEtBQWpCO0FBQ0EsU0FBS0ksRUFBTCxDQUFRLEtBQUt4bEIsUUFBTCxDQUFjLEtBQUs0c0IsT0FBTCxFQUFkLElBQWdDLENBQXhDLEVBQTJDeEgsS0FBM0M7QUFDQSxHQUhEO0FBS0E7Ozs7Ozs7QUFLQXNkLEtBQUcsQ0FBQzUvQyxTQUFKLENBQWMyNEMsZUFBZCxHQUFnQyxVQUFTaDFDLEtBQVQsRUFBZ0I7QUFFL0M7QUFDQSxRQUFJQSxLQUFLLEtBQUtaLFNBQWQsRUFBeUI7QUFDeEJZLFdBQUssQ0FBQ2t2QixlQUFOLEdBRHdCLENBR3hCOztBQUNBLFVBQUksQ0FBQ2x2QixLQUFLLENBQUNxTyxNQUFOLElBQWdCck8sS0FBSyxDQUFDa2tELFVBQXRCLElBQW9DbGtELEtBQUssQ0FBQ21rRCxjQUEzQyxNQUErRCxLQUFLN0QsTUFBTCxDQUFZdnpDLEdBQVosQ0FBZ0IsQ0FBaEIsQ0FBbkUsRUFBdUY7QUFDdEYsZUFBTyxLQUFQO0FBQ0E7QUFDRDs7QUFFRCxTQUFLbTFDLEtBQUwsQ0FBVyxXQUFYO0FBQ0EsU0FBS2p5QixPQUFMLENBQWEsWUFBYjtBQUNBLEdBZEQ7QUFnQkE7Ozs7Ozs7QUFLQWdzQixLQUFHLENBQUM1L0MsU0FBSixDQUFjOGxELFFBQWQsR0FBeUIsWUFBVztBQUNuQyxRQUFJcitDLEtBQUo7O0FBQ0EsUUFBSSxLQUFLbkIsT0FBTCxDQUFhcThDLHFCQUFiLEtBQXVDampELE1BQTNDLEVBQW1EO0FBQ2xEK0gsV0FBSyxHQUFHaUQsQ0FBQyxDQUFDLEtBQUtwRSxPQUFMLENBQWFxOEMscUJBQWQsQ0FBRCxDQUFzQ2w3QyxLQUF0QyxFQUFSO0FBQ0EsS0FGRCxNQUVPLElBQUkvSCxNQUFNLENBQUNpSSxVQUFYLEVBQXVCO0FBQzdCRixXQUFLLEdBQUcvSCxNQUFNLENBQUNpSSxVQUFmO0FBQ0EsS0FGTSxNQUVBLElBQUlyRSxRQUFRLENBQUNxRixlQUFULElBQTRCckYsUUFBUSxDQUFDcUYsZUFBVCxDQUF5Qm8vQyxXQUF6RCxFQUFzRTtBQUM1RXRnRCxXQUFLLEdBQUduRSxRQUFRLENBQUNxRixlQUFULENBQXlCby9DLFdBQWpDO0FBQ0EsS0FGTSxNQUVBO0FBQ050aUQsYUFBTyxDQUFDa2tCLElBQVIsQ0FBYSxnQ0FBYjtBQUNBOztBQUNELFdBQU9saUIsS0FBUDtBQUNBLEdBWkQ7QUFjQTs7Ozs7OztBQUtBbTRDLEtBQUcsQ0FBQzUvQyxTQUFKLENBQWNvRixPQUFkLEdBQXdCLFVBQVNxZ0IsT0FBVCxFQUFrQjtBQUN6QyxTQUFLdytCLE1BQUwsQ0FBWXY5QixLQUFaO0FBQ0EsU0FBSzQ1QixNQUFMLEdBQWMsRUFBZDs7QUFFQSxRQUFJNzZCLE9BQUosRUFBYTtBQUNaQSxhQUFPLEdBQUlBLE9BQU8sWUFBWXRmLE1BQXBCLEdBQThCc2YsT0FBOUIsR0FBd0MvYSxDQUFDLENBQUMrYSxPQUFELENBQW5EO0FBQ0E7O0FBRUQsUUFBSSxLQUFLcWxCLFFBQUwsQ0FBY2lZLGtCQUFsQixFQUFzQztBQUNyQ3Q5QixhQUFPLEdBQUdBLE9BQU8sQ0FBQ3ZLLElBQVIsQ0FBYSxNQUFNLEtBQUs0dkIsUUFBTCxDQUFjaVksa0JBQWpDLENBQVY7QUFDQTs7QUFFRHQ5QixXQUFPLENBQUN6SyxNQUFSLENBQWUsWUFBVztBQUN6QixhQUFPLEtBQUsvUixRQUFMLEtBQWtCLENBQXpCO0FBQ0EsS0FGRCxFQUVHOEgsSUFGSCxDQUVRckcsQ0FBQyxDQUFDOG1DLEtBQUYsQ0FBUSxVQUFTOXZDLEtBQVQsRUFBZ0I2eEMsSUFBaEIsRUFBc0I7QUFDckNBLFVBQUksR0FBRyxLQUFLNlMsT0FBTCxDQUFhN1MsSUFBYixDQUFQO0FBQ0EsV0FBSzBRLE1BQUwsQ0FBWXpyQixNQUFaLENBQW1CK2EsSUFBbkI7O0FBQ0EsV0FBSytNLE1BQUwsQ0FBWWwvQyxJQUFaLENBQWlCbXlDLElBQWpCOztBQUNBLFdBQUtpTixRQUFMLENBQWNwL0MsSUFBZCxDQUFtQm15QyxJQUFJLENBQUNyNEIsSUFBTCxDQUFVLGNBQVYsRUFBMEIrSixPQUExQixDQUFrQyxjQUFsQyxFQUFrRDdlLElBQWxELENBQXVELFlBQXZELElBQXVFLENBQXZFLElBQTRFLENBQS9GO0FBQ0EsS0FMTyxFQUtMLElBTEssQ0FGUjtBQVNBLFNBQUs0WixLQUFMLENBQVcsS0FBSzR4QixTQUFMLENBQWUsS0FBSzlHLFFBQUwsQ0FBY3NYLGFBQTdCLElBQThDLEtBQUt0WCxRQUFMLENBQWNzWCxhQUE1RCxHQUE0RSxDQUF2RjtBQUVBLFNBQUttRCxVQUFMLENBQWdCLE9BQWhCO0FBQ0EsR0F4QkQ7QUEwQkE7Ozs7Ozs7OztBQU9BM0YsS0FBRyxDQUFDNS9DLFNBQUosQ0FBY2dsQixHQUFkLEdBQW9CLFVBQVNTLE9BQVQsRUFBa0I0VSxRQUFsQixFQUE0QjtBQUMvQyxRQUFJeVAsT0FBTyxHQUFHLEtBQUs1c0IsUUFBTCxDQUFjLEtBQUsraUMsUUFBbkIsQ0FBZDtBQUVBNWxCLFlBQVEsR0FBR0EsUUFBUSxLQUFLdDNCLFNBQWIsR0FBeUIsS0FBS3U5QyxNQUFMLENBQVlqZ0QsTUFBckMsR0FBOEMsS0FBS2trRCxTQUFMLENBQWVscUIsUUFBZixFQUF5QixJQUF6QixDQUF6RDtBQUNBNVUsV0FBTyxHQUFHQSxPQUFPLFlBQVl0ZixNQUFuQixHQUE0QnNmLE9BQTVCLEdBQXNDL2EsQ0FBQyxDQUFDK2EsT0FBRCxDQUFqRDtBQUVBLFNBQUttTyxPQUFMLENBQWEsS0FBYixFQUFvQjtBQUFFbk8sYUFBTyxFQUFFQSxPQUFYO0FBQW9CNFUsY0FBUSxFQUFFQTtBQUE5QixLQUFwQjtBQUVBNVUsV0FBTyxHQUFHLEtBQUsyZ0MsT0FBTCxDQUFhM2dDLE9BQWIsQ0FBVjs7QUFFQSxRQUFJLEtBQUs2NkIsTUFBTCxDQUFZamdELE1BQVosS0FBdUIsQ0FBdkIsSUFBNEJnNkIsUUFBUSxLQUFLLEtBQUtpbUIsTUFBTCxDQUFZamdELE1BQXpELEVBQWlFO0FBQ2hFLFdBQUtpZ0QsTUFBTCxDQUFZamdELE1BQVosS0FBdUIsQ0FBdkIsSUFBNEIsS0FBSzRqRCxNQUFMLENBQVl6ckIsTUFBWixDQUFtQi9TLE9BQW5CLENBQTVCO0FBQ0EsV0FBSzY2QixNQUFMLENBQVlqZ0QsTUFBWixLQUF1QixDQUF2QixJQUE0QixLQUFLaWdELE1BQUwsQ0FBWWptQixRQUFRLEdBQUcsQ0FBdkIsRUFBMEJ6QixLQUExQixDQUFnQ25ULE9BQWhDLENBQTVCOztBQUNBLFdBQUs2NkIsTUFBTCxDQUFZbC9DLElBQVosQ0FBaUJxa0IsT0FBakI7O0FBQ0EsV0FBSys2QixRQUFMLENBQWNwL0MsSUFBZCxDQUFtQnFrQixPQUFPLENBQUN2SyxJQUFSLENBQWEsY0FBYixFQUE2QitKLE9BQTdCLENBQXFDLGNBQXJDLEVBQXFEN2UsSUFBckQsQ0FBMEQsWUFBMUQsSUFBMEUsQ0FBMUUsSUFBK0UsQ0FBbEc7QUFDQSxLQUxELE1BS087QUFDTixXQUFLazZDLE1BQUwsQ0FBWWptQixRQUFaLEVBQXNCMUIsTUFBdEIsQ0FBNkJsVCxPQUE3Qjs7QUFDQSxXQUFLNjZCLE1BQUwsQ0FBWTMrQyxNQUFaLENBQW1CMDRCLFFBQW5CLEVBQTZCLENBQTdCLEVBQWdDNVUsT0FBaEM7O0FBQ0EsV0FBSys2QixRQUFMLENBQWM3K0MsTUFBZCxDQUFxQjA0QixRQUFyQixFQUErQixDQUEvQixFQUFrQzVVLE9BQU8sQ0FBQ3ZLLElBQVIsQ0FBYSxjQUFiLEVBQTZCK0osT0FBN0IsQ0FBcUMsY0FBckMsRUFBcUQ3ZSxJQUFyRCxDQUEwRCxZQUExRCxJQUEwRSxDQUExRSxJQUErRSxDQUFqSDtBQUNBOztBQUVELFNBQUtrNkMsTUFBTCxDQUFZeFcsT0FBWixLQUF3QixLQUFLOXBCLEtBQUwsQ0FBVyxLQUFLc2dDLE1BQUwsQ0FBWXhXLE9BQVosRUFBcUJwb0MsS0FBckIsRUFBWCxDQUF4QjtBQUVBLFNBQUs2akQsVUFBTCxDQUFnQixPQUFoQjtBQUVBLFNBQUszeEIsT0FBTCxDQUFhLE9BQWIsRUFBc0I7QUFBRW5PLGFBQU8sRUFBRUEsT0FBWDtBQUFvQjRVLGNBQVEsRUFBRUE7QUFBOUIsS0FBdEI7QUFDQSxHQTFCRDtBQTRCQTs7Ozs7Ozs7QUFNQXVsQixLQUFHLENBQUM1L0MsU0FBSixDQUFjeW1CLE1BQWQsR0FBdUIsVUFBUzRULFFBQVQsRUFBbUI7QUFDekNBLFlBQVEsR0FBRyxLQUFLa3FCLFNBQUwsQ0FBZWxxQixRQUFmLEVBQXlCLElBQXpCLENBQVg7O0FBRUEsUUFBSUEsUUFBUSxLQUFLdDNCLFNBQWpCLEVBQTRCO0FBQzNCO0FBQ0E7O0FBRUQsU0FBSzZ3QixPQUFMLENBQWEsUUFBYixFQUF1QjtBQUFFbk8sYUFBTyxFQUFFLEtBQUs2NkIsTUFBTCxDQUFZam1CLFFBQVosQ0FBWDtBQUFrQ0EsY0FBUSxFQUFFQTtBQUE1QyxLQUF2Qjs7QUFFQSxTQUFLaW1CLE1BQUwsQ0FBWWptQixRQUFaLEVBQXNCNVQsTUFBdEI7O0FBQ0EsU0FBSzY1QixNQUFMLENBQVkzK0MsTUFBWixDQUFtQjA0QixRQUFuQixFQUE2QixDQUE3Qjs7QUFDQSxTQUFLbW1CLFFBQUwsQ0FBYzcrQyxNQUFkLENBQXFCMDRCLFFBQXJCLEVBQStCLENBQS9COztBQUVBLFNBQUtrckIsVUFBTCxDQUFnQixPQUFoQjtBQUVBLFNBQUszeEIsT0FBTCxDQUFhLFNBQWIsRUFBd0I7QUFBRW5PLGFBQU8sRUFBRSxJQUFYO0FBQWlCNFUsY0FBUSxFQUFFQTtBQUEzQixLQUF4QjtBQUNBLEdBaEJEO0FBa0JBOzs7Ozs7O0FBS0F1bEIsS0FBRyxDQUFDNS9DLFNBQUosQ0FBYzJsRCxzQkFBZCxHQUF1QyxVQUFTcjZDLE1BQVQsRUFBaUI7QUFDdkRBLFVBQU0sQ0FBQ3lGLElBQVAsQ0FBWXJHLENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsVUFBU3B4QyxDQUFULEVBQVkyTixPQUFaLEVBQXFCO0FBQ3hDLFdBQUt5M0MsS0FBTCxDQUFXLGFBQVg7QUFDQXozQyxhQUFPLEdBQUdyRCxDQUFDLENBQUNxRCxPQUFELENBQVg7QUFDQXJELE9BQUMsQ0FBQyxJQUFJK0MsS0FBSixFQUFELENBQUQsQ0FBZXNqQixHQUFmLENBQW1CLE1BQW5CLEVBQTJCcm1CLENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsVUFBUzk1QixDQUFULEVBQVk7QUFDOUMzSixlQUFPLENBQUMzSCxJQUFSLENBQWEsS0FBYixFQUFvQnNSLENBQUMsQ0FBQzFGLE1BQUYsQ0FBU3RFLEdBQTdCO0FBQ0FLLGVBQU8sQ0FBQ21mLEdBQVIsQ0FBWSxTQUFaLEVBQXVCLENBQXZCO0FBQ0EsYUFBSzI0QixLQUFMLENBQVcsYUFBWDtBQUNBLFNBQUMsS0FBS3BpQyxFQUFMLENBQVEsYUFBUixDQUFELElBQTJCLENBQUMsS0FBS0EsRUFBTCxDQUFRLGNBQVIsQ0FBNUIsSUFBdUQsS0FBSzRoQyxPQUFMLEVBQXZEO0FBQ0EsT0FMMEIsRUFLeEIsSUFMd0IsQ0FBM0IsRUFLVWovQyxJQUxWLENBS2UsS0FMZixFQUtzQjJILE9BQU8sQ0FBQzNILElBQVIsQ0FBYSxLQUFiLEtBQXVCMkgsT0FBTyxDQUFDM0gsSUFBUixDQUFhLFVBQWIsQ0FBdkIsSUFBbUQySCxPQUFPLENBQUMzSCxJQUFSLENBQWEsaUJBQWIsQ0FMekU7QUFNQSxLQVRXLEVBU1QsSUFUUyxDQUFaO0FBVUEsR0FYRDtBQWFBOzs7Ozs7QUFJQXc1QyxLQUFHLENBQUM1L0MsU0FBSixDQUFjNjZDLE9BQWQsR0FBd0IsWUFBVztBQUVsQyxTQUFLSSxRQUFMLENBQWN4NUMsR0FBZCxDQUFrQixXQUFsQjtBQUNBLFNBQUt3aUQsTUFBTCxDQUFZeGlELEdBQVosQ0FBZ0IsV0FBaEI7QUFDQWlKLEtBQUMsQ0FBQ3BILFFBQUQsQ0FBRCxDQUFZN0IsR0FBWixDQUFnQixXQUFoQjs7QUFFQSxRQUFJLEtBQUtxcEMsUUFBTCxDQUFjMlgsVUFBZCxLQUE2QixLQUFqQyxFQUF3QztBQUN2Qy9pRCxZQUFNLENBQUNnRixZQUFQLENBQW9CLEtBQUs4aEQsV0FBekI7QUFDQSxXQUFLL2tELEdBQUwsQ0FBUy9CLE1BQVQsRUFBaUIsUUFBakIsRUFBMkIsS0FBS29nRCxTQUFMLENBQWV5RyxpQkFBMUM7QUFDQTs7QUFFRCxTQUFLLElBQUlubUQsQ0FBVCxJQUFjLEtBQUsyL0MsUUFBbkIsRUFBNkI7QUFDNUIsV0FBS0EsUUFBTCxDQUFjMy9DLENBQWQsRUFBaUJ5NkMsT0FBakI7QUFDQTs7QUFFRCxTQUFLb0osTUFBTCxDQUFZbDRDLFFBQVosQ0FBcUIsU0FBckIsRUFBZ0MwYSxNQUFoQztBQUVBLFNBQUt3OUIsTUFBTCxDQUFZelcsTUFBWjtBQUNBLFNBQUt5VyxNQUFMLENBQVlsNEMsUUFBWixHQUF1QjBZLFFBQXZCLEdBQWtDK29CLE1BQWxDO0FBQ0EsU0FBS3lXLE1BQUwsQ0FBWWw0QyxRQUFaLEdBQXVCeWhDLE1BQXZCO0FBQ0EsU0FBS3lXLE1BQUwsQ0FBWXg5QixNQUFaO0FBQ0EsU0FBS3cwQixRQUFMLENBQ0U3VixXQURGLENBQ2MsS0FBSzkrQixPQUFMLENBQWE0OEMsWUFEM0IsRUFFRTlkLFdBRkYsQ0FFYyxLQUFLOStCLE9BQUwsQ0FBYTg4QyxZQUYzQixFQUdFaGUsV0FIRixDQUdjLEtBQUs5K0IsT0FBTCxDQUFhNjhDLFdBSDNCLEVBSUUvZCxXQUpGLENBSWMsS0FBSzkrQixPQUFMLENBQWErOEMsUUFKM0IsRUFLRWplLFdBTEYsQ0FLYyxLQUFLOStCLE9BQUwsQ0FBYWk5QyxTQUwzQixFQU1FbmUsV0FORixDQU1jLEtBQUs5K0IsT0FBTCxDQUFhcTlDLFNBTjNCLEVBT0V2OUMsSUFQRixDQU9PLE9BUFAsRUFPZ0IsS0FBSzYwQyxRQUFMLENBQWM3MEMsSUFBZCxDQUFtQixPQUFuQixFQUE0QmhCLE9BQTVCLENBQW9DLElBQUlxUSxNQUFKLENBQVcsS0FBS25QLE9BQUwsQ0FBYWc5QyxlQUFiLEdBQStCLFVBQTFDLEVBQXNELEdBQXRELENBQXBDLEVBQWdHLEVBQWhHLENBUGhCLEVBUUV4M0IsVUFSRixDQVFhLGNBUmI7QUFTQSxHQTlCRDtBQWdDQTs7Ozs7Ozs7O0FBT0E4ekIsS0FBRyxDQUFDNS9DLFNBQUosQ0FBY2lsRCxFQUFkLEdBQW1CLFVBQVM3aUQsQ0FBVCxFQUFZNGxELENBQVosRUFBZTNsRCxDQUFmLEVBQWtCO0FBQ3BDLFFBQUlnZ0QsR0FBRyxHQUFHLEtBQUt2WCxRQUFMLENBQWN1WCxHQUF4Qjs7QUFDQSxZQUFRMkYsQ0FBUjtBQUNDLFdBQUssR0FBTDtBQUNDLGVBQU8zRixHQUFHLEdBQUdqZ0QsQ0FBQyxHQUFHQyxDQUFQLEdBQVdELENBQUMsR0FBR0MsQ0FBekI7O0FBQ0QsV0FBSyxHQUFMO0FBQ0MsZUFBT2dnRCxHQUFHLEdBQUdqZ0QsQ0FBQyxHQUFHQyxDQUFQLEdBQVdELENBQUMsR0FBR0MsQ0FBekI7O0FBQ0QsV0FBSyxJQUFMO0FBQ0MsZUFBT2dnRCxHQUFHLEdBQUdqZ0QsQ0FBQyxJQUFJQyxDQUFSLEdBQVlELENBQUMsSUFBSUMsQ0FBM0I7O0FBQ0QsV0FBSyxJQUFMO0FBQ0MsZUFBT2dnRCxHQUFHLEdBQUdqZ0QsQ0FBQyxJQUFJQyxDQUFSLEdBQVlELENBQUMsSUFBSUMsQ0FBM0I7O0FBQ0Q7QUFDQztBQVZGO0FBWUEsR0FkRDtBQWdCQTs7Ozs7Ozs7OztBQVFBdTlDLEtBQUcsQ0FBQzUvQyxTQUFKLENBQWNhLEVBQWQsR0FBbUIsVUFBU2tOLE9BQVQsRUFBa0JwSyxLQUFsQixFQUF5QjVDLFFBQXpCLEVBQW1Da25ELE9BQW5DLEVBQTRDO0FBQzlELFFBQUlsNkMsT0FBTyxDQUFDOUksZ0JBQVosRUFBOEI7QUFDN0I4SSxhQUFPLENBQUM5SSxnQkFBUixDQUF5QnRCLEtBQXpCLEVBQWdDNUMsUUFBaEMsRUFBMENrbkQsT0FBMUM7QUFDQSxLQUZELE1BRU8sSUFBSWw2QyxPQUFPLENBQUM2TSxXQUFaLEVBQXlCO0FBQy9CN00sYUFBTyxDQUFDNk0sV0FBUixDQUFvQixPQUFPalgsS0FBM0IsRUFBa0M1QyxRQUFsQztBQUNBO0FBQ0QsR0FORDtBQVFBOzs7Ozs7Ozs7O0FBUUE2K0MsS0FBRyxDQUFDNS9DLFNBQUosQ0FBY3lCLEdBQWQsR0FBb0IsVUFBU3NNLE9BQVQsRUFBa0JwSyxLQUFsQixFQUF5QjVDLFFBQXpCLEVBQW1Da25ELE9BQW5DLEVBQTRDO0FBQy9ELFFBQUlsNkMsT0FBTyxDQUFDRCxtQkFBWixFQUFpQztBQUNoQ0MsYUFBTyxDQUFDRCxtQkFBUixDQUE0Qm5LLEtBQTVCLEVBQW1DNUMsUUFBbkMsRUFBNkNrbkQsT0FBN0M7QUFDQSxLQUZELE1BRU8sSUFBSWw2QyxPQUFPLENBQUNtNkMsV0FBWixFQUF5QjtBQUMvQm42QyxhQUFPLENBQUNtNkMsV0FBUixDQUFvQixPQUFPdmtELEtBQTNCLEVBQWtDNUMsUUFBbEM7QUFDQTtBQUNELEdBTkQ7QUFRQTs7Ozs7Ozs7Ozs7OztBQVdBNitDLEtBQUcsQ0FBQzUvQyxTQUFKLENBQWM0ekIsT0FBZCxHQUF3QixVQUFTaGlCLElBQVQsRUFBZWhMLElBQWYsRUFBcUJoQixTQUFyQixFQUFnQzhoQixLQUFoQyxFQUF1Qzg5QixLQUF2QyxFQUE4QztBQUNyRSxRQUFJcFosTUFBTSxHQUFHO0FBQ1ptSCxVQUFJLEVBQUU7QUFBRS9tQixhQUFLLEVBQUUsS0FBSzh6QixNQUFMLENBQVlqZ0QsTUFBckI7QUFBNkJxQixhQUFLLEVBQUUsS0FBS29vQyxPQUFMO0FBQXBDO0FBRE0sS0FBYjtBQUFBLFFBRUdyd0IsT0FBTyxHQUFHL08sQ0FBQyxDQUFDcWdCLFNBQUYsQ0FDWnJnQixDQUFDLENBQUMyRyxJQUFGLENBQU8sQ0FBRSxJQUFGLEVBQVFPLElBQVIsRUFBY2hNLFNBQWQsQ0FBUCxFQUFrQyxVQUFTbWhCLENBQVQsRUFBWTtBQUFFLGFBQU9BLENBQVA7QUFBVSxLQUExRCxFQUNFbk8sSUFERixDQUNPLEdBRFAsRUFDWXBULFdBRFosRUFEWSxDQUZiO0FBQUEsUUFLRzdCLEtBQUssR0FBRytHLENBQUMsQ0FBQzBvQixLQUFGLENBQ1YsQ0FBRXhoQixJQUFGLEVBQVEsS0FBUixFQUFlaE0sU0FBUyxJQUFJLFVBQTVCLEVBQXlDZ1QsSUFBekMsQ0FBOEMsR0FBOUMsRUFBbURwVCxXQUFuRCxFQURVLEVBRVZrRixDQUFDLENBQUN2SSxNQUFGLENBQVM7QUFBRW15QixtQkFBYSxFQUFFO0FBQWpCLEtBQVQsRUFBa0M4WCxNQUFsQyxFQUEwQ3hsQyxJQUExQyxDQUZVLENBTFg7O0FBVUEsUUFBSSxDQUFDLEtBQUtvNUMsUUFBTCxDQUFjcHVDLElBQWQsQ0FBTCxFQUEwQjtBQUN6QmxILE9BQUMsQ0FBQ3FHLElBQUYsQ0FBTyxLQUFLZ3ZDLFFBQVosRUFBc0IsVUFBU251QyxJQUFULEVBQWV1dkMsTUFBZixFQUF1QjtBQUM1QyxZQUFJQSxNQUFNLENBQUNnSCxTQUFYLEVBQXNCO0FBQ3JCaEgsZ0JBQU0sQ0FBQ2dILFNBQVAsQ0FBaUJ4a0QsS0FBakI7QUFDQTtBQUNELE9BSkQ7QUFNQSxXQUFLeWtELFFBQUwsQ0FBYztBQUFFeGtELFlBQUksRUFBRWc4QyxHQUFHLENBQUNtRSxJQUFKLENBQVMzd0IsS0FBakI7QUFBd0J4aEIsWUFBSSxFQUFFQTtBQUE5QixPQUFkO0FBQ0EsV0FBS3FwQyxRQUFMLENBQWNybkIsT0FBZCxDQUFzQmp3QixLQUF0Qjs7QUFFQSxVQUFJLEtBQUttbkMsUUFBTCxJQUFpQixPQUFPLEtBQUtBLFFBQUwsQ0FBY3J4QixPQUFkLENBQVAsS0FBa0MsVUFBdkQsRUFBbUU7QUFDbEUsYUFBS3F4QixRQUFMLENBQWNyeEIsT0FBZCxFQUF1QnhXLElBQXZCLENBQTRCLElBQTVCLEVBQWtDVSxLQUFsQztBQUNBO0FBQ0Q7O0FBRUQsV0FBT0EsS0FBUDtBQUNBLEdBM0JEO0FBNkJBOzs7Ozs7QUFJQWk4QyxLQUFHLENBQUM1L0MsU0FBSixDQUFjd2xELEtBQWQsR0FBc0IsVUFBUzV6QyxJQUFULEVBQWU7QUFDcENsSCxLQUFDLENBQUNxRyxJQUFGLENBQU8sQ0FBRWEsSUFBRixFQUFTM0wsTUFBVCxDQUFnQixLQUFLKzZDLE9BQUwsQ0FBYUMsSUFBYixDQUFrQnJ2QyxJQUFsQixLQUEyQixFQUEzQyxDQUFQLEVBQXVEbEgsQ0FBQyxDQUFDOG1DLEtBQUYsQ0FBUSxVQUFTcHhDLENBQVQsRUFBWXdSLElBQVosRUFBa0I7QUFDaEYsVUFBSSxLQUFLb3ZDLE9BQUwsQ0FBYWxYLE9BQWIsQ0FBcUJsNEIsSUFBckIsTUFBK0I3TyxTQUFuQyxFQUE4QztBQUM3QyxhQUFLaStDLE9BQUwsQ0FBYWxYLE9BQWIsQ0FBcUJsNEIsSUFBckIsSUFBNkIsQ0FBN0I7QUFDQTs7QUFFRCxXQUFLb3ZDLE9BQUwsQ0FBYWxYLE9BQWIsQ0FBcUJsNEIsSUFBckI7QUFDQSxLQU5zRCxFQU1wRCxJQU5vRCxDQUF2RDtBQU9BLEdBUkQ7QUFVQTs7Ozs7O0FBSUFndUMsS0FBRyxDQUFDNS9DLFNBQUosQ0FBYzZsRCxLQUFkLEdBQXNCLFVBQVNqMEMsSUFBVCxFQUFlO0FBQ3BDbEgsS0FBQyxDQUFDcUcsSUFBRixDQUFPLENBQUVhLElBQUYsRUFBUzNMLE1BQVQsQ0FBZ0IsS0FBSys2QyxPQUFMLENBQWFDLElBQWIsQ0FBa0JydkMsSUFBbEIsS0FBMkIsRUFBM0MsQ0FBUCxFQUF1RGxILENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsVUFBU3B4QyxDQUFULEVBQVl3UixJQUFaLEVBQWtCO0FBQ2hGLFdBQUtvdkMsT0FBTCxDQUFhbFgsT0FBYixDQUFxQmw0QixJQUFyQjtBQUNBLEtBRnNELEVBRXBELElBRm9ELENBQXZEO0FBR0EsR0FKRDtBQU1BOzs7Ozs7O0FBS0FndUMsS0FBRyxDQUFDNS9DLFNBQUosQ0FBY29vRCxRQUFkLEdBQXlCLFVBQVN2aUMsTUFBVCxFQUFpQjtBQUN6QyxRQUFJQSxNQUFNLENBQUNqaUIsSUFBUCxLQUFnQmc4QyxHQUFHLENBQUNtRSxJQUFKLENBQVMzd0IsS0FBN0IsRUFBb0M7QUFDbkMsVUFBSSxDQUFDMW9CLENBQUMsQ0FBQy9HLEtBQUYsQ0FBUTJrQixPQUFSLENBQWdCekMsTUFBTSxDQUFDalUsSUFBdkIsQ0FBTCxFQUFtQztBQUNsQ2xILFNBQUMsQ0FBQy9HLEtBQUYsQ0FBUTJrQixPQUFSLENBQWdCekMsTUFBTSxDQUFDalUsSUFBdkIsSUFBK0IsRUFBL0I7QUFDQTs7QUFFRCxVQUFJLENBQUNsSCxDQUFDLENBQUMvRyxLQUFGLENBQVEya0IsT0FBUixDQUFnQnpDLE1BQU0sQ0FBQ2pVLElBQXZCLEVBQTZCeTJDLEdBQWxDLEVBQXVDO0FBQ3RDLFlBQUlsNUIsUUFBUSxHQUFHemtCLENBQUMsQ0FBQy9HLEtBQUYsQ0FBUTJrQixPQUFSLENBQWdCekMsTUFBTSxDQUFDalUsSUFBdkIsRUFBNkJ1ZCxRQUE1Qzs7QUFDQXprQixTQUFDLENBQUMvRyxLQUFGLENBQVEya0IsT0FBUixDQUFnQnpDLE1BQU0sQ0FBQ2pVLElBQXZCLEVBQTZCdWQsUUFBN0IsR0FBd0MsVUFBU3pYLENBQVQsRUFBWTtBQUNuRCxjQUFJeVgsUUFBUSxJQUFJQSxRQUFRLENBQUNudEIsS0FBckIsS0FBK0IsQ0FBQzBWLENBQUMsQ0FBQzlSLFNBQUgsSUFBZ0I4UixDQUFDLENBQUM5UixTQUFGLENBQVl6RSxPQUFaLENBQW9CLEtBQXBCLE1BQStCLENBQUMsQ0FBL0UsQ0FBSixFQUF1RjtBQUN0RixtQkFBT2d1QixRQUFRLENBQUNudEIsS0FBVCxDQUFlLElBQWYsRUFBcUIyQyxTQUFyQixDQUFQO0FBQ0E7O0FBQ0QsaUJBQU8rUyxDQUFDLENBQUM5UixTQUFGLElBQWU4UixDQUFDLENBQUM5UixTQUFGLENBQVl6RSxPQUFaLENBQW9CLEtBQXBCLElBQTZCLENBQUMsQ0FBcEQ7QUFDQSxTQUxEOztBQU1BdUosU0FBQyxDQUFDL0csS0FBRixDQUFRMmtCLE9BQVIsQ0FBZ0J6QyxNQUFNLENBQUNqVSxJQUF2QixFQUE2QnkyQyxHQUE3QixHQUFtQyxJQUFuQztBQUNBO0FBQ0QsS0FmRCxNQWVPLElBQUl4aUMsTUFBTSxDQUFDamlCLElBQVAsS0FBZ0JnOEMsR0FBRyxDQUFDbUUsSUFBSixDQUFTQyxLQUE3QixFQUFvQztBQUMxQyxVQUFJLENBQUMsS0FBS2hELE9BQUwsQ0FBYUMsSUFBYixDQUFrQnA3QixNQUFNLENBQUNqVSxJQUF6QixDQUFMLEVBQXFDO0FBQ3BDLGFBQUtvdkMsT0FBTCxDQUFhQyxJQUFiLENBQWtCcDdCLE1BQU0sQ0FBQ2pVLElBQXpCLElBQWlDaVUsTUFBTSxDQUFDbzdCLElBQXhDO0FBQ0EsT0FGRCxNQUVPO0FBQ04sYUFBS0QsT0FBTCxDQUFhQyxJQUFiLENBQWtCcDdCLE1BQU0sQ0FBQ2pVLElBQXpCLElBQWlDLEtBQUtvdkMsT0FBTCxDQUFhQyxJQUFiLENBQWtCcDdCLE1BQU0sQ0FBQ2pVLElBQXpCLEVBQStCM0wsTUFBL0IsQ0FBc0M0ZixNQUFNLENBQUNvN0IsSUFBN0MsQ0FBakM7QUFDQTs7QUFFRCxXQUFLRCxPQUFMLENBQWFDLElBQWIsQ0FBa0JwN0IsTUFBTSxDQUFDalUsSUFBekIsSUFBaUNsSCxDQUFDLENBQUMyRyxJQUFGLENBQU8sS0FBSzJ2QyxPQUFMLENBQWFDLElBQWIsQ0FBa0JwN0IsTUFBTSxDQUFDalUsSUFBekIsQ0FBUCxFQUF1Q2xILENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsVUFBU3AyQixHQUFULEVBQWNoYixDQUFkLEVBQWlCO0FBQ2hHLGVBQU9zSyxDQUFDLENBQUNpSSxPQUFGLENBQVV5SSxHQUFWLEVBQWUsS0FBSzRsQyxPQUFMLENBQWFDLElBQWIsQ0FBa0JwN0IsTUFBTSxDQUFDalUsSUFBekIsQ0FBZixNQUFtRHhSLENBQTFEO0FBQ0EsT0FGdUUsRUFFckUsSUFGcUUsQ0FBdkMsQ0FBakM7QUFHQTtBQUNELEdBM0JEO0FBNkJBOzs7Ozs7O0FBS0F3L0MsS0FBRyxDQUFDNS9DLFNBQUosQ0FBY21uRCxRQUFkLEdBQXlCLFVBQVNubUQsTUFBVCxFQUFpQjtBQUN6QzBKLEtBQUMsQ0FBQ3FHLElBQUYsQ0FBTy9QLE1BQVAsRUFBZTBKLENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsVUFBUzl2QyxLQUFULEVBQWdCaUMsS0FBaEIsRUFBdUI7QUFDN0MsV0FBS3E4QyxRQUFMLENBQWNyOEMsS0FBZCxJQUF1QixJQUF2QjtBQUNBLEtBRmMsRUFFWixJQUZZLENBQWY7QUFHQSxHQUpEO0FBTUE7Ozs7Ozs7QUFLQWk4QyxLQUFHLENBQUM1L0MsU0FBSixDQUFjb25ELE9BQWQsR0FBd0IsVUFBU3BtRCxNQUFULEVBQWlCO0FBQ3hDMEosS0FBQyxDQUFDcUcsSUFBRixDQUFPL1AsTUFBUCxFQUFlMEosQ0FBQyxDQUFDOG1DLEtBQUYsQ0FBUSxVQUFTOXZDLEtBQVQsRUFBZ0JpQyxLQUFoQixFQUF1QjtBQUM3QyxhQUFPLEtBQUtxOEMsUUFBTCxDQUFjcjhDLEtBQWQsQ0FBUDtBQUNBLEtBRmMsRUFFWixJQUZZLENBQWY7QUFHQSxHQUpEO0FBTUE7Ozs7Ozs7OztBQU9BaThDLEtBQUcsQ0FBQzUvQyxTQUFKLENBQWM2Z0QsT0FBZCxHQUF3QixVQUFTbDlDLEtBQVQsRUFBZ0I7QUFDdkMsUUFBSThaLE1BQU0sR0FBRztBQUFFcTJCLE9BQUMsRUFBRSxJQUFMO0FBQVdDLE9BQUMsRUFBRTtBQUFkLEtBQWI7QUFFQXB3QyxTQUFLLEdBQUdBLEtBQUssQ0FBQzJ2QixhQUFOLElBQXVCM3ZCLEtBQXZCLElBQWdDakUsTUFBTSxDQUFDaUUsS0FBL0M7QUFFQUEsU0FBSyxHQUFHQSxLQUFLLENBQUN3eUIsT0FBTixJQUFpQnh5QixLQUFLLENBQUN3eUIsT0FBTixDQUFjOTFCLE1BQS9CLEdBQ1BzRCxLQUFLLENBQUN3eUIsT0FBTixDQUFjLENBQWQsQ0FETyxHQUNZeHlCLEtBQUssQ0FBQ2t4QixjQUFOLElBQXdCbHhCLEtBQUssQ0FBQ2t4QixjQUFOLENBQXFCeDBCLE1BQTdDLEdBQ2xCc0QsS0FBSyxDQUFDa3hCLGNBQU4sQ0FBcUIsQ0FBckIsQ0FEa0IsR0FDUWx4QixLQUY1Qjs7QUFJQSxRQUFJQSxLQUFLLENBQUN1eEIsS0FBVixFQUFpQjtBQUNoQnpYLFlBQU0sQ0FBQ3EyQixDQUFQLEdBQVdud0MsS0FBSyxDQUFDdXhCLEtBQWpCO0FBQ0F6WCxZQUFNLENBQUNzMkIsQ0FBUCxHQUFXcHdDLEtBQUssQ0FBQ3d4QixLQUFqQjtBQUNBLEtBSEQsTUFHTztBQUNOMVgsWUFBTSxDQUFDcTJCLENBQVAsR0FBV253QyxLQUFLLENBQUM4eEIsT0FBakI7QUFDQWhZLFlBQU0sQ0FBQ3MyQixDQUFQLEdBQVdwd0MsS0FBSyxDQUFDK3hCLE9BQWpCO0FBQ0E7O0FBRUQsV0FBT2pZLE1BQVA7QUFDQSxHQWxCRDtBQW9CQTs7Ozs7Ozs7QUFNQW1pQyxLQUFHLENBQUM1L0MsU0FBSixDQUFjNHhDLFNBQWQsR0FBMEIsVUFBUzBXLE1BQVQsRUFBaUI7QUFDMUMsV0FBTyxDQUFDcmhELEtBQUssQ0FBQ0YsVUFBVSxDQUFDdWhELE1BQUQsQ0FBWCxDQUFiO0FBQ0EsR0FGRDtBQUlBOzs7Ozs7Ozs7O0FBUUExSSxLQUFHLENBQUM1L0MsU0FBSixDQUFjNm1ELFVBQWQsR0FBMkIsVUFBUzUxQyxLQUFULEVBQWdCMkIsTUFBaEIsRUFBd0I7QUFDbEQsV0FBTztBQUNOa2hDLE9BQUMsRUFBRTdpQyxLQUFLLENBQUM2aUMsQ0FBTixHQUFVbGhDLE1BQU0sQ0FBQ2toQyxDQURkO0FBRU5DLE9BQUMsRUFBRTlpQyxLQUFLLENBQUM4aUMsQ0FBTixHQUFVbmhDLE1BQU0sQ0FBQ21oQztBQUZkLEtBQVA7QUFJQSxHQUxEO0FBT0E7Ozs7Ozs7QUFLQXJwQyxHQUFDLENBQUN1RCxFQUFGLENBQUtzNkMsV0FBTCxHQUFtQixVQUFTMTVCLE1BQVQsRUFBaUI7QUFDbkMsUUFBSWh0QixJQUFJLEdBQUdjLEtBQUssQ0FBQzNDLFNBQU4sQ0FBZ0I4QixLQUFoQixDQUFzQm1CLElBQXRCLENBQTJCMEIsU0FBM0IsRUFBc0MsQ0FBdEMsQ0FBWDtBQUVBLFdBQU8sS0FBS29NLElBQUwsQ0FBVSxZQUFXO0FBQzNCLFVBQUl5M0MsS0FBSyxHQUFHOTlDLENBQUMsQ0FBQyxJQUFELENBQWI7QUFBQSxVQUNDOUQsSUFBSSxHQUFHNGhELEtBQUssQ0FBQzVoRCxJQUFOLENBQVcsY0FBWCxDQURSOztBQUdBLFVBQUksQ0FBQ0EsSUFBTCxFQUFXO0FBQ1ZBLFlBQUksR0FBRyxJQUFJZzVDLEdBQUosQ0FBUSxJQUFSLEVBQWMsT0FBTy93QixNQUFQLElBQWlCLFFBQWpCLElBQTZCQSxNQUEzQyxDQUFQO0FBQ0EyNUIsYUFBSyxDQUFDNWhELElBQU4sQ0FBVyxjQUFYLEVBQTJCQSxJQUEzQjtBQUVBOEQsU0FBQyxDQUFDcUcsSUFBRixDQUFPLENBQ04sTUFETSxFQUNFLE1BREYsRUFDVSxJQURWLEVBQ2dCLFNBRGhCLEVBQzJCLFNBRDNCLEVBQ3NDLFNBRHRDLEVBQ2lELEtBRGpELEVBQ3dELFFBRHhELENBQVAsRUFFRyxVQUFTM1EsQ0FBVCxFQUFZdUQsS0FBWixFQUFtQjtBQUNyQmlELGNBQUksQ0FBQ3doRCxRQUFMLENBQWM7QUFBRXhrRCxnQkFBSSxFQUFFZzhDLEdBQUcsQ0FBQ21FLElBQUosQ0FBUzN3QixLQUFqQjtBQUF3QnhoQixnQkFBSSxFQUFFak87QUFBOUIsV0FBZDtBQUNBaUQsY0FBSSxDQUFDcTBDLFFBQUwsQ0FBY3A2QyxFQUFkLENBQWlCOEMsS0FBSyxHQUFHLG9CQUF6QixFQUErQytHLENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsVUFBUzk1QixDQUFULEVBQVk7QUFDbEUsZ0JBQUlBLENBQUMsQ0FBQzlSLFNBQUYsSUFBZThSLENBQUMsQ0FBQzRjLGFBQUYsS0FBb0IsSUFBdkMsRUFBNkM7QUFDNUMsbUJBQUs2eUIsUUFBTCxDQUFjLENBQUV4akQsS0FBRixDQUFkO0FBQ0FpRCxrQkFBSSxDQUFDakQsS0FBRCxDQUFKLENBQVkzQixLQUFaLENBQWtCLElBQWxCLEVBQXdCLEdBQUdGLEtBQUgsQ0FBU21CLElBQVQsQ0FBYzBCLFNBQWQsRUFBeUIsQ0FBekIsQ0FBeEI7QUFDQSxtQkFBS3lpRCxPQUFMLENBQWEsQ0FBRXpqRCxLQUFGLENBQWI7QUFDQTtBQUNELFdBTjhDLEVBTTVDaUQsSUFONEMsQ0FBL0M7QUFPQSxTQVhEO0FBWUE7O0FBRUQsVUFBSSxPQUFPaW9CLE1BQVAsSUFBaUIsUUFBakIsSUFBNkJBLE1BQU0sQ0FBQ3V5QixNQUFQLENBQWMsQ0FBZCxNQUFxQixHQUF0RCxFQUEyRDtBQUMxRHg2QyxZQUFJLENBQUNpb0IsTUFBRCxDQUFKLENBQWE3c0IsS0FBYixDQUFtQjRFLElBQW5CLEVBQXlCL0UsSUFBekI7QUFDQTtBQUNELEtBekJNLENBQVA7QUEwQkEsR0E3QkQ7QUErQkE7Ozs7OztBQUlBNkksR0FBQyxDQUFDdUQsRUFBRixDQUFLczZDLFdBQUwsQ0FBaUJFLFdBQWpCLEdBQStCN0ksR0FBL0I7QUFFQSxDQXpzREEsRUF5c0RFbGdELE1BQU0sQ0FBQ2dwRCxLQUFQLElBQWdCaHBELE1BQU0sQ0FBQ3lHLE1BenNEekIsRUF5c0RpQ3pHLE1BenNEakMsRUF5c0R5QzRELFFBenNEekM7QUEyc0REOzs7Ozs7Ozs7QUFPQTs7QUFBQyxDQUFDLFVBQVNvSCxDQUFULEVBQVloTCxNQUFaLEVBQW9CNEQsUUFBcEIsRUFBOEJQLFNBQTlCLEVBQXlDO0FBRTFDOzs7OztBQUtBLE1BQUk0bEQsV0FBVyxHQUFHLFVBQVNDLFFBQVQsRUFBbUI7QUFDcEM7Ozs7O0FBS0EsU0FBS0MsS0FBTCxHQUFhRCxRQUFiO0FBRUE7Ozs7OztBQUtBLFNBQUtFLFNBQUwsR0FBaUIsSUFBakI7QUFFQTs7Ozs7O0FBS0EsU0FBS0MsUUFBTCxHQUFnQixJQUFoQjtBQUVBOzs7Ozs7QUFLQSxTQUFLakosU0FBTCxHQUFpQjtBQUNoQixrQ0FBNEJwMUMsQ0FBQyxDQUFDOG1DLEtBQUYsQ0FBUSxVQUFTOTVCLENBQVQsRUFBWTtBQUMvQyxZQUFJQSxDQUFDLENBQUM5UixTQUFGLElBQWUsS0FBS2lqRCxLQUFMLENBQVcvZCxRQUFYLENBQW9Ca2UsV0FBdkMsRUFBb0Q7QUFDbkQsZUFBS0MsS0FBTDtBQUNBO0FBQ0QsT0FKMkIsRUFJekIsSUFKeUI7QUFEWixLQUFqQixDQTNCb0MsQ0FtQ3BDOztBQUNBLFNBQUtKLEtBQUwsQ0FBV3ZpRCxPQUFYLEdBQXFCb0UsQ0FBQyxDQUFDdkksTUFBRixDQUFTLEVBQVQsRUFBYXdtRCxXQUFXLENBQUM5SSxRQUF6QixFQUFtQyxLQUFLZ0osS0FBTCxDQUFXdmlELE9BQTlDLENBQXJCLENBcENvQyxDQXNDcEM7O0FBQ0EsU0FBS3VpRCxLQUFMLENBQVc1TixRQUFYLENBQW9CcDZDLEVBQXBCLENBQXVCLEtBQUtpL0MsU0FBNUI7QUFDQSxHQXhDRDtBQTBDQTs7Ozs7O0FBSUE2SSxhQUFXLENBQUM5SSxRQUFaLEdBQXVCO0FBQ3RCbUosZUFBVyxFQUFFLElBRFM7QUFFdEJFLHVCQUFtQixFQUFFO0FBRkMsR0FBdkI7QUFLQTs7OztBQUdBUCxhQUFXLENBQUMzb0QsU0FBWixDQUFzQmlwRCxLQUF0QixHQUE4QixZQUFXO0FBQ3hDLFFBQUksS0FBS0gsU0FBVCxFQUFvQjtBQUNuQjtBQUNBOztBQUVELFNBQUtDLFFBQUwsR0FBZ0IsS0FBS0YsS0FBTCxDQUFXdkQsU0FBWCxFQUFoQjtBQUNBLFNBQUt3RCxTQUFMLEdBQWlCcHBELE1BQU0sQ0FBQ3lwRCxXQUFQLENBQW1CeitDLENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsS0FBSzZULE9BQWIsRUFBc0IsSUFBdEIsQ0FBbkIsRUFBZ0QsS0FBS3dELEtBQUwsQ0FBVy9kLFFBQVgsQ0FBb0JvZSxtQkFBcEUsQ0FBakI7QUFDQSxHQVBEO0FBU0E7Ozs7O0FBR0FQLGFBQVcsQ0FBQzNvRCxTQUFaLENBQXNCcWxELE9BQXRCLEdBQWdDLFlBQVc7QUFDMUMsUUFBSSxLQUFLd0QsS0FBTCxDQUFXdkQsU0FBWCxPQUEyQixLQUFLeUQsUUFBcEMsRUFBOEM7QUFDN0M7QUFDQTs7QUFFRCxTQUFLQSxRQUFMLEdBQWdCLENBQUMsS0FBS0EsUUFBdEI7O0FBRUEsU0FBS0YsS0FBTCxDQUFXNU4sUUFBWCxDQUFvQjVWLFdBQXBCLENBQWdDLFlBQWhDLEVBQThDLENBQUMsS0FBSzBqQixRQUFwRDs7QUFFQSxTQUFLQSxRQUFMLElBQWtCLEtBQUtGLEtBQUwsQ0FBV3RELFVBQVgsQ0FBc0IsT0FBdEIsS0FBa0MsS0FBS3NELEtBQUwsQ0FBV3hELE9BQVgsRUFBcEQ7QUFDQSxHQVZEO0FBWUE7Ozs7O0FBR0FzRCxhQUFXLENBQUMzb0QsU0FBWixDQUFzQjY2QyxPQUF0QixHQUFnQyxZQUFXO0FBQzFDLFFBQUlwaEMsT0FBSixFQUFheXNDLFFBQWI7QUFFQXhtRCxVQUFNLENBQUMwcEQsYUFBUCxDQUFxQixLQUFLTixTQUExQjs7QUFFQSxTQUFLcnZDLE9BQUwsSUFBZ0IsS0FBS3FtQyxTQUFyQixFQUFnQztBQUMvQixXQUFLK0ksS0FBTCxDQUFXNU4sUUFBWCxDQUFvQng1QyxHQUFwQixDQUF3QmdZLE9BQXhCLEVBQWlDLEtBQUtxbUMsU0FBTCxDQUFlcm1DLE9BQWYsQ0FBakM7QUFDQTs7QUFDRCxTQUFLeXNDLFFBQUwsSUFBaUI5NkMsTUFBTSxDQUFDaStDLG1CQUFQLENBQTJCLElBQTNCLENBQWpCLEVBQW1EO0FBQ2xELGFBQU8sS0FBS25ELFFBQUwsQ0FBUCxJQUF5QixVQUF6QixLQUF3QyxLQUFLQSxRQUFMLElBQWlCLElBQXpEO0FBQ0E7QUFDRCxHQVhEOztBQWFBeDdDLEdBQUMsQ0FBQ3VELEVBQUYsQ0FBS3M2QyxXQUFMLENBQWlCRSxXQUFqQixDQUE2QnZILE9BQTdCLENBQXFDeUgsV0FBckMsR0FBbURBLFdBQW5EO0FBRUEsQ0F2R0EsRUF1R0VqcEQsTUFBTSxDQUFDZ3BELEtBQVAsSUFBZ0JocEQsTUFBTSxDQUFDeUcsTUF2R3pCLEVBdUdpQ3pHLE1BdkdqQyxFQXVHeUM0RCxRQXZHekM7QUF5R0Q7Ozs7Ozs7OztBQU9BOztBQUFDLENBQUMsVUFBU29ILENBQVQsRUFBWWhMLE1BQVosRUFBb0I0RCxRQUFwQixFQUE4QlAsU0FBOUIsRUFBeUM7QUFFMUM7Ozs7O0FBS0EsTUFBSXVtRCxJQUFJLEdBQUcsVUFBU1YsUUFBVCxFQUFtQjtBQUU3Qjs7Ozs7QUFLQSxTQUFLQyxLQUFMLEdBQWFELFFBQWI7QUFFQTs7Ozs7O0FBS0EsU0FBS1csT0FBTCxHQUFlLEVBQWY7QUFFQTs7Ozs7O0FBS0EsU0FBS3pKLFNBQUwsR0FBaUI7QUFDaEIsMkVBQXFFcDFDLENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsVUFBUzk1QixDQUFULEVBQVk7QUFDeEYsWUFBSSxDQUFDQSxDQUFDLENBQUM5UixTQUFQLEVBQWtCO0FBQ2pCO0FBQ0E7O0FBRUQsWUFBSSxDQUFDLEtBQUtpakQsS0FBTCxDQUFXL2QsUUFBWixJQUF3QixDQUFDLEtBQUsrZCxLQUFMLENBQVcvZCxRQUFYLENBQW9CMGUsUUFBakQsRUFBMkQ7QUFDMUQ7QUFDQTs7QUFFRCxZQUFLOXhDLENBQUMsQ0FBQ3d1QyxRQUFGLElBQWN4dUMsQ0FBQyxDQUFDd3VDLFFBQUYsQ0FBV3QwQyxJQUFYLElBQW1CLFVBQWxDLElBQWlEOEYsQ0FBQyxDQUFDOVQsSUFBRixJQUFVLGFBQS9ELEVBQThFO0FBQzdFLGNBQUlrbkMsUUFBUSxHQUFHLEtBQUsrZCxLQUFMLENBQVcvZCxRQUExQjtBQUFBLGNBQ0NubkIsQ0FBQyxHQUFJbW5CLFFBQVEsQ0FBQzRXLE1BQVQsSUFBbUI3NEMsSUFBSSxDQUFDeTBCLElBQUwsQ0FBVXdOLFFBQVEsQ0FBQ2lJLEtBQVQsR0FBaUIsQ0FBM0IsQ0FBbkIsSUFBb0RqSSxRQUFRLENBQUNpSSxLQURuRTtBQUFBLGNBRUMzeUMsQ0FBQyxHQUFLMHFDLFFBQVEsQ0FBQzRXLE1BQVQsSUFBbUIvOUIsQ0FBQyxHQUFHLENBQUMsQ0FBekIsSUFBK0IsQ0FGckM7QUFBQSxjQUdDMFcsUUFBUSxHQUFHLENBQUMzaUIsQ0FBQyxDQUFDd3VDLFFBQUYsSUFBY3h1QyxDQUFDLENBQUN3dUMsUUFBRixDQUFXcC9DLEtBQVgsS0FBcUIvRCxTQUFuQyxHQUErQzJVLENBQUMsQ0FBQ3d1QyxRQUFGLENBQVdwL0MsS0FBMUQsR0FBa0UsS0FBSytoRCxLQUFMLENBQVcvZSxPQUFYLEVBQW5FLElBQTJGMXBDLENBSHZHO0FBQUEsY0FJQ2lrRCxNQUFNLEdBQUcsS0FBS3dFLEtBQUwsQ0FBV3hFLE1BQVgsR0FBb0Joa0QsTUFKOUI7QUFBQSxjQUtDbXpCLElBQUksR0FBRzlvQixDQUFDLENBQUM4bUMsS0FBRixDQUFRLFVBQVNweEMsQ0FBVCxFQUFZMm1CLENBQVosRUFBZTtBQUFFLGlCQUFLeU0sSUFBTCxDQUFVek0sQ0FBVjtBQUFjLFdBQXZDLEVBQXlDLElBQXpDLENBTFIsQ0FENkUsQ0FPN0U7OztBQUNBLGNBQUkrakIsUUFBUSxDQUFDMmUsYUFBVCxHQUF5QixDQUE3QixFQUFnQztBQUMvQjlsQyxhQUFDLElBQUltbkIsUUFBUSxDQUFDMmUsYUFBZCxDQUQrQixDQUUvQjs7QUFDQSxnQkFBSTNlLFFBQVEsQ0FBQzJXLElBQWIsRUFBbUI7QUFDWHBuQixzQkFBUSxJQUFJeVEsUUFBUSxDQUFDMmUsYUFBckI7QUFDQTlsQyxlQUFDO0FBQ0Y7QUFDUDs7QUFFRCxpQkFBT3ZqQixDQUFDLEtBQUt1akIsQ0FBYixFQUFnQjtBQUNmLGlCQUFLNlAsSUFBTCxDQUFVNndCLE1BQU0sR0FBRyxDQUFULEdBQWEsS0FBS3dFLEtBQUwsQ0FBVzNyQyxRQUFYLENBQW9CbWQsUUFBcEIsQ0FBdkI7QUFDQWdxQixrQkFBTSxJQUFJMzVDLENBQUMsQ0FBQ3FHLElBQUYsQ0FBTyxLQUFLODNDLEtBQUwsQ0FBV3hFLE1BQVgsQ0FBa0IsS0FBS3dFLEtBQUwsQ0FBVzNyQyxRQUFYLENBQW9CbWQsUUFBcEIsQ0FBbEIsQ0FBUCxFQUF5RDdHLElBQXpELENBQVY7QUFDQTZHLG9CQUFRO0FBQ1I7QUFDRDtBQUNELE9BaENvRSxFQWdDbEUsSUFoQ2tFO0FBRHJELEtBQWpCLENBckI2QixDQXlEN0I7O0FBQ0EsU0FBS3d1QixLQUFMLENBQVd2aUQsT0FBWCxHQUFxQm9FLENBQUMsQ0FBQ3ZJLE1BQUYsQ0FBUyxFQUFULEVBQWFtbkQsSUFBSSxDQUFDekosUUFBbEIsRUFBNEIsS0FBS2dKLEtBQUwsQ0FBV3ZpRCxPQUF2QyxDQUFyQixDQTFENkIsQ0E0RDdCOztBQUNBLFNBQUt1aUQsS0FBTCxDQUFXNU4sUUFBWCxDQUFvQnA2QyxFQUFwQixDQUF1QixLQUFLaS9DLFNBQTVCO0FBQ0EsR0E5REQ7QUFnRUE7Ozs7OztBQUlBd0osTUFBSSxDQUFDekosUUFBTCxHQUFnQjtBQUNmMkosWUFBUSxFQUFFLEtBREs7QUFFZkMsaUJBQWEsRUFBRTtBQUZBLEdBQWhCO0FBS0E7Ozs7OztBQUtBSCxNQUFJLENBQUN0cEQsU0FBTCxDQUFld3pCLElBQWYsR0FBc0IsVUFBUzZHLFFBQVQsRUFBbUI7QUFDeEMsUUFBSXF2QixLQUFLLEdBQUcsS0FBS2IsS0FBTCxDQUFXNUUsTUFBWCxDQUFrQmw0QyxRQUFsQixHQUE2Qm1GLEVBQTdCLENBQWdDbXBCLFFBQWhDLENBQVo7QUFBQSxRQUNDc3ZCLFNBQVMsR0FBR0QsS0FBSyxJQUFJQSxLQUFLLENBQUN4dUMsSUFBTixDQUFXLFdBQVgsQ0FEdEI7O0FBR0EsUUFBSSxDQUFDeXVDLFNBQUQsSUFBY2ovQyxDQUFDLENBQUNpSSxPQUFGLENBQVUrMkMsS0FBSyxDQUFDaDVDLEdBQU4sQ0FBVSxDQUFWLENBQVYsRUFBd0IsS0FBSzY0QyxPQUE3QixJQUF3QyxDQUFDLENBQTNELEVBQThEO0FBQzdEO0FBQ0E7O0FBRURJLGFBQVMsQ0FBQzU0QyxJQUFWLENBQWVyRyxDQUFDLENBQUM4bUMsS0FBRixDQUFRLFVBQVM5dkMsS0FBVCxFQUFnQnFNLE9BQWhCLEVBQXlCO0FBQy9DLFVBQUlrdEMsUUFBUSxHQUFHdndDLENBQUMsQ0FBQ3FELE9BQUQsQ0FBaEI7QUFBQSxVQUEyQmxCLEtBQTNCO0FBQUEsVUFDYVQsR0FBRyxHQUFJMU0sTUFBTSxDQUFDa3FELGdCQUFQLEdBQTBCLENBQTFCLElBQStCM08sUUFBUSxDQUFDNzBDLElBQVQsQ0FBYyxpQkFBZCxDQUFoQyxJQUFxRTYwQyxRQUFRLENBQUM3MEMsSUFBVCxDQUFjLFVBQWQsQ0FBckUsSUFBa0c2MEMsUUFBUSxDQUFDNzBDLElBQVQsQ0FBYyxhQUFkLENBRHJIOztBQUdBLFdBQUt5aUQsS0FBTCxDQUFXajFCLE9BQVgsQ0FBbUIsTUFBbkIsRUFBMkI7QUFBRTdsQixlQUFPLEVBQUVrdEMsUUFBWDtBQUFxQjd1QyxXQUFHLEVBQUVBO0FBQTFCLE9BQTNCLEVBQTRELE1BQTVEOztBQUVBLFVBQUk2dUMsUUFBUSxDQUFDeDNCLEVBQVQsQ0FBWSxLQUFaLENBQUosRUFBd0I7QUFDdkJ3M0IsZ0JBQVEsQ0FBQ2xxQixHQUFULENBQWEsZUFBYixFQUE4QnJtQixDQUFDLENBQUM4bUMsS0FBRixDQUFRLFlBQVc7QUFDaER5SixrQkFBUSxDQUFDL3RCLEdBQVQsQ0FBYSxTQUFiLEVBQXdCLENBQXhCOztBQUNBLGVBQUsyN0IsS0FBTCxDQUFXajFCLE9BQVgsQ0FBbUIsUUFBbkIsRUFBNkI7QUFBRTdsQixtQkFBTyxFQUFFa3RDLFFBQVg7QUFBcUI3dUMsZUFBRyxFQUFFQTtBQUExQixXQUE3QixFQUE4RCxNQUE5RDtBQUNBLFNBSDZCLEVBRzNCLElBSDJCLENBQTlCLEVBR1VoRyxJQUhWLENBR2UsS0FIZixFQUdzQmdHLEdBSHRCO0FBSVMsT0FMVixNQUtnQixJQUFJNnVDLFFBQVEsQ0FBQ3gzQixFQUFULENBQVksUUFBWixDQUFKLEVBQTJCO0FBQzlCdzNCLGdCQUFRLENBQUNscUIsR0FBVCxDQUFhLGVBQWIsRUFBOEJybUIsQ0FBQyxDQUFDOG1DLEtBQUYsQ0FBUSxZQUFXO0FBQzdDLGVBQUtxWCxLQUFMLENBQVdqMUIsT0FBWCxDQUFtQixRQUFuQixFQUE2QjtBQUFFN2xCLG1CQUFPLEVBQUVrdEMsUUFBWDtBQUFxQjd1QyxlQUFHLEVBQUVBO0FBQTFCLFdBQTdCLEVBQThELE1BQTlEO0FBQ0gsU0FGNkIsRUFFM0IsSUFGMkIsQ0FBOUIsRUFFVWhHLElBRlYsQ0FFZSxRQUZmLEVBRXlCZ0csR0FGekI7QUFHWixPQUplLE1BSVQ7QUFDTlMsYUFBSyxHQUFHLElBQUlZLEtBQUosRUFBUjtBQUNBWixhQUFLLENBQUNjLE1BQU4sR0FBZWpELENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsWUFBVztBQUNqQ3lKLGtCQUFRLENBQUMvdEIsR0FBVCxDQUFhO0FBQ1osZ0NBQW9CLFVBQVU5Z0IsR0FBVixHQUFnQixJQUR4QjtBQUVaLHVCQUFXO0FBRkMsV0FBYjs7QUFJQSxlQUFLeThDLEtBQUwsQ0FBV2oxQixPQUFYLENBQW1CLFFBQW5CLEVBQTZCO0FBQUU3bEIsbUJBQU8sRUFBRWt0QyxRQUFYO0FBQXFCN3VDLGVBQUcsRUFBRUE7QUFBMUIsV0FBN0IsRUFBOEQsTUFBOUQ7QUFDQSxTQU5jLEVBTVosSUFOWSxDQUFmO0FBT0FTLGFBQUssQ0FBQ2EsR0FBTixHQUFZdEIsR0FBWjtBQUNBO0FBQ0QsS0ExQmMsRUEwQlosSUExQlksQ0FBZjs7QUE0QkEsU0FBS205QyxPQUFMLENBQWFub0QsSUFBYixDQUFrQnNvRCxLQUFLLENBQUNoNUMsR0FBTixDQUFVLENBQVYsQ0FBbEI7QUFDQSxHQXJDRDtBQXVDQTs7Ozs7O0FBSUE0NEMsTUFBSSxDQUFDdHBELFNBQUwsQ0FBZTY2QyxPQUFmLEdBQXlCLFlBQVc7QUFDbkMsUUFBSXBoQyxPQUFKLEVBQWF5c0MsUUFBYjs7QUFFQSxTQUFLenNDLE9BQUwsSUFBZ0IsS0FBSzRYLFFBQXJCLEVBQStCO0FBQzlCLFdBQUt3M0IsS0FBTCxDQUFXNU4sUUFBWCxDQUFvQng1QyxHQUFwQixDQUF3QmdZLE9BQXhCLEVBQWlDLEtBQUs0WCxRQUFMLENBQWM1WCxPQUFkLENBQWpDO0FBQ0E7O0FBQ0QsU0FBS3lzQyxRQUFMLElBQWlCOTZDLE1BQU0sQ0FBQ2krQyxtQkFBUCxDQUEyQixJQUEzQixDQUFqQixFQUFtRDtBQUNsRCxhQUFPLEtBQUtuRCxRQUFMLENBQVAsSUFBeUIsVUFBekIsS0FBd0MsS0FBS0EsUUFBTCxJQUFpQixJQUF6RDtBQUNBO0FBQ0QsR0FURDs7QUFXQXg3QyxHQUFDLENBQUN1RCxFQUFGLENBQUtzNkMsV0FBTCxDQUFpQkUsV0FBakIsQ0FBNkJ2SCxPQUE3QixDQUFxQ29JLElBQXJDLEdBQTRDQSxJQUE1QztBQUVBLENBN0lBLEVBNklFNXBELE1BQU0sQ0FBQ2dwRCxLQUFQLElBQWdCaHBELE1BQU0sQ0FBQ3lHLE1BN0l6QixFQTZJaUN6RyxNQTdJakMsRUE2SXlDNEQsUUE3SXpDO0FBK0lEOzs7Ozs7Ozs7QUFPQTs7QUFBQyxDQUFDLFVBQVNvSCxDQUFULEVBQVloTCxNQUFaLEVBQW9CNEQsUUFBcEIsRUFBOEJQLFNBQTlCLEVBQXlDO0FBRTFDOzs7OztBQUtBLE1BQUk4bUQsVUFBVSxHQUFHLFVBQVNqQixRQUFULEVBQW1CO0FBQ25DOzs7OztBQUtBLFNBQUtDLEtBQUwsR0FBYUQsUUFBYjtBQUVBLFNBQUtrQixlQUFMLEdBQXVCLElBQXZCO0FBRUE7Ozs7OztBQUtBLFNBQUtoSyxTQUFMLEdBQWlCO0FBQ2hCLHlEQUFtRHAxQyxDQUFDLENBQUM4bUMsS0FBRixDQUFRLFVBQVM5NUIsQ0FBVCxFQUFZO0FBQ3RFLFlBQUlBLENBQUMsQ0FBQzlSLFNBQUYsSUFBZSxLQUFLaWpELEtBQUwsQ0FBVy9kLFFBQVgsQ0FBb0JpZixVQUF2QyxFQUFtRDtBQUNsRCxlQUFLMUQsTUFBTDtBQUNBO0FBQ0QsT0FKa0QsRUFJaEQsSUFKZ0QsQ0FEbkM7QUFNaEIsOEJBQXdCMzdDLENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsVUFBUzk1QixDQUFULEVBQVk7QUFDM0MsWUFBSUEsQ0FBQyxDQUFDOVIsU0FBRixJQUFlLEtBQUtpakQsS0FBTCxDQUFXL2QsUUFBWCxDQUFvQmlmLFVBQW5DLElBQWlEcnlDLENBQUMsQ0FBQ3d1QyxRQUFGLENBQVd0MEMsSUFBWCxLQUFvQixVQUF6RSxFQUFvRjtBQUNuRixlQUFLeTBDLE1BQUw7QUFDQTtBQUNELE9BSnVCLEVBSXJCLElBSnFCLENBTlI7QUFXaEIseUJBQW1CMzdDLENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsVUFBUzk1QixDQUFULEVBQVk7QUFDdEMsWUFBSUEsQ0FBQyxDQUFDOVIsU0FBRixJQUFlLEtBQUtpakQsS0FBTCxDQUFXL2QsUUFBWCxDQUFvQmlmLFVBQW5DLElBQ0FyeUMsQ0FBQyxDQUFDM0osT0FBRixDQUFVK1csT0FBVixDQUFrQixNQUFNLEtBQUsrakMsS0FBTCxDQUFXL2QsUUFBWCxDQUFvQjBZLFNBQTVDLEVBQXVEOWhELEtBQXZELE9BQW1FLEtBQUttbkQsS0FBTCxDQUFXL2UsT0FBWCxFQUR2RSxFQUM2RjtBQUM1RixlQUFLdWMsTUFBTDtBQUNBO0FBQ0QsT0FMa0IsRUFLaEIsSUFMZ0I7QUFYSCxLQUFqQixDQWZtQyxDQWtDbkM7O0FBQ0EsU0FBS3dDLEtBQUwsQ0FBV3ZpRCxPQUFYLEdBQXFCb0UsQ0FBQyxDQUFDdkksTUFBRixDQUFTLEVBQVQsRUFBYTBuRCxVQUFVLENBQUNoSyxRQUF4QixFQUFrQyxLQUFLZ0osS0FBTCxDQUFXdmlELE9BQTdDLENBQXJCLENBbkNtQyxDQXFDbkM7O0FBQ0EsU0FBS3VpRCxLQUFMLENBQVc1TixRQUFYLENBQW9CcDZDLEVBQXBCLENBQXVCLEtBQUtpL0MsU0FBNUI7O0FBQ0EsU0FBS2tLLFdBQUwsR0FBbUIsSUFBbkI7QUFDQSxRQUFJQyxPQUFPLEdBQUcsSUFBZCxDQXhDbUMsQ0EwQ25DO0FBQ0E7O0FBQ0F2L0MsS0FBQyxDQUFDaEwsTUFBRCxDQUFELENBQVVtQixFQUFWLENBQWEsTUFBYixFQUFxQixZQUFXO0FBQy9CLFVBQUlvcEQsT0FBTyxDQUFDcEIsS0FBUixDQUFjL2QsUUFBZCxDQUF1QmlmLFVBQTNCLEVBQXVDO0FBQ3RDRSxlQUFPLENBQUM1RCxNQUFSO0FBQ0E7QUFDRCxLQUpELEVBNUNtQyxDQWtEbkM7QUFDQTtBQUNBOztBQUNBMzdDLEtBQUMsQ0FBQ2hMLE1BQUQsQ0FBRCxDQUFVKzdDLE1BQVYsQ0FBaUIsWUFBVztBQUMzQixVQUFJd08sT0FBTyxDQUFDcEIsS0FBUixDQUFjL2QsUUFBZCxDQUF1QmlmLFVBQTNCLEVBQXVDO0FBQ3RDLFlBQUlFLE9BQU8sQ0FBQ0QsV0FBUixJQUF1QixJQUEzQixFQUFpQztBQUNoQ3RsRCxzQkFBWSxDQUFDdWxELE9BQU8sQ0FBQ0QsV0FBVCxDQUFaO0FBQ0E7O0FBRURDLGVBQU8sQ0FBQ0QsV0FBUixHQUFzQm5sRCxVQUFVLENBQUMsWUFBVztBQUMzQ29sRCxpQkFBTyxDQUFDNUQsTUFBUjtBQUNBLFNBRitCLEVBRTdCLEdBRjZCLENBQWhDO0FBR0E7QUFDRCxLQVZEO0FBWUEsR0FqRUQ7QUFtRUE7Ozs7OztBQUlBd0QsWUFBVSxDQUFDaEssUUFBWCxHQUFzQjtBQUNyQmtLLGNBQVUsRUFBRSxLQURTO0FBRXJCRyxtQkFBZSxFQUFFO0FBRkksR0FBdEI7QUFLQTs7OztBQUdBTCxZQUFVLENBQUM3cEQsU0FBWCxDQUFxQnFtRCxNQUFyQixHQUE4QixZQUFXO0FBQ3hDLFFBQUlqb0MsS0FBSyxHQUFHLEtBQUt5cUMsS0FBTCxDQUFXNUksUUFBdkI7QUFBQSxRQUNDdnVDLEdBQUcsR0FBRzBNLEtBQUssR0FBRyxLQUFLeXFDLEtBQUwsQ0FBVy9kLFFBQVgsQ0FBb0JpSSxLQURuQztBQUFBLFFBRUNvWCxlQUFlLEdBQUcsS0FBS3RCLEtBQUwsQ0FBVy9kLFFBQVgsQ0FBb0IwZSxRQUZ2QztBQUFBLFFBR0MvYixPQUFPLEdBQUcsS0FBS29iLEtBQUwsQ0FBVzVFLE1BQVgsQ0FBa0JsNEMsUUFBbEIsR0FBNkIwRSxPQUE3QixHQUF1QzNPLEtBQXZDLENBQTZDc2MsS0FBN0MsRUFBb0QxTSxHQUFwRCxDQUhYO0FBQUEsUUFJQzA0QyxPQUFPLEdBQUcsRUFKWDtBQUFBLFFBS0NDLFNBQVMsR0FBRyxDQUxiOztBQU9BMy9DLEtBQUMsQ0FBQ3FHLElBQUYsQ0FBTzA4QixPQUFQLEVBQWdCLFVBQVMvckMsS0FBVCxFQUFnQjZ4QyxJQUFoQixFQUFzQjtBQUNyQzZXLGFBQU8sQ0FBQ2hwRCxJQUFSLENBQWFzSixDQUFDLENBQUM2b0MsSUFBRCxDQUFELENBQVE3ckMsTUFBUixFQUFiO0FBQ0EsS0FGRDtBQUlBMmlELGFBQVMsR0FBR3hoRCxJQUFJLENBQUNpMEIsR0FBTCxDQUFTOTZCLEtBQVQsQ0FBZSxJQUFmLEVBQXFCb29ELE9BQXJCLENBQVo7O0FBRUEsUUFBSUMsU0FBUyxJQUFJLENBQWIsSUFBa0JGLGVBQWxCLElBQXFDLEtBQUtMLGVBQTlDLEVBQStEO0FBQzlETyxlQUFTLEdBQUcsS0FBS1AsZUFBakI7QUFDQTs7QUFFRCxTQUFLQSxlQUFMLEdBQXVCTyxTQUF2Qjs7QUFFQSxTQUFLeEIsS0FBTCxDQUFXNUUsTUFBWCxDQUFrQjVsQyxNQUFsQixHQUNFM1csTUFERixDQUNTMmlELFNBRFQsRUFFRXRsQixRQUZGLENBRVcsS0FBSzhqQixLQUFMLENBQVcvZCxRQUFYLENBQW9Cb2YsZUFGL0I7QUFHQSxHQXZCRDs7QUF5QkFMLFlBQVUsQ0FBQzdwRCxTQUFYLENBQXFCNjZDLE9BQXJCLEdBQStCLFlBQVc7QUFDekMsUUFBSXBoQyxPQUFKLEVBQWF5c0MsUUFBYjs7QUFFQSxTQUFLenNDLE9BQUwsSUFBZ0IsS0FBS3FtQyxTQUFyQixFQUFnQztBQUMvQixXQUFLK0ksS0FBTCxDQUFXNU4sUUFBWCxDQUFvQng1QyxHQUFwQixDQUF3QmdZLE9BQXhCLEVBQWlDLEtBQUtxbUMsU0FBTCxDQUFlcm1DLE9BQWYsQ0FBakM7QUFDQTs7QUFDRCxTQUFLeXNDLFFBQUwsSUFBaUI5NkMsTUFBTSxDQUFDaStDLG1CQUFQLENBQTJCLElBQTNCLENBQWpCLEVBQW1EO0FBQ2xELGFBQU8sS0FBS25ELFFBQUwsQ0FBUCxLQUEwQixVQUExQixLQUF5QyxLQUFLQSxRQUFMLElBQWlCLElBQTFEO0FBQ0E7QUFDRCxHQVREOztBQVdBeDdDLEdBQUMsQ0FBQ3VELEVBQUYsQ0FBS3M2QyxXQUFMLENBQWlCRSxXQUFqQixDQUE2QnZILE9BQTdCLENBQXFDMkksVUFBckMsR0FBa0RBLFVBQWxEO0FBRUEsQ0E1SEEsRUE0SEVucUQsTUFBTSxDQUFDZ3BELEtBQVAsSUFBZ0JocEQsTUFBTSxDQUFDeUcsTUE1SHpCLEVBNEhpQ3pHLE1BNUhqQyxFQTRIeUM0RCxRQTVIekM7QUE4SEQ7Ozs7Ozs7OztBQU9BOztBQUFDLENBQUMsVUFBU29ILENBQVQsRUFBWWhMLE1BQVosRUFBb0I0RCxRQUFwQixFQUE4QlAsU0FBOUIsRUFBeUM7QUFFMUM7Ozs7O0FBS0EsTUFBSXVuRCxLQUFLLEdBQUcsVUFBUzFCLFFBQVQsRUFBbUI7QUFDOUI7Ozs7O0FBS0EsU0FBS0MsS0FBTCxHQUFhRCxRQUFiO0FBRUE7Ozs7OztBQUtBLFNBQUsyQixPQUFMLEdBQWUsRUFBZjtBQUVBOzs7Ozs7QUFLQSxTQUFLQyxRQUFMLEdBQWdCLElBQWhCO0FBRUE7Ozs7Ozs7QUFNQSxTQUFLMUssU0FBTCxHQUFpQjtBQUNoQixrQ0FBNEJwMUMsQ0FBQyxDQUFDOG1DLEtBQUYsQ0FBUSxVQUFTOTVCLENBQVQsRUFBWTtBQUMvQyxZQUFJQSxDQUFDLENBQUM5UixTQUFOLEVBQWlCO0FBQ2hCLGVBQUtpakQsS0FBTCxDQUFXVCxRQUFYLENBQW9CO0FBQUV4a0QsZ0JBQUksRUFBRSxPQUFSO0FBQWlCZ08sZ0JBQUksRUFBRSxTQUF2QjtBQUFrQ3F2QyxnQkFBSSxFQUFFLENBQUUsYUFBRjtBQUF4QyxXQUFwQjtBQUNBO0FBQ0QsT0FKMkIsRUFJekIsSUFKeUIsQ0FEWjtBQU1oQiw2QkFBdUJ2MkMsQ0FBQyxDQUFDOG1DLEtBQUYsQ0FBUSxVQUFTOTVCLENBQVQsRUFBWTtBQUMxQyxZQUFJQSxDQUFDLENBQUM5UixTQUFGLElBQWUsS0FBS2lqRCxLQUFMLENBQVcvZCxRQUFYLENBQW9CMmYsS0FBbkMsSUFBNEMsS0FBS0MsY0FBTCxFQUFoRCxFQUF1RTtBQUN0RWh6QyxXQUFDLENBQUNrYixjQUFGO0FBQ0E7QUFDRCxPQUpzQixFQUlwQixJQUpvQixDQU5QO0FBV2hCLGdDQUEwQmxvQixDQUFDLENBQUM4bUMsS0FBRixDQUFRLFVBQVM5NUIsQ0FBVCxFQUFZO0FBQzdDLFlBQUlBLENBQUMsQ0FBQzlSLFNBQUYsSUFBZSxLQUFLaWpELEtBQUwsQ0FBV3BsQyxFQUFYLENBQWMsVUFBZCxDQUFuQixFQUE4QztBQUM3QyxlQUFLb2xDLEtBQUwsQ0FBVzVFLE1BQVgsQ0FBa0Ivb0MsSUFBbEIsQ0FBdUIsMEJBQXZCLEVBQW1EdUwsTUFBbkQ7QUFDQTtBQUNELE9BSnlCLEVBSXZCLElBSnVCLENBWFY7QUFnQmhCLDhCQUF3Qi9iLENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsVUFBUzk1QixDQUFULEVBQVk7QUFDM0MsWUFBSUEsQ0FBQyxDQUFDOVIsU0FBRixJQUFlOFIsQ0FBQyxDQUFDd3VDLFFBQUYsQ0FBV3QwQyxJQUFYLEtBQW9CLFVBQW5DLElBQWlELEtBQUs0NEMsUUFBMUQsRUFBb0U7QUFDbkUsZUFBS24rQixJQUFMO0FBQ0E7QUFDRCxPQUp1QixFQUlyQixJQUpxQixDQWhCUjtBQXFCaEIsK0JBQXlCM2hCLENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsVUFBUzk1QixDQUFULEVBQVk7QUFDNUMsWUFBSSxDQUFDQSxDQUFDLENBQUM5UixTQUFQLEVBQWtCO0FBQ2pCO0FBQ0E7O0FBRUQsWUFBSXExQyxRQUFRLEdBQUd2d0MsQ0FBQyxDQUFDZ04sQ0FBQyxDQUFDK04sT0FBSCxDQUFELENBQWF2SyxJQUFiLENBQWtCLFlBQWxCLENBQWY7O0FBRUEsWUFBSSsvQixRQUFRLENBQUM1NkMsTUFBYixFQUFxQjtBQUNwQjQ2QyxrQkFBUSxDQUFDL3RCLEdBQVQsQ0FBYSxTQUFiLEVBQXdCLE1BQXhCO0FBQ0EsZUFBS3k5QixLQUFMLENBQVcxUCxRQUFYLEVBQXFCdndDLENBQUMsQ0FBQ2dOLENBQUMsQ0FBQytOLE9BQUgsQ0FBdEI7QUFDQTtBQUNELE9BWHdCLEVBV3RCLElBWHNCO0FBckJULEtBQWpCLENBNUI4QixDQStEOUI7O0FBQ0EsU0FBS29qQyxLQUFMLENBQVd2aUQsT0FBWCxHQUFxQm9FLENBQUMsQ0FBQ3ZJLE1BQUYsQ0FBUyxFQUFULEVBQWFtb0QsS0FBSyxDQUFDekssUUFBbkIsRUFBNkIsS0FBS2dKLEtBQUwsQ0FBV3ZpRCxPQUF4QyxDQUFyQixDQWhFOEIsQ0FrRTlCOztBQUNBLFNBQUt1aUQsS0FBTCxDQUFXNU4sUUFBWCxDQUFvQnA2QyxFQUFwQixDQUF1QixLQUFLaS9DLFNBQTVCOztBQUVBLFNBQUsrSSxLQUFMLENBQVc1TixRQUFYLENBQW9CcDZDLEVBQXBCLENBQXVCLGlCQUF2QixFQUEwQyxzQkFBMUMsRUFBa0U2SixDQUFDLENBQUM4bUMsS0FBRixDQUFRLFVBQVM5NUIsQ0FBVCxFQUFZO0FBQ3JGLFdBQUtrekMsSUFBTCxDQUFVbHpDLENBQVY7QUFDQSxLQUZpRSxFQUUvRCxJQUYrRCxDQUFsRTtBQUdBLEdBeEVEO0FBMEVBOzs7Ozs7QUFJQTR5QyxPQUFLLENBQUN6SyxRQUFOLEdBQWlCO0FBQ2hCNEssU0FBSyxFQUFFLEtBRFM7QUFFaEJJLGVBQVcsRUFBRSxLQUZHO0FBR2hCQyxjQUFVLEVBQUU7QUFISSxHQUFqQjtBQU1BOzs7Ozs7O0FBTUFSLE9BQUssQ0FBQ3RxRCxTQUFOLENBQWdCMnFELEtBQWhCLEdBQXdCLFVBQVMzNEMsTUFBVCxFQUFpQnVoQyxJQUFqQixFQUF1QjtBQUM3QyxRQUFJM3ZDLElBQUksR0FBSSxZQUFXO0FBQ3JCLFVBQUlvTyxNQUFNLENBQUM1TCxJQUFQLENBQVksZUFBWixDQUFKLEVBQWtDO0FBQ2pDLGVBQU8sT0FBUDtBQUNBLE9BRkQsTUFFTyxJQUFJNEwsTUFBTSxDQUFDNUwsSUFBUCxDQUFZLGVBQVosQ0FBSixFQUFrQztBQUN4QyxlQUFPLE9BQVA7QUFDQSxPQUZNLE1BRUE7QUFDTixlQUFPLFNBQVA7QUFDQTtBQUNELEtBUlMsRUFBWDtBQUFBLFFBU0NnUyxFQUFFLEdBQUdwRyxNQUFNLENBQUM1TCxJQUFQLENBQVksZUFBWixLQUFnQzRMLE1BQU0sQ0FBQzVMLElBQVAsQ0FBWSxpQkFBWixDQUFoQyxJQUFrRTRMLE1BQU0sQ0FBQzVMLElBQVAsQ0FBWSxlQUFaLENBVHhFO0FBQUEsUUFVQ3FCLEtBQUssR0FBR3VLLE1BQU0sQ0FBQzVMLElBQVAsQ0FBWSxZQUFaLEtBQTZCLEtBQUt5aUQsS0FBTCxDQUFXL2QsUUFBWCxDQUFvQmdnQixVQVYxRDtBQUFBLFFBV0NwakQsTUFBTSxHQUFHc0ssTUFBTSxDQUFDNUwsSUFBUCxDQUFZLGFBQVosS0FBOEIsS0FBS3lpRCxLQUFMLENBQVcvZCxRQUFYLENBQW9CK2YsV0FYNUQ7QUFBQSxRQVlDeitDLEdBQUcsR0FBRzRGLE1BQU0sQ0FBQzVMLElBQVAsQ0FBWSxNQUFaLENBWlA7O0FBY0QsUUFBSWdHLEdBQUosRUFBUztBQUVSOzs7Ozs7Ozs7O0FBWUFnTSxRQUFFLEdBQUdoTSxHQUFHLENBQUMvRyxLQUFKLENBQVUsMk5BQVYsQ0FBTDs7QUFFQSxVQUFJK1MsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNalgsT0FBTixDQUFjLE9BQWQsSUFBeUIsQ0FBQyxDQUE5QixFQUFpQztBQUNoQ3lDLFlBQUksR0FBRyxTQUFQO0FBQ0EsT0FGRCxNQUVPLElBQUl3VSxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU1qWCxPQUFOLENBQWMsT0FBZCxJQUF5QixDQUFDLENBQTlCLEVBQWlDO0FBQ3ZDeUMsWUFBSSxHQUFHLE9BQVA7QUFDQSxPQUZNLE1BRUEsSUFBSXdVLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTWpYLE9BQU4sQ0FBYyxPQUFkLElBQXlCLENBQUMsQ0FBOUIsRUFBaUM7QUFDdkN5QyxZQUFJLEdBQUcsT0FBUDtBQUNBLE9BRk0sTUFFQTtBQUNOLGNBQU0sSUFBSTJLLEtBQUosQ0FBVSwwQkFBVixDQUFOO0FBQ0E7O0FBQ0Q2SixRQUFFLEdBQUdBLEVBQUUsQ0FBQyxDQUFELENBQVA7QUFDQSxLQTFCRCxNQTBCTztBQUNOLFlBQU0sSUFBSTdKLEtBQUosQ0FBVSxvQkFBVixDQUFOO0FBQ0E7O0FBRUQsU0FBS2c4QyxPQUFMLENBQWFuK0MsR0FBYixJQUFvQjtBQUNuQnhJLFVBQUksRUFBRUEsSUFEYTtBQUVuQndVLFFBQUUsRUFBRUEsRUFGZTtBQUduQjNRLFdBQUssRUFBRUEsS0FIWTtBQUluQkMsWUFBTSxFQUFFQTtBQUpXLEtBQXBCO0FBT0E2ckMsUUFBSSxDQUFDbnRDLElBQUwsQ0FBVSxZQUFWLEVBQXdCZ0csR0FBeEI7QUFFQSxTQUFLMitDLFNBQUwsQ0FBZS80QyxNQUFmLEVBQXVCLEtBQUt1NEMsT0FBTCxDQUFhbitDLEdBQWIsQ0FBdkI7QUFDQSxHQXZERDtBQXlEQTs7Ozs7Ozs7O0FBT0FrK0MsT0FBSyxDQUFDdHFELFNBQU4sQ0FBZ0IrcUQsU0FBaEIsR0FBNEIsVUFBUy80QyxNQUFULEVBQWlCeTRDLEtBQWpCLEVBQXdCO0FBQ25ELFFBQUlPLE1BQUo7QUFBQSxRQUNDQyxJQUREO0FBQUEsUUFFQ0MsSUFGRDtBQUFBLFFBR0NDLFVBQVUsR0FBR1YsS0FBSyxDQUFDaGpELEtBQU4sSUFBZWdqRCxLQUFLLENBQUMvaUQsTUFBckIsR0FBOEIsV0FBVytpRCxLQUFLLENBQUNoakQsS0FBakIsR0FBeUIsWUFBekIsR0FBd0NnakQsS0FBSyxDQUFDL2lELE1BQTlDLEdBQXVELEtBQXJGLEdBQTZGLEVBSDNHO0FBQUEsUUFJQzBqRCxRQUFRLEdBQUdwNUMsTUFBTSxDQUFDa0osSUFBUCxDQUFZLEtBQVosQ0FKWjtBQUFBLFFBS0Ntd0MsT0FBTyxHQUFHLEtBTFg7QUFBQSxRQU1DQyxTQUFTLEdBQUcsRUFOYjtBQUFBLFFBT0N4Z0IsUUFBUSxHQUFHLEtBQUsrZCxLQUFMLENBQVcvZCxRQVB2QjtBQUFBLFFBUUN6L0IsTUFBTSxHQUFHLFVBQVM2L0MsSUFBVCxFQUFlO0FBQ3ZCRCxVQUFJLEdBQUcseUNBQVA7O0FBRUEsVUFBSW5nQixRQUFRLENBQUMwZSxRQUFiLEVBQXVCO0FBQ3RCd0IsY0FBTSxHQUFHdGdELENBQUMsQ0FBQyxRQUFELEVBQVU7QUFDbkIsbUJBQVMsa0JBQWtCNGdELFNBRFI7QUFFbkIscUJBQVdKO0FBRlEsU0FBVixDQUFWO0FBSUEsT0FMRCxNQUtPO0FBQ05GLGNBQU0sR0FBR3RnRCxDQUFDLENBQUUsUUFBRixFQUFZO0FBQ3JCLG1CQUFTLGNBRFk7QUFFckIsbUJBQVMsb0NBQW9Dd2dELElBQXBDLEdBQTJDO0FBRi9CLFNBQVosQ0FBVjtBQUlBOztBQUNEbDVDLFlBQU0sQ0FBQzRtQixLQUFQLENBQWFveUIsTUFBYjtBQUNBaDVDLFlBQU0sQ0FBQzRtQixLQUFQLENBQWFxeUIsSUFBYjtBQUNBLEtBeEJGLENBRG1ELENBMkJuRDs7O0FBQ0FqNUMsVUFBTSxDQUFDaWUsSUFBUCxDQUFhdmxCLENBQUMsQ0FBRSxRQUFGLEVBQVk7QUFDekIsZUFBUyxtQkFEZ0I7QUFFekIsZUFBU3lnRDtBQUZnQixLQUFaLENBQWQ7O0FBS0EsUUFBSSxLQUFLdEMsS0FBTCxDQUFXL2QsUUFBWCxDQUFvQjBlLFFBQXhCLEVBQWtDO0FBQ2pDNkIsYUFBTyxHQUFHLFVBQVY7QUFDQUMsZUFBUyxHQUFHLFVBQVo7QUFDQSxLQXBDa0QsQ0FzQ25EOzs7QUFDQSxRQUFJRixRQUFRLENBQUMvcUQsTUFBYixFQUFxQjtBQUNwQmdMLFlBQU0sQ0FBQysvQyxRQUFRLENBQUNobEQsSUFBVCxDQUFjaWxELE9BQWQsQ0FBRCxDQUFOO0FBQ0FELGNBQVEsQ0FBQzNrQyxNQUFUO0FBQ0EsYUFBTyxLQUFQO0FBQ0E7O0FBRUQsUUFBSWdrQyxLQUFLLENBQUM3bUQsSUFBTixLQUFlLFNBQW5CLEVBQThCO0FBQzdCc25ELFVBQUksR0FBRywwQkFBMEJULEtBQUssQ0FBQ3J5QyxFQUFoQyxHQUFxQyxnQkFBNUM7QUFDQS9NLFlBQU0sQ0FBQzYvQyxJQUFELENBQU47QUFDQSxLQUhELE1BR08sSUFBSVQsS0FBSyxDQUFDN21ELElBQU4sS0FBZSxPQUFuQixFQUE0QjtBQUNsQzhHLE9BQUMsQ0FBQ3VnQyxJQUFGLENBQU87QUFDTnJuQyxZQUFJLEVBQUUsS0FEQTtBQUVOd0ksV0FBRyxFQUFFLDhCQUE4QnErQyxLQUFLLENBQUNyeUMsRUFBcEMsR0FBeUMsT0FGeEM7QUFHTjIyQixhQUFLLEVBQUUsVUFIRDtBQUlOekcsZ0JBQVEsRUFBRSxPQUpKO0FBS053RSxlQUFPLEVBQUUsVUFBU2xtQyxJQUFULEVBQWU7QUFDdkJza0QsY0FBSSxHQUFHdGtELElBQUksQ0FBQyxDQUFELENBQUosQ0FBUTJrRCxlQUFmO0FBQ0FsZ0QsZ0JBQU0sQ0FBQzYvQyxJQUFELENBQU47QUFDQTtBQVJLLE9BQVA7QUFVQSxLQVhNLE1BV0EsSUFBSVQsS0FBSyxDQUFDN21ELElBQU4sS0FBZSxPQUFuQixFQUE0QjtBQUNsQzhHLE9BQUMsQ0FBQ3VnQyxJQUFGLENBQU87QUFDTnJuQyxZQUFJLEVBQUUsS0FEQTtBQUVOd0ksV0FBRyxFQUFFLDRCQUE0QnErQyxLQUFLLENBQUNyeUMsRUFBbEMsR0FBdUMsT0FGdEM7QUFHTjIyQixhQUFLLEVBQUUsVUFIRDtBQUlOekcsZ0JBQVEsRUFBRSxPQUpKO0FBS053RSxlQUFPLEVBQUUsVUFBU2xtQyxJQUFULEVBQWU7QUFDdkJza0QsY0FBSSxHQUFHdGtELElBQUksQ0FBQzRrRCxhQUFaO0FBQ0FuZ0QsZ0JBQU0sQ0FBQzYvQyxJQUFELENBQU47QUFDQTtBQVJLLE9BQVA7QUFVQTtBQUNELEdBdkVEO0FBeUVBOzs7Ozs7QUFJQVosT0FBSyxDQUFDdHFELFNBQU4sQ0FBZ0Jxc0IsSUFBaEIsR0FBdUIsWUFBVztBQUNqQyxTQUFLdzhCLEtBQUwsQ0FBV2oxQixPQUFYLENBQW1CLE1BQW5CLEVBQTJCLElBQTNCLEVBQWlDLE9BQWpDOztBQUNBLFNBQUs0MkIsUUFBTCxDQUFjdHZDLElBQWQsQ0FBbUIsa0JBQW5CLEVBQXVDdUwsTUFBdkM7O0FBQ0EsU0FBSytqQyxRQUFMLENBQWNwbEIsV0FBZCxDQUEwQixtQkFBMUI7O0FBQ0EsU0FBS29sQixRQUFMLEdBQWdCLElBQWhCOztBQUNBLFNBQUszQixLQUFMLENBQVdoRCxLQUFYLENBQWlCLFNBQWpCOztBQUNBLFNBQUtnRCxLQUFMLENBQVdqMUIsT0FBWCxDQUFtQixTQUFuQixFQUE4QixJQUE5QixFQUFvQyxPQUFwQztBQUNBLEdBUEQ7QUFTQTs7Ozs7OztBQUtBMDJCLE9BQUssQ0FBQ3RxRCxTQUFOLENBQWdCNHFELElBQWhCLEdBQXVCLFVBQVNqbkQsS0FBVCxFQUFnQjtBQUN0QyxRQUFJcU8sTUFBTSxHQUFHdEgsQ0FBQyxDQUFDL0csS0FBSyxDQUFDcU8sTUFBUCxDQUFkO0FBQUEsUUFDQ3VoQyxJQUFJLEdBQUd2aEMsTUFBTSxDQUFDOFMsT0FBUCxDQUFlLE1BQU0sS0FBSytqQyxLQUFMLENBQVcvZCxRQUFYLENBQW9CMFksU0FBekMsQ0FEUjtBQUFBLFFBRUNpSCxLQUFLLEdBQUcsS0FBS0YsT0FBTCxDQUFhaFgsSUFBSSxDQUFDbnRDLElBQUwsQ0FBVSxZQUFWLENBQWIsQ0FGVDtBQUFBLFFBR0NxQixLQUFLLEdBQUdnakQsS0FBSyxDQUFDaGpELEtBQU4sSUFBZSxNQUh4QjtBQUFBLFFBSUNDLE1BQU0sR0FBRytpRCxLQUFLLENBQUMvaUQsTUFBTixJQUFnQixLQUFLbWhELEtBQUwsQ0FBVzVFLE1BQVgsQ0FBa0J2OEMsTUFBbEIsRUFKMUI7QUFBQSxRQUtDb3dCLElBTEQ7QUFBQSxRQU1DMnpCLE1BTkQ7O0FBUUEsUUFBSSxLQUFLakIsUUFBVCxFQUFtQjtBQUNsQjtBQUNBOztBQUVELFNBQUszQixLQUFMLENBQVdyRCxLQUFYLENBQWlCLFNBQWpCOztBQUNBLFNBQUtxRCxLQUFMLENBQVdqMUIsT0FBWCxDQUFtQixNQUFuQixFQUEyQixJQUEzQixFQUFpQyxPQUFqQzs7QUFFQTJmLFFBQUksR0FBRyxLQUFLc1YsS0FBTCxDQUFXOVYsS0FBWCxDQUFpQixLQUFLOFYsS0FBTCxDQUFXM3JDLFFBQVgsQ0FBb0JxMkIsSUFBSSxDQUFDN3hDLEtBQUwsRUFBcEIsQ0FBakIsQ0FBUDs7QUFFQSxTQUFLbW5ELEtBQUwsQ0FBVzdvQyxLQUFYLENBQWlCdXpCLElBQUksQ0FBQzd4QyxLQUFMLEVBQWpCOztBQUVBbzJCLFFBQUksR0FBR3B0QixDQUFDLENBQUUsNkZBQUYsQ0FBUjtBQUNBb3RCLFFBQUksQ0FBQzF4QixJQUFMLENBQVcsUUFBWCxFQUFxQnNCLE1BQXJCO0FBQ0Fvd0IsUUFBSSxDQUFDMXhCLElBQUwsQ0FBVyxPQUFYLEVBQW9CcUIsS0FBcEI7O0FBQ0EsUUFBSWdqRCxLQUFLLENBQUM3bUQsSUFBTixLQUFlLFNBQW5CLEVBQThCO0FBQzdCazBCLFVBQUksQ0FBQzF4QixJQUFMLENBQVcsS0FBWCxFQUFrQiw2QkFBNkJxa0QsS0FBSyxDQUFDcnlDLEVBQW5DLEdBQXdDLHNCQUF4QyxHQUFpRXF5QyxLQUFLLENBQUNyeUMsRUFBekY7QUFDQSxLQUZELE1BRU8sSUFBSXF5QyxLQUFLLENBQUM3bUQsSUFBTixLQUFlLE9BQW5CLEVBQTRCO0FBQ2xDazBCLFVBQUksQ0FBQzF4QixJQUFMLENBQVcsS0FBWCxFQUFrQiw4QkFBOEJxa0QsS0FBSyxDQUFDcnlDLEVBQXBDLEdBQXlDLGFBQTNEO0FBQ0EsS0FGTSxNQUVBLElBQUlxeUMsS0FBSyxDQUFDN21ELElBQU4sS0FBZSxPQUFuQixFQUE0QjtBQUNsQ2swQixVQUFJLENBQUMxeEIsSUFBTCxDQUFXLEtBQVgsRUFBa0Isc0JBQXNCcWtELEtBQUssQ0FBQ3J5QyxFQUE1QixHQUFpQyx1QkFBbkQ7QUFDQTs7QUFFRHF6QyxVQUFNLEdBQUcvZ0QsQ0FBQyxDQUFDb3RCLElBQUQsQ0FBRCxDQUFRN0gsSUFBUixDQUFjLGlDQUFkLEVBQWtEZ0osV0FBbEQsQ0FBOERzYSxJQUFJLENBQUNyNEIsSUFBTCxDQUFVLFlBQVYsQ0FBOUQsQ0FBVDtBQUVBLFNBQUtzdkMsUUFBTCxHQUFnQmpYLElBQUksQ0FBQ3hPLFFBQUwsQ0FBYyxtQkFBZCxDQUFoQjtBQUNBLEdBbENEO0FBb0NBOzs7Ozs7OztBQU1BdWxCLE9BQUssQ0FBQ3RxRCxTQUFOLENBQWdCMHFELGNBQWhCLEdBQWlDLFlBQVc7QUFDM0MsUUFBSTM4QyxPQUFPLEdBQUd6SyxRQUFRLENBQUNvb0QsaUJBQVQsSUFBOEJwb0QsUUFBUSxDQUFDcW9ELG9CQUF2QyxJQUNacm9ELFFBQVEsQ0FBQ3NvRCx1QkFEWDtBQUdBLFdBQU83OUMsT0FBTyxJQUFJckQsQ0FBQyxDQUFDcUQsT0FBRCxDQUFELENBQVdzUSxNQUFYLEdBQW9Cb25CLFFBQXBCLENBQTZCLGlCQUE3QixDQUFsQjtBQUNBLEdBTEQ7QUFPQTs7Ozs7QUFHQTZrQixPQUFLLENBQUN0cUQsU0FBTixDQUFnQjY2QyxPQUFoQixHQUEwQixZQUFXO0FBQ3BDLFFBQUlwaEMsT0FBSixFQUFheXNDLFFBQWI7O0FBRUEsU0FBSzJDLEtBQUwsQ0FBVzVOLFFBQVgsQ0FBb0J4NUMsR0FBcEIsQ0FBd0IsaUJBQXhCOztBQUVBLFNBQUtnWSxPQUFMLElBQWdCLEtBQUtxbUMsU0FBckIsRUFBZ0M7QUFDL0IsV0FBSytJLEtBQUwsQ0FBVzVOLFFBQVgsQ0FBb0J4NUMsR0FBcEIsQ0FBd0JnWSxPQUF4QixFQUFpQyxLQUFLcW1DLFNBQUwsQ0FBZXJtQyxPQUFmLENBQWpDO0FBQ0E7O0FBQ0QsU0FBS3lzQyxRQUFMLElBQWlCOTZDLE1BQU0sQ0FBQ2krQyxtQkFBUCxDQUEyQixJQUEzQixDQUFqQixFQUFtRDtBQUNsRCxhQUFPLEtBQUtuRCxRQUFMLENBQVAsSUFBeUIsVUFBekIsS0FBd0MsS0FBS0EsUUFBTCxJQUFpQixJQUF6RDtBQUNBO0FBQ0QsR0FYRDs7QUFhQXg3QyxHQUFDLENBQUN1RCxFQUFGLENBQUtzNkMsV0FBTCxDQUFpQkUsV0FBakIsQ0FBNkJ2SCxPQUE3QixDQUFxQ29KLEtBQXJDLEdBQTZDQSxLQUE3QztBQUVBLENBL1RBLEVBK1RFNXFELE1BQU0sQ0FBQ2dwRCxLQUFQLElBQWdCaHBELE1BQU0sQ0FBQ3lHLE1BL1R6QixFQStUaUN6RyxNQS9UakMsRUErVHlDNEQsUUEvVHpDO0FBaVVEOzs7Ozs7Ozs7QUFPQTs7QUFBQyxDQUFDLFVBQVNvSCxDQUFULEVBQVloTCxNQUFaLEVBQW9CNEQsUUFBcEIsRUFBOEJQLFNBQTlCLEVBQXlDO0FBRTFDOzs7OztBQUtBLE1BQUk4b0QsT0FBTyxHQUFHLFVBQVNuekMsS0FBVCxFQUFnQjtBQUM3QixTQUFLb3pDLElBQUwsR0FBWXB6QyxLQUFaO0FBQ0EsU0FBS296QyxJQUFMLENBQVV4bEQsT0FBVixHQUFvQm9FLENBQUMsQ0FBQ3ZJLE1BQUYsQ0FBUyxFQUFULEVBQWEwcEQsT0FBTyxDQUFDaE0sUUFBckIsRUFBK0IsS0FBS2lNLElBQUwsQ0FBVXhsRCxPQUF6QyxDQUFwQjtBQUNBLFNBQUt5bEQsUUFBTCxHQUFnQixJQUFoQjtBQUNBLFNBQUt0SCxRQUFMLEdBQWdCMWhELFNBQWhCO0FBQ0EsU0FBS3lVLElBQUwsR0FBWXpVLFNBQVo7QUFFQSxTQUFLc3VCLFFBQUwsR0FBZ0I7QUFDZiw2QkFBdUIzbUIsQ0FBQyxDQUFDOG1DLEtBQUYsQ0FBUSxVQUFTOTVCLENBQVQsRUFBWTtBQUMxQyxZQUFJQSxDQUFDLENBQUM5UixTQUFGLElBQWU4UixDQUFDLENBQUN3dUMsUUFBRixDQUFXdDBDLElBQVgsSUFBbUIsVUFBdEMsRUFBa0Q7QUFDakQsZUFBSzZ5QyxRQUFMLEdBQWdCLEtBQUtxSCxJQUFMLENBQVVoaUIsT0FBVixFQUFoQjtBQUNBLGVBQUt0eUIsSUFBTCxHQUFZRSxDQUFDLENBQUN3dUMsUUFBRixDQUFXcC9DLEtBQXZCO0FBQ0E7QUFDRCxPQUxzQixFQUtwQixJQUxvQixDQURSO0FBT2Ysd0VBQWtFNEQsQ0FBQyxDQUFDOG1DLEtBQUYsQ0FBUSxVQUFTOTVCLENBQVQsRUFBWTtBQUNyRixZQUFJQSxDQUFDLENBQUM5UixTQUFOLEVBQWlCO0FBQ2hCLGVBQUttbUQsUUFBTCxHQUFnQnIwQyxDQUFDLENBQUM5VCxJQUFGLElBQVUsWUFBMUI7QUFDQTtBQUNELE9BSmlFLEVBSS9ELElBSitELENBUG5EO0FBWWYsZ0NBQTBCOEcsQ0FBQyxDQUFDOG1DLEtBQUYsQ0FBUSxVQUFTOTVCLENBQVQsRUFBWTtBQUM3QyxZQUFJQSxDQUFDLENBQUM5UixTQUFGLElBQWUsS0FBS21tRCxRQUFwQixLQUFpQyxLQUFLRCxJQUFMLENBQVV4bEQsT0FBVixDQUFrQjBsRCxVQUFsQixJQUFnQyxLQUFLRixJQUFMLENBQVV4bEQsT0FBVixDQUFrQjJsRCxTQUFuRixDQUFKLEVBQW1HO0FBQ2xHLGVBQUt6eUIsSUFBTDtBQUNBO0FBQ0QsT0FKeUIsRUFJdkIsSUFKdUI7QUFaWCxLQUFoQjtBQW1CQSxTQUFLc3lCLElBQUwsQ0FBVTdRLFFBQVYsQ0FBbUJwNkMsRUFBbkIsQ0FBc0IsS0FBS3d3QixRQUEzQjtBQUNBLEdBM0JEO0FBNkJBOzs7Ozs7QUFJQXc2QixTQUFPLENBQUNoTSxRQUFSLEdBQW1CO0FBQ2xCbU0sY0FBVSxFQUFFLEtBRE07QUFFbEJDLGFBQVMsRUFBRTtBQUZPLEdBQW5CO0FBS0E7Ozs7OztBQUtBSixTQUFPLENBQUM3ckQsU0FBUixDQUFrQnc1QixJQUFsQixHQUF5QixZQUFXO0FBRW5DLFFBQUksS0FBS3N5QixJQUFMLENBQVVoaEIsUUFBVixDQUFtQmlJLEtBQW5CLEtBQTZCLENBQWpDLEVBQW9DO0FBQ25DO0FBQ0E7O0FBRUQsUUFBSSxDQUFDcm9DLENBQUMsQ0FBQzBFLE9BQUYsQ0FBVXF4QixTQUFYLElBQXdCLENBQUMvMUIsQ0FBQyxDQUFDMEUsT0FBRixDQUFVNm1DLFVBQXZDLEVBQW1EO0FBQ2xEO0FBQ0E7O0FBRUQsU0FBSzZWLElBQUwsQ0FBVXhwQixLQUFWLENBQWdCLENBQWhCO0FBRUEsUUFBSWxFLElBQUo7QUFBQSxRQUNDOHRCLEtBQUssR0FBR3hoRCxDQUFDLENBQUM4bUMsS0FBRixDQUFRLEtBQUswYSxLQUFiLEVBQW9CLElBQXBCLENBRFQ7QUFBQSxRQUVDekgsUUFBUSxHQUFHLEtBQUtxSCxJQUFMLENBQVU3SCxNQUFWLENBQWlCbDRDLFFBQWpCLEdBQTRCbUYsRUFBNUIsQ0FBK0IsS0FBS3V6QyxRQUFwQyxDQUZaO0FBQUEsUUFHQ2p0QyxJQUFJLEdBQUcsS0FBS3MwQyxJQUFMLENBQVU3SCxNQUFWLENBQWlCbDRDLFFBQWpCLEdBQTRCbUYsRUFBNUIsQ0FBK0IsS0FBS3NHLElBQXBDLENBSFI7QUFBQSxRQUlDMjBDLFFBQVEsR0FBRyxLQUFLTCxJQUFMLENBQVVoaEIsUUFBVixDQUFtQm1oQixTQUovQjtBQUFBLFFBS0NHLFFBQVEsR0FBRyxLQUFLTixJQUFMLENBQVVoaEIsUUFBVixDQUFtQmtoQixVQUwvQjs7QUFPQSxRQUFJLEtBQUtGLElBQUwsQ0FBVWhpQixPQUFWLE9BQXdCLEtBQUsyYSxRQUFqQyxFQUEyQztBQUMxQztBQUNBOztBQUVELFFBQUkySCxRQUFKLEVBQWM7QUFDYmh1QixVQUFJLEdBQUcsS0FBSzB0QixJQUFMLENBQVVwSCxXQUFWLENBQXNCLEtBQUtELFFBQTNCLElBQXVDLEtBQUtxSCxJQUFMLENBQVVwSCxXQUFWLENBQXNCLEtBQUtsdEMsSUFBM0IsQ0FBOUM7QUFDQWl0QyxjQUFRLENBQUMxekIsR0FBVCxDQUFhcm1CLENBQUMsQ0FBQzBFLE9BQUYsQ0FBVXF4QixTQUFWLENBQW9CL3VCLEdBQWpDLEVBQXNDdzZDLEtBQXRDLEVBQ0VoL0IsR0FERixDQUNPO0FBQUUsZ0JBQVFrUixJQUFJLEdBQUc7QUFBakIsT0FEUCxFQUVFMkcsUUFGRixDQUVXLDJCQUZYLEVBR0VBLFFBSEYsQ0FHV3FuQixRQUhYO0FBSUE7O0FBRUQsUUFBSUQsUUFBSixFQUFjO0FBQ2IzMEMsVUFBSSxDQUFDdVosR0FBTCxDQUFTcm1CLENBQUMsQ0FBQzBFLE9BQUYsQ0FBVXF4QixTQUFWLENBQW9CL3VCLEdBQTdCLEVBQWtDdzZDLEtBQWxDLEVBQ0VubkIsUUFERixDQUNXLDBCQURYLEVBRUVBLFFBRkYsQ0FFV29uQixRQUZYO0FBR0E7QUFDRCxHQXBDRDs7QUFzQ0FOLFNBQU8sQ0FBQzdyRCxTQUFSLENBQWtCa3NELEtBQWxCLEdBQTBCLFVBQVN4MEMsQ0FBVCxFQUFZO0FBQ3JDaE4sS0FBQyxDQUFDZ04sQ0FBQyxDQUFDMUYsTUFBSCxDQUFELENBQVlrYixHQUFaLENBQWlCO0FBQUUsY0FBUTtBQUFWLEtBQWpCLEVBQ0VrWSxXQURGLENBQ2MsMkNBRGQsRUFFRUEsV0FGRixDQUVjLEtBQUswbUIsSUFBTCxDQUFVaGhCLFFBQVYsQ0FBbUJtaEIsU0FGakMsRUFHRTdtQixXQUhGLENBR2MsS0FBSzBtQixJQUFMLENBQVVoaEIsUUFBVixDQUFtQmtoQixVQUhqQztBQUlBLFNBQUtGLElBQUwsQ0FBVW5ULGVBQVY7QUFDQSxHQU5EO0FBUUE7Ozs7OztBQUlBa1QsU0FBTyxDQUFDN3JELFNBQVIsQ0FBa0I2NkMsT0FBbEIsR0FBNEIsWUFBVztBQUN0QyxRQUFJcGhDLE9BQUosRUFBYXlzQyxRQUFiOztBQUVBLFNBQUt6c0MsT0FBTCxJQUFnQixLQUFLNFgsUUFBckIsRUFBK0I7QUFDOUIsV0FBS3k2QixJQUFMLENBQVU3USxRQUFWLENBQW1CeDVDLEdBQW5CLENBQXVCZ1ksT0FBdkIsRUFBZ0MsS0FBSzRYLFFBQUwsQ0FBYzVYLE9BQWQsQ0FBaEM7QUFDQTs7QUFDRCxTQUFLeXNDLFFBQUwsSUFBaUI5NkMsTUFBTSxDQUFDaStDLG1CQUFQLENBQTJCLElBQTNCLENBQWpCLEVBQW1EO0FBQ2xELGFBQU8sS0FBS25ELFFBQUwsQ0FBUCxJQUF5QixVQUF6QixLQUF3QyxLQUFLQSxRQUFMLElBQWlCLElBQXpEO0FBQ0E7QUFDRCxHQVREOztBQVdBeDdDLEdBQUMsQ0FBQ3VELEVBQUYsQ0FBS3M2QyxXQUFMLENBQWlCRSxXQUFqQixDQUE2QnZILE9BQTdCLENBQXFDMkssT0FBckMsR0FBK0NBLE9BQS9DO0FBRUEsQ0FqSEEsRUFpSEVuc0QsTUFBTSxDQUFDZ3BELEtBQVAsSUFBZ0JocEQsTUFBTSxDQUFDeUcsTUFqSHpCLEVBaUhpQ3pHLE1BakhqQyxFQWlIeUM0RCxRQWpIekM7QUFtSEQ7Ozs7Ozs7Ozs7O0FBU0E7O0FBQUMsQ0FBQyxVQUFTb0gsQ0FBVCxFQUFZaEwsTUFBWixFQUFvQjRELFFBQXBCLEVBQThCUCxTQUE5QixFQUF5QztBQUUxQzs7Ozs7QUFLQSxNQUFJc3BELFFBQVEsR0FBRyxVQUFTekQsUUFBVCxFQUFtQjtBQUNqQzs7Ozs7QUFLQSxTQUFLQyxLQUFMLEdBQWFELFFBQWI7QUFFQTs7Ozs7QUFJQSxTQUFLMEQsS0FBTCxHQUFhLElBQWI7QUFFQTs7Ozs7Ozs7QUFPQSxTQUFLQyxLQUFMLEdBQWEsQ0FBYjtBQUVBOzs7OztBQUlBLFNBQUtDLFFBQUwsR0FBZ0IsQ0FBaEI7QUFFQTs7Ozs7QUFJQSxTQUFLQyxPQUFMLEdBQWUsSUFBZjtBQUVBOzs7Ozs7QUFLQSxTQUFLM00sU0FBTCxHQUFpQjtBQUNoQiw4QkFBd0JwMUMsQ0FBQyxDQUFDOG1DLEtBQUYsQ0FBUSxVQUFTOTVCLENBQVQsRUFBWTtBQUMzQyxZQUFJQSxDQUFDLENBQUM5UixTQUFGLElBQWU4UixDQUFDLENBQUN3dUMsUUFBRixDQUFXdDBDLElBQVgsS0FBb0IsVUFBdkMsRUFBbUQ7QUFDbEQsY0FBSSxLQUFLaTNDLEtBQUwsQ0FBVy9kLFFBQVgsQ0FBb0I0aEIsUUFBeEIsRUFBa0M7QUFDakMsaUJBQUs5QixJQUFMO0FBQ0EsV0FGRCxNQUVPO0FBQ04saUJBQUt2K0IsSUFBTDtBQUNBO0FBQ0QsU0FORCxNQU1PLElBQUkzVSxDQUFDLENBQUM5UixTQUFGLElBQWU4UixDQUFDLENBQUN3dUMsUUFBRixDQUFXdDBDLElBQVgsS0FBb0IsVUFBbkMsSUFBaUQsS0FBSzY2QyxPQUExRCxFQUFtRTtBQUN6RTtBQUNBO0FBQ0EsZUFBS0YsS0FBTCxHQUFhLENBQWI7QUFDQTtBQUNELE9BWnVCLEVBWXJCLElBWnFCLENBRFI7QUFjaEIsa0NBQTRCN2hELENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsVUFBUzk1QixDQUFULEVBQVk7QUFDL0MsWUFBSUEsQ0FBQyxDQUFDOVIsU0FBRixJQUFlLEtBQUtpakQsS0FBTCxDQUFXL2QsUUFBWCxDQUFvQjRoQixRQUF2QyxFQUFpRDtBQUNoRCxlQUFLOUIsSUFBTDtBQUNBO0FBQ0QsT0FKMkIsRUFJekIsSUFKeUIsQ0FkWjtBQW1CaEIsMkJBQXFCbGdELENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsVUFBUzk1QixDQUFULEVBQVl5WixDQUFaLEVBQWVpVyxDQUFmLEVBQWtCO0FBQzlDLFlBQUkxdkIsQ0FBQyxDQUFDOVIsU0FBTixFQUFpQjtBQUNoQixlQUFLZ2xELElBQUwsQ0FBVXo1QixDQUFWLEVBQWFpVyxDQUFiO0FBQ0E7QUFDRCxPQUpvQixFQUlsQixJQUprQixDQW5CTDtBQXdCaEIsMkJBQXFCMThCLENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsVUFBUzk1QixDQUFULEVBQVk7QUFDeEMsWUFBSUEsQ0FBQyxDQUFDOVIsU0FBTixFQUFpQjtBQUNoQixlQUFLeW1CLElBQUw7QUFDQTtBQUNELE9BSm9CLEVBSWxCLElBSmtCLENBeEJMO0FBNkJoQixnQ0FBMEIzaEIsQ0FBQyxDQUFDOG1DLEtBQUYsQ0FBUSxZQUFXO0FBQzVDLFlBQUksS0FBS3FYLEtBQUwsQ0FBVy9kLFFBQVgsQ0FBb0I2aEIsa0JBQXBCLElBQTBDLEtBQUs5RCxLQUFMLENBQVdwbEMsRUFBWCxDQUFjLFVBQWQsQ0FBOUMsRUFBeUU7QUFDeEUsZUFBS21wQyxLQUFMO0FBQ0E7QUFDRCxPQUp5QixFQUl2QixJQUp1QixDQTdCVjtBQWtDaEIsaUNBQTJCbGlELENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsWUFBVztBQUM3QyxZQUFJLEtBQUtxWCxLQUFMLENBQVcvZCxRQUFYLENBQW9CNmhCLGtCQUFwQixJQUEwQyxLQUFLOUQsS0FBTCxDQUFXcGxDLEVBQVgsQ0FBYyxVQUFkLENBQTlDLEVBQXlFO0FBQ3hFLGVBQUttbkMsSUFBTDtBQUNBO0FBQ0QsT0FKMEIsRUFJeEIsSUFKd0IsQ0FsQ1g7QUF1Q2hCLDZCQUF1QmxnRCxDQUFDLENBQUM4bUMsS0FBRixDQUFRLFlBQVc7QUFDekMsWUFBSSxLQUFLcVgsS0FBTCxDQUFXL2QsUUFBWCxDQUFvQjZoQixrQkFBcEIsSUFBMEMsS0FBSzlELEtBQUwsQ0FBV3BsQyxFQUFYLENBQWMsVUFBZCxDQUE5QyxFQUF5RTtBQUN4RSxlQUFLbXBDLEtBQUw7QUFDQTtBQUNELE9BSnNCLEVBSXBCLElBSm9CLENBdkNQO0FBNENoQiwyQkFBcUJsaUQsQ0FBQyxDQUFDOG1DLEtBQUYsQ0FBUSxZQUFXO0FBQ3ZDLFlBQUksS0FBS3FYLEtBQUwsQ0FBVy9kLFFBQVgsQ0FBb0I2aEIsa0JBQXhCLEVBQTRDO0FBQzNDLGVBQUsvQixJQUFMO0FBQ0E7QUFDRCxPQUpvQixFQUlsQixJQUprQjtBQTVDTCxLQUFqQixDQXhDaUMsQ0EyRmpDOztBQUNBLFNBQUsvQixLQUFMLENBQVc1TixRQUFYLENBQW9CcDZDLEVBQXBCLENBQXVCLEtBQUtpL0MsU0FBNUIsRUE1RmlDLENBOEZqQzs7O0FBQ0EsU0FBSytJLEtBQUwsQ0FBV3ZpRCxPQUFYLEdBQXFCb0UsQ0FBQyxDQUFDdkksTUFBRixDQUFTLEVBQVQsRUFBYWtxRCxRQUFRLENBQUN4TSxRQUF0QixFQUFnQyxLQUFLZ0osS0FBTCxDQUFXdmlELE9BQTNDLENBQXJCO0FBQ0EsR0FoR0Q7QUFrR0E7Ozs7OztBQUlBK2xELFVBQVEsQ0FBQ3hNLFFBQVQsR0FBb0I7QUFDbkI2TSxZQUFRLEVBQUUsS0FEUztBQUVuQkcsbUJBQWUsRUFBRSxJQUZFO0FBR25CRixzQkFBa0IsRUFBRSxLQUhEO0FBSW5CRyxpQkFBYSxFQUFFO0FBSkksR0FBcEI7QUFPQTs7Ozs7O0FBS0FULFVBQVEsQ0FBQ3JzRCxTQUFULENBQW1CK3NELEtBQW5CLEdBQTJCLFVBQVN6cUIsS0FBVCxFQUFnQjtBQUMxQyxTQUFLZ3FCLEtBQUwsR0FBYTVzRCxNQUFNLENBQUNtRixVQUFQLENBQ1o2RixDQUFDLENBQUM4bUMsS0FBRixDQUFRLEtBQUt1YixLQUFiLEVBQW9CLElBQXBCLEVBQTBCenFCLEtBQTFCLENBRFksRUFFWixLQUFLa3FCLFFBQUwsSUFBaUIzakQsSUFBSSxDQUFDQyxLQUFMLENBQVcsS0FBS2trRCxJQUFMLEtBQWMsS0FBS1IsUUFBOUIsSUFBMEMsQ0FBM0QsSUFBZ0UsS0FBS1EsSUFBTCxFQUZwRCxDQUFiOztBQUtBLFFBQUksS0FBS25FLEtBQUwsQ0FBV3BsQyxFQUFYLENBQWMsYUFBZCxLQUFnQ25nQixRQUFRLENBQUMyOEIsTUFBN0MsRUFBcUQ7QUFDcEQ7QUFDQTs7QUFDRCxTQUFLNG9CLEtBQUwsQ0FBV3J4QyxJQUFYLENBQWdCOHFCLEtBQUssSUFBSSxLQUFLdW1CLEtBQUwsQ0FBVy9kLFFBQVgsQ0FBb0JnaUIsYUFBN0M7QUFDQSxHQVZEO0FBWUE7Ozs7OztBQUlBVCxVQUFRLENBQUNyc0QsU0FBVCxDQUFtQmd0RCxJQUFuQixHQUEwQixZQUFXO0FBQ3BDLFdBQU8sSUFBSTE0QyxJQUFKLEdBQVdzeUMsT0FBWCxLQUF1QixLQUFLMkYsS0FBbkM7QUFDQSxHQUZEO0FBSUE7Ozs7Ozs7O0FBTUFGLFVBQVEsQ0FBQ3JzRCxTQUFULENBQW1CNHFELElBQW5CLEdBQTBCLFVBQVNubUQsT0FBVCxFQUFrQjY5QixLQUFsQixFQUF5QjtBQUNsRCxRQUFJMnFCLE9BQUo7O0FBRUEsUUFBSSxDQUFDLEtBQUtwRSxLQUFMLENBQVdwbEMsRUFBWCxDQUFjLFVBQWQsQ0FBTCxFQUFnQztBQUMvQixXQUFLb2xDLEtBQUwsQ0FBV3JELEtBQVgsQ0FBaUIsVUFBakI7QUFDQTs7QUFFRC9nRCxXQUFPLEdBQUdBLE9BQU8sSUFBSSxLQUFLb2tELEtBQUwsQ0FBVy9kLFFBQVgsQ0FBb0IraEIsZUFBekMsQ0FQa0QsQ0FTbEQ7QUFDQTs7QUFDQUksV0FBTyxHQUFHcGtELElBQUksQ0FBQzZxQyxHQUFMLENBQVMsS0FBSzZZLEtBQUwsSUFBYyxLQUFLQyxRQUFMLElBQWlCL25ELE9BQS9CLENBQVQsRUFBa0RBLE9BQWxELENBQVY7O0FBRUEsUUFBSSxLQUFLZ29ELE9BQVQsRUFBa0I7QUFDakI7QUFDQSxXQUFLRixLQUFMLEdBQWEsS0FBS1MsSUFBTCxFQUFiO0FBQ0EsV0FBS1AsT0FBTCxHQUFlLEtBQWY7QUFDQSxLQUpELE1BSU87QUFDTjtBQUNBL3NELFlBQU0sQ0FBQ2dGLFlBQVAsQ0FBb0IsS0FBSzRuRCxLQUF6QjtBQUNBLEtBcEJpRCxDQXNCbEQ7OztBQUNBLFNBQUtDLEtBQUwsSUFBYyxLQUFLUyxJQUFMLEtBQWN2b0QsT0FBZCxHQUF3QndvRCxPQUF0QztBQUVBLFNBQUtULFFBQUwsR0FBZ0IvbkQsT0FBaEI7QUFDQSxTQUFLNm5ELEtBQUwsR0FBYTVzRCxNQUFNLENBQUNtRixVQUFQLENBQWtCNkYsQ0FBQyxDQUFDOG1DLEtBQUYsQ0FBUSxLQUFLdWIsS0FBYixFQUFvQixJQUFwQixFQUEwQnpxQixLQUExQixDQUFsQixFQUFvRDc5QixPQUFPLEdBQUd3b0QsT0FBOUQsQ0FBYjtBQUNBLEdBM0JEO0FBNkJBOzs7Ozs7QUFJQVosVUFBUSxDQUFDcnNELFNBQVQsQ0FBbUJxc0IsSUFBbkIsR0FBMEIsWUFBVztBQUNwQyxRQUFJLEtBQUt3OEIsS0FBTCxDQUFXcGxDLEVBQVgsQ0FBYyxVQUFkLENBQUosRUFBK0I7QUFDOUI7QUFDQSxXQUFLOG9DLEtBQUwsR0FBYSxDQUFiO0FBQ0EsV0FBS0UsT0FBTCxHQUFlLElBQWY7QUFFQS9zRCxZQUFNLENBQUNnRixZQUFQLENBQW9CLEtBQUs0bkQsS0FBekI7O0FBQ0EsV0FBS3pELEtBQUwsQ0FBV2hELEtBQVgsQ0FBaUIsVUFBakI7QUFDQTtBQUNELEdBVEQ7QUFXQTs7Ozs7O0FBSUF3RyxVQUFRLENBQUNyc0QsU0FBVCxDQUFtQjRzRCxLQUFuQixHQUEyQixZQUFXO0FBQ3JDLFFBQUksS0FBSy9ELEtBQUwsQ0FBV3BsQyxFQUFYLENBQWMsVUFBZCxLQUE2QixDQUFDLEtBQUtncEMsT0FBdkMsRUFBZ0Q7QUFDL0M7QUFDQSxXQUFLRixLQUFMLEdBQWEsS0FBS1MsSUFBTCxFQUFiO0FBQ0EsV0FBS1AsT0FBTCxHQUFlLElBQWY7QUFFQS9zRCxZQUFNLENBQUNnRixZQUFQLENBQW9CLEtBQUs0bkQsS0FBekI7QUFDQTtBQUNELEdBUkQ7QUFVQTs7Ozs7QUFHQUQsVUFBUSxDQUFDcnNELFNBQVQsQ0FBbUI2NkMsT0FBbkIsR0FBNkIsWUFBVztBQUN2QyxRQUFJcGhDLE9BQUosRUFBYXlzQyxRQUFiO0FBRUEsU0FBSzc1QixJQUFMOztBQUVBLFNBQUs1UyxPQUFMLElBQWdCLEtBQUtxbUMsU0FBckIsRUFBZ0M7QUFDL0IsV0FBSytJLEtBQUwsQ0FBVzVOLFFBQVgsQ0FBb0J4NUMsR0FBcEIsQ0FBd0JnWSxPQUF4QixFQUFpQyxLQUFLcW1DLFNBQUwsQ0FBZXJtQyxPQUFmLENBQWpDO0FBQ0E7O0FBQ0QsU0FBS3lzQyxRQUFMLElBQWlCOTZDLE1BQU0sQ0FBQ2krQyxtQkFBUCxDQUEyQixJQUEzQixDQUFqQixFQUFtRDtBQUNsRCxhQUFPLEtBQUtuRCxRQUFMLENBQVAsSUFBeUIsVUFBekIsS0FBd0MsS0FBS0EsUUFBTCxJQUFpQixJQUF6RDtBQUNBO0FBQ0QsR0FYRDs7QUFhQXg3QyxHQUFDLENBQUN1RCxFQUFGLENBQUtzNkMsV0FBTCxDQUFpQkUsV0FBakIsQ0FBNkJ2SCxPQUE3QixDQUFxQ3dMLFFBQXJDLEdBQWdETCxRQUFoRDtBQUVBLENBL05BLEVBK05FM3NELE1BQU0sQ0FBQ2dwRCxLQUFQLElBQWdCaHBELE1BQU0sQ0FBQ3lHLE1BL056QixFQStOaUN6RyxNQS9OakMsRUErTnlDNEQsUUEvTnpDO0FBaU9EOzs7Ozs7Ozs7QUFPQTs7QUFBQyxDQUFDLFVBQVNvSCxDQUFULEVBQVloTCxNQUFaLEVBQW9CNEQsUUFBcEIsRUFBOEJQLFNBQTlCLEVBQXlDO0FBQzFDO0FBRUE7Ozs7OztBQUtBLE1BQUltcUQsVUFBVSxHQUFHLFVBQVN0RSxRQUFULEVBQW1CO0FBQ25DOzs7OztBQUtBLFNBQUtDLEtBQUwsR0FBYUQsUUFBYjtBQUVBOzs7Ozs7QUFLQSxTQUFLdUUsWUFBTCxHQUFvQixLQUFwQjtBQUVBOzs7Ozs7QUFLQSxTQUFLQyxNQUFMLEdBQWMsRUFBZDtBQUVBOzs7Ozs7QUFLQSxTQUFLQyxTQUFMLEdBQWlCLEVBQWpCO0FBRUE7Ozs7OztBQUtBLFNBQUtDLFVBQUwsR0FBa0IsRUFBbEI7QUFFQTs7Ozs7QUFJQSxTQUFLclMsUUFBTCxHQUFnQixLQUFLNE4sS0FBTCxDQUFXNU4sUUFBM0I7QUFFQTs7Ozs7O0FBS0EsU0FBS3NTLFVBQUwsR0FBa0I7QUFDakIvMUMsVUFBSSxFQUFFLEtBQUtxeEMsS0FBTCxDQUFXcnhDLElBREE7QUFFakJrTixVQUFJLEVBQUUsS0FBS21rQyxLQUFMLENBQVdua0MsSUFGQTtBQUdqQmdlLFFBQUUsRUFBRSxLQUFLbW1CLEtBQUwsQ0FBV25tQjtBQUhFLEtBQWxCO0FBTUE7Ozs7OztBQUtBLFNBQUtvZCxTQUFMLEdBQWlCO0FBQ2hCLCtCQUF5QnAxQyxDQUFDLENBQUM4bUMsS0FBRixDQUFRLFVBQVM5NUIsQ0FBVCxFQUFZO0FBQzVDLFlBQUlBLENBQUMsQ0FBQzlSLFNBQUYsSUFBZSxLQUFLaWpELEtBQUwsQ0FBVy9kLFFBQVgsQ0FBb0IwaUIsUUFBdkMsRUFBaUQ7QUFDaEQsZUFBS0YsVUFBTCxDQUFnQmxzRCxJQUFoQixDQUFxQixpQkFBaUIsS0FBS3luRCxLQUFMLENBQVcvZCxRQUFYLENBQW9CMmlCLFFBQXJDLEdBQWdELElBQWhELEdBQ3BCL2lELENBQUMsQ0FBQ2dOLENBQUMsQ0FBQytOLE9BQUgsQ0FBRCxDQUFhdkssSUFBYixDQUFrQixZQUFsQixFQUFnQytKLE9BQWhDLENBQXdDLFlBQXhDLEVBQXNEN2UsSUFBdEQsQ0FBMkQsVUFBM0QsQ0FEb0IsR0FDcUQsUUFEMUU7QUFFQTtBQUNELE9BTHdCLEVBS3RCLElBTHNCLENBRFQ7QUFPaEIsNEJBQXNCc0UsQ0FBQyxDQUFDOG1DLEtBQUYsQ0FBUSxVQUFTOTVCLENBQVQsRUFBWTtBQUN6QyxZQUFJQSxDQUFDLENBQUM5UixTQUFGLElBQWUsS0FBS2lqRCxLQUFMLENBQVcvZCxRQUFYLENBQW9CMGlCLFFBQXZDLEVBQWlEO0FBQ2hELGVBQUtGLFVBQUwsQ0FBZ0IzckQsTUFBaEIsQ0FBdUIrVixDQUFDLENBQUMyaUIsUUFBekIsRUFBbUMsQ0FBbkMsRUFBc0MsS0FBS2l6QixVQUFMLENBQWdCdDRDLEdBQWhCLEVBQXRDO0FBQ0E7QUFDRCxPQUpxQixFQUluQixJQUptQixDQVBOO0FBWWhCLDZCQUF1QnRLLENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsVUFBUzk1QixDQUFULEVBQVk7QUFDMUMsWUFBSUEsQ0FBQyxDQUFDOVIsU0FBRixJQUFlLEtBQUtpakQsS0FBTCxDQUFXL2QsUUFBWCxDQUFvQjBpQixRQUF2QyxFQUFpRDtBQUNoRCxlQUFLRixVQUFMLENBQWdCM3JELE1BQWhCLENBQXVCK1YsQ0FBQyxDQUFDMmlCLFFBQXpCLEVBQW1DLENBQW5DO0FBQ0E7QUFDRCxPQUpzQixFQUlwQixJQUpvQixDQVpQO0FBaUJoQiw4QkFBd0IzdkIsQ0FBQyxDQUFDOG1DLEtBQUYsQ0FBUSxVQUFTOTVCLENBQVQsRUFBWTtBQUMzQyxZQUFJQSxDQUFDLENBQUM5UixTQUFGLElBQWU4UixDQUFDLENBQUN3dUMsUUFBRixDQUFXdDBDLElBQVgsSUFBbUIsVUFBdEMsRUFBa0Q7QUFDakQsZUFBSzg3QyxJQUFMO0FBQ0E7QUFDRCxPQUp1QixFQUlyQixJQUpxQixDQWpCUjtBQXNCaEIsa0NBQTRCaGpELENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsVUFBUzk1QixDQUFULEVBQVk7QUFDL0MsWUFBSUEsQ0FBQyxDQUFDOVIsU0FBRixJQUFlLENBQUMsS0FBS3VuRCxZQUF6QixFQUF1QztBQUN0QyxlQUFLdEUsS0FBTCxDQUFXajFCLE9BQVgsQ0FBbUIsWUFBbkIsRUFBaUMsSUFBakMsRUFBdUMsWUFBdkM7O0FBQ0EsZUFBSzR0QixVQUFMO0FBQ0EsZUFBSzZFLE1BQUw7QUFDQSxlQUFLcUgsSUFBTDtBQUNBLGVBQUtQLFlBQUwsR0FBb0IsSUFBcEI7O0FBQ0EsZUFBS3RFLEtBQUwsQ0FBV2oxQixPQUFYLENBQW1CLGFBQW5CLEVBQWtDLElBQWxDLEVBQXdDLFlBQXhDO0FBQ0E7QUFDRCxPQVQyQixFQVN6QixJQVR5QixDQXRCWjtBQWdDaEIsZ0NBQTBCbHBCLENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsVUFBUzk1QixDQUFULEVBQVk7QUFDN0MsWUFBSUEsQ0FBQyxDQUFDOVIsU0FBRixJQUFlLEtBQUt1bkQsWUFBeEIsRUFBc0M7QUFDckMsZUFBS3RFLEtBQUwsQ0FBV2oxQixPQUFYLENBQW1CLFNBQW5CLEVBQThCLElBQTlCLEVBQW9DLFlBQXBDOztBQUNBLGVBQUt5eUIsTUFBTDtBQUNBLGVBQUtxSCxJQUFMOztBQUNBLGVBQUs3RSxLQUFMLENBQVdqMUIsT0FBWCxDQUFtQixXQUFuQixFQUFnQyxJQUFoQyxFQUFzQyxZQUF0QztBQUNBO0FBQ0QsT0FQeUIsRUFPdkIsSUFQdUI7QUFoQ1YsS0FBakIsQ0ExRG1DLENBb0duQzs7QUFDQSxTQUFLaTFCLEtBQUwsQ0FBV3ZpRCxPQUFYLEdBQXFCb0UsQ0FBQyxDQUFDdkksTUFBRixDQUFTLEVBQVQsRUFBYStxRCxVQUFVLENBQUNyTixRQUF4QixFQUFrQyxLQUFLZ0osS0FBTCxDQUFXdmlELE9BQTdDLENBQXJCLENBckdtQyxDQXVHbkM7O0FBQ0EsU0FBSzIwQyxRQUFMLENBQWNwNkMsRUFBZCxDQUFpQixLQUFLaS9DLFNBQXRCO0FBQ0EsR0F6R0Q7QUEyR0E7Ozs7Ozs7QUFLQW9OLFlBQVUsQ0FBQ3JOLFFBQVgsR0FBc0I7QUFDckI4TixPQUFHLEVBQUUsS0FEZ0I7QUFFckJDLFdBQU8sRUFBRSxDQUNSLHVCQUF1QixVQUF2QixHQUFvQyxtQkFENUIsRUFFUix1QkFBdUIsTUFBdkIsR0FBZ0MsbUJBRnhCLENBRlk7QUFNckJDLFlBQVEsRUFBRSxLQU5XO0FBT3JCQyxjQUFVLEVBQUUsMENBUFM7QUFRckJDLGdCQUFZLEVBQUUsS0FSTztBQVNyQkMscUJBQWlCLEVBQUUsU0FURTtBQVVyQkMsWUFBUSxFQUFFLENBQ1QsVUFEUyxFQUVULFVBRlMsQ0FWVztBQWNyQkMsV0FBTyxFQUFFLENBZFk7QUFlckJULFlBQVEsRUFBRSxTQWZXO0FBZ0JyQlUsYUFBUyxFQUFFLFVBaEJVO0FBaUJyQkMsUUFBSSxFQUFFLElBakJlO0FBa0JyQkMsWUFBUSxFQUFFLEtBbEJXO0FBbUJyQmIsWUFBUSxFQUFFLEtBbkJXO0FBb0JyQmMsYUFBUyxFQUFFLEtBcEJVO0FBcUJyQkMsaUJBQWEsRUFBRTtBQXJCTSxHQUF0QjtBQXdCQTs7Ozs7QUFJQXJCLFlBQVUsQ0FBQ2x0RCxTQUFYLENBQXFCd2hELFVBQXJCLEdBQWtDLFlBQVc7QUFDNUMsUUFBSWdOLFFBQUo7QUFBQSxRQUNDMWpCLFFBQVEsR0FBRyxLQUFLK2QsS0FBTCxDQUFXL2QsUUFEdkIsQ0FENEMsQ0FJNUM7O0FBQ0EsU0FBS3VpQixTQUFMLENBQWVvQixTQUFmLEdBQTJCLENBQUMzakIsUUFBUSxDQUFDaWpCLFlBQVQsR0FBd0JyakQsQ0FBQyxDQUFDb2dDLFFBQVEsQ0FBQ2lqQixZQUFWLENBQXpCLEdBQ3pCcmpELENBQUMsQ0FBQyxPQUFELENBQUQsQ0FBV3E2QixRQUFYLENBQW9CK0YsUUFBUSxDQUFDa2pCLGlCQUE3QixFQUFnRGoxQixRQUFoRCxDQUF5RCxLQUFLa2lCLFFBQTlELENBRHdCLEVBQ2lEbFcsUUFEakQsQ0FDMEQsVUFEMUQsQ0FBM0I7QUFHQSxTQUFLc29CLFNBQUwsQ0FBZXFCLFNBQWYsR0FBMkJoa0QsQ0FBQyxDQUFDLE1BQU1vZ0MsUUFBUSxDQUFDZ2pCLFVBQWYsR0FBNEIsR0FBN0IsQ0FBRCxDQUN6Qi9vQixRQUR5QixDQUNoQitGLFFBQVEsQ0FBQ21qQixRQUFULENBQWtCLENBQWxCLENBRGdCLEVBRXpCbjJCLElBRnlCLENBRXBCZ1QsUUFBUSxDQUFDOGlCLE9BQVQsQ0FBaUIsQ0FBakIsQ0FGb0IsRUFHekI1MEIsU0FIeUIsQ0FHZixLQUFLcTBCLFNBQUwsQ0FBZW9CLFNBSEEsRUFJekI1dEQsRUFKeUIsQ0FJdEIsT0FKc0IsRUFJYjZKLENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsVUFBUzk1QixDQUFULEVBQVk7QUFDaEMsV0FBS2dOLElBQUwsQ0FBVW9tQixRQUFRLENBQUMraUIsUUFBbkI7QUFDQSxLQUZZLEVBRVYsSUFGVSxDQUphLENBQTNCO0FBT0EsU0FBS1IsU0FBTCxDQUFlc0IsS0FBZixHQUF1QmprRCxDQUFDLENBQUMsTUFBTW9nQyxRQUFRLENBQUNnakIsVUFBZixHQUE0QixHQUE3QixDQUFELENBQ3JCL29CLFFBRHFCLENBQ1orRixRQUFRLENBQUNtakIsUUFBVCxDQUFrQixDQUFsQixDQURZLEVBRXJCbjJCLElBRnFCLENBRWhCZ1QsUUFBUSxDQUFDOGlCLE9BQVQsQ0FBaUIsQ0FBakIsQ0FGZ0IsRUFHckI3MEIsUUFIcUIsQ0FHWixLQUFLczBCLFNBQUwsQ0FBZW9CLFNBSEgsRUFJckI1dEQsRUFKcUIsQ0FJbEIsT0FKa0IsRUFJVDZKLENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsVUFBUzk1QixDQUFULEVBQVk7QUFDaEMsV0FBS0YsSUFBTCxDQUFVc3pCLFFBQVEsQ0FBQytpQixRQUFuQjtBQUNBLEtBRlksRUFFVixJQUZVLENBSlMsQ0FBdkIsQ0FmNEMsQ0F1QjVDOztBQUNBLFFBQUksQ0FBQy9pQixRQUFRLENBQUMwaUIsUUFBZCxFQUF3QjtBQUN2QixXQUFLRixVQUFMLEdBQWtCLENBQUU1aUQsQ0FBQyxDQUFDLHdCQUFELENBQUQsQ0FDbEJxNkIsUUFEa0IsQ0FDVCtGLFFBQVEsQ0FBQzJpQixRQURBLEVBRWxCajFCLE1BRmtCLENBRVg5dEIsQ0FBQyxDQUFDLFFBQUQsQ0FGVSxFQUdsQnBJLElBSGtCLENBR2IsV0FIYSxDQUFGLENBQWxCO0FBSUE7O0FBRUQsU0FBSytxRCxTQUFMLENBQWV1QixTQUFmLEdBQTJCLENBQUM5akIsUUFBUSxDQUFDeWpCLGFBQVQsR0FBeUI3akQsQ0FBQyxDQUFDb2dDLFFBQVEsQ0FBQ3lqQixhQUFWLENBQTFCLEdBQ3pCN2pELENBQUMsQ0FBQyxPQUFELENBQUQsQ0FBV3E2QixRQUFYLENBQW9CK0YsUUFBUSxDQUFDcWpCLFNBQTdCLEVBQXdDcDFCLFFBQXhDLENBQWlELEtBQUtraUIsUUFBdEQsQ0FEd0IsRUFDeUNsVyxRQUR6QyxDQUNrRCxVQURsRCxDQUEzQjs7QUFHQSxTQUFLc29CLFNBQUwsQ0FBZXVCLFNBQWYsQ0FBeUIvdEQsRUFBekIsQ0FBNEIsT0FBNUIsRUFBcUMsUUFBckMsRUFBK0M2SixDQUFDLENBQUM4bUMsS0FBRixDQUFRLFVBQVM5NUIsQ0FBVCxFQUFZO0FBQ2xFLFVBQUloVyxLQUFLLEdBQUdnSixDQUFDLENBQUNnTixDQUFDLENBQUMxRixNQUFILENBQUQsQ0FBWXFNLE1BQVosR0FBcUJvRixFQUFyQixDQUF3QixLQUFLNHBDLFNBQUwsQ0FBZXVCLFNBQXZDLElBQ1Rsa0QsQ0FBQyxDQUFDZ04sQ0FBQyxDQUFDMUYsTUFBSCxDQUFELENBQVl0USxLQUFaLEVBRFMsR0FDYWdKLENBQUMsQ0FBQ2dOLENBQUMsQ0FBQzFGLE1BQUgsQ0FBRCxDQUFZcU0sTUFBWixHQUFxQjNjLEtBQXJCLEVBRHpCO0FBR0FnVyxPQUFDLENBQUNrYixjQUFGO0FBRUEsV0FBSzhQLEVBQUwsQ0FBUWhoQyxLQUFSLEVBQWVvcEMsUUFBUSxDQUFDd2pCLFNBQXhCO0FBQ0EsS0FQOEMsRUFPNUMsSUFQNEMsQ0FBL0M7QUFTQTs7Ozs7Ozs7Ozs7QUFhQTs7O0FBQ0EsU0FBS0UsUUFBTCxJQUFpQixLQUFLakIsVUFBdEIsRUFBa0M7QUFDakMsV0FBSzFFLEtBQUwsQ0FBVzJGLFFBQVgsSUFBdUI5akQsQ0FBQyxDQUFDOG1DLEtBQUYsQ0FBUSxLQUFLZ2QsUUFBTCxDQUFSLEVBQXdCLElBQXhCLENBQXZCO0FBQ0E7QUFDRCxHQTVERDtBQThEQTs7Ozs7O0FBSUF0QixZQUFVLENBQUNsdEQsU0FBWCxDQUFxQjY2QyxPQUFyQixHQUErQixZQUFXO0FBQ3pDLFFBQUlwaEMsT0FBSixFQUFhbzFDLE9BQWIsRUFBc0IzSSxRQUF0QixFQUFnQ3NJLFFBQWhDLEVBQTBDMWpCLFFBQTFDO0FBQ0FBLFlBQVEsR0FBRyxLQUFLK2QsS0FBTCxDQUFXL2QsUUFBdEI7O0FBRUEsU0FBS3J4QixPQUFMLElBQWdCLEtBQUtxbUMsU0FBckIsRUFBZ0M7QUFDL0IsV0FBSzdFLFFBQUwsQ0FBY3g1QyxHQUFkLENBQWtCZ1ksT0FBbEIsRUFBMkIsS0FBS3FtQyxTQUFMLENBQWVybUMsT0FBZixDQUEzQjtBQUNBOztBQUNELFNBQUtvMUMsT0FBTCxJQUFnQixLQUFLeEIsU0FBckIsRUFBZ0M7QUFDL0IsVUFBSXdCLE9BQU8sS0FBSyxXQUFaLElBQTJCL2pCLFFBQVEsQ0FBQ2lqQixZQUF4QyxFQUFzRDtBQUNyRCxhQUFLVixTQUFMLENBQWV3QixPQUFmLEVBQXdCLzJCLElBQXhCLENBQTZCLEVBQTdCO0FBQ0EsT0FGRCxNQUVPO0FBQ04sYUFBS3UxQixTQUFMLENBQWV3QixPQUFmLEVBQXdCcG9DLE1BQXhCO0FBQ0E7QUFDRDs7QUFDRCxTQUFLK25DLFFBQUwsSUFBaUIsS0FBS00sUUFBdEIsRUFBZ0M7QUFDL0IsV0FBS2pHLEtBQUwsQ0FBVzJGLFFBQVgsSUFBdUIsS0FBS2pCLFVBQUwsQ0FBZ0JpQixRQUFoQixDQUF2QjtBQUNBOztBQUNELFNBQUt0SSxRQUFMLElBQWlCOTZDLE1BQU0sQ0FBQ2krQyxtQkFBUCxDQUEyQixJQUEzQixDQUFqQixFQUFtRDtBQUNsRCxhQUFPLEtBQUtuRCxRQUFMLENBQVAsSUFBeUIsVUFBekIsS0FBd0MsS0FBS0EsUUFBTCxJQUFpQixJQUF6RDtBQUNBO0FBQ0QsR0FwQkQ7QUFzQkE7Ozs7OztBQUlBZ0gsWUFBVSxDQUFDbHRELFNBQVgsQ0FBcUJxbUQsTUFBckIsR0FBOEIsWUFBVztBQUN4QyxRQUFJam1ELENBQUo7QUFBQSxRQUFPcVIsQ0FBUDtBQUFBLFFBQVVzOUMsQ0FBVjtBQUFBLFFBQ0NDLEtBQUssR0FBRyxLQUFLbkcsS0FBTCxDQUFXeEUsTUFBWCxHQUFvQmhrRCxNQUFwQixHQUE2QixDQUR0QztBQUFBLFFBRUM0dUQsS0FBSyxHQUFHRCxLQUFLLEdBQUcsS0FBS25HLEtBQUwsQ0FBVzlWLEtBQVgsR0FBbUIxeUMsTUFGcEM7QUFBQSxRQUdDd2tELE9BQU8sR0FBRyxLQUFLZ0UsS0FBTCxDQUFXaEUsT0FBWCxDQUFtQixJQUFuQixDQUhYO0FBQUEsUUFJQy9aLFFBQVEsR0FBRyxLQUFLK2QsS0FBTCxDQUFXL2QsUUFKdkI7QUFBQSxRQUtDdGpDLElBQUksR0FBR3NqQyxRQUFRLENBQUM0VyxNQUFULElBQW1CNVcsUUFBUSxDQUFDcVgsU0FBNUIsSUFBeUNyWCxRQUFRLENBQUMwaUIsUUFBbEQsR0FDSixDQURJLEdBQ0ExaUIsUUFBUSxDQUFDdWpCLFFBQVQsSUFBcUJ2akIsUUFBUSxDQUFDaUksS0FOdEM7O0FBUUEsUUFBSWpJLFFBQVEsQ0FBQ29qQixPQUFULEtBQXFCLE1BQXpCLEVBQWlDO0FBQ2hDcGpCLGNBQVEsQ0FBQ29qQixPQUFULEdBQW1CcmxELElBQUksQ0FBQzZxQyxHQUFMLENBQVM1SSxRQUFRLENBQUNvakIsT0FBbEIsRUFBMkJwakIsUUFBUSxDQUFDaUksS0FBcEMsQ0FBbkI7QUFDQTs7QUFFRCxRQUFJakksUUFBUSxDQUFDc2pCLElBQVQsSUFBaUJ0akIsUUFBUSxDQUFDb2pCLE9BQVQsSUFBb0IsTUFBekMsRUFBaUQ7QUFDaEQsV0FBS2QsTUFBTCxHQUFjLEVBQWQ7O0FBRUEsV0FBS2h0RCxDQUFDLEdBQUc0dUQsS0FBSixFQUFXdjlDLENBQUMsR0FBRyxDQUFmLEVBQWtCczlDLENBQUMsR0FBRyxDQUEzQixFQUE4QjN1RCxDQUFDLEdBQUc2dUQsS0FBbEMsRUFBeUM3dUQsQ0FBQyxFQUExQyxFQUE4QztBQUM3QyxZQUFJcVIsQ0FBQyxJQUFJakssSUFBTCxJQUFhaUssQ0FBQyxLQUFLLENBQXZCLEVBQTBCO0FBQ3pCLGVBQUsyN0MsTUFBTCxDQUFZaHNELElBQVosQ0FBaUI7QUFDaEJnZCxpQkFBSyxFQUFFdlYsSUFBSSxDQUFDNnFDLEdBQUwsQ0FBU21SLE9BQVQsRUFBa0J6a0QsQ0FBQyxHQUFHNHVELEtBQXRCLENBRFM7QUFFaEJ0OUMsZUFBRyxFQUFFdFIsQ0FBQyxHQUFHNHVELEtBQUosR0FBWXhuRCxJQUFaLEdBQW1CO0FBRlIsV0FBakI7O0FBSUEsY0FBSXFCLElBQUksQ0FBQzZxQyxHQUFMLENBQVNtUixPQUFULEVBQWtCemtELENBQUMsR0FBRzR1RCxLQUF0QixNQUFpQ25LLE9BQXJDLEVBQThDO0FBQzdDO0FBQ0E7O0FBQ0RwekMsV0FBQyxHQUFHLENBQUosRUFBTyxFQUFFczlDLENBQVQ7QUFDQTs7QUFDRHQ5QyxTQUFDLElBQUksS0FBS28zQyxLQUFMLENBQVd0QixPQUFYLENBQW1CLEtBQUtzQixLQUFMLENBQVczckMsUUFBWCxDQUFvQjljLENBQXBCLENBQW5CLENBQUw7QUFDQTtBQUNEO0FBQ0QsR0E5QkQ7QUFnQ0E7Ozs7Ozs7QUFLQThzRCxZQUFVLENBQUNsdEQsU0FBWCxDQUFxQjB0RCxJQUFyQixHQUE0QixZQUFXO0FBQ3RDLFFBQUk3RyxVQUFKO0FBQUEsUUFDQy9iLFFBQVEsR0FBRyxLQUFLK2QsS0FBTCxDQUFXL2QsUUFEdkI7QUFBQSxRQUVDeHpCLFFBQVEsR0FBRyxLQUFLdXhDLEtBQUwsQ0FBVzlWLEtBQVgsR0FBbUIxeUMsTUFBbkIsSUFBNkJ5cUMsUUFBUSxDQUFDaUksS0FGbEQ7QUFBQSxRQUdDcnhDLEtBQUssR0FBRyxLQUFLbW5ELEtBQUwsQ0FBVzNyQyxRQUFYLENBQW9CLEtBQUsyckMsS0FBTCxDQUFXL2UsT0FBWCxFQUFwQixDQUhUO0FBQUEsUUFJQzJYLElBQUksR0FBRzNXLFFBQVEsQ0FBQzJXLElBQVQsSUFBaUIzVyxRQUFRLENBQUM2VyxNQUpsQzs7QUFNQSxTQUFLMEwsU0FBTCxDQUFlb0IsU0FBZixDQUF5QnBwQixXQUF6QixDQUFxQyxVQUFyQyxFQUFpRCxDQUFDeUYsUUFBUSxDQUFDNmlCLEdBQVYsSUFBaUJyMkMsUUFBbEU7O0FBRUEsUUFBSXd6QixRQUFRLENBQUM2aUIsR0FBYixFQUFrQjtBQUNqQixXQUFLTixTQUFMLENBQWVxQixTQUFmLENBQXlCcnBCLFdBQXpCLENBQXFDLFVBQXJDLEVBQWlELENBQUNvYyxJQUFELElBQVMvL0MsS0FBSyxJQUFJLEtBQUttbkQsS0FBTCxDQUFXakUsT0FBWCxDQUFtQixJQUFuQixDQUFuRTs7QUFDQSxXQUFLeUksU0FBTCxDQUFlc0IsS0FBZixDQUFxQnRwQixXQUFyQixDQUFpQyxVQUFqQyxFQUE2QyxDQUFDb2MsSUFBRCxJQUFTLy9DLEtBQUssSUFBSSxLQUFLbW5ELEtBQUwsQ0FBV2hFLE9BQVgsQ0FBbUIsSUFBbkIsQ0FBL0Q7QUFDQTs7QUFFRCxTQUFLd0ksU0FBTCxDQUFldUIsU0FBZixDQUF5QnZwQixXQUF6QixDQUFxQyxVQUFyQyxFQUFpRCxDQUFDeUYsUUFBUSxDQUFDc2pCLElBQVYsSUFBa0I5MkMsUUFBbkU7O0FBRUEsUUFBSXd6QixRQUFRLENBQUNzakIsSUFBYixFQUFtQjtBQUNsQnZILGdCQUFVLEdBQUcsS0FBS3VHLE1BQUwsQ0FBWS9zRCxNQUFaLEdBQXFCLEtBQUtndEQsU0FBTCxDQUFldUIsU0FBZixDQUF5QjdpRCxRQUF6QixHQUFvQzFMLE1BQXRFOztBQUVBLFVBQUl5cUMsUUFBUSxDQUFDMGlCLFFBQVQsSUFBcUIzRyxVQUFVLEtBQUssQ0FBeEMsRUFBMkM7QUFDMUMsYUFBS3dHLFNBQUwsQ0FBZXVCLFNBQWYsQ0FBeUI5MkIsSUFBekIsQ0FBOEIsS0FBS3cxQixVQUFMLENBQWdCMTBDLElBQWhCLENBQXFCLEVBQXJCLENBQTlCO0FBQ0EsT0FGRCxNQUVPLElBQUlpdUMsVUFBVSxHQUFHLENBQWpCLEVBQW9CO0FBQzFCLGFBQUt3RyxTQUFMLENBQWV1QixTQUFmLENBQXlCcDJCLE1BQXpCLENBQWdDLElBQUk3MUIsS0FBSixDQUFVa2tELFVBQVUsR0FBRyxDQUF2QixFQUEwQmp1QyxJQUExQixDQUErQixLQUFLMDBDLFVBQUwsQ0FBZ0IsQ0FBaEIsQ0FBL0IsQ0FBaEM7QUFDQSxPQUZNLE1BRUEsSUFBSXpHLFVBQVUsR0FBRyxDQUFqQixFQUFvQjtBQUMxQixhQUFLd0csU0FBTCxDQUFldUIsU0FBZixDQUF5QjdpRCxRQUF6QixHQUFvQ2pLLEtBQXBDLENBQTBDK2tELFVBQTFDLEVBQXNEcGdDLE1BQXREO0FBQ0E7O0FBRUQsV0FBSzRtQyxTQUFMLENBQWV1QixTQUFmLENBQXlCMXpDLElBQXpCLENBQThCLFNBQTlCLEVBQXlDa3FCLFdBQXpDLENBQXFELFFBQXJEOztBQUNBLFdBQUtpb0IsU0FBTCxDQUFldUIsU0FBZixDQUF5QjdpRCxRQUF6QixHQUFvQ21GLEVBQXBDLENBQXVDeEcsQ0FBQyxDQUFDaUksT0FBRixDQUFVLEtBQUttM0IsT0FBTCxFQUFWLEVBQTBCLEtBQUtzakIsTUFBL0IsQ0FBdkMsRUFBK0Vyb0IsUUFBL0UsQ0FBd0YsUUFBeEY7QUFDQTtBQUNELEdBOUJEO0FBZ0NBOzs7Ozs7O0FBS0Ftb0IsWUFBVSxDQUFDbHRELFNBQVgsQ0FBcUJtb0QsU0FBckIsR0FBaUMsVUFBU3hrRCxLQUFULEVBQWdCO0FBQ2hELFFBQUltbkMsUUFBUSxHQUFHLEtBQUsrZCxLQUFMLENBQVcvZCxRQUExQjtBQUVBbm5DLFNBQUssQ0FBQ3VyRCxJQUFOLEdBQWE7QUFDWnh0RCxXQUFLLEVBQUVnSixDQUFDLENBQUNpSSxPQUFGLENBQVUsS0FBS20zQixPQUFMLEVBQVYsRUFBMEIsS0FBS3NqQixNQUEvQixDQURLO0FBRVo1Z0MsV0FBSyxFQUFFLEtBQUs0Z0MsTUFBTCxDQUFZL3NELE1BRlA7QUFHWm1ILFVBQUksRUFBRXNqQyxRQUFRLEtBQUtBLFFBQVEsQ0FBQzRXLE1BQVQsSUFBbUI1VyxRQUFRLENBQUNxWCxTQUE1QixJQUF5Q3JYLFFBQVEsQ0FBQzBpQixRQUFsRCxHQUNoQixDQURnQixHQUNaMWlCLFFBQVEsQ0FBQ3VqQixRQUFULElBQXFCdmpCLFFBQVEsQ0FBQ2lJLEtBRHZCO0FBSEYsS0FBYjtBQU1BLEdBVEQ7QUFXQTs7Ozs7OztBQUtBbWEsWUFBVSxDQUFDbHRELFNBQVgsQ0FBcUI4cEMsT0FBckIsR0FBK0IsWUFBVztBQUN6QyxRQUFJQSxPQUFPLEdBQUcsS0FBSytlLEtBQUwsQ0FBVzNyQyxRQUFYLENBQW9CLEtBQUsyckMsS0FBTCxDQUFXL2UsT0FBWCxFQUFwQixDQUFkOztBQUNBLFdBQU9wL0IsQ0FBQyxDQUFDMkcsSUFBRixDQUFPLEtBQUsrN0MsTUFBWixFQUFvQjFpRCxDQUFDLENBQUM4bUMsS0FBRixDQUFRLFVBQVMwZCxJQUFULEVBQWV4dEQsS0FBZixFQUFzQjtBQUN4RCxhQUFPd3RELElBQUksQ0FBQzl3QyxLQUFMLElBQWMwckIsT0FBZCxJQUF5Qm9sQixJQUFJLENBQUN4OUMsR0FBTCxJQUFZbzRCLE9BQTVDO0FBQ0EsS0FGMEIsRUFFeEIsSUFGd0IsQ0FBcEIsRUFFRzkwQixHQUZILEVBQVA7QUFHQSxHQUxEO0FBT0E7Ozs7Ozs7QUFLQWs0QyxZQUFVLENBQUNsdEQsU0FBWCxDQUFxQmszQyxXQUFyQixHQUFtQyxVQUFTaVksU0FBVCxFQUFvQjtBQUN0RCxRQUFJOTBCLFFBQUo7QUFBQSxRQUFjaDZCLE1BQWQ7QUFBQSxRQUNDeXFDLFFBQVEsR0FBRyxLQUFLK2QsS0FBTCxDQUFXL2QsUUFEdkI7O0FBR0EsUUFBSUEsUUFBUSxDQUFDb2pCLE9BQVQsSUFBb0IsTUFBeEIsRUFBZ0M7QUFDL0I3ekIsY0FBUSxHQUFHM3ZCLENBQUMsQ0FBQ2lJLE9BQUYsQ0FBVSxLQUFLbTNCLE9BQUwsRUFBVixFQUEwQixLQUFLc2pCLE1BQS9CLENBQVg7QUFDQS9zRCxZQUFNLEdBQUcsS0FBSytzRCxNQUFMLENBQVkvc0QsTUFBckI7QUFDQTh1RCxlQUFTLEdBQUcsRUFBRTkwQixRQUFMLEdBQWdCLEVBQUVBLFFBQTNCO0FBQ0FBLGNBQVEsR0FBRyxLQUFLK3lCLE1BQUwsQ0FBWSxDQUFFL3lCLFFBQVEsR0FBR2g2QixNQUFaLEdBQXNCQSxNQUF2QixJQUFpQ0EsTUFBN0MsRUFBcUQrZCxLQUFoRTtBQUNBLEtBTEQsTUFLTztBQUNOaWMsY0FBUSxHQUFHLEtBQUt3dUIsS0FBTCxDQUFXM3JDLFFBQVgsQ0FBb0IsS0FBSzJyQyxLQUFMLENBQVcvZSxPQUFYLEVBQXBCLENBQVg7QUFDQXpwQyxZQUFNLEdBQUcsS0FBS3dvRCxLQUFMLENBQVc5VixLQUFYLEdBQW1CMXlDLE1BQTVCO0FBQ0E4dUQsZUFBUyxHQUFHOTBCLFFBQVEsSUFBSXlRLFFBQVEsQ0FBQ29qQixPQUF4QixHQUFrQzd6QixRQUFRLElBQUl5USxRQUFRLENBQUNvakIsT0FBaEU7QUFDQTs7QUFFRCxXQUFPN3pCLFFBQVA7QUFDQSxHQWhCRDtBQWtCQTs7Ozs7OztBQUtBNnlCLFlBQVUsQ0FBQ2x0RCxTQUFYLENBQXFCd1gsSUFBckIsR0FBNEIsVUFBUzhxQixLQUFULEVBQWdCO0FBQzNDNTNCLEtBQUMsQ0FBQzhtQyxLQUFGLENBQVEsS0FBSytiLFVBQUwsQ0FBZ0I3cUIsRUFBeEIsRUFBNEIsS0FBS21tQixLQUFqQyxFQUF3QyxLQUFLM1IsV0FBTCxDQUFpQixJQUFqQixDQUF4QyxFQUFnRTVVLEtBQWhFO0FBQ0EsR0FGRDtBQUlBOzs7Ozs7O0FBS0E0cUIsWUFBVSxDQUFDbHRELFNBQVgsQ0FBcUIwa0IsSUFBckIsR0FBNEIsVUFBUzRkLEtBQVQsRUFBZ0I7QUFDM0M1M0IsS0FBQyxDQUFDOG1DLEtBQUYsQ0FBUSxLQUFLK2IsVUFBTCxDQUFnQjdxQixFQUF4QixFQUE0QixLQUFLbW1CLEtBQWpDLEVBQXdDLEtBQUszUixXQUFMLENBQWlCLEtBQWpCLENBQXhDLEVBQWlFNVUsS0FBakU7QUFDQSxHQUZEO0FBSUE7Ozs7Ozs7OztBQU9BNHFCLFlBQVUsQ0FBQ2x0RCxTQUFYLENBQXFCMGlDLEVBQXJCLEdBQTBCLFVBQVNySSxRQUFULEVBQW1CaUksS0FBbkIsRUFBMEI4c0IsUUFBMUIsRUFBb0M7QUFDN0QsUUFBSS91RCxNQUFKOztBQUVBLFFBQUksQ0FBQyt1RCxRQUFELElBQWEsS0FBS2hDLE1BQUwsQ0FBWS9zRCxNQUE3QixFQUFxQztBQUNwQ0EsWUFBTSxHQUFHLEtBQUsrc0QsTUFBTCxDQUFZL3NELE1BQXJCO0FBQ0FxSyxPQUFDLENBQUM4bUMsS0FBRixDQUFRLEtBQUsrYixVQUFMLENBQWdCN3FCLEVBQXhCLEVBQTRCLEtBQUttbUIsS0FBakMsRUFBd0MsS0FBS3VFLE1BQUwsQ0FBWSxDQUFFL3lCLFFBQVEsR0FBR2g2QixNQUFaLEdBQXNCQSxNQUF2QixJQUFpQ0EsTUFBN0MsRUFBcUQrZCxLQUE3RixFQUFvR2trQixLQUFwRztBQUNBLEtBSEQsTUFHTztBQUNONTNCLE9BQUMsQ0FBQzhtQyxLQUFGLENBQVEsS0FBSytiLFVBQUwsQ0FBZ0I3cUIsRUFBeEIsRUFBNEIsS0FBS21tQixLQUFqQyxFQUF3Q3h1QixRQUF4QyxFQUFrRGlJLEtBQWxEO0FBQ0E7QUFDRCxHQVREOztBQVdBNTNCLEdBQUMsQ0FBQ3VELEVBQUYsQ0FBS3M2QyxXQUFMLENBQWlCRSxXQUFqQixDQUE2QnZILE9BQTdCLENBQXFDZ00sVUFBckMsR0FBa0RBLFVBQWxEO0FBRUEsQ0E5WUEsRUE4WUV4dEQsTUFBTSxDQUFDZ3BELEtBQVAsSUFBZ0JocEQsTUFBTSxDQUFDeUcsTUE5WXpCLEVBOFlpQ3pHLE1BOVlqQyxFQThZeUM0RCxRQTlZekM7QUFnWkQ7Ozs7Ozs7OztBQU9BOztBQUFDLENBQUMsVUFBU29ILENBQVQsRUFBWWhMLE1BQVosRUFBb0I0RCxRQUFwQixFQUE4QlAsU0FBOUIsRUFBeUM7QUFDMUM7QUFFQTs7Ozs7O0FBS0EsTUFBSXNzRCxJQUFJLEdBQUcsVUFBU3pHLFFBQVQsRUFBbUI7QUFDN0I7Ozs7O0FBS0EsU0FBS0MsS0FBTCxHQUFhRCxRQUFiO0FBRUE7Ozs7OztBQUtBLFNBQUswRyxPQUFMLEdBQWUsRUFBZjtBQUVBOzs7OztBQUlBLFNBQUtyVSxRQUFMLEdBQWdCLEtBQUs0TixLQUFMLENBQVc1TixRQUEzQjtBQUVBOzs7Ozs7QUFLQSxTQUFLNkUsU0FBTCxHQUFpQjtBQUNoQixrQ0FBNEJwMUMsQ0FBQyxDQUFDOG1DLEtBQUYsQ0FBUSxVQUFTOTVCLENBQVQsRUFBWTtBQUMvQyxZQUFJQSxDQUFDLENBQUM5UixTQUFGLElBQWUsS0FBS2lqRCxLQUFMLENBQVcvZCxRQUFYLENBQW9Cc1gsYUFBcEIsS0FBc0MsU0FBekQsRUFBb0U7QUFDbkUxM0MsV0FBQyxDQUFDaEwsTUFBRCxDQUFELENBQVVrMEIsT0FBVixDQUFrQiwyQkFBbEI7QUFDQTtBQUNELE9BSjJCLEVBSXpCLElBSnlCLENBRFo7QUFNaEIsK0JBQXlCbHBCLENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsVUFBUzk1QixDQUFULEVBQVk7QUFDNUMsWUFBSUEsQ0FBQyxDQUFDOVIsU0FBTixFQUFpQjtBQUNoQixjQUFJcVosSUFBSSxHQUFHdlUsQ0FBQyxDQUFDZ04sQ0FBQyxDQUFDK04sT0FBSCxDQUFELENBQWF2SyxJQUFiLENBQWtCLGFBQWxCLEVBQWlDK0osT0FBakMsQ0FBeUMsYUFBekMsRUFBd0Q3ZSxJQUF4RCxDQUE2RCxXQUE3RCxDQUFYOztBQUVBLGNBQUksQ0FBQzZZLElBQUwsRUFBVztBQUNWO0FBQ0E7O0FBRUQsZUFBS3F3QyxPQUFMLENBQWFyd0MsSUFBYixJQUFxQnZILENBQUMsQ0FBQytOLE9BQXZCO0FBQ0E7QUFDRCxPQVZ3QixFQVV0QixJQVZzQixDQU5UO0FBaUJoQiw4QkFBd0IvYSxDQUFDLENBQUM4bUMsS0FBRixDQUFRLFVBQVM5NUIsQ0FBVCxFQUFZO0FBQzNDLFlBQUlBLENBQUMsQ0FBQzlSLFNBQUYsSUFBZThSLENBQUMsQ0FBQ3d1QyxRQUFGLENBQVd0MEMsSUFBWCxLQUFvQixVQUF2QyxFQUFtRDtBQUNsRCxjQUFJazRCLE9BQU8sR0FBRyxLQUFLK2UsS0FBTCxDQUFXOVYsS0FBWCxDQUFpQixLQUFLOFYsS0FBTCxDQUFXM3JDLFFBQVgsQ0FBb0IsS0FBSzJyQyxLQUFMLENBQVcvZSxPQUFYLEVBQXBCLENBQWpCLENBQWQ7QUFBQSxjQUNDN3FCLElBQUksR0FBR3ZVLENBQUMsQ0FBQ3NHLEdBQUYsQ0FBTSxLQUFLcytDLE9BQVgsRUFBb0IsVUFBUy9iLElBQVQsRUFBZXQwQixJQUFmLEVBQXFCO0FBQy9DLG1CQUFPczBCLElBQUksS0FBS3pKLE9BQVQsR0FBbUI3cUIsSUFBbkIsR0FBMEIsSUFBakM7QUFDQSxXQUZNLEVBRUpyRyxJQUZJLEVBRFI7O0FBS0EsY0FBSSxDQUFDcUcsSUFBRCxJQUFTdmYsTUFBTSxDQUFDd2YsUUFBUCxDQUFnQkQsSUFBaEIsQ0FBcUJuZCxLQUFyQixDQUEyQixDQUEzQixNQUFrQ21kLElBQS9DLEVBQXFEO0FBQ3BEO0FBQ0E7O0FBRUR2ZixnQkFBTSxDQUFDd2YsUUFBUCxDQUFnQkQsSUFBaEIsR0FBdUJBLElBQXZCO0FBQ0E7QUFDRCxPQWJ1QixFQWFyQixJQWJxQjtBQWpCUixLQUFqQixDQTFCNkIsQ0EyRDdCOztBQUNBLFNBQUs0cEMsS0FBTCxDQUFXdmlELE9BQVgsR0FBcUJvRSxDQUFDLENBQUN2SSxNQUFGLENBQVMsRUFBVCxFQUFha3RELElBQUksQ0FBQ3hQLFFBQWxCLEVBQTRCLEtBQUtnSixLQUFMLENBQVd2aUQsT0FBdkMsQ0FBckIsQ0E1RDZCLENBOEQ3Qjs7QUFDQSxTQUFLMjBDLFFBQUwsQ0FBY3A2QyxFQUFkLENBQWlCLEtBQUtpL0MsU0FBdEIsRUEvRDZCLENBaUU3Qjs7QUFDQXAxQyxLQUFDLENBQUNoTCxNQUFELENBQUQsQ0FBVW1CLEVBQVYsQ0FBYSwyQkFBYixFQUEwQzZKLENBQUMsQ0FBQzhtQyxLQUFGLENBQVEsVUFBUzk1QixDQUFULEVBQVk7QUFDN0QsVUFBSXVILElBQUksR0FBR3ZmLE1BQU0sQ0FBQ3dmLFFBQVAsQ0FBZ0JELElBQWhCLENBQXFCc3dDLFNBQXJCLENBQStCLENBQS9CLENBQVg7QUFBQSxVQUNDeGMsS0FBSyxHQUFHLEtBQUs4VixLQUFMLENBQVc1RSxNQUFYLENBQWtCbDRDLFFBQWxCLEVBRFQ7QUFBQSxVQUVDc3VCLFFBQVEsR0FBRyxLQUFLaTFCLE9BQUwsQ0FBYXJ3QyxJQUFiLEtBQXNCOHpCLEtBQUssQ0FBQ3J4QyxLQUFOLENBQVksS0FBSzR0RCxPQUFMLENBQWFyd0MsSUFBYixDQUFaLENBRmxDOztBQUlBLFVBQUlvYixRQUFRLEtBQUt0M0IsU0FBYixJQUEwQnMzQixRQUFRLEtBQUssS0FBS3d1QixLQUFMLENBQVcvZSxPQUFYLEVBQTNDLEVBQWlFO0FBQ2hFO0FBQ0E7O0FBRUQsV0FBSytlLEtBQUwsQ0FBV25tQixFQUFYLENBQWMsS0FBS21tQixLQUFMLENBQVczckMsUUFBWCxDQUFvQm1kLFFBQXBCLENBQWQsRUFBNkMsS0FBN0MsRUFBb0QsSUFBcEQ7QUFDQSxLQVZ5QyxFQVV2QyxJQVZ1QyxDQUExQztBQVdBLEdBN0VEO0FBK0VBOzs7Ozs7QUFJQWcxQixNQUFJLENBQUN4UCxRQUFMLEdBQWdCO0FBQ2YyUCxtQkFBZSxFQUFFO0FBREYsR0FBaEI7QUFJQTs7Ozs7QUFJQUgsTUFBSSxDQUFDcnZELFNBQUwsQ0FBZTY2QyxPQUFmLEdBQXlCLFlBQVc7QUFDbkMsUUFBSXBoQyxPQUFKLEVBQWF5c0MsUUFBYjtBQUVBeDdDLEtBQUMsQ0FBQ2hMLE1BQUQsQ0FBRCxDQUFVK0IsR0FBVixDQUFjLDJCQUFkOztBQUVBLFNBQUtnWSxPQUFMLElBQWdCLEtBQUtxbUMsU0FBckIsRUFBZ0M7QUFDL0IsV0FBSytJLEtBQUwsQ0FBVzVOLFFBQVgsQ0FBb0J4NUMsR0FBcEIsQ0FBd0JnWSxPQUF4QixFQUFpQyxLQUFLcW1DLFNBQUwsQ0FBZXJtQyxPQUFmLENBQWpDO0FBQ0E7O0FBQ0QsU0FBS3lzQyxRQUFMLElBQWlCOTZDLE1BQU0sQ0FBQ2krQyxtQkFBUCxDQUEyQixJQUEzQixDQUFqQixFQUFtRDtBQUNsRCxhQUFPLEtBQUtuRCxRQUFMLENBQVAsSUFBeUIsVUFBekIsS0FBd0MsS0FBS0EsUUFBTCxJQUFpQixJQUF6RDtBQUNBO0FBQ0QsR0FYRDs7QUFhQXg3QyxHQUFDLENBQUN1RCxFQUFGLENBQUtzNkMsV0FBTCxDQUFpQkUsV0FBakIsQ0FBNkJ2SCxPQUE3QixDQUFxQ21PLElBQXJDLEdBQTRDQSxJQUE1QztBQUVBLENBbEhBLEVBa0hFM3ZELE1BQU0sQ0FBQ2dwRCxLQUFQLElBQWdCaHBELE1BQU0sQ0FBQ3lHLE1BbEh6QixFQWtIaUN6RyxNQWxIakMsRUFrSHlDNEQsUUFsSHpDO0FBb0hEOzs7Ozs7Ozs7OztBQVNBOztBQUFDLENBQUMsVUFBU29ILENBQVQsRUFBWWhMLE1BQVosRUFBb0I0RCxRQUFwQixFQUE4QlAsU0FBOUIsRUFBeUM7QUFFMUMsTUFBSWtGLEtBQUssR0FBR3lDLENBQUMsQ0FBQyxXQUFELENBQUQsQ0FBZWdHLEdBQWYsQ0FBbUIsQ0FBbkIsRUFBc0J6SSxLQUFsQztBQUFBLE1BQ0M5SCxRQUFRLEdBQUcsa0JBQWtCaVQsS0FBbEIsQ0FBd0IsR0FBeEIsQ0FEWjtBQUFBLE1BRUNwUyxNQUFNLEdBQUc7QUFDUmkxQyxjQUFVLEVBQUU7QUFDWHZrQyxTQUFHLEVBQUU7QUFDSjJrQyx3QkFBZ0IsRUFBRSxxQkFEZDtBQUVKb1oscUJBQWEsRUFBRSxlQUZYO0FBR0pDLG1CQUFXLEVBQUUsZ0JBSFQ7QUFJSnpaLGtCQUFVLEVBQUU7QUFKUjtBQURNLEtBREo7QUFTUnhWLGFBQVMsRUFBRTtBQUNWL3VCLFNBQUcsRUFBRTtBQUNKaStDLHVCQUFlLEVBQUUsb0JBRGI7QUFFSkMsb0JBQVksRUFBRSxjQUZWO0FBR0pDLGtCQUFVLEVBQUUsZUFIUjtBQUlKcHZCLGlCQUFTLEVBQUU7QUFKUDtBQURLO0FBVEgsR0FGVjtBQUFBLE1Bb0JDcXZCLEtBQUssR0FBRztBQUNQQyxpQkFBYSxFQUFFLFlBQVc7QUFDekIsYUFBTyxDQUFDLENBQUN2M0MsSUFBSSxDQUFDLFdBQUQsQ0FBYjtBQUNBLEtBSE07QUFJUHczQyxtQkFBZSxFQUFFLFlBQVc7QUFDM0IsYUFBTyxDQUFDLENBQUN4M0MsSUFBSSxDQUFDLGFBQUQsQ0FBYjtBQUNBLEtBTk07QUFPUHkzQyxrQkFBYyxFQUFFLFlBQVc7QUFDMUIsYUFBTyxDQUFDLENBQUN6M0MsSUFBSSxDQUFDLFlBQUQsQ0FBYjtBQUNBLEtBVE07QUFVUDAzQyxpQkFBYSxFQUFFLFlBQVc7QUFDekIsYUFBTyxDQUFDLENBQUMxM0MsSUFBSSxDQUFDLFdBQUQsQ0FBYjtBQUNBO0FBWk0sR0FwQlQ7O0FBbUNBLFdBQVNBLElBQVQsQ0FBYzB0QyxRQUFkLEVBQXdCaUssUUFBeEIsRUFBa0M7QUFDakMsUUFBSTF5QyxNQUFNLEdBQUcsS0FBYjtBQUFBLFFBQ0N3eEMsS0FBSyxHQUFHL0ksUUFBUSxDQUFDOUUsTUFBVCxDQUFnQixDQUFoQixFQUFtQnQyQixXQUFuQixLQUFtQ283QixRQUFRLENBQUNwa0QsS0FBVCxDQUFlLENBQWYsQ0FENUM7QUFHQTRJLEtBQUMsQ0FBQ3FHLElBQUYsQ0FBTyxDQUFDbTFDLFFBQVEsR0FBRyxHQUFYLEdBQWlCL2xELFFBQVEsQ0FBQ3lZLElBQVQsQ0FBY3EyQyxLQUFLLEdBQUcsR0FBdEIsQ0FBakIsR0FBOENBLEtBQS9DLEVBQXNENzdDLEtBQXRELENBQTRELEdBQTVELENBQVAsRUFBeUUsVUFBU2hULENBQVQsRUFBWThsRCxRQUFaLEVBQXNCO0FBQzlGLFVBQUlqK0MsS0FBSyxDQUFDaStDLFFBQUQsQ0FBTCxLQUFvQm5qRCxTQUF4QixFQUFtQztBQUNsQzBhLGNBQU0sR0FBRzB5QyxRQUFRLEdBQUdqSyxRQUFILEdBQWMsSUFBL0I7QUFDQSxlQUFPLEtBQVA7QUFDQTtBQUNELEtBTEQ7QUFPQSxXQUFPem9DLE1BQVA7QUFDQTs7QUFFRCxXQUFTMHlDLFFBQVQsQ0FBa0JqSyxRQUFsQixFQUE0QjtBQUMzQixXQUFPMXRDLElBQUksQ0FBQzB0QyxRQUFELEVBQVcsSUFBWCxDQUFYO0FBQ0E7O0FBRUQsTUFBSTRKLEtBQUssQ0FBQ0csY0FBTixFQUFKLEVBQTRCO0FBQzNCO0FBQ0F2bEQsS0FBQyxDQUFDMEUsT0FBRixDQUFVNm1DLFVBQVYsR0FBdUIsSUFBSXIvQixNQUFKLENBQVd1NUMsUUFBUSxDQUFDLFlBQUQsQ0FBbkIsQ0FBdkI7QUFDQXpsRCxLQUFDLENBQUMwRSxPQUFGLENBQVU2bUMsVUFBVixDQUFxQnZrQyxHQUFyQixHQUEyQjFRLE1BQU0sQ0FBQ2kxQyxVQUFQLENBQWtCdmtDLEdBQWxCLENBQXVCaEgsQ0FBQyxDQUFDMEUsT0FBRixDQUFVNm1DLFVBQWpDLENBQTNCO0FBQ0E7O0FBRUQsTUFBSTZaLEtBQUssQ0FBQ0ksYUFBTixFQUFKLEVBQTJCO0FBQzFCO0FBQ0F4bEQsS0FBQyxDQUFDMEUsT0FBRixDQUFVcXhCLFNBQVYsR0FBc0IsSUFBSTdwQixNQUFKLENBQVd1NUMsUUFBUSxDQUFDLFdBQUQsQ0FBbkIsQ0FBdEI7QUFDQXpsRCxLQUFDLENBQUMwRSxPQUFGLENBQVVxeEIsU0FBVixDQUFvQi91QixHQUFwQixHQUEwQjFRLE1BQU0sQ0FBQ3kvQixTQUFQLENBQWlCL3VCLEdBQWpCLENBQXNCaEgsQ0FBQyxDQUFDMEUsT0FBRixDQUFVcXhCLFNBQWhDLENBQTFCO0FBQ0E7O0FBRUQsTUFBSXF2QixLQUFLLENBQUNDLGFBQU4sRUFBSixFQUEyQjtBQUMxQjtBQUNBcmxELEtBQUMsQ0FBQzBFLE9BQUYsQ0FBVSttQyxTQUFWLEdBQXNCLElBQUl2L0IsTUFBSixDQUFXdTVDLFFBQVEsQ0FBQyxXQUFELENBQW5CLENBQXRCO0FBQ0F6bEQsS0FBQyxDQUFDMEUsT0FBRixDQUFVNjNDLFdBQVYsR0FBd0I2SSxLQUFLLENBQUNFLGVBQU4sRUFBeEI7QUFDQTtBQUVELENBekVBLEVBeUVFdHdELE1BQU0sQ0FBQ2dwRCxLQUFQLElBQWdCaHBELE1BQU0sQ0FBQ3lHLE1BekV6QixFQXlFaUN6RyxNQXpFakMsRUF5RXlDNEQsUUF6RXpDLEU7Ozs7Ozs7Ozs7OztBQzl5R0Q7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7O0FDTEE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUVPLElBQU04c0QsVUFBVSxHQUFHLFNBQWJBLFVBQWEsR0FBTTtBQUM5QixNQUFNNXZELElBQUksR0FBRzhDLFFBQVEsQ0FBQ0csYUFBVCxDQUF1QixzQkFBdkIsQ0FBYjtBQUNBeUsscURBQVksQ0FBRTFOLElBQUYsRUFBUSxVQUFVbUcsUUFBVixFQUFxQjtBQUN6QyxRQUFNMHBELEtBQUssR0FBRyxJQUFJbmUscURBQUosQ0FBYTF4QyxJQUFiLEVBQW1CO0FBQy9CO0FBQ0E2N0Msa0JBQVksRUFBRSx1QkFGaUI7QUFHL0JuSixZQUFNLEVBQUUsRUFIdUI7QUFJL0I4RSxxQkFBZSxFQUFFO0FBSmMsS0FBbkIsQ0FBZDtBQU1ELEdBUGEsQ0FBWjtBQVFELENBVk0sQyxDQVlQOztBQUNBOXBDLG1EQUFZLENBQUU1SyxRQUFRLENBQUNHLGFBQVQsQ0FBdUIsc0JBQXZCLENBQUYsRUFBa0QsVUFBVWtELFFBQVYsRUFBcUI7QUFDakZsQixTQUFPLENBQUN5SCxHQUFSLENBQVksdUJBQVo7QUFDQWtqRCxZQUFVO0FBQ1gsQ0FIVyxDQUFaO0FBS0E5c0QsUUFBUSxDQUFDMkIsZ0JBQVQsQ0FBMEIsa0JBQTFCLEVBQThDLFVBQVN0QixLQUFULEVBQWdCO0FBQzVEdUsscURBQVksQ0FBRTVLLFFBQVEsQ0FBQ0csYUFBVCxDQUF1QixzQkFBdkIsQ0FBRixFQUFrRCxVQUFVa0QsUUFBVixFQUFxQjtBQUNuRnlwRCxjQUFVO0FBQ1gsR0FGYSxDQUFaO0FBR0QsQ0FKRCxFOzs7Ozs7Ozs7Ozs7QUNyQkE7QUFBQTtBQUFBO0FBQUE7QUFFQTFsRCw2Q0FBQyxDQUFDLG9CQUFELENBQUQsQ0FBd0I3SixFQUF4QixDQUEyQixZQUEzQixFQUF3Qyx5QkFBeEMsRUFBbUUsVUFBQzZXLENBQUQsRUFBTztBQUN0RWhOLCtDQUFDLENBQUNnTixDQUFDLENBQUMrYSxhQUFILENBQUQsQ0FBbUJzUyxRQUFuQixDQUE0QixNQUE1QjtBQUNILENBRkQ7QUFHQXI2Qiw2Q0FBQyxDQUFDLG9CQUFELENBQUQsQ0FBd0I3SixFQUF4QixDQUEyQixZQUEzQixFQUF3Qyx5QkFBeEMsRUFBbUUsVUFBQzZXLENBQUQsRUFBTztBQUN0RWhOLCtDQUFDLENBQUNnTixDQUFDLENBQUMrYSxhQUFILENBQUQsQ0FBbUIyUyxXQUFuQixDQUErQixNQUEvQjtBQUNILENBRkQsRSxDQUlBOztBQUNBLElBQU1rckIsbUJBQW1CLEdBQUdodEQsUUFBUSxDQUFDRyxhQUFULENBQXVCLHlCQUF2QixDQUE1QjtBQUNBLElBQU04c0QsZ0JBQWdCLEdBQUdqdEQsUUFBUSxDQUFDRyxhQUFULENBQXVCLHNCQUF2QixDQUF6Qjs7QUFFQSxJQUFJNnNELG1CQUFtQixJQUFJQyxnQkFBM0IsRUFBNkM7QUFDekNELHFCQUFtQixDQUFDRSxPQUFwQixHQUE4QixVQUFDN3NELEtBQUQsRUFBVztBQUNyQyxRQUFNMlYsRUFBRSxHQUFHM1YsS0FBSyxDQUFDcU8sTUFBakI7O0FBQ0EsUUFBSXNILEVBQUUsQ0FBQ20zQyxPQUFILENBQVd6aUIsSUFBWCxLQUFvQixPQUF4QixFQUFpQztBQUM3QjEwQixRQUFFLENBQUNtM0MsT0FBSCxDQUFXemlCLElBQVgsR0FBa0IsSUFBbEI7QUFDQXVpQixzQkFBZ0IsQ0FBQ0csU0FBakIsQ0FBMkIxckMsR0FBM0IsQ0FBK0IsTUFBL0I7QUFFSCxLQUpELE1BSU87QUFDSDFMLFFBQUUsQ0FBQ20zQyxPQUFILENBQVd6aUIsSUFBWCxHQUFrQixLQUFsQjtBQUNBdWlCLHNCQUFnQixDQUFDRyxTQUFqQixDQUEyQmpxQyxNQUEzQixDQUFrQyxNQUFsQztBQUNIO0FBQ0osR0FWRDtBQVdIOztBQUVELElBQU1rcUMsd0JBQXdCLEdBQUdydEQsUUFBUSxDQUFDRyxhQUFULENBQXVCLDZCQUF2QixDQUFqQztBQUNBLElBQU1tdEQsa0JBQWtCLEdBQUdELHdCQUF3QixJQUFJQSx3QkFBd0IsQ0FBQ2x0RCxhQUF6QixDQUF1QyxJQUF2QyxDQUF2RDtBQUNBLElBQU1vdEQsU0FBUyxHQUFHRCxrQkFBa0IsSUFBSUEsa0JBQWtCLENBQUN6c0QsZ0JBQW5CLENBQW9DLElBQXBDLENBQXhDO0FBRUEsSUFBSTJzRCxXQUFXLEdBQUcsQ0FBbEI7O0FBQ0EsSUFBSUQsU0FBUyxJQUFJQSxTQUFTLENBQUN4d0QsTUFBM0IsRUFBbUM7QUFDL0J5d0QsYUFBVyxHQUFHbnVELEtBQUssQ0FBQ3UyQyxJQUFOLENBQVcyWCxTQUFYLEVBQXNCNy9DLEdBQXRCLENBQTBCLFVBQUFzSSxFQUFFLEVBQUk7QUFDMUMsV0FBTztBQUNIN1IsV0FBSyxFQUFFNlIsRUFBRSxDQUFDNGtCLHFCQUFILEdBQTJCejJCLEtBRC9CO0FBRUg2UixRQUFFLEVBQUZBO0FBRkcsS0FBUDtBQUlILEdBTGEsQ0FBZDtBQU1IOztBQUVELElBQU15M0MsY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixHQUFNO0FBQ3pCO0FBQ0EsTUFBTUMsWUFBWSxHQUFHMXRELFFBQVEsQ0FBQ0csYUFBVCxDQUF1QixrQkFBdkIsQ0FBckI7QUFDQSxNQUFNd3RELFNBQVMsR0FBRzN0RCxRQUFRLENBQUNHLGFBQVQsQ0FBdUIsY0FBdkIsQ0FBbEI7QUFDQSxNQUFNeXRELFNBQVMsR0FBR1Asd0JBQXdCLElBQ3RDTSxTQURKOztBQUdBLE1BQUlELFlBQUosRUFBa0I7QUFDZEEsZ0JBQVksQ0FBQ3ZxQyxNQUFiO0FBQ0g7O0FBRUQsTUFBSXlxQyxTQUFKLEVBQWU7QUFDWCxRQUFNQyxrQkFBa0IsR0FBR0YsU0FBUyxDQUFDL3lCLHFCQUFWLEdBQWtDejJCLEtBQWxDLEdBQTBDLEdBQXJFO0FBQ0EsUUFBTTJwRCxXQUFXLEdBQUc7QUFDaEIsaUJBQVcsRUFESztBQUVoQixnQkFBVTtBQUZNLEtBQXBCO0FBS0EsUUFBSUMsUUFBUSxHQUFHLENBQWY7QUFDQVAsZUFBVyxDQUFDOXNELE9BQVosQ0FBb0IsVUFBQXN0RCxLQUFLLEVBQUk7QUFDekJELGNBQVEsSUFBSUMsS0FBSyxDQUFDN3BELEtBQWxCOztBQUNBLFVBQUk0cEQsUUFBUSxHQUFHRixrQkFBZixFQUFtQztBQUMvQkMsbUJBQVcsQ0FBQyxTQUFELENBQVgsQ0FBdUJod0QsSUFBdkIsQ0FBNEJrd0QsS0FBSyxDQUFDaDRDLEVBQWxDO0FBQ0gsT0FGRCxNQUVPO0FBQ0g4M0MsbUJBQVcsQ0FBQyxRQUFELENBQVgsQ0FBc0Jod0QsSUFBdEIsQ0FBMkJrd0QsS0FBSyxDQUFDaDRDLEVBQWpDO0FBQ0g7QUFDSixLQVBEO0FBU0FzM0Msc0JBQWtCLENBQUNyMUMsU0FBbkIsR0FBK0IsRUFBL0I7QUFDQW5RLFVBQU0sQ0FBQzJOLElBQVAsQ0FBWXE0QyxXQUFaLEVBQXlCcHRELE9BQXpCLENBQWlDLFVBQUFpVixHQUFHLEVBQUk7QUFDcEMsVUFBSSxDQUFDQSxHQUFMLEVBQVU7QUFDTjtBQUNIOztBQUVELFVBQUlBLEdBQUcsS0FBSyxTQUFaLEVBQXVCO0FBQ25CbTRDLG1CQUFXLENBQUNuNEMsR0FBRCxDQUFYLENBQWlCalYsT0FBakIsQ0FBeUIsVUFBQXNWLEVBQUUsRUFBSTtBQUMzQnMzQyw0QkFBa0IsQ0FBQ2hvRCxXQUFuQixDQUErQjBRLEVBQS9CO0FBQ0gsU0FGRDtBQUdILE9BSkQsTUFJTztBQUNILFlBQUk4M0MsV0FBVyxDQUFDbjRDLEdBQUQsQ0FBWCxDQUFpQjVZLE1BQWpCLEdBQTBCLENBQTlCLEVBQWlDO0FBQzdCO0FBQ0g7O0FBQ0QsWUFBTWt4RCxNQUFNLEdBQUdqdUQsUUFBUSxDQUFDZ0YsYUFBVCxDQUF1QixJQUF2QixDQUFmO0FBQ0FpcEQsY0FBTSxDQUFDYixTQUFQLENBQWlCMXJDLEdBQWpCLENBQXFCLFdBQXJCLEVBQWtDLGlCQUFsQztBQUNBLFlBQU13c0MsUUFBUSxHQUFHbHVELFFBQVEsQ0FBQ2dGLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBakI7O0FBQ0FrcEQsZ0JBQVEsQ0FBQ2hCLE9BQVQsR0FBbUIsVUFBQTk0QyxDQUFDO0FBQUEsaUJBQUlBLENBQUMsQ0FBQ2tiLGNBQUYsRUFBSjtBQUFBLFNBQXBCOztBQUNBLFlBQU02K0IsT0FBTyxHQUFHbnVELFFBQVEsQ0FBQ2dGLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBaEI7QUFDQW1wRCxlQUFPLENBQUNmLFNBQVIsQ0FBa0IxckMsR0FBbEIsQ0FBc0IsS0FBdEIsRUFBNkIsaUJBQTdCO0FBQ0EsWUFBTWhWLElBQUksR0FBRzFNLFFBQVEsQ0FBQzhzQixjQUFULENBQXdCLEtBQXhCLENBQWI7QUFDQW9oQyxnQkFBUSxDQUFDNW9ELFdBQVQsQ0FBcUJvSCxJQUFyQjtBQUNBd2hELGdCQUFRLENBQUM1b0QsV0FBVCxDQUFxQjZvRCxPQUFyQjtBQUNBRixjQUFNLENBQUMzb0QsV0FBUCxDQUFtQjRvRCxRQUFuQjs7QUFHQSxZQUFJLENBQUNELE1BQUwsRUFBYTtBQUNUO0FBQ0g7O0FBQ0RBLGNBQU0sQ0FBQ3RwRCxLQUFQLENBQWFpQixPQUFiLEdBQXVCLE9BQXZCO0FBQ0EsWUFBTXdvRCxXQUFXLEdBQUdwdUQsUUFBUSxDQUFDZ0YsYUFBVCxDQUF1QixJQUF2QixDQUFwQjtBQUNBaXBELGNBQU0sQ0FBQzNvRCxXQUFQLENBQW1COG9ELFdBQW5CO0FBQ0FILGNBQU0sQ0FBQ3RwRCxLQUFQLENBQWFveUIsUUFBYixHQUF3QixVQUF4QjtBQUVBKzJCLG1CQUFXLENBQUNuNEMsR0FBRCxDQUFYLENBQWlCalYsT0FBakIsQ0FBeUIsVUFBQXNWLEVBQUUsRUFBSTtBQUMzQm80QyxxQkFBVyxDQUFDOW9ELFdBQVosQ0FBd0IwUSxFQUF4QjtBQUNILFNBRkQ7QUFHQW80QyxtQkFBVyxDQUFDaEIsU0FBWixDQUFzQjFyQyxHQUF0QixDQUEwQixvQkFBMUI7QUFDQTRyQywwQkFBa0IsQ0FBQ2hvRCxXQUFuQixDQUErQjJvRCxNQUEvQjtBQUVBQSxjQUFNLENBQUN0c0QsZ0JBQVAsQ0FBd0IsWUFBeEIsRUFBc0MsVUFBQXlTLENBQUMsRUFBSTtBQUN2Q2c2QyxxQkFBVyxDQUFDenBELEtBQVosQ0FBa0J1MEIsVUFBbEIsR0FBK0IsU0FBL0I7QUFDQWsxQixxQkFBVyxDQUFDenBELEtBQVosQ0FBa0I0MUIsT0FBbEIsR0FBNEIsR0FBNUI7QUFDSCxTQUhEO0FBS0EwekIsY0FBTSxDQUFDdHNELGdCQUFQLENBQXdCLFlBQXhCLEVBQXNDLFVBQUF5UyxDQUFDLEVBQUk7QUFDdkNnNkMscUJBQVcsQ0FBQ3pwRCxLQUFaLENBQWtCdTBCLFVBQWxCLEdBQStCLFFBQS9CO0FBQ0FrMUIscUJBQVcsQ0FBQ3pwRCxLQUFaLENBQWtCNDFCLE9BQWxCLEdBQTRCLEdBQTVCO0FBQ0gsU0FIRDtBQUtIO0FBQ0osS0FsREQ7QUFtREg7QUFDSixDQWpGRDs7QUFtRkFrekIsY0FBYztBQUVkcnhELE1BQU0sQ0FBQ3VGLGdCQUFQLENBQXdCLFFBQXhCLEVBQWtDLFlBQU07QUFDcEM4ckQsZ0JBQWM7QUFDakIsQ0FGRDs7QUFJQSxJQUFNWSxtQkFBbUIsR0FBRyxTQUF0QkEsbUJBQXNCLENBQUNDLE9BQUQsRUFBYTtBQUNyQyxNQUFNQyxtQkFBbUIsR0FBR3Z1RCxRQUFRLENBQUNHLGFBQVQsQ0FBdUIsMkJBQXZCLENBQTVCO0FBQ0EsTUFBTXF1RCxvQkFBb0IsR0FBR3h1RCxRQUFRLENBQUNHLGFBQVQsQ0FBdUIsNEJBQXZCLENBQTdCO0FBRUEsTUFBSSxDQUFDb3VELG1CQUFELElBQXdCLENBQUNDLG9CQUE3QixFQUFtRDtBQUVuRCxNQUFNQyxNQUFNLEdBQUdGLG1CQUFtQixDQUFDcEIsT0FBcEIsQ0FBNEJ6aUIsSUFBNUIsS0FBcUMsTUFBcEQ7O0FBRUE2akIscUJBQW1CLENBQUNyQixPQUFwQixHQUE4QixZQUFNO0FBQ2hDbUIsdUJBQW1CLENBQUMsSUFBRCxDQUFuQjtBQUNILEdBRkQ7O0FBSUEsTUFBSSxDQUFDQyxPQUFMLEVBQWM7QUFDVjtBQUNIOztBQUVELE1BQUksQ0FBQ0csTUFBTCxFQUFhO0FBQ1RGLHVCQUFtQixDQUFDcEIsT0FBcEIsQ0FBNEJ6aUIsSUFBNUIsR0FBbUMsTUFBbkM7QUFDQThqQix3QkFBb0IsQ0FBQzdwRCxLQUFyQixDQUEyQnUwQixVQUEzQixHQUF3QyxTQUF4QztBQUNILEdBSEQsTUFHTztBQUNIcTFCLHVCQUFtQixDQUFDcEIsT0FBcEIsQ0FBNEJ6aUIsSUFBNUIsR0FBbUMsT0FBbkM7QUFDQThqQix3QkFBb0IsQ0FBQzdwRCxLQUFyQixDQUEyQnUwQixVQUEzQixHQUF3QyxRQUF4QztBQUNIO0FBRUosQ0F4QkQ7O0FBMEJBbTFCLG1CQUFtQixHOzs7Ozs7Ozs7Ozs7QUM1Sm5CO0FBQUE7QUFBQTtBQUFBOztBQUdBLElBQU1LLFdBQVcsR0FBRyxTQUFkQSxXQUFjLEdBQU07QUFDdEIsTUFBTUMsVUFBVSxHQUFHM3VELFFBQVEsQ0FBQ0csYUFBVCxDQUF1Qiw0QkFBdkIsQ0FBbkI7O0FBRUEsTUFBSXd1RCxVQUFVLElBQUlBLFVBQVUsQ0FBQ3RoQixZQUFYLEtBQTRCLElBQTlDLEVBQW9EO0FBQ2hELFFBQU11aEIsVUFBVSxHQUFHRCxVQUFVLENBQUN4dUQsYUFBWCxDQUF5QixPQUF6QixDQUFuQjtBQUNBZCxTQUFLLENBQUN1MkMsSUFBTixDQUFXZ1osVUFBVSxDQUFDL3RELGdCQUFYLENBQTRCLElBQTVCLENBQVgsRUFBOENILE9BQTlDLENBQXNELFVBQUFzVixFQUFFLEVBQUk7QUFDeEQsVUFBTTdSLEtBQUssR0FBRzZSLEVBQUUsQ0FBQzdWLGFBQUgsQ0FBaUIsR0FBakIsRUFBc0IwRixXQUFwQztBQUNBbVEsUUFBRSxDQUFDckosWUFBSCxDQUFnQixPQUFoQixtQkFBbUN4SSxLQUFuQztBQUNILEtBSEQ7QUFJQXRCLFVBQU0sQ0FBQytyRCxVQUFELENBQU4sQ0FBbUIzSixXQUFuQixDQUErQjtBQUMzQmxxQixZQUFNLEVBQUUsRUFEbUI7QUFFM0JvakIsVUFBSSxFQUFFLElBRnFCO0FBRzNCVSxlQUFTLEVBQUU7QUFIZ0IsS0FBL0I7QUFLSDtBQUNKLENBZkQ7O0FBaUJBNlAsV0FBVztBQUdYdHlELE1BQU0sQ0FBQ3VGLGdCQUFQLENBQXdCLFFBQXhCLEVBQWtDLFlBQU07QUFDcEMrc0QsYUFBVztBQUNkLENBRkQsRSxDQUlBOztBQUNBLElBQU1HLGNBQWMsR0FBRzd1RCxRQUFRLENBQUNHLGFBQVQsQ0FBdUIscUJBQXZCLENBQXZCOztBQUVBLElBQUkwdUQsY0FBSixFQUFvQjtBQUNoQmhzRCxRQUFNLENBQUNnc0QsY0FBRCxDQUFOLENBQXVCNUosV0FBdkIsQ0FBbUM7QUFDL0I5RyxRQUFJLEVBQUUsSUFEeUI7QUFFL0JwakIsVUFBTSxFQUFFLEVBRnVCO0FBRy9CMFUsU0FBSyxFQUFFLENBSHdCO0FBSS9CdVEsbUJBQWUsRUFBRSxJQUpjO0FBSy9COEssUUFBSSxFQUFFLElBTHlCO0FBTS9CQyxZQUFRLEVBQUUsSUFOcUI7QUFPL0I1TCxjQUFVLEVBQUU7QUFDUixTQUFHO0FBQ0MxUCxhQUFLLEVBQUUsQ0FEUjtBQUVDNGEsV0FBRyxFQUFFLEtBRk47QUFHQ1MsWUFBSSxFQUFFO0FBSFAsT0FESztBQU1SLFdBQUs7QUFDRHJiLGFBQUssRUFBRSxDQUROO0FBRUQ0YSxXQUFHLEVBQUUsS0FGSjtBQUdEVSxnQkFBUSxFQUFFO0FBSFQsT0FORztBQVdSLFlBQU07QUFDRnRiLGFBQUssRUFBRSxDQURMO0FBRUY0YSxXQUFHLEVBQUUsSUFGSDtBQUdGbE0sWUFBSSxFQUFFLEtBSEo7QUFJRjRNLGdCQUFRLEVBQUU7QUFKUjtBQVhFO0FBUG1CLEdBQW5DO0FBMEJILEM7Ozs7Ozs7Ozs7OztBQ3pERDtBQUFBO0FBQUE7QUFBQTtBQUdFM2pELDZDQUFDLENBQUMsZ0JBQUQsQ0FBRCxDQUFvQmdwQixLQUFwQixDQUEwQixZQUFVO0FBQ2xDaHBCLCtDQUFDLENBQUMsbUJBQUQsQ0FBRCxDQUF1QjI2QixXQUF2QixDQUFtQyxvQkFBbkMsRUFBeURBLFdBQXpELENBQXFFLHFCQUFyRTtBQUNELENBRkQ7QUFHQTM2Qiw2Q0FBQyxDQUFDLGlCQUFELENBQUQsQ0FBcUJncEIsS0FBckIsQ0FBMkIsWUFBVTtBQUNuQ2hwQiwrQ0FBQyxDQUFDLG1CQUFELENBQUQsQ0FBdUIyNkIsV0FBdkIsQ0FBbUMsb0JBQW5DLEVBQXlEQSxXQUF6RCxDQUFxRSxxQkFBckU7QUFDSCxDQUZDO0FBSUYzNkIsNkNBQUMsQ0FBQyx1Q0FBRCxDQUFELENBQTJDZ3BCLEtBQTNDLENBQWlELFVBQVNoYyxDQUFULEVBQVc7QUFFeEQsTUFBSTA2QyxHQUFHLEdBQUcsNkRBQVY7QUFFQSxNQUFJQyxPQUFPLEdBQUkzbkQsNkNBQUMsQ0FBQyxzQ0FBRCxDQUFELENBQTBDb0YsR0FBMUMsRUFBZjtBQUNBNEgsR0FBQyxDQUFDa2IsY0FBRixHQUx3RCxDQUtwQzs7QUFDcEIsTUFBR3cvQixHQUFHLENBQUM1NUMsSUFBSixDQUFTNjVDLE9BQVQsS0FBcUIsS0FBeEIsRUFBK0I7QUFDM0IzbkQsaURBQUMsQ0FBRSxnQ0FBRixDQUFELENBQXNDb3RCLElBQXRDLENBQTJDLGtDQUEzQztBQUNBcHRCLGlEQUFDLENBQUMsbUJBQUQsQ0FBRCxDQUF1QjI2QixXQUF2QixDQUFtQyxvQkFBbkMsRUFBeURBLFdBQXpELENBQXFFLHFCQUFyRTtBQUNGLEdBSEYsTUFHUTtBQUdYLFFBQUl6K0IsSUFBSSxHQUFHO0FBQ0owckQsWUFBTSxFQUFFLDRCQURKO0FBRUpDLFdBQUssRUFBRUY7QUFGSCxLQUFYO0FBSUczbkQsaURBQUMsQ0FBQzhuRCxJQUFGLENBQVE5bkQsNkNBQUMsQ0FBQyxXQUFELENBQUQsQ0FBZW9GLEdBQWYsRUFBUixFQUE4QmxKLElBQTlCLEVBQW9DLFVBQVMraUMsUUFBVCxFQUFtQjtBQUNuRCxVQUFHQSxRQUFILEVBQWE7QUFDVGovQixxREFBQyxDQUFFLGdDQUFGLENBQUQsQ0FBc0NvdEIsSUFBdEMsQ0FBMkMsb0RBQTNDO0FBQ0FwdEIscURBQUMsQ0FBQyxtQkFBRCxDQUFELENBQXVCMjZCLFdBQXZCLENBQW1DLG9CQUFuQyxFQUF5REEsV0FBekQsQ0FBcUUscUJBQXJFLEVBRlMsQ0FHVDtBQUNILE9BSkQsTUFJTztBQUNIMzZCLHFEQUFDLENBQUUsZ0NBQUYsQ0FBRCxDQUFzQ290QixJQUF0QyxDQUEyQywyQkFBM0M7QUFDQXB0QixxREFBQyxDQUFDLG1CQUFELENBQUQsQ0FBdUIyNkIsV0FBdkIsQ0FBbUMsb0JBQW5DLEVBQXlEQSxXQUF6RCxDQUFxRSxxQkFBckUsRUFGRyxDQUdIO0FBQ0g7QUFDSixLQVZEO0FBWUg7QUFHRSxDQS9CSCxFOzs7Ozs7Ozs7OztBQ1ZBNS9CLE9BQU8sQ0FBQ3lILEdBQVIsQ0FBWSxpQ0FBWixFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0FBLHdCIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIi8qKlxuICogbWF0Y2hlc1NlbGVjdG9yIHYyLjAuMlxuICogbWF0Y2hlc1NlbGVjdG9yKCBlbGVtZW50LCAnLnNlbGVjdG9yJyApXG4gKiBNSVQgbGljZW5zZVxuICovXG5cbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIG1vZHVsZTogZmFsc2UgKi9cbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIGZhY3RvcnkgKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93Lm1hdGNoZXNTZWxlY3RvciA9IGZhY3RvcnkoKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgbWF0Y2hlc01ldGhvZCA9ICggZnVuY3Rpb24oKSB7XG4gICAgdmFyIEVsZW1Qcm90byA9IHdpbmRvdy5FbGVtZW50LnByb3RvdHlwZTtcbiAgICAvLyBjaGVjayBmb3IgdGhlIHN0YW5kYXJkIG1ldGhvZCBuYW1lIGZpcnN0XG4gICAgaWYgKCBFbGVtUHJvdG8ubWF0Y2hlcyApIHtcbiAgICAgIHJldHVybiAnbWF0Y2hlcyc7XG4gICAgfVxuICAgIC8vIGNoZWNrIHVuLXByZWZpeGVkXG4gICAgaWYgKCBFbGVtUHJvdG8ubWF0Y2hlc1NlbGVjdG9yICkge1xuICAgICAgcmV0dXJuICdtYXRjaGVzU2VsZWN0b3InO1xuICAgIH1cbiAgICAvLyBjaGVjayB2ZW5kb3IgcHJlZml4ZXNcbiAgICB2YXIgcHJlZml4ZXMgPSBbICd3ZWJraXQnLCAnbW96JywgJ21zJywgJ28nIF07XG5cbiAgICBmb3IgKCB2YXIgaT0wOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKysgKSB7XG4gICAgICB2YXIgcHJlZml4ID0gcHJlZml4ZXNbaV07XG4gICAgICB2YXIgbWV0aG9kID0gcHJlZml4ICsgJ01hdGNoZXNTZWxlY3Rvcic7XG4gICAgICBpZiAoIEVsZW1Qcm90b1sgbWV0aG9kIF0gKSB7XG4gICAgICAgIHJldHVybiBtZXRob2Q7XG4gICAgICB9XG4gICAgfVxuICB9KSgpO1xuXG4gIHJldHVybiBmdW5jdGlvbiBtYXRjaGVzU2VsZWN0b3IoIGVsZW0sIHNlbGVjdG9yICkge1xuICAgIHJldHVybiBlbGVtWyBtYXRjaGVzTWV0aG9kIF0oIHNlbGVjdG9yICk7XG4gIH07XG5cbn0pKTtcbiIsIi8qKlxuICogRXZFbWl0dGVyIHYxLjEuMFxuICogTGlsJyBldmVudCBlbWl0dGVyXG4gKiBNSVQgTGljZW5zZVxuICovXG5cbi8qIGpzaGludCB1bnVzZWQ6IHRydWUsIHVuZGVmOiB0cnVlLCBzdHJpY3Q6IHRydWUgKi9cblxuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgLyoganNoaW50IHN0cmljdDogZmFsc2UgKi8gLyogZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgd2luZG93ICovXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EIC0gUmVxdWlyZUpTXG4gICAgZGVmaW5lKCBmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlMgLSBCcm93c2VyaWZ5LCBXZWJwYWNrXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQnJvd3NlciBnbG9iYWxzXG4gICAgZ2xvYmFsLkV2RW1pdHRlciA9IGZhY3RvcnkoKTtcbiAgfVxuXG59KCB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBFdkVtaXR0ZXIoKSB7fVxuXG52YXIgcHJvdG8gPSBFdkVtaXR0ZXIucHJvdG90eXBlO1xuXG5wcm90by5vbiA9IGZ1bmN0aW9uKCBldmVudE5hbWUsIGxpc3RlbmVyICkge1xuICBpZiAoICFldmVudE5hbWUgfHwgIWxpc3RlbmVyICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBzZXQgZXZlbnRzIGhhc2hcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTtcbiAgLy8gc2V0IGxpc3RlbmVycyBhcnJheVxuICB2YXIgbGlzdGVuZXJzID0gZXZlbnRzWyBldmVudE5hbWUgXSA9IGV2ZW50c1sgZXZlbnROYW1lIF0gfHwgW107XG4gIC8vIG9ubHkgYWRkIG9uY2VcbiAgaWYgKCBsaXN0ZW5lcnMuaW5kZXhPZiggbGlzdGVuZXIgKSA9PSAtMSApIHtcbiAgICBsaXN0ZW5lcnMucHVzaCggbGlzdGVuZXIgKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8ub25jZSA9IGZ1bmN0aW9uKCBldmVudE5hbWUsIGxpc3RlbmVyICkge1xuICBpZiAoICFldmVudE5hbWUgfHwgIWxpc3RlbmVyICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBhZGQgZXZlbnRcbiAgdGhpcy5vbiggZXZlbnROYW1lLCBsaXN0ZW5lciApO1xuICAvLyBzZXQgb25jZSBmbGFnXG4gIC8vIHNldCBvbmNlRXZlbnRzIGhhc2hcbiAgdmFyIG9uY2VFdmVudHMgPSB0aGlzLl9vbmNlRXZlbnRzID0gdGhpcy5fb25jZUV2ZW50cyB8fCB7fTtcbiAgLy8gc2V0IG9uY2VMaXN0ZW5lcnMgb2JqZWN0XG4gIHZhciBvbmNlTGlzdGVuZXJzID0gb25jZUV2ZW50c1sgZXZlbnROYW1lIF0gPSBvbmNlRXZlbnRzWyBldmVudE5hbWUgXSB8fCB7fTtcbiAgLy8gc2V0IGZsYWdcbiAgb25jZUxpc3RlbmVyc1sgbGlzdGVuZXIgXSA9IHRydWU7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5vZmYgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBsaXN0ZW5lciApIHtcbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50cyAmJiB0aGlzLl9ldmVudHNbIGV2ZW50TmFtZSBdO1xuICBpZiAoICFsaXN0ZW5lcnMgfHwgIWxpc3RlbmVycy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBpbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKCBsaXN0ZW5lciApO1xuICBpZiAoIGluZGV4ICE9IC0xICkge1xuICAgIGxpc3RlbmVycy5zcGxpY2UoIGluZGV4LCAxICk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvLmVtaXRFdmVudCA9IGZ1bmN0aW9uKCBldmVudE5hbWUsIGFyZ3MgKSB7XG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHMgJiYgdGhpcy5fZXZlbnRzWyBldmVudE5hbWUgXTtcbiAgaWYgKCAhbGlzdGVuZXJzIHx8ICFsaXN0ZW5lcnMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBjb3B5IG92ZXIgdG8gYXZvaWQgaW50ZXJmZXJlbmNlIGlmIC5vZmYoKSBpbiBsaXN0ZW5lclxuICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuc2xpY2UoMCk7XG4gIGFyZ3MgPSBhcmdzIHx8IFtdO1xuICAvLyBvbmNlIHN0dWZmXG4gIHZhciBvbmNlTGlzdGVuZXJzID0gdGhpcy5fb25jZUV2ZW50cyAmJiB0aGlzLl9vbmNlRXZlbnRzWyBldmVudE5hbWUgXTtcblxuICBmb3IgKCB2YXIgaT0wOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrICkge1xuICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXVxuICAgIHZhciBpc09uY2UgPSBvbmNlTGlzdGVuZXJzICYmIG9uY2VMaXN0ZW5lcnNbIGxpc3RlbmVyIF07XG4gICAgaWYgKCBpc09uY2UgKSB7XG4gICAgICAvLyByZW1vdmUgbGlzdGVuZXJcbiAgICAgIC8vIHJlbW92ZSBiZWZvcmUgdHJpZ2dlciB0byBwcmV2ZW50IHJlY3Vyc2lvblxuICAgICAgdGhpcy5vZmYoIGV2ZW50TmFtZSwgbGlzdGVuZXIgKTtcbiAgICAgIC8vIHVuc2V0IG9uY2UgZmxhZ1xuICAgICAgZGVsZXRlIG9uY2VMaXN0ZW5lcnNbIGxpc3RlbmVyIF07XG4gICAgfVxuICAgIC8vIHRyaWdnZXIgbGlzdGVuZXJcbiAgICBsaXN0ZW5lci5hcHBseSggdGhpcywgYXJncyApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5hbGxPZmYgPSBmdW5jdGlvbigpIHtcbiAgZGVsZXRlIHRoaXMuX2V2ZW50cztcbiAgZGVsZXRlIHRoaXMuX29uY2VFdmVudHM7XG59O1xuXG5yZXR1cm4gRXZFbWl0dGVyO1xuXG59KSk7XG4iLCIvKipcbiAqIEZpenp5IFVJIHV0aWxzIHYyLjAuN1xuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlLCBzdHJpY3Q6IHRydWUgKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgLypqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggW1xuICAgICAgJ2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3IvbWF0Y2hlcy1zZWxlY3RvcidcbiAgICBdLCBmdW5jdGlvbiggbWF0Y2hlc1NlbGVjdG9yICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgbWF0Y2hlc1NlbGVjdG9yICk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICByZXF1aXJlKCdkZXNhbmRyby1tYXRjaGVzLXNlbGVjdG9yJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LmZpenp5VUlVdGlscyA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICB3aW5kb3cubWF0Y2hlc1NlbGVjdG9yXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgbWF0Y2hlc1NlbGVjdG9yICkge1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHt9O1xuXG4vLyAtLS0tLSBleHRlbmQgLS0tLS0gLy9cblxuLy8gZXh0ZW5kcyBvYmplY3RzXG51dGlscy5leHRlbmQgPSBmdW5jdGlvbiggYSwgYiApIHtcbiAgZm9yICggdmFyIHByb3AgaW4gYiApIHtcbiAgICBhWyBwcm9wIF0gPSBiWyBwcm9wIF07XG4gIH1cbiAgcmV0dXJuIGE7XG59O1xuXG4vLyAtLS0tLSBtb2R1bG8gLS0tLS0gLy9cblxudXRpbHMubW9kdWxvID0gZnVuY3Rpb24oIG51bSwgZGl2ICkge1xuICByZXR1cm4gKCAoIG51bSAlIGRpdiApICsgZGl2ICkgJSBkaXY7XG59O1xuXG4vLyAtLS0tLSBtYWtlQXJyYXkgLS0tLS0gLy9cblxudmFyIGFycmF5U2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbi8vIHR1cm4gZWxlbWVudCBvciBub2RlTGlzdCBpbnRvIGFuIGFycmF5XG51dGlscy5tYWtlQXJyYXkgPSBmdW5jdGlvbiggb2JqICkge1xuICBpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuICAgIC8vIHVzZSBvYmplY3QgaWYgYWxyZWFkeSBhbiBhcnJheVxuICAgIHJldHVybiBvYmo7XG4gIH1cbiAgLy8gcmV0dXJuIGVtcHR5IGFycmF5IGlmIHVuZGVmaW5lZCBvciBudWxsLiAjNlxuICBpZiAoIG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHVuZGVmaW5lZCApIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICB2YXIgaXNBcnJheUxpa2UgPSB0eXBlb2Ygb2JqID09ICdvYmplY3QnICYmIHR5cGVvZiBvYmoubGVuZ3RoID09ICdudW1iZXInO1xuICBpZiAoIGlzQXJyYXlMaWtlICkge1xuICAgIC8vIGNvbnZlcnQgbm9kZUxpc3QgdG8gYXJyYXlcbiAgICByZXR1cm4gYXJyYXlTbGljZS5jYWxsKCBvYmogKTtcbiAgfVxuXG4gIC8vIGFycmF5IG9mIHNpbmdsZSBpbmRleFxuICByZXR1cm4gWyBvYmogXTtcbn07XG5cbi8vIC0tLS0tIHJlbW92ZUZyb20gLS0tLS0gLy9cblxudXRpbHMucmVtb3ZlRnJvbSA9IGZ1bmN0aW9uKCBhcnksIG9iaiApIHtcbiAgdmFyIGluZGV4ID0gYXJ5LmluZGV4T2YoIG9iaiApO1xuICBpZiAoIGluZGV4ICE9IC0xICkge1xuICAgIGFyeS5zcGxpY2UoIGluZGV4LCAxICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIGdldFBhcmVudCAtLS0tLSAvL1xuXG51dGlscy5nZXRQYXJlbnQgPSBmdW5jdGlvbiggZWxlbSwgc2VsZWN0b3IgKSB7XG4gIHdoaWxlICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0gIT0gZG9jdW1lbnQuYm9keSApIHtcbiAgICBlbGVtID0gZWxlbS5wYXJlbnROb2RlO1xuICAgIGlmICggbWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBzZWxlY3RvciApICkge1xuICAgICAgcmV0dXJuIGVsZW07XG4gICAgfVxuICB9XG59O1xuXG4vLyAtLS0tLSBnZXRRdWVyeUVsZW1lbnQgLS0tLS0gLy9cblxuLy8gdXNlIGVsZW1lbnQgYXMgc2VsZWN0b3Igc3RyaW5nXG51dGlscy5nZXRRdWVyeUVsZW1lbnQgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgaWYgKCB0eXBlb2YgZWxlbSA9PSAnc3RyaW5nJyApIHtcbiAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvciggZWxlbSApO1xuICB9XG4gIHJldHVybiBlbGVtO1xufTtcblxuLy8gLS0tLS0gaGFuZGxlRXZlbnQgLS0tLS0gLy9cblxuLy8gZW5hYmxlIC5vbnR5cGUgdG8gdHJpZ2dlciBmcm9tIC5hZGRFdmVudExpc3RlbmVyKCBlbGVtLCAndHlwZScgKVxudXRpbHMuaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHZhciBtZXRob2QgPSAnb24nICsgZXZlbnQudHlwZTtcbiAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcbiAgICB0aGlzWyBtZXRob2QgXSggZXZlbnQgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0gZmlsdGVyRmluZEVsZW1lbnRzIC0tLS0tIC8vXG5cbnV0aWxzLmZpbHRlckZpbmRFbGVtZW50cyA9IGZ1bmN0aW9uKCBlbGVtcywgc2VsZWN0b3IgKSB7XG4gIC8vIG1ha2UgYXJyYXkgb2YgZWxlbXNcbiAgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGVsZW1zICk7XG4gIHZhciBmZkVsZW1zID0gW107XG5cbiAgZWxlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgLy8gY2hlY2sgdGhhdCBlbGVtIGlzIGFuIGFjdHVhbCBlbGVtZW50XG4gICAgaWYgKCAhKCBlbGVtIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgKSApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gYWRkIGVsZW0gaWYgbm8gc2VsZWN0b3JcbiAgICBpZiAoICFzZWxlY3RvciApIHtcbiAgICAgIGZmRWxlbXMucHVzaCggZWxlbSApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBmaWx0ZXIgJiBmaW5kIGl0ZW1zIGlmIHdlIGhhdmUgYSBzZWxlY3RvclxuICAgIC8vIGZpbHRlclxuICAgIGlmICggbWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBzZWxlY3RvciApICkge1xuICAgICAgZmZFbGVtcy5wdXNoKCBlbGVtICk7XG4gICAgfVxuICAgIC8vIGZpbmQgY2hpbGRyZW5cbiAgICB2YXIgY2hpbGRFbGVtcyA9IGVsZW0ucXVlcnlTZWxlY3RvckFsbCggc2VsZWN0b3IgKTtcbiAgICAvLyBjb25jYXQgY2hpbGRFbGVtcyB0byBmaWx0ZXJGb3VuZCBhcnJheVxuICAgIGZvciAoIHZhciBpPTA7IGkgPCBjaGlsZEVsZW1zLmxlbmd0aDsgaSsrICkge1xuICAgICAgZmZFbGVtcy5wdXNoKCBjaGlsZEVsZW1zW2ldICk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZmZFbGVtcztcbn07XG5cbi8vIC0tLS0tIGRlYm91bmNlTWV0aG9kIC0tLS0tIC8vXG5cbnV0aWxzLmRlYm91bmNlTWV0aG9kID0gZnVuY3Rpb24oIF9jbGFzcywgbWV0aG9kTmFtZSwgdGhyZXNob2xkICkge1xuICB0aHJlc2hvbGQgPSB0aHJlc2hvbGQgfHwgMTAwO1xuICAvLyBvcmlnaW5hbCBtZXRob2RcbiAgdmFyIG1ldGhvZCA9IF9jbGFzcy5wcm90b3R5cGVbIG1ldGhvZE5hbWUgXTtcbiAgdmFyIHRpbWVvdXROYW1lID0gbWV0aG9kTmFtZSArICdUaW1lb3V0JztcblxuICBfY2xhc3MucHJvdG90eXBlWyBtZXRob2ROYW1lIF0gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdGltZW91dCA9IHRoaXNbIHRpbWVvdXROYW1lIF07XG4gICAgY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXNbIHRpbWVvdXROYW1lIF0gPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgIG1ldGhvZC5hcHBseSggX3RoaXMsIGFyZ3MgKTtcbiAgICAgIGRlbGV0ZSBfdGhpc1sgdGltZW91dE5hbWUgXTtcbiAgICB9LCB0aHJlc2hvbGQgKTtcbiAgfTtcbn07XG5cbi8vIC0tLS0tIGRvY1JlYWR5IC0tLS0tIC8vXG5cbnV0aWxzLmRvY1JlYWR5ID0gZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuICB2YXIgcmVhZHlTdGF0ZSA9IGRvY3VtZW50LnJlYWR5U3RhdGU7XG4gIGlmICggcmVhZHlTdGF0ZSA9PSAnY29tcGxldGUnIHx8IHJlYWR5U3RhdGUgPT0gJ2ludGVyYWN0aXZlJyApIHtcbiAgICAvLyBkbyBhc3luYyB0byBhbGxvdyBmb3Igb3RoZXIgc2NyaXB0cyB0byBydW4uIG1ldGFmaXp6eS9mbGlja2l0eSM0NDFcbiAgICBzZXRUaW1lb3V0KCBjYWxsYmFjayApO1xuICB9IGVsc2Uge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdET01Db250ZW50TG9hZGVkJywgY2FsbGJhY2sgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0gaHRtbEluaXQgLS0tLS0gLy9cblxuLy8gaHR0cDovL2phbWVzcm9iZXJ0cy5uYW1lL2Jsb2cvMjAxMC8wMi8yMi9zdHJpbmctZnVuY3Rpb25zLWZvci1qYXZhc2NyaXB0LXRyaW0tdG8tY2FtZWwtY2FzZS10by1kYXNoZWQtYW5kLXRvLXVuZGVyc2NvcmUvXG51dGlscy50b0Rhc2hlZCA9IGZ1bmN0aW9uKCBzdHIgKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSggLyguKShbQS1aXSkvZywgZnVuY3Rpb24oIG1hdGNoLCAkMSwgJDIgKSB7XG4gICAgcmV0dXJuICQxICsgJy0nICsgJDI7XG4gIH0pLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlO1xuLyoqXG4gKiBhbGxvdyB1c2VyIHRvIGluaXRpYWxpemUgY2xhc3NlcyB2aWEgW2RhdGEtbmFtZXNwYWNlXSBvciAuanMtbmFtZXNwYWNlIGNsYXNzXG4gKiBodG1sSW5pdCggV2lkZ2V0LCAnd2lkZ2V0TmFtZScgKVxuICogb3B0aW9ucyBhcmUgcGFyc2VkIGZyb20gZGF0YS1uYW1lc3BhY2Utb3B0aW9uc1xuICovXG51dGlscy5odG1sSW5pdCA9IGZ1bmN0aW9uKCBXaWRnZXRDbGFzcywgbmFtZXNwYWNlICkge1xuICB1dGlscy5kb2NSZWFkeSggZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRhc2hlZE5hbWVzcGFjZSA9IHV0aWxzLnRvRGFzaGVkKCBuYW1lc3BhY2UgKTtcbiAgICB2YXIgZGF0YUF0dHIgPSAnZGF0YS0nICsgZGFzaGVkTmFtZXNwYWNlO1xuICAgIHZhciBkYXRhQXR0ckVsZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggJ1snICsgZGF0YUF0dHIgKyAnXScgKTtcbiAgICB2YXIganNEYXNoRWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCAnLmpzLScgKyBkYXNoZWROYW1lc3BhY2UgKTtcbiAgICB2YXIgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGRhdGFBdHRyRWxlbXMgKVxuICAgICAgLmNvbmNhdCggdXRpbHMubWFrZUFycmF5KCBqc0Rhc2hFbGVtcyApICk7XG4gICAgdmFyIGRhdGFPcHRpb25zQXR0ciA9IGRhdGFBdHRyICsgJy1vcHRpb25zJztcbiAgICB2YXIgalF1ZXJ5ID0gd2luZG93LmpRdWVyeTtcblxuICAgIGVsZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgdmFyIGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZSggZGF0YUF0dHIgKSB8fFxuICAgICAgICBlbGVtLmdldEF0dHJpYnV0ZSggZGF0YU9wdGlvbnNBdHRyICk7XG4gICAgICB2YXIgb3B0aW9ucztcbiAgICAgIHRyeSB7XG4gICAgICAgIG9wdGlvbnMgPSBhdHRyICYmIEpTT04ucGFyc2UoIGF0dHIgKTtcbiAgICAgIH0gY2F0Y2ggKCBlcnJvciApIHtcbiAgICAgICAgLy8gbG9nIGVycm9yLCBkbyBub3QgaW5pdGlhbGl6ZVxuICAgICAgICBpZiAoIGNvbnNvbGUgKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvciggJ0Vycm9yIHBhcnNpbmcgJyArIGRhdGFBdHRyICsgJyBvbiAnICsgZWxlbS5jbGFzc05hbWUgK1xuICAgICAgICAgICc6ICcgKyBlcnJvciApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIGluaXRpYWxpemVcbiAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBXaWRnZXRDbGFzcyggZWxlbSwgb3B0aW9ucyApO1xuICAgICAgLy8gbWFrZSBhdmFpbGFibGUgdmlhICQoKS5kYXRhKCduYW1lc3BhY2UnKVxuICAgICAgaWYgKCBqUXVlcnkgKSB7XG4gICAgICAgIGpRdWVyeS5kYXRhKCBlbGVtLCBuYW1lc3BhY2UsIGluc3RhbmNlICk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfSk7XG59O1xuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxucmV0dXJuIHV0aWxzO1xuXG59KSk7XG4iLCIvKiFcbiAqIGdldFNpemUgdjIuMC4zXG4gKiBtZWFzdXJlIHNpemUgb2YgZWxlbWVudHNcbiAqIE1JVCBsaWNlbnNlXG4gKi9cblxuLyoganNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSAqL1xuLyogZ2xvYmFscyBjb25zb2xlOiBmYWxzZSAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qIGdsb2JhbHMgZGVmaW5lLCBtb2R1bGUgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIGZhY3RvcnkgKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LmdldFNpemUgPSBmYWN0b3J5KCk7XG4gIH1cblxufSkoIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSgpIHtcbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaGVscGVycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyBnZXQgYSBudW1iZXIgZnJvbSBhIHN0cmluZywgbm90IGEgcGVyY2VudGFnZVxuZnVuY3Rpb24gZ2V0U3R5bGVTaXplKCB2YWx1ZSApIHtcbiAgdmFyIG51bSA9IHBhcnNlRmxvYXQoIHZhbHVlICk7XG4gIC8vIG5vdCBhIHBlcmNlbnQgbGlrZSAnMTAwJScsIGFuZCBhIG51bWJlclxuICB2YXIgaXNWYWxpZCA9IHZhbHVlLmluZGV4T2YoJyUnKSA9PSAtMSAmJiAhaXNOYU4oIG51bSApO1xuICByZXR1cm4gaXNWYWxpZCAmJiBudW07XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG52YXIgbG9nRXJyb3IgPSB0eXBlb2YgY29uc29sZSA9PSAndW5kZWZpbmVkJyA/IG5vb3AgOlxuICBmdW5jdGlvbiggbWVzc2FnZSApIHtcbiAgICBjb25zb2xlLmVycm9yKCBtZXNzYWdlICk7XG4gIH07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIG1lYXN1cmVtZW50cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG52YXIgbWVhc3VyZW1lbnRzID0gW1xuICAncGFkZGluZ0xlZnQnLFxuICAncGFkZGluZ1JpZ2h0JyxcbiAgJ3BhZGRpbmdUb3AnLFxuICAncGFkZGluZ0JvdHRvbScsXG4gICdtYXJnaW5MZWZ0JyxcbiAgJ21hcmdpblJpZ2h0JyxcbiAgJ21hcmdpblRvcCcsXG4gICdtYXJnaW5Cb3R0b20nLFxuICAnYm9yZGVyTGVmdFdpZHRoJyxcbiAgJ2JvcmRlclJpZ2h0V2lkdGgnLFxuICAnYm9yZGVyVG9wV2lkdGgnLFxuICAnYm9yZGVyQm90dG9tV2lkdGgnXG5dO1xuXG52YXIgbWVhc3VyZW1lbnRzTGVuZ3RoID0gbWVhc3VyZW1lbnRzLmxlbmd0aDtcblxuZnVuY3Rpb24gZ2V0WmVyb1NpemUoKSB7XG4gIHZhciBzaXplID0ge1xuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMCxcbiAgICBpbm5lcldpZHRoOiAwLFxuICAgIGlubmVySGVpZ2h0OiAwLFxuICAgIG91dGVyV2lkdGg6IDAsXG4gICAgb3V0ZXJIZWlnaHQ6IDBcbiAgfTtcbiAgZm9yICggdmFyIGk9MDsgaSA8IG1lYXN1cmVtZW50c0xlbmd0aDsgaSsrICkge1xuICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcbiAgICBzaXplWyBtZWFzdXJlbWVudCBdID0gMDtcbiAgfVxuICByZXR1cm4gc2l6ZTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZ2V0U3R5bGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLyoqXG4gKiBnZXRTdHlsZSwgZ2V0IHN0eWxlIG9mIGVsZW1lbnQsIGNoZWNrIGZvciBGaXJlZm94IGJ1Z1xuICogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NTQ4Mzk3XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlKCBlbGVtICkge1xuICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG4gIGlmICggIXN0eWxlICkge1xuICAgIGxvZ0Vycm9yKCAnU3R5bGUgcmV0dXJuZWQgJyArIHN0eWxlICtcbiAgICAgICcuIEFyZSB5b3UgcnVubmluZyB0aGlzIGNvZGUgaW4gYSBoaWRkZW4gaWZyYW1lIG9uIEZpcmVmb3g/ICcgK1xuICAgICAgJ1NlZSBodHRwczovL2JpdC5seS9nZXRzaXplYnVnMScgKTtcbiAgfVxuICByZXR1cm4gc3R5bGU7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHNldHVwIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnZhciBpc1NldHVwID0gZmFsc2U7XG5cbnZhciBpc0JveFNpemVPdXRlcjtcblxuLyoqXG4gKiBzZXR1cFxuICogY2hlY2sgaXNCb3hTaXplck91dGVyXG4gKiBkbyBvbiBmaXJzdCBnZXRTaXplKCkgcmF0aGVyIHRoYW4gb24gcGFnZSBsb2FkIGZvciBGaXJlZm94IGJ1Z1xuICovXG5mdW5jdGlvbiBzZXR1cCgpIHtcbiAgLy8gc2V0dXAgb25jZVxuICBpZiAoIGlzU2V0dXAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlzU2V0dXAgPSB0cnVlO1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGJveCBzaXppbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICAvKipcbiAgICogQ2hyb21lICYgU2FmYXJpIG1lYXN1cmUgdGhlIG91dGVyLXdpZHRoIG9uIHN0eWxlLndpZHRoIG9uIGJvcmRlci1ib3ggZWxlbXNcbiAgICogSUUxMSAmIEZpcmVmb3g8MjkgbWVhc3VyZXMgdGhlIGlubmVyLXdpZHRoXG4gICAqL1xuICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRpdi5zdHlsZS53aWR0aCA9ICcyMDBweCc7XG4gIGRpdi5zdHlsZS5wYWRkaW5nID0gJzFweCAycHggM3B4IDRweCc7XG4gIGRpdi5zdHlsZS5ib3JkZXJTdHlsZSA9ICdzb2xpZCc7XG4gIGRpdi5zdHlsZS5ib3JkZXJXaWR0aCA9ICcxcHggMnB4IDNweCA0cHgnO1xuICBkaXYuc3R5bGUuYm94U2l6aW5nID0gJ2JvcmRlci1ib3gnO1xuXG4gIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGJvZHkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuICB2YXIgc3R5bGUgPSBnZXRTdHlsZSggZGl2ICk7XG4gIC8vIHJvdW5kIHZhbHVlIGZvciBicm93c2VyIHpvb20uIGRlc2FuZHJvL21hc29ucnkjOTI4XG4gIGlzQm94U2l6ZU91dGVyID0gTWF0aC5yb3VuZCggZ2V0U3R5bGVTaXplKCBzdHlsZS53aWR0aCApICkgPT0gMjAwO1xuICBnZXRTaXplLmlzQm94U2l6ZU91dGVyID0gaXNCb3hTaXplT3V0ZXI7XG5cbiAgYm9keS5yZW1vdmVDaGlsZCggZGl2ICk7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGdldFNpemUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gZ2V0U2l6ZSggZWxlbSApIHtcbiAgc2V0dXAoKTtcblxuICAvLyB1c2UgcXVlcnlTZWxldG9yIGlmIGVsZW0gaXMgc3RyaW5nXG4gIGlmICggdHlwZW9mIGVsZW0gPT0gJ3N0cmluZycgKSB7XG4gICAgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIGVsZW0gKTtcbiAgfVxuXG4gIC8vIGRvIG5vdCBwcm9jZWVkIG9uIG5vbi1vYmplY3RzXG4gIGlmICggIWVsZW0gfHwgdHlwZW9mIGVsZW0gIT0gJ29iamVjdCcgfHwgIWVsZW0ubm9kZVR5cGUgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHN0eWxlID0gZ2V0U3R5bGUoIGVsZW0gKTtcblxuICAvLyBpZiBoaWRkZW4sIGV2ZXJ5dGhpbmcgaXMgMFxuICBpZiAoIHN0eWxlLmRpc3BsYXkgPT0gJ25vbmUnICkge1xuICAgIHJldHVybiBnZXRaZXJvU2l6ZSgpO1xuICB9XG5cbiAgdmFyIHNpemUgPSB7fTtcbiAgc2l6ZS53aWR0aCA9IGVsZW0ub2Zmc2V0V2lkdGg7XG4gIHNpemUuaGVpZ2h0ID0gZWxlbS5vZmZzZXRIZWlnaHQ7XG5cbiAgdmFyIGlzQm9yZGVyQm94ID0gc2l6ZS5pc0JvcmRlckJveCA9IHN0eWxlLmJveFNpemluZyA9PSAnYm9yZGVyLWJveCc7XG5cbiAgLy8gZ2V0IGFsbCBtZWFzdXJlbWVudHNcbiAgZm9yICggdmFyIGk9MDsgaSA8IG1lYXN1cmVtZW50c0xlbmd0aDsgaSsrICkge1xuICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcbiAgICB2YXIgdmFsdWUgPSBzdHlsZVsgbWVhc3VyZW1lbnQgXTtcbiAgICB2YXIgbnVtID0gcGFyc2VGbG9hdCggdmFsdWUgKTtcbiAgICAvLyBhbnkgJ2F1dG8nLCAnbWVkaXVtJyB2YWx1ZSB3aWxsIGJlIDBcbiAgICBzaXplWyBtZWFzdXJlbWVudCBdID0gIWlzTmFOKCBudW0gKSA/IG51bSA6IDA7XG4gIH1cblxuICB2YXIgcGFkZGluZ1dpZHRoID0gc2l6ZS5wYWRkaW5nTGVmdCArIHNpemUucGFkZGluZ1JpZ2h0O1xuICB2YXIgcGFkZGluZ0hlaWdodCA9IHNpemUucGFkZGluZ1RvcCArIHNpemUucGFkZGluZ0JvdHRvbTtcbiAgdmFyIG1hcmdpbldpZHRoID0gc2l6ZS5tYXJnaW5MZWZ0ICsgc2l6ZS5tYXJnaW5SaWdodDtcbiAgdmFyIG1hcmdpbkhlaWdodCA9IHNpemUubWFyZ2luVG9wICsgc2l6ZS5tYXJnaW5Cb3R0b207XG4gIHZhciBib3JkZXJXaWR0aCA9IHNpemUuYm9yZGVyTGVmdFdpZHRoICsgc2l6ZS5ib3JkZXJSaWdodFdpZHRoO1xuICB2YXIgYm9yZGVySGVpZ2h0ID0gc2l6ZS5ib3JkZXJUb3BXaWR0aCArIHNpemUuYm9yZGVyQm90dG9tV2lkdGg7XG5cbiAgdmFyIGlzQm9yZGVyQm94U2l6ZU91dGVyID0gaXNCb3JkZXJCb3ggJiYgaXNCb3hTaXplT3V0ZXI7XG5cbiAgLy8gb3ZlcndyaXRlIHdpZHRoIGFuZCBoZWlnaHQgaWYgd2UgY2FuIGdldCBpdCBmcm9tIHN0eWxlXG4gIHZhciBzdHlsZVdpZHRoID0gZ2V0U3R5bGVTaXplKCBzdHlsZS53aWR0aCApO1xuICBpZiAoIHN0eWxlV2lkdGggIT09IGZhbHNlICkge1xuICAgIHNpemUud2lkdGggPSBzdHlsZVdpZHRoICtcbiAgICAgIC8vIGFkZCBwYWRkaW5nIGFuZCBib3JkZXIgdW5sZXNzIGl0J3MgYWxyZWFkeSBpbmNsdWRpbmcgaXRcbiAgICAgICggaXNCb3JkZXJCb3hTaXplT3V0ZXIgPyAwIDogcGFkZGluZ1dpZHRoICsgYm9yZGVyV2lkdGggKTtcbiAgfVxuXG4gIHZhciBzdHlsZUhlaWdodCA9IGdldFN0eWxlU2l6ZSggc3R5bGUuaGVpZ2h0ICk7XG4gIGlmICggc3R5bGVIZWlnaHQgIT09IGZhbHNlICkge1xuICAgIHNpemUuaGVpZ2h0ID0gc3R5bGVIZWlnaHQgK1xuICAgICAgLy8gYWRkIHBhZGRpbmcgYW5kIGJvcmRlciB1bmxlc3MgaXQncyBhbHJlYWR5IGluY2x1ZGluZyBpdFxuICAgICAgKCBpc0JvcmRlckJveFNpemVPdXRlciA/IDAgOiBwYWRkaW5nSGVpZ2h0ICsgYm9yZGVySGVpZ2h0ICk7XG4gIH1cblxuICBzaXplLmlubmVyV2lkdGggPSBzaXplLndpZHRoIC0gKCBwYWRkaW5nV2lkdGggKyBib3JkZXJXaWR0aCApO1xuICBzaXplLmlubmVySGVpZ2h0ID0gc2l6ZS5oZWlnaHQgLSAoIHBhZGRpbmdIZWlnaHQgKyBib3JkZXJIZWlnaHQgKTtcblxuICBzaXplLm91dGVyV2lkdGggPSBzaXplLndpZHRoICsgbWFyZ2luV2lkdGg7XG4gIHNpemUub3V0ZXJIZWlnaHQgPSBzaXplLmhlaWdodCArIG1hcmdpbkhlaWdodDtcblxuICByZXR1cm4gc2l6ZTtcbn1cblxucmV0dXJuIGdldFNpemU7XG5cbn0pO1xuIiwiLyohXG4gKiBpbWFnZXNMb2FkZWQgdjQuMS40XG4gKiBKYXZhU2NyaXB0IGlzIGFsbCBsaWtlIFwiWW91IGltYWdlcyBhcmUgZG9uZSB5ZXQgb3Igd2hhdD9cIlxuICogTUlUIExpY2Vuc2VcbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7ICd1c2Ugc3RyaWN0JztcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG5cbiAgLypnbG9iYWwgZGVmaW5lOiBmYWxzZSwgbW9kdWxlOiBmYWxzZSwgcmVxdWlyZTogZmFsc2UgKi9cblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggW1xuICAgICAgJ2V2LWVtaXR0ZXIvZXYtZW1pdHRlcidcbiAgICBdLCBmdW5jdGlvbiggRXZFbWl0dGVyICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgRXZFbWl0dGVyICk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICByZXF1aXJlKCdldi1lbWl0dGVyJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LmltYWdlc0xvYWRlZCA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICB3aW5kb3cuRXZFbWl0dGVyXG4gICAgKTtcbiAgfVxuXG59KSggdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLFxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgZmFjdG9yeSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5mdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIEV2RW1pdHRlciApIHtcblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgJCA9IHdpbmRvdy5qUXVlcnk7XG52YXIgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBoZWxwZXJzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8vIGV4dGVuZCBvYmplY3RzXG5mdW5jdGlvbiBleHRlbmQoIGEsIGIgKSB7XG4gIGZvciAoIHZhciBwcm9wIGluIGIgKSB7XG4gICAgYVsgcHJvcCBdID0gYlsgcHJvcCBdO1xuICB9XG4gIHJldHVybiBhO1xufVxuXG52YXIgYXJyYXlTbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuLy8gdHVybiBlbGVtZW50IG9yIG5vZGVMaXN0IGludG8gYW4gYXJyYXlcbmZ1bmN0aW9uIG1ha2VBcnJheSggb2JqICkge1xuICBpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuICAgIC8vIHVzZSBvYmplY3QgaWYgYWxyZWFkeSBhbiBhcnJheVxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICB2YXIgaXNBcnJheUxpa2UgPSB0eXBlb2Ygb2JqID09ICdvYmplY3QnICYmIHR5cGVvZiBvYmoubGVuZ3RoID09ICdudW1iZXInO1xuICBpZiAoIGlzQXJyYXlMaWtlICkge1xuICAgIC8vIGNvbnZlcnQgbm9kZUxpc3QgdG8gYXJyYXlcbiAgICByZXR1cm4gYXJyYXlTbGljZS5jYWxsKCBvYmogKTtcbiAgfVxuXG4gIC8vIGFycmF5IG9mIHNpbmdsZSBpbmRleFxuICByZXR1cm4gWyBvYmogXTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaW1hZ2VzTG9hZGVkIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogQHBhcmFtIHtBcnJheSwgRWxlbWVudCwgTm9kZUxpc3QsIFN0cmluZ30gZWxlbVxuICogQHBhcmFtIHtPYmplY3Qgb3IgRnVuY3Rpb259IG9wdGlvbnMgLSBpZiBmdW5jdGlvbiwgdXNlIGFzIGNhbGxiYWNrXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbkFsd2F5cyAtIGNhbGxiYWNrIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIEltYWdlc0xvYWRlZCggZWxlbSwgb3B0aW9ucywgb25BbHdheXMgKSB7XG4gIC8vIGNvZXJjZSBJbWFnZXNMb2FkZWQoKSB3aXRob3V0IG5ldywgdG8gYmUgbmV3IEltYWdlc0xvYWRlZCgpXG4gIGlmICggISggdGhpcyBpbnN0YW5jZW9mIEltYWdlc0xvYWRlZCApICkge1xuICAgIHJldHVybiBuZXcgSW1hZ2VzTG9hZGVkKCBlbGVtLCBvcHRpb25zLCBvbkFsd2F5cyApO1xuICB9XG4gIC8vIHVzZSBlbGVtIGFzIHNlbGVjdG9yIHN0cmluZ1xuICB2YXIgcXVlcnlFbGVtID0gZWxlbTtcbiAgaWYgKCB0eXBlb2YgZWxlbSA9PSAnc3RyaW5nJyApIHtcbiAgICBxdWVyeUVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCBlbGVtICk7XG4gIH1cbiAgLy8gYmFpbCBpZiBiYWQgZWxlbWVudFxuICBpZiAoICFxdWVyeUVsZW0gKSB7XG4gICAgY29uc29sZS5lcnJvciggJ0JhZCBlbGVtZW50IGZvciBpbWFnZXNMb2FkZWQgJyArICggcXVlcnlFbGVtIHx8IGVsZW0gKSApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuZWxlbWVudHMgPSBtYWtlQXJyYXkoIHF1ZXJ5RWxlbSApO1xuICB0aGlzLm9wdGlvbnMgPSBleHRlbmQoIHt9LCB0aGlzLm9wdGlvbnMgKTtcbiAgLy8gc2hpZnQgYXJndW1lbnRzIGlmIG5vIG9wdGlvbnMgc2V0XG4gIGlmICggdHlwZW9mIG9wdGlvbnMgPT0gJ2Z1bmN0aW9uJyApIHtcbiAgICBvbkFsd2F5cyA9IG9wdGlvbnM7XG4gIH0gZWxzZSB7XG4gICAgZXh0ZW5kKCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMgKTtcbiAgfVxuXG4gIGlmICggb25BbHdheXMgKSB7XG4gICAgdGhpcy5vbiggJ2Fsd2F5cycsIG9uQWx3YXlzICk7XG4gIH1cblxuICB0aGlzLmdldEltYWdlcygpO1xuXG4gIGlmICggJCApIHtcbiAgICAvLyBhZGQgalF1ZXJ5IERlZmVycmVkIG9iamVjdFxuICAgIHRoaXMuanFEZWZlcnJlZCA9IG5ldyAkLkRlZmVycmVkKCk7XG4gIH1cblxuICAvLyBIQUNLIGNoZWNrIGFzeW5jIHRvIGFsbG93IHRpbWUgdG8gYmluZCBsaXN0ZW5lcnNcbiAgc2V0VGltZW91dCggdGhpcy5jaGVjay5iaW5kKCB0aGlzICkgKTtcbn1cblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5vcHRpb25zID0ge307XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuZ2V0SW1hZ2VzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaW1hZ2VzID0gW107XG5cbiAgLy8gZmlsdGVyICYgZmluZCBpdGVtcyBpZiB3ZSBoYXZlIGFuIGl0ZW0gc2VsZWN0b3JcbiAgdGhpcy5lbGVtZW50cy5mb3JFYWNoKCB0aGlzLmFkZEVsZW1lbnRJbWFnZXMsIHRoaXMgKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSBlbGVtZW50XG4gKi9cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuYWRkRWxlbWVudEltYWdlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICAvLyBmaWx0ZXIgc2libGluZ3NcbiAgaWYgKCBlbGVtLm5vZGVOYW1lID09ICdJTUcnICkge1xuICAgIHRoaXMuYWRkSW1hZ2UoIGVsZW0gKTtcbiAgfVxuICAvLyBnZXQgYmFja2dyb3VuZCBpbWFnZSBvbiBlbGVtZW50XG4gIGlmICggdGhpcy5vcHRpb25zLmJhY2tncm91bmQgPT09IHRydWUgKSB7XG4gICAgdGhpcy5hZGRFbGVtZW50QmFja2dyb3VuZEltYWdlcyggZWxlbSApO1xuICB9XG5cbiAgLy8gZmluZCBjaGlsZHJlblxuICAvLyBubyBub24tZWxlbWVudCBub2RlcywgIzE0M1xuICB2YXIgbm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuICBpZiAoICFub2RlVHlwZSB8fCAhZWxlbWVudE5vZGVUeXBlc1sgbm9kZVR5cGUgXSApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGNoaWxkSW1ncyA9IGVsZW0ucXVlcnlTZWxlY3RvckFsbCgnaW1nJyk7XG4gIC8vIGNvbmNhdCBjaGlsZEVsZW1zIHRvIGZpbHRlckZvdW5kIGFycmF5XG4gIGZvciAoIHZhciBpPTA7IGkgPCBjaGlsZEltZ3MubGVuZ3RoOyBpKysgKSB7XG4gICAgdmFyIGltZyA9IGNoaWxkSW1nc1tpXTtcbiAgICB0aGlzLmFkZEltYWdlKCBpbWcgKTtcbiAgfVxuXG4gIC8vIGdldCBjaGlsZCBiYWNrZ3JvdW5kIGltYWdlc1xuICBpZiAoIHR5cGVvZiB0aGlzLm9wdGlvbnMuYmFja2dyb3VuZCA9PSAnc3RyaW5nJyApIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoIHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kICk7XG4gICAgZm9yICggaT0wOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKysgKSB7XG4gICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgIHRoaXMuYWRkRWxlbWVudEJhY2tncm91bmRJbWFnZXMoIGNoaWxkICk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgZWxlbWVudE5vZGVUeXBlcyA9IHtcbiAgMTogdHJ1ZSxcbiAgOTogdHJ1ZSxcbiAgMTE6IHRydWVcbn07XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuYWRkRWxlbWVudEJhY2tncm91bmRJbWFnZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuICBpZiAoICFzdHlsZSApIHtcbiAgICAvLyBGaXJlZm94IHJldHVybnMgbnVsbCBpZiBpbiBhIGhpZGRlbiBpZnJhbWUgaHR0cHM6Ly9idWd6aWwubGEvNTQ4Mzk3XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGdldCB1cmwgaW5zaWRlIHVybChcIi4uLlwiKVxuICB2YXIgcmVVUkwgPSAvdXJsXFwoKFsnXCJdKT8oLio/KVxcMVxcKS9naTtcbiAgdmFyIG1hdGNoZXMgPSByZVVSTC5leGVjKCBzdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgKTtcbiAgd2hpbGUgKCBtYXRjaGVzICE9PSBudWxsICkge1xuICAgIHZhciB1cmwgPSBtYXRjaGVzICYmIG1hdGNoZXNbMl07XG4gICAgaWYgKCB1cmwgKSB7XG4gICAgICB0aGlzLmFkZEJhY2tncm91bmQoIHVybCwgZWxlbSApO1xuICAgIH1cbiAgICBtYXRjaGVzID0gcmVVUkwuZXhlYyggc3R5bGUuYmFja2dyb3VuZEltYWdlICk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtJbWFnZX0gaW1nXG4gKi9cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuYWRkSW1hZ2UgPSBmdW5jdGlvbiggaW1nICkge1xuICB2YXIgbG9hZGluZ0ltYWdlID0gbmV3IExvYWRpbmdJbWFnZSggaW1nICk7XG4gIHRoaXMuaW1hZ2VzLnB1c2goIGxvYWRpbmdJbWFnZSApO1xufTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5hZGRCYWNrZ3JvdW5kID0gZnVuY3Rpb24oIHVybCwgZWxlbSApIHtcbiAgdmFyIGJhY2tncm91bmQgPSBuZXcgQmFja2dyb3VuZCggdXJsLCBlbGVtICk7XG4gIHRoaXMuaW1hZ2VzLnB1c2goIGJhY2tncm91bmQgKTtcbn07XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcbiAgdGhpcy5wcm9ncmVzc2VkQ291bnQgPSAwO1xuICB0aGlzLmhhc0FueUJyb2tlbiA9IGZhbHNlO1xuICAvLyBjb21wbGV0ZSBpZiBubyBpbWFnZXNcbiAgaWYgKCAhdGhpcy5pbWFnZXMubGVuZ3RoICkge1xuICAgIHRoaXMuY29tcGxldGUoKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBmdW5jdGlvbiBvblByb2dyZXNzKCBpbWFnZSwgZWxlbSwgbWVzc2FnZSApIHtcbiAgICAvLyBIQUNLIC0gQ2hyb21lIHRyaWdnZXJzIGV2ZW50IGJlZm9yZSBvYmplY3QgcHJvcGVydGllcyBoYXZlIGNoYW5nZWQuICM4M1xuICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgX3RoaXMucHJvZ3Jlc3MoIGltYWdlLCBlbGVtLCBtZXNzYWdlICk7XG4gICAgfSk7XG4gIH1cblxuICB0aGlzLmltYWdlcy5mb3JFYWNoKCBmdW5jdGlvbiggbG9hZGluZ0ltYWdlICkge1xuICAgIGxvYWRpbmdJbWFnZS5vbmNlKCAncHJvZ3Jlc3MnLCBvblByb2dyZXNzICk7XG4gICAgbG9hZGluZ0ltYWdlLmNoZWNrKCk7XG4gIH0pO1xufTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5wcm9ncmVzcyA9IGZ1bmN0aW9uKCBpbWFnZSwgZWxlbSwgbWVzc2FnZSApIHtcbiAgdGhpcy5wcm9ncmVzc2VkQ291bnQrKztcbiAgdGhpcy5oYXNBbnlCcm9rZW4gPSB0aGlzLmhhc0FueUJyb2tlbiB8fCAhaW1hZ2UuaXNMb2FkZWQ7XG4gIC8vIHByb2dyZXNzIGV2ZW50XG4gIHRoaXMuZW1pdEV2ZW50KCAncHJvZ3Jlc3MnLCBbIHRoaXMsIGltYWdlLCBlbGVtIF0gKTtcbiAgaWYgKCB0aGlzLmpxRGVmZXJyZWQgJiYgdGhpcy5qcURlZmVycmVkLm5vdGlmeSApIHtcbiAgICB0aGlzLmpxRGVmZXJyZWQubm90aWZ5KCB0aGlzLCBpbWFnZSApO1xuICB9XG4gIC8vIGNoZWNrIGlmIGNvbXBsZXRlZFxuICBpZiAoIHRoaXMucHJvZ3Jlc3NlZENvdW50ID09IHRoaXMuaW1hZ2VzLmxlbmd0aCApIHtcbiAgICB0aGlzLmNvbXBsZXRlKCk7XG4gIH1cblxuICBpZiAoIHRoaXMub3B0aW9ucy5kZWJ1ZyAmJiBjb25zb2xlICkge1xuICAgIGNvbnNvbGUubG9nKCAncHJvZ3Jlc3M6ICcgKyBtZXNzYWdlLCBpbWFnZSwgZWxlbSApO1xuICB9XG59O1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gIHZhciBldmVudE5hbWUgPSB0aGlzLmhhc0FueUJyb2tlbiA/ICdmYWlsJyA6ICdkb25lJztcbiAgdGhpcy5pc0NvbXBsZXRlID0gdHJ1ZTtcbiAgdGhpcy5lbWl0RXZlbnQoIGV2ZW50TmFtZSwgWyB0aGlzIF0gKTtcbiAgdGhpcy5lbWl0RXZlbnQoICdhbHdheXMnLCBbIHRoaXMgXSApO1xuICBpZiAoIHRoaXMuanFEZWZlcnJlZCApIHtcbiAgICB2YXIganFNZXRob2QgPSB0aGlzLmhhc0FueUJyb2tlbiA/ICdyZWplY3QnIDogJ3Jlc29sdmUnO1xuICAgIHRoaXMuanFEZWZlcnJlZFsganFNZXRob2QgXSggdGhpcyApO1xuICB9XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gTG9hZGluZ0ltYWdlKCBpbWcgKSB7XG4gIHRoaXMuaW1nID0gaW1nO1xufVxuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRXZFbWl0dGVyLnByb3RvdHlwZSApO1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24oKSB7XG4gIC8vIElmIGNvbXBsZXRlIGlzIHRydWUgYW5kIGJyb3dzZXIgc3VwcG9ydHMgbmF0dXJhbCBzaXplcyxcbiAgLy8gdHJ5IHRvIGNoZWNrIGZvciBpbWFnZSBzdGF0dXMgbWFudWFsbHkuXG4gIHZhciBpc0NvbXBsZXRlID0gdGhpcy5nZXRJc0ltYWdlQ29tcGxldGUoKTtcbiAgaWYgKCBpc0NvbXBsZXRlICkge1xuICAgIC8vIHJlcG9ydCBiYXNlZCBvbiBuYXR1cmFsV2lkdGhcbiAgICB0aGlzLmNvbmZpcm0oIHRoaXMuaW1nLm5hdHVyYWxXaWR0aCAhPT0gMCwgJ25hdHVyYWxXaWR0aCcgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBJZiBub25lIG9mIHRoZSBjaGVja3MgYWJvdmUgbWF0Y2hlZCwgc2ltdWxhdGUgbG9hZGluZyBvbiBkZXRhY2hlZCBlbGVtZW50LlxuICB0aGlzLnByb3h5SW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgdGhpcy5wcm94eUltYWdlLmFkZEV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLnByb3h5SW1hZ2UuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICAvLyBiaW5kIHRvIGltYWdlIGFzIHdlbGwgZm9yIEZpcmVmb3guICMxOTFcbiAgdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbiAgdGhpcy5wcm94eUltYWdlLnNyYyA9IHRoaXMuaW1nLnNyYztcbn07XG5cbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUuZ2V0SXNJbWFnZUNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gIC8vIGNoZWNrIGZvciBub24temVybywgbm9uLXVuZGVmaW5lZCBuYXR1cmFsV2lkdGhcbiAgLy8gZml4ZXMgU2FmYXJpK0luZmluaXRlU2Nyb2xsK01hc29ucnkgYnVnIGluZmluaXRlLXNjcm9sbCM2NzFcbiAgcmV0dXJuIHRoaXMuaW1nLmNvbXBsZXRlICYmIHRoaXMuaW1nLm5hdHVyYWxXaWR0aDtcbn07XG5cbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUuY29uZmlybSA9IGZ1bmN0aW9uKCBpc0xvYWRlZCwgbWVzc2FnZSApIHtcbiAgdGhpcy5pc0xvYWRlZCA9IGlzTG9hZGVkO1xuICB0aGlzLmVtaXRFdmVudCggJ3Byb2dyZXNzJywgWyB0aGlzLCB0aGlzLmltZywgbWVzc2FnZSBdICk7XG59O1xuXG4vLyAtLS0tLSBldmVudHMgLS0tLS0gLy9cblxuLy8gdHJpZ2dlciBzcGVjaWZpZWQgaGFuZGxlciBmb3IgZXZlbnQgdHlwZVxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdmFyIG1ldGhvZCA9ICdvbicgKyBldmVudC50eXBlO1xuICBpZiAoIHRoaXNbIG1ldGhvZCBdICkge1xuICAgIHRoaXNbIG1ldGhvZCBdKCBldmVudCApO1xuICB9XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmNvbmZpcm0oIHRydWUsICdvbmxvYWQnICk7XG4gIHRoaXMudW5iaW5kRXZlbnRzKCk7XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jb25maXJtKCBmYWxzZSwgJ29uZXJyb3InICk7XG4gIHRoaXMudW5iaW5kRXZlbnRzKCk7XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLnVuYmluZEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnByb3h5SW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMucHJveHlJbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG4gIHRoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBCYWNrZ3JvdW5kIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIEJhY2tncm91bmQoIHVybCwgZWxlbWVudCApIHtcbiAgdGhpcy51cmwgPSB1cmw7XG4gIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gIHRoaXMuaW1nID0gbmV3IEltYWdlKCk7XG59XG5cbi8vIGluaGVyaXQgTG9hZGluZ0ltYWdlIHByb3RvdHlwZVxuQmFja2dyb3VuZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMb2FkaW5nSW1hZ2UucHJvdG90eXBlICk7XG5cbkJhY2tncm91bmQucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG4gIHRoaXMuaW1nLnNyYyA9IHRoaXMudXJsO1xuICAvLyBjaGVjayBpZiBpbWFnZSBpcyBhbHJlYWR5IGNvbXBsZXRlXG4gIHZhciBpc0NvbXBsZXRlID0gdGhpcy5nZXRJc0ltYWdlQ29tcGxldGUoKTtcbiAgaWYgKCBpc0NvbXBsZXRlICkge1xuICAgIHRoaXMuY29uZmlybSggdGhpcy5pbWcubmF0dXJhbFdpZHRoICE9PSAwLCAnbmF0dXJhbFdpZHRoJyApO1xuICAgIHRoaXMudW5iaW5kRXZlbnRzKCk7XG4gIH1cbn07XG5cbkJhY2tncm91bmQucHJvdG90eXBlLnVuYmluZEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xufTtcblxuQmFja2dyb3VuZC5wcm90b3R5cGUuY29uZmlybSA9IGZ1bmN0aW9uKCBpc0xvYWRlZCwgbWVzc2FnZSApIHtcbiAgdGhpcy5pc0xvYWRlZCA9IGlzTG9hZGVkO1xuICB0aGlzLmVtaXRFdmVudCggJ3Byb2dyZXNzJywgWyB0aGlzLCB0aGlzLmVsZW1lbnQsIG1lc3NhZ2UgXSApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0galF1ZXJ5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbkltYWdlc0xvYWRlZC5tYWtlSlF1ZXJ5UGx1Z2luID0gZnVuY3Rpb24oIGpRdWVyeSApIHtcbiAgalF1ZXJ5ID0galF1ZXJ5IHx8IHdpbmRvdy5qUXVlcnk7XG4gIGlmICggIWpRdWVyeSApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gc2V0IGxvY2FsIHZhcmlhYmxlXG4gICQgPSBqUXVlcnk7XG4gIC8vICQoKS5pbWFnZXNMb2FkZWQoKVxuICAkLmZuLmltYWdlc0xvYWRlZCA9IGZ1bmN0aW9uKCBvcHRpb25zLCBjYWxsYmFjayApIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgSW1hZ2VzTG9hZGVkKCB0aGlzLCBvcHRpb25zLCBjYWxsYmFjayApO1xuICAgIHJldHVybiBpbnN0YW5jZS5qcURlZmVycmVkLnByb21pc2UoICQodGhpcykgKTtcbiAgfTtcbn07XG4vLyB0cnkgbWFraW5nIHBsdWdpblxuSW1hZ2VzTG9hZGVkLm1ha2VKUXVlcnlQbHVnaW4oKTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnJldHVybiBJbWFnZXNMb2FkZWQ7XG5cbn0pO1xuIiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjUuMFxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMjAtMDQtMTBUMTU6MDdaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGZsYXQgPSBhcnIuZmxhdCA/IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5mbGF0LmNhbGwoIGFycmF5ICk7XG59IDogZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmNvbmNhdC5hcHBseSggW10sIGFycmF5ICk7XG59O1xuXG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgIC8vIFN1cHBvcnQ6IENocm9tZSA8PTU3LCBGaXJlZm94IDw9NTJcbiAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuICAgICAgLy8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gY2xhc3NpZnkgKmFueSogRE9NIG5vZGUgYXMgYSBmdW5jdGlvbi5cbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gXCJudW1iZXJcIjtcbiAgfTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub25jZTogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIG5vZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSwgdmFsLFxuXHRcdFx0c2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRpZiAoIG5vZGUgKSB7XG5cdFx0XHRmb3IgKCBpIGluIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA2NCssIEVkZ2UgMTgrXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgXCJub25jZVwiIHByb3BlcnR5IG9uIHNjcmlwdHMuXG5cdFx0XHRcdC8vIE9uIHRoZSBvdGhlciBoYW5kLCBqdXN0IHVzaW5nIGBnZXRBdHRyaWJ1dGVgIGlzIG5vdCBlbm91Z2ggYXNcblx0XHRcdFx0Ly8gdGhlIGBub25jZWAgYXR0cmlidXRlIGlzIHJlc2V0IHRvIGFuIGVtcHR5IHN0cmluZyB3aGVuZXZlciBpdFxuXHRcdFx0XHQvLyBiZWNvbWVzIGJyb3dzaW5nLWNvbnRleHQgY29ubmVjdGVkLlxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL2lzc3Vlcy8yMzY5XG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNub25jZS1hdHRyaWJ1dGVzXG5cdFx0XHRcdC8vIFRoZSBgbm9kZS5nZXRBdHRyaWJ1dGVgIGNoZWNrIHdhcyBhZGRlZCBmb3IgdGhlIHNha2Ugb2Zcblx0XHRcdFx0Ly8gYGpRdWVyeS5nbG9iYWxFdmFsYCBzbyB0aGF0IGl0IGNhbiBmYWtlIGEgbm9uY2UtY29udGFpbmluZyBub2RlXG5cdFx0XHRcdC8vIHZpYSBhbiBvYmplY3QuXG5cdFx0XHRcdHZhbCA9IG5vZGVbIGkgXSB8fCBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSggaSApO1xuXHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKCBpLCB2YWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuNS4wXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRldmVuOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gKCBpICsgMSApICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRvZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBpICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgT2JqZWN0LnByb3RvdHlwZSBwb2xsdXRpb25cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIG5hbWUgPT09IFwiX19wcm90b19fXCIgfHwgdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXHRcdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXG5cdFx0XHRcdFx0Ly8gRW5zdXJlIHByb3BlciB0eXBlIGZvciB0aGUgc291cmNlIHZhbHVlXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSAmJiAhQXJyYXkuaXNBcnJheSggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IFtdO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFjb3B5SXNBcnJheSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSB7fTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgcHJvdmlkZWQgY29udGV4dDsgZmFsbHMgYmFjayB0byB0aGUgZ2xvYmFsIG9uZVxuXHQvLyBpZiBub3Qgc3BlY2lmaWVkLlxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSwgb3B0aW9ucywgZG9jICkge1xuXHRcdERPTUV2YWwoIGNvZGUsIHsgbm9uY2U6IG9wdGlvbnMgJiYgb3B0aW9ucy5ub25jZSB9LCBkb2MgKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gZmxhdCggcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0gdG9UeXBlKCBvYmogKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIG9iaiApIHx8IGlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy41XG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanMuZm91bmRhdGlvbi9cbiAqXG4gKiBEYXRlOiAyMDIwLTAzLTE0XG4gKi9cbiggZnVuY3Rpb24oIHdpbmRvdyApIHtcbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICgge30gKS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hOYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbIGkgXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufFwiICtcblx0XHRcImlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXN5bnRheC0zLyNpZGVudC10b2tlbi1kaWFncmFtXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIj98XFxcXFxcXFxbXlxcXFxyXFxcXG5cXFxcZl18W1xcXFx3LV18W15cXDAtXFxcXHg3Zl0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdXG5cdFx0Ly8gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblxuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblxuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXCIgKSxcblx0cmRlc2NlbmQgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCJ8PlwiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmh0bWwgPSAvSFRNTCQvaSxcblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98XFxcXFxcXFwoW15cXFxcclxcXFxuXFxcXGZdKVwiLCBcImdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggZXNjYXBlLCBub25IZXggKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGUuc2xpY2UoIDEgKSAtIDB4MTAwMDA7XG5cblx0XHRyZXR1cm4gbm9uSGV4ID9cblxuXHRcdFx0Ly8gU3RyaXAgdGhlIGJhY2tzbGFzaCBwcmVmaXggZnJvbSBhIG5vbi1oZXggZXNjYXBlIHNlcXVlbmNlXG5cdFx0XHRub25IZXggOlxuXG5cdFx0XHQvLyBSZXBsYWNlIGEgaGV4YWRlY2ltYWwgZXNjYXBlIHNlcXVlbmNlIHdpdGggdGhlIGVuY29kZWQgVW5pY29kZSBjb2RlIHBvaW50XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExK1xuXHRcdFx0Ly8gRm9yIHZhbHVlcyBvdXRzaWRlIHRoZSBCYXNpYyBNdWx0aWxpbmd1YWwgUGxhbmUgKEJNUCksIG1hbnVhbGx5IGNvbnN0cnVjdCBhXG5cdFx0XHQvLyBzdXJyb2dhdGUgcGFpclxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArXG5cdFx0XHRcdGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRpbkRpc2FibGVkRmllbGRzZXQgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImZpZWxkc2V0XCI7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoIGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkgKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaE5hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKCBlbHMgKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKCB0YXJnZXRbIGorKyBdID0gZWxzWyBpKysgXSApICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmICggbWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoICggbSA9IG1hdGNoWyAxIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoIGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAyIF0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggbSA9IG1hdGNoWyAzIF0gKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoICFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApICkgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA4IG9ubHlcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0KCBub2RlVHlwZSAhPT0gMSB8fCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSApIHtcblxuXHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblxuXHRcdFx0XHQvLyBxU0EgY29uc2lkZXJzIGVsZW1lbnRzIG91dHNpZGUgYSBzY29waW5nIHJvb3Qgd2hlbiBldmFsdWF0aW5nIGNoaWxkIG9yXG5cdFx0XHRcdC8vIGRlc2NlbmRhbnQgY29tYmluYXRvcnMsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnQuXG5cdFx0XHRcdC8vIEluIHN1Y2ggY2FzZXMsIHdlIHdvcmsgYXJvdW5kIHRoZSBiZWhhdmlvciBieSBwcmVmaXhpbmcgZXZlcnkgc2VsZWN0b3IgaW4gdGhlXG5cdFx0XHRcdC8vIGxpc3Qgd2l0aCBhbiBJRCBzZWxlY3RvciByZWZlcmVuY2luZyB0aGUgc2NvcGUgY29udGV4dC5cblx0XHRcdFx0Ly8gVGhlIHRlY2huaXF1ZSBoYXMgdG8gYmUgdXNlZCBhcyB3ZWxsIHdoZW4gYSBsZWFkaW5nIGNvbWJpbmF0b3IgaXMgdXNlZFxuXHRcdFx0XHQvLyBhcyBzdWNoIHNlbGVjdG9ycyBhcmUgbm90IHJlY29nbml6ZWQgYnkgcXVlcnlTZWxlY3RvckFsbC5cblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgdGVjaG5pcXVlLlxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0KCByZGVzY2VuZC50ZXN0KCBzZWxlY3RvciApIHx8IHJjb21iaW5hdG9ycy50ZXN0KCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBXZSBjYW4gdXNlIDpzY29wZSBpbnN0ZWFkIG9mIHRoZSBJRCBoYWNrIGlmIHRoZSBicm93c2VyXG5cdFx0XHRcdFx0Ly8gc3VwcG9ydHMgaXQgJiBpZiB3ZSdyZSBub3QgY2hhbmdpbmcgdGhlIGNvbnRleHQuXG5cdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICE9PSBjb250ZXh0IHx8ICFzdXBwb3J0LnNjb3BlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFx0aWYgKCAoIG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSApICkge1xuXHRcdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKCBuaWQgPSBleHBhbmRvICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1sgaSBdID0gKCBuaWQgPyBcIiNcIiArIG5pZCA6IFwiOnNjb3BlXCIgKSArIFwiIFwiICtcblx0XHRcdFx0XHRcdFx0dG9TZWxlY3RvciggZ3JvdXBzWyBpIF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuICggY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSApO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdCggXCJ8XCIgKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFyclsgaSBdIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLm5leHRTaWJsaW5nICkgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKCBuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIiApICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdGluRGlzYWJsZWRGaWVsZHNldCggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKCBqID0gbWF0Y2hJbmRleGVzWyBpIF0gKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbIGogXSA9ICEoIG1hdGNoZXNbIGogXSA9IHNlZWRbIGogXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9ICk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbmFtZXNwYWNlID0gZWxlbS5uYW1lc3BhY2VVUkksXG5cdFx0ZG9jRWxlbSA9ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdC8vIEFzc3VtZSBIVE1MIHdoZW4gZG9jdW1lbnRFbGVtZW50IGRvZXNuJ3QgeWV0IGV4aXN0LCBzdWNoIGFzIGluc2lkZSBsb2FkaW5nIGlmcmFtZXNcblx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzQ4MzNcblx0cmV0dXJuICFyaHRtbC50ZXN0KCBuYW1lc3BhY2UgfHwgZG9jRWxlbSAmJiBkb2NFbGVtLm5vZGVOYW1lIHx8IFwiSFRNTFwiICk7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBkb2MgPT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBwcmVmZXJyZWREb2MgIT0gZG9jdW1lbnQgJiZcblx0XHQoIHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3ICkgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDExKywgRWRnZSAxMiAtIDE4KywgQ2hyb21lIDw9MTYgLSAyNSBvbmx5LCBGaXJlZm94IDw9My42IC0gMzEgb25seSxcblx0Ly8gU2FmYXJpIDQgLSA1IG9ubHksIE9wZXJhIDw9MTEuNiAtIDEyLnggb25seVxuXHQvLyBJRS9FZGdlICYgb2xkZXIgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgOnNjb3BlIHBzZXVkby1jbGFzcy5cblx0Ly8gU3VwcG9ydDogU2FmYXJpIDYuMCBvbmx5XG5cdC8vIFNhZmFyaSA2LjAgc3VwcG9ydHMgOnNjb3BlIGJ1dCBpdCdzIGFuIGFsaWFzIG9mIDpyb290IHRoZXJlLlxuXHRzdXBwb3J0LnNjb3BlID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cdFx0cmV0dXJuIHR5cGVvZiBlbC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHQhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6c2NvcGUgZmllbGRzZXQgZGl2XCIgKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NOYW1lXCIgKTtcblx0fSApO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KCBcIlwiICkgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcIipcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJpZFwiICkgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kWyBcIlRBR1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFsgXCJDTEFTU1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKCBzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApICkgKSB7XG5cblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHRcdHZhciBpbnB1dDtcblxuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltzZWxlY3RlZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJ+PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdFx0Ly8gSUUgMTEvRWRnZSBkb24ndCBmaW5kIGVsZW1lbnRzIG9uIGEgYFtuYW1lPScnXWAgcXVlcnkgaW4gc29tZSBjYXNlcy5cblx0XHRcdC8vIEFkZGluZyBhIHRlbXBvcmFyeSBhdHRyaWJ1dGUgdG8gdGhlIGRvY3VtZW50IGJlZm9yZSB0aGUgc2VsZWN0aW9uIHdvcmtzXG5cdFx0XHQvLyBhcm91bmQgdGhlIGlzc3VlLlxuXHRcdFx0Ly8gSW50ZXJlc3RpbmdseSwgSUUgMTAgJiBvbGRlciBkb24ndCBzZWVtIHRvIGhhdmUgdGhlIGlzc3VlLlxuXHRcdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIipuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqPVwiICtcblx0XHRcdFx0XHR3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6Y2hlY2tlZFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6Y2hlY2tlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCIuIy4rWyt+XVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD0zLjYgLSA1IG9ubHlcblx0XHRcdC8vIE9sZCBGaXJlZm94IGRvZXNuJ3QgdGhyb3cgb24gYSBiYWRseS1lc2NhcGVkIGlkZW50aWZpZXIuXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIlxcXFxcXGZcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiW1xcXFxyXFxcXG5cXFxcZl1cIiApO1xuXHRcdH0gKTtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9ZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZW5hYmxlZFwiICkubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmRpc2FibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogT3BlcmEgMTAgLSAxMSBvbmx5XG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbCggXCIqLDp4XCIgKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIiwuKjpcIiApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKCBtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IgKSApICkgKSB7XG5cblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbiggXCJ8XCIgKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKCBcInxcIiApICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpICk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBiID0gYi5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCAhc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlICkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYSA9PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGEgKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBiID09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYiApICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0cmV0dXJuIGEgPT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFsgaSBdID09PSBicFsgaSBdICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblxuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwWyBpIF0sIGJwWyBpIF0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0YXBbIGkgXSA9PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFsgaSBdID09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdHNldERvY3VtZW50KCBlbGVtICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cblx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggZXhwciwgdHJ1ZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKCBzZWwgKyBcIlwiICkucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblxuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAoIG5vZGUgPSBlbGVtWyBpKysgXSApICkge1xuXG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblxuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbIDMgXSA9ICggbWF0Y2hbIDMgXSB8fCBtYXRjaFsgNCBdIHx8XG5cdFx0XHRcdG1hdGNoWyA1IF0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDIgXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFsgMyBdID0gXCIgXCIgKyBtYXRjaFsgMyBdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblxuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDEgXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFsgNCBdID0gKyggbWF0Y2hbIDQgXSA/XG5cdFx0XHRcdFx0bWF0Y2hbIDUgXSArICggbWF0Y2hbIDYgXSB8fCAxICkgOlxuXHRcdFx0XHRcdDIgKiAoIG1hdGNoWyAzIF0gPT09IFwiZXZlblwiIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFsgNSBdID0gKyggKCBtYXRjaFsgNyBdICsgbWF0Y2hbIDggXSApIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWyA2IF0gJiYgbWF0Y2hbIDIgXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbIFwiQ0hJTERcIiBdLnRlc3QoIG1hdGNoWyAwIF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSBtYXRjaFsgNCBdIHx8IG1hdGNoWyA1IF0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdCggZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkgKSAmJlxuXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoIGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCApICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdCggcGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFx0XHRcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSApICYmIGNsYXNzQ2FjaGUoXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8XG5cdFx0XHRcdFx0XHRcdFx0XCJcIlxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9ICk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cblxuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgX2FyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9IG5vZGVbIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8ICggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblxuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSB1bm1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpIF0gPSAhKCBtYXRjaGVzWyBpIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KCBsYW5nIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwieG1sOmxhbmdcIiApIHx8IGVsZW0uZ2V0QXR0cmlidXRlKCBcImxhbmdcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoIGVsZW0gPSBlbGVtLnBhcmVudE5vZGUgKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiZcblx0XHRcdFx0KCAhZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSApICYmXG5cdFx0XHRcdCEhKCBlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4ICk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQgKSB8fFxuXHRcdFx0XHQoIG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCApO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zWyBcImVtcHR5XCIgXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoICggYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICkgPT0gbnVsbCB8fFxuXHRcdFx0XHRcdGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSApLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSApLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9ICksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/XG5cdFx0XHRcdGFyZ3VtZW50ICsgbGVuZ3RoIDpcblx0XHRcdFx0YXJndW1lbnQgPiBsZW5ndGggP1xuXHRcdFx0XHRcdGxlbmd0aCA6XG5cdFx0XHRcdFx0YXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9IClcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zWyBcIm50aFwiIF0gPSBFeHByLnBzZXVkb3NbIFwiZXFcIiBdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAoIG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbIDAgXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAoIHRva2VucyA9IFtdICkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKCBtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFsgMCBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9ICk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAoIG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSApICYmICggIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQoIG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApICkgKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zWyBpIF0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblxuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKCBlbGVtWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAoIG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdICkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKCBuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoICggbmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbIGkgXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1sgMCBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzWyBpIF0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKFxuXHRcdFx0XHRzZWxlY3RvciB8fCBcIipcIixcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCxcblx0XHRcdFx0W11cblx0XHRcdCksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKCBlbGVtID0gdGVtcFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFsgaSBdIF0gPSAhKCBtYXRjaGVySW5bIHBvc3RNYXBbIGkgXSBdID0gZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAoIG1hdGNoZXJJblsgaSBdID0gZWxlbSApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsICggbWF0Y2hlck91dCA9IFtdICksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICYmXG5cdFx0XHRcdFx0XHQoIHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwWyBpIF0gKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkWyB0ZW1wIF0gPSAhKCByZXN1bHRzWyB0ZW1wIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAwIF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVsgXCIgXCIgXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KCBjaGVja0NvbnRleHQgPSBjb250ZXh0ICkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblxuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGkgXS50eXBlIF0gKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKCBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlciApIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zWyBpIF0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbIGkgXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGogXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3RvcihcblxuXHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0dG9rZW5zXG5cdFx0XHRcdFx0XHQuc2xpY2UoIDAsIGkgLSAxIClcblx0XHRcdFx0XHRcdC5jb25jYXQoIHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9IClcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICggdG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkgKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbIFwiVEFHXCIgXSggXCIqXCIsIG91dGVybW9zdCApLFxuXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoIGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xICksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtICkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBzZXRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEoIHVubWF0Y2hlZFsgaSBdIHx8IHNldE1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbIGkgXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoWyBpIF0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoXG5cdFx0XHRzZWxlY3Rvcixcblx0XHRcdG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApXG5cdFx0KTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKCBzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yICkgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKCB0b2tlbiA9IHRva2Vuc1sgMCBdICkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMSBdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kWyBcIklEXCIgXSggdG9rZW4ubWF0Y2hlc1sgMCBdXG5cdFx0XHRcdC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLCBjb250ZXh0ICkgfHwgW10gKVsgMCBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwclsgXCJuZWVkc0NvbnRleHRcIiBdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zWyBpIF07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKCB0eXBlID0gdG9rZW4udHlwZSApIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoIGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSApICkge1xuXG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoICggc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1sgMCBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWyAwIF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dFxuXHRcdFx0XHQpICkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoIFwiXCIgKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKCBcIlwiICkgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICkgKSAmIDE7XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwiaHJlZlwiICkgPT09IFwiI1wiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSApO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBfbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKCBcImRpc2FibGVkXCIgKSA9PSBudWxsO1xufSApICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHQoIHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApICkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSApO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59ICkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufTtcbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdGlmICggZWxlbS5jb250ZW50RG9jdW1lbnQgIT0gbnVsbCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMStcblx0XHRcdC8vIDxvYmplY3Q+IGVsZW1lbnRzIHdpdGggbm8gYGRhdGFgIGF0dHJpYnV0ZSBoYXMgYW4gb2JqZWN0XG5cdFx0XHQvLyBgY29udGVudERvY3VtZW50YCB3aXRoIGEgYG51bGxgIHByb3RvdHlwZS5cblx0XHRcdGdldFByb3RvKCBlbGVtLmNvbnRlbnREb2N1bWVudCApICkge1xuXG5cdFx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG5cdFx0Ly8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG5cdFx0Ly8gZG9uJ3Qgc3VwcG9ydCBpdC5cblx0XHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcblx0XHRcdGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdGh0bWx3aGl0ZSA9ICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gbG9ja2VkIHx8IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiB0b1R5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QsIG5vVmFsdWUgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb250cm9sIGByZXNvbHZlYCBhcmd1bWVudHMgYnkgbGV0dGluZyBBcnJheSNzbGljZSBjYXN0IGJvb2xlYW4gYG5vVmFsdWVgIHRvIGludGVnZXI6XG5cdFx0XHQvLyAqIGZhbHNlOiBbIHZhbHVlIF0uc2xpY2UoIDAgKSA9PiByZXNvbHZlKCB2YWx1ZSApXG5cdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0cmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0uc2xpY2UoIG5vVmFsdWUgKSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0gKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIF9pLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0gaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIG1hc3Rlci5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIHRvVHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwgX2tleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBfYWxsLCBsZXR0ZXIgKSB7XG5cdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbn1cblxuLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuLy8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuLy8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuZnVuY3Rpb24gY2FtZWxDYXNlKCBzdHJpbmcgKSB7XG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xufVxudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IE9iamVjdC5jcmVhdGUoIG51bGwgKTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBjYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBjYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuXHR2YXIgaXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cdFx0fSxcblx0XHRjb21wb3NlZCA9IHsgY29tcG9zZWQ6IHRydWUgfTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBpT1MgMTAuMCAtIDEwLjIgb25seVxuXHQvLyBDaGVjayBhdHRhY2htZW50IGFjcm9zcyBzaGFkb3cgRE9NIGJvdW5kYXJpZXMgd2hlbiBwb3NzaWJsZSAoZ2gtMzUwNClcblx0Ly8gU3VwcG9ydDogaU9TIDEwLjAtMTAuMiBvbmx5XG5cdC8vIEVhcmx5IGlPUyAxMCB2ZXJzaW9ucyBzdXBwb3J0IGBhdHRhY2hTaGFkb3dgIGJ1dCBub3QgYGdldFJvb3ROb2RlYCxcblx0Ly8gbGVhZGluZyB0byBlcnJvcnMuIFdlIG5lZWQgdG8gY2hlY2sgZm9yIGBnZXRSb290Tm9kZWAuXG5cdGlmICggZG9jdW1lbnRFbGVtZW50LmdldFJvb3ROb2RlICkge1xuXHRcdGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Um9vdE5vZGUoIGNvbXBvc2VkICkgPT09IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHR9O1xuXHR9XG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0aXNBdHRhY2hlZCggZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSBlbGVtLm5vZGVUeXBlICYmXG5cdFx0XHQoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKikvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHQvLyBJRSA8PTkgcmVwbGFjZXMgPG9wdGlvbj4gdGFncyB3aXRoIHRoZWlyIGNvbnRlbnRzIHdoZW4gaW5zZXJ0ZWQgb3V0c2lkZSBvZlxuXHQvLyB0aGUgc2VsZWN0IGVsZW1lbnQuXG5cdGRpdi5pbm5lckhUTUwgPSBcIjxvcHRpb24+PC9vcHRpb24+XCI7XG5cdHN1cHBvcnQub3B0aW9uID0gISFkaXYubGFzdENoaWxkO1xufSApKCk7XG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuaWYgKCAhc3VwcG9ydC5vcHRpb24gKSB7XG5cdHdyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbiA9IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXTtcbn1cblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBhdHRhY2hlZCwgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0YXR0YWNoZWQgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGF0dGFjaGVkICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTErXG4vLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91cywgZXhjZXB0IHdoZW4gdGhleSBhcmUgbm8tb3AuXG4vLyBTbyBleHBlY3QgZm9jdXMgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBhbHJlYWR5IGFjdGl2ZSxcbi8vIGFuZCBibHVyIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgbm90IGFscmVhZHkgYWN0aXZlLlxuLy8gKGZvY3VzIGFuZCBibHVyIGFyZSBhbHdheXMgc3luY2hyb25vdXMgaW4gb3RoZXIgc3VwcG9ydGVkIGJyb3dzZXJzLFxuLy8gdGhpcyBqdXN0IGRlZmluZXMgd2hlbiB3ZSBjYW4gY291bnQgb24gaXQpLlxuZnVuY3Rpb24gZXhwZWN0U3luYyggZWxlbSwgdHlwZSApIHtcblx0cmV0dXJuICggZWxlbSA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSApID09PSAoIHR5cGUgPT09IFwiZm9jdXNcIiApO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gQWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgY2FuIHRocm93IHVuZXhwZWN0ZWRseVxuLy8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzkzXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIE9ubHkgYXR0YWNoIGV2ZW50cyB0byBvYmplY3RzIHRoYXQgYWNjZXB0IGRhdGFcblx0XHRpZiAoICFhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0gT2JqZWN0LmNyZWF0ZSggbnVsbCApO1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXG5cdFx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHRcdGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKSxcblxuXHRcdFx0aGFuZGxlcnMgPSAoXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApXG5cdFx0XHRcdClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZSBldmVudCBpcyBuYW1lc3BhY2VkLCB0aGVuIGVhY2ggaGFuZGxlciBpcyBvbmx5IGludm9rZWQgaWYgaXQgaXNcblx0XHRcdFx0Ly8gc3BlY2lhbGx5IHVuaXZlcnNhbCBvciBpdHMgbmFtZXNwYWNlcyBhcmUgYSBzdXBlcnNldCBvZiB0aGUgZXZlbnQncy5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBoYW5kbGVPYmoubmFtZXNwYWNlID09PSBmYWxzZSB8fFxuXHRcdFx0XHRcdGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCB0byBlbnN1cmUgY29ycmVjdCBzdGF0ZSBmb3IgY2hlY2thYmxlIGlucHV0c1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gZGF0YVByaXYuc2V0KCBlbCwgXCJjbGlja1wiLCAuLi4gKVxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiLCByZXR1cm5UcnVlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlcmluZyBhIGNsaWNrXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIHN1cHByZXNzIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0Ly8gQWxzbyBwcmV2ZW50IGl0IGlmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGUgYSBsZXZlcmFnZWQgbmF0aXZlLWV2ZW50IHN0YWNrXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXHRcdFx0XHRyZXR1cm4gcmNoZWNrYWJsZVR5cGUudGVzdCggdGFyZ2V0LnR5cGUgKSAmJlxuXHRcdFx0XHRcdHRhcmdldC5jbGljayAmJiBub2RlTmFtZSggdGFyZ2V0LCBcImlucHV0XCIgKSAmJlxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGFyZ2V0LCBcImNsaWNrXCIgKSB8fFxuXHRcdFx0XHRcdG5vZGVOYW1lKCB0YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gRW5zdXJlIHRoZSBwcmVzZW5jZSBvZiBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGhhbmRsZXMgbWFudWFsbHktdHJpZ2dlcmVkXG4vLyBzeW50aGV0aWMgZXZlbnRzIGJ5IGludGVycnVwdGluZyBwcm9ncmVzcyB1bnRpbCByZWludm9rZWQgaW4gcmVzcG9uc2UgdG9cbi8vICpuYXRpdmUqIGV2ZW50cyB0aGF0IGl0IGZpcmVzIGRpcmVjdGx5LCBlbnN1cmluZyB0aGF0IHN0YXRlIGNoYW5nZXMgaGF2ZVxuLy8gYWxyZWFkeSBvY2N1cnJlZCBiZWZvcmUgb3RoZXIgbGlzdGVuZXJzIGFyZSBpbnZva2VkLlxuZnVuY3Rpb24gbGV2ZXJhZ2VOYXRpdmUoIGVsLCB0eXBlLCBleHBlY3RTeW5jICkge1xuXG5cdC8vIE1pc3NpbmcgZXhwZWN0U3luYyBpbmRpY2F0ZXMgYSB0cmlnZ2VyIGNhbGwsIHdoaWNoIG11c3QgZm9yY2Ugc2V0dXAgdGhyb3VnaCBqUXVlcnkuZXZlbnQuYWRkXG5cdGlmICggIWV4cGVjdFN5bmMgKSB7XG5cdFx0aWYgKCBkYXRhUHJpdi5nZXQoIGVsLCB0eXBlICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCByZXR1cm5UcnVlICk7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlZ2lzdGVyIHRoZSBjb250cm9sbGVyIGFzIGEgc3BlY2lhbCB1bml2ZXJzYWwgaGFuZGxlciBmb3IgYWxsIGV2ZW50IG5hbWVzcGFjZXNcblx0ZGF0YVByaXYuc2V0KCBlbCwgdHlwZSwgZmFsc2UgKTtcblx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHtcblx0XHRuYW1lc3BhY2U6IGZhbHNlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBub3RBc3luYywgcmVzdWx0LFxuXHRcdFx0XHRzYXZlZCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRpZiAoICggZXZlbnQuaXNUcmlnZ2VyICYgMSApICYmIHRoaXNbIHR5cGUgXSApIHtcblxuXHRcdFx0XHQvLyBJbnRlcnJ1cHQgcHJvY2Vzc2luZyBvZiB0aGUgb3V0ZXIgc3ludGhldGljIC50cmlnZ2VyKCllZCBldmVudFxuXHRcdFx0XHQvLyBTYXZlZCBkYXRhIHNob3VsZCBiZSBmYWxzZSBpbiBzdWNoIGNhc2VzLCBidXQgbWlnaHQgYmUgYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdFxuXHRcdFx0XHQvLyBmcm9tIGFuIGFzeW5jIG5hdGl2ZSBoYW5kbGVyIChnaC00MzUwKVxuXHRcdFx0XHRpZiAoICFzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBhcmd1bWVudHMgZm9yIHVzZSB3aGVuIGhhbmRsaW5nIHRoZSBpbm5lciBuYXRpdmUgZXZlbnRcblx0XHRcdFx0XHQvLyBUaGVyZSB3aWxsIGFsd2F5cyBiZSBhdCBsZWFzdCBvbmUgYXJndW1lbnQgKGFuIGV2ZW50IG9iamVjdCksIHNvIHRoaXMgYXJyYXlcblx0XHRcdFx0XHQvLyB3aWxsIG5vdCBiZSBjb25mdXNlZCB3aXRoIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3QuXG5cdFx0XHRcdFx0c2F2ZWQgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHNhdmVkICk7XG5cblx0XHRcdFx0XHQvLyBUcmlnZ2VyIHRoZSBuYXRpdmUgZXZlbnQgYW5kIGNhcHR1cmUgaXRzIHJlc3VsdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdC8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzXG5cdFx0XHRcdFx0bm90QXN5bmMgPSBleHBlY3RTeW5jKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0dGhpc1sgdHlwZSBdKCk7XG5cdFx0XHRcdFx0cmVzdWx0ID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0IHx8IG5vdEFzeW5jICkge1xuXHRcdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBmYWxzZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSB7fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYW5jZWwgdGhlIG91dGVyIHN5bnRoZXRpYyBldmVudFxuXHRcdFx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdC52YWx1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgZm9yIGFuIGV2ZW50IHdpdGggYSBidWJibGluZyBzdXJyb2dhdGVcblx0XHRcdFx0Ly8gKGZvY3VzIG9yIGJsdXIpLCBhc3N1bWUgdGhhdCB0aGUgc3Vycm9nYXRlIGFscmVhZHkgcHJvcGFnYXRlZCBmcm9tIHRyaWdnZXJpbmcgdGhlXG5cdFx0XHRcdC8vIG5hdGl2ZSBldmVudCBhbmQgcHJldmVudCB0aGF0IGZyb20gaGFwcGVuaW5nIGFnYWluIGhlcmUuXG5cdFx0XHRcdC8vIFRoaXMgdGVjaG5pY2FsbHkgZ2V0cyB0aGUgb3JkZXJpbmcgd3Jvbmcgdy5yLnQuIHRvIGAudHJpZ2dlcigpYCAoaW4gd2hpY2ggdGhlXG5cdFx0XHRcdC8vIGJ1YmJsaW5nIHN1cnJvZ2F0ZSBwcm9wYWdhdGVzICphZnRlciogdGhlIG5vbi1idWJibGluZyBiYXNlKSwgYnV0IHRoYXQgc2VlbXNcblx0XHRcdFx0Ly8gbGVzcyBiYWQgdGhhbiBkdXBsaWNhdGlvbi5cblx0XHRcdFx0fSBlbHNlIGlmICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9ICkuZGVsZWdhdGVUeXBlICkge1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBuYXRpdmUgZXZlbnQgdHJpZ2dlcmVkIGFib3ZlLCBldmVyeXRoaW5nIGlzIG5vdyBpbiBvcmRlclxuXHRcdFx0Ly8gRmlyZSBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgd2l0aCB0aGUgb3JpZ2luYWwgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0Ly8gLi4uYW5kIGNhcHR1cmUgdGhlIHJlc3VsdFxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHtcblx0XHRcdFx0XHR2YWx1ZTogalF1ZXJ5LmV2ZW50LnRyaWdnZXIoXG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdFx0Ly8gRXh0ZW5kIHdpdGggdGhlIHByb3RvdHlwZSB0byByZXNldCB0aGUgYWJvdmUgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcblx0XHRcdFx0XHRcdGpRdWVyeS5leHRlbmQoIHNhdmVkWyAwIF0sIGpRdWVyeS5FdmVudC5wcm90b3R5cGUgKSxcblx0XHRcdFx0XHRcdHNhdmVkLnNsaWNlKCAxICksXG5cdFx0XHRcdFx0XHR0aGlzXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gQWJvcnQgaGFuZGxpbmcgb2YgdGhlIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjb2RlOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbmpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCB0eXBlLCBkZWxlZ2F0ZVR5cGUgKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiZm9jdXNcIiwgLi4uIClcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJibHVyXCIsIC4uLiApXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSwgZXhwZWN0U3luYyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0ZGVsZWdhdGVUeXBlOiBkZWxlZ2F0ZVR5cGVcblx0fTtcbn0gKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmdldCggc3JjICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRlc3QsIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBmbGF0KCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggdmFsdWVJc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICYmICggbm9kZS50eXBlIHx8IFwiXCIgKS50b0xvd2VyQ2FzZSgpICAhPT0gXCJtb2R1bGVcIiApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCAmJiAhbm9kZS5ub01vZHVsZSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRub25jZTogbm9kZS5ub25jZSB8fCBub2RlLmdldEF0dHJpYnV0ZSggXCJub25jZVwiIClcblx0XHRcdFx0XHRcdFx0XHR9LCBkb2MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgbm9kZSwgZG9jICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBpc0F0dGFjaGVkKCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbDtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjayApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmNhbGwoIGVsZW0gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxudmFyIHJib3hTdHlsZSA9IG5ldyBSZWdFeHAoIGNzc0V4cGFuZC5qb2luKCBcInxcIiApLCBcImlcIiApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7XCIgK1xuXHRcdFx0XCJtYXJnaW4tdG9wOjFweDtwYWRkaW5nOjA7Ym9yZGVyOjBcIjtcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDtcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ3aWR0aDo2MCU7dG9wOjElXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUubWFyZ2luTGVmdCApID09PSAxMjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIFNhZmFyaSA8PTkuMSAtIDEwLjEsIGlPUyA8PTcuMCAtIDkuM1xuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5yaWdodCA9IFwiNjAlXCI7XG5cdFx0cGl4ZWxCb3hTdHlsZXNWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLnJpZ2h0ICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0XHQvLyBEZXRlY3QgbWlzcmVwb3J0aW5nIG9mIGNvbnRlbnQgZGltZW5zaW9ucyBmb3IgYm94LXNpemluZzpib3JkZXItYm94IGVsZW1lbnRzXG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLndpZHRoICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG92ZXJmbG93OnNjcm9sbCBzY3Jld2luZXNzIChnaC0zNjk5KVxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTY0XG5cdFx0Ly8gRG9uJ3QgZ2V0IHRyaWNrZWQgd2hlbiB6b29tIGFmZmVjdHMgb2Zmc2V0V2lkdGggKGdoLTQwMjkpXG5cdFx0ZGl2LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdHNjcm9sbGJveFNpemVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdi5vZmZzZXRXaWR0aCAvIDMgKSA9PT0gMTI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gcm91bmRQaXhlbE1lYXN1cmVzKCBtZWFzdXJlICkge1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKCBwYXJzZUZsb2F0KCBtZWFzdXJlICkgKTtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgc2Nyb2xsYm94U2l6ZVZhbCwgcGl4ZWxCb3hTdHlsZXNWYWwsXG5cdFx0cmVsaWFibGVUckRpbWVuc2lvbnNWYWwsIHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fSxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEJlaGF2aW9yIGluIElFIDkgaXMgbW9yZSBzdWJ0bGUgdGhhbiBpbiBuZXdlciB2ZXJzaW9ucyAmIGl0IHBhc3Nlc1xuXHRcdC8vIHNvbWUgdmVyc2lvbnMgb2YgdGhpcyB0ZXN0OyBtYWtlIHN1cmUgbm90IHRvIG1ha2UgaXQgcGFzcyB0aGVyZSFcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdGFibGUsIHRyLCB0ckNoaWxkLCB0clN0eWxlO1xuXHRcdFx0aWYgKCByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidGFibGVcIiApO1xuXHRcdFx0XHR0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidHJcIiApO1xuXHRcdFx0XHR0ckNoaWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdFx0XHRcdHRhYmxlLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHhcIjtcblx0XHRcdFx0dHIuc3R5bGUuaGVpZ2h0ID0gXCIxcHhcIjtcblx0XHRcdFx0dHJDaGlsZC5zdHlsZS5oZWlnaHQgPSBcIjlweFwiO1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudFxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdGFibGUgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHIgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHJDaGlsZCApO1xuXG5cdFx0XHRcdHRyU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggdHIgKTtcblx0XHRcdFx0cmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPSBwYXJzZUludCggdHJTdHlsZS5oZWlnaHQgKSA+IDM7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCB0YWJsZSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgbmVlZGVkIGZvcjpcblx0Ly8gICAuY3NzKCdmaWx0ZXInKSAoSUUgOSBvbmx5LCAjMTI1MzcpXG5cdC8vICAgLmNzcygnLS1jdXN0b21Qcm9wZXJ0eSkgKCMzMTQ0KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWlzQXR0YWNoZWQoIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxCb3hTdHlsZXMoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcmJveFN0eWxlLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyIGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZSxcblx0dmVuZG9yUHJvcHMgPSB7fTtcblxuLy8gUmV0dXJuIGEgdmVuZG9yLXByZWZpeGVkIHByb3BlcnR5IG9yIHVuZGVmaW5lZFxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHBvdGVudGlhbGx5LW1hcHBlZCBqUXVlcnkuY3NzUHJvcHMgb3IgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgZmluYWwgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSB8fCB2ZW5kb3JQcm9wc1sgbmFtZSBdO1xuXG5cdGlmICggZmluYWwgKSB7XG5cdFx0cmV0dXJuIGZpbmFsO1xuXHR9XG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cdHJldHVybiB2ZW5kb3JQcm9wc1sgbmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB8fCBuYW1lO1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdHJjdXN0b21Qcm9wID0gL14tLS8sXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9O1xuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggX2VsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYm94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIGJveCwgaXNCb3JkZXJCb3gsIHN0eWxlcywgY29tcHV0ZWRWYWwgKSB7XG5cdHZhciBpID0gZGltZW5zaW9uID09PSBcIndpZHRoXCIgPyAxIDogMCxcblx0XHRleHRyYSA9IDAsXG5cdFx0ZGVsdGEgPSAwO1xuXG5cdC8vIEFkanVzdG1lbnQgbWF5IG5vdCBiZSBuZWNlc3Nhcnlcblx0aWYgKCBib3ggPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpblxuXHRcdGlmICggYm94ID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgYm94ICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBjb250ZW50LWJveCwgd2UncmUgc2Vla2luZyBcInBhZGRpbmdcIiBvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCJcblx0XHRpZiAoICFpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gQWRkIHBhZGRpbmdcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBGb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiLCBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEJ1dCBzdGlsbCBrZWVwIHRyYWNrIG9mIGl0IG90aGVyd2lzZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXh0cmEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBib3JkZXItYm94IChjb250ZW50ICsgcGFkZGluZyArIGJvcmRlciksIHdlJ3JlIHNlZWtpbmcgXCJjb250ZW50XCIgb3Jcblx0XHQvLyBcInBhZGRpbmdcIiBvciBcIm1hcmdpblwiXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiLCBzdWJ0cmFjdCBwYWRkaW5nXG5cdFx0XHRpZiAoIGJveCA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIgb3IgXCJwYWRkaW5nXCIsIHN1YnRyYWN0IGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWNjb3VudCBmb3IgcG9zaXRpdmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlciB3aGVuIHJlcXVlc3RlZCBieSBwcm92aWRpbmcgY29tcHV0ZWRWYWxcblx0aWYgKCAhaXNCb3JkZXJCb3ggJiYgY29tcHV0ZWRWYWwgPj0gMCApIHtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyBhIHJvdW5kZWQgc3VtIG9mIGNvbnRlbnQsIHBhZGRpbmcsIHNjcm9sbCBndXR0ZXIsIGFuZCBib3JkZXJcblx0XHQvLyBBc3N1bWluZyBpbnRlZ2VyIHNjcm9sbCBndXR0ZXIsIHN1YnRyYWN0IHRoZSByZXN0IGFuZCByb3VuZCBkb3duXG5cdFx0ZGVsdGEgKz0gTWF0aC5tYXgoIDAsIE1hdGguY2VpbChcblx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRjb21wdXRlZFZhbCAtXG5cdFx0XHRkZWx0YSAtXG5cdFx0XHRleHRyYSAtXG5cdFx0XHQwLjVcblxuXHRcdC8vIElmIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyB1bmtub3duLCB0aGVuIHdlIGNhbid0IGRldGVybWluZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyXG5cdFx0Ly8gVXNlIGFuIGV4cGxpY2l0IHplcm8gdG8gYXZvaWQgTmFOIChnaC0zOTY0KVxuXHRcdCkgKSB8fCAwO1xuXHR9XG5cblx0cmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtNDMyMikuXG5cdFx0Ly8gRmFrZSBjb250ZW50LWJveCB1bnRpbCB3ZSBrbm93IGl0J3MgbmVlZGVkIHRvIGtub3cgdGhlIHRydWUgdmFsdWUuXG5cdFx0Ym94U2l6aW5nTmVlZGVkID0gIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCBleHRyYSxcblx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3gsXG5cblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIGRpbWVuc2lvbiwgc3R5bGVzICksXG5cdFx0b2Zmc2V0UHJvcCA9IFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICk7XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdC8vIFJldHVybiBhIGNvbmZvdW5kaW5nIG5vbi1waXhlbCB2YWx1ZSBvciBmZWlnbiBpZ25vcmFuY2UsIGFzIGFwcHJvcHJpYXRlLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRpZiAoICFleHRyYSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHRcdHZhbCA9IFwiYXV0b1wiO1xuXHR9XG5cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBVc2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciB3aGVuIGJveCBzaXppbmcgaXMgdW5yZWxpYWJsZS5cblx0Ly8gSW4gdGhvc2UgY2FzZXMsIHRoZSBjb21wdXRlZCB2YWx1ZSBjYW4gYmUgdHJ1c3RlZCB0byBiZSBib3JkZXItYm94LlxuXHRpZiAoICggIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSAmJiBpc0JvcmRlckJveCB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTAgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEludGVyZXN0aW5nbHksIGluIHNvbWUgY2FzZXMgSUUgOSBkb2Vzbid0IHN1ZmZlciBmcm9tIHRoaXMgaXNzdWUuXG5cdFx0IXN1cHBvcnQucmVsaWFibGVUckRpbWVuc2lvbnMoKSAmJiBub2RlTmFtZSggZWxlbSwgXCJ0clwiICkgfHxcblxuXHRcdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHRcdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0XHR2YWwgPT09IFwiYXV0b1wiIHx8XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIC0gNC4zIG9ubHlcblx0XHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIG1pc3JlcG9ydGVkIGlubGluZSBkaW1lbnNpb25zIChnaC0zNjAyKVxuXHRcdCFwYXJzZUZsb2F0KCB2YWwgKSAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImlubGluZVwiICkgJiZcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyB2aXNpYmxlICYgY29ubmVjdGVkXG5cdFx0ZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHRcdC8vIFdoZXJlIGF2YWlsYWJsZSwgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGFwcHJveGltYXRlIGJvcmRlciBib3ggZGltZW5zaW9ucy5cblx0XHQvLyBXaGVyZSBub3QgYXZhaWxhYmxlIChlLmcuLCBTVkcpLCBhc3N1bWUgdW5yZWxpYWJsZSBib3gtc2l6aW5nIGFuZCBpbnRlcnByZXQgdGhlXG5cdFx0Ly8gcmV0cmlldmVkIHZhbHVlIGFzIGEgY29udGVudCBib3ggZGltZW5zaW9uLlxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBvZmZzZXRQcm9wIGluIGVsZW07XG5cdFx0aWYgKCB2YWx1ZUlzQm9yZGVyQm94ICkge1xuXHRcdFx0dmFsID0gZWxlbVsgb2Zmc2V0UHJvcCBdO1xuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBcIlwiIGFuZCBhdXRvXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gQWRqdXN0IGZvciB0aGUgZWxlbWVudCdzIGJveCBtb2RlbFxuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdGVsZW0sXG5cdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzLFxuXG5cdFx0XHQvLyBQcm92aWRlIHRoZSBjdXJyZW50IGNvbXB1dGVkIHNpemUgdG8gcmVxdWVzdCBzY3JvbGwgZ3V0dGVyIGNhbGN1bGF0aW9uIChnaC0zNTg5KVxuXHRcdFx0dmFsXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJncmlkQXJlYVwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtbkVuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblN0YXJ0XCI6IHRydWUsXG5cdFx0XCJncmlkUm93XCI6IHRydWUsXG5cdFx0XCJncmlkUm93RW5kXCI6IHRydWUsXG5cdFx0XCJncmlkUm93U3RhcnRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdC8vIFRoZSBpc0N1c3RvbVByb3AgY2hlY2sgY2FuIGJlIHJlbW92ZWQgaW4galF1ZXJ5IDQuMCB3aGVuIHdlIG9ubHkgYXV0by1hcHBlbmRcblx0XHRcdC8vIFwicHhcIiB0byBhIGZldyBoYXJkY29kZWQgdmFsdWVzLlxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIF9pLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdFx0XHQvLyBPbmx5IHJlYWQgc3R5bGVzLnBvc2l0aW9uIGlmIHRoZSB0ZXN0IGhhcyBhIGNoYW5jZSB0byBmYWlsXG5cdFx0XHRcdC8vIHRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3cuXG5cdFx0XHRcdHNjcm9sbGJveFNpemVCdWdneSA9ICFzdXBwb3J0LnNjcm9sbGJveFNpemUoKSAmJlxuXHRcdFx0XHRcdHN0eWxlcy5wb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiLFxuXG5cdFx0XHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTM5OTEpXG5cdFx0XHRcdGJveFNpemluZ05lZWRlZCA9IHNjcm9sbGJveFNpemVCdWdneSB8fCBleHRyYSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhID9cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHRcdCkgOlxuXHRcdFx0XHRcdDA7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc2Nyb2xsYm94U2l6ZUJ1Z2d5ICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdIHx8XG5cdFx0XHRcdFx0dHdlZW4uZWxlbS5zdHlsZVsgZmluYWxQcm9wTmFtZSggdHdlZW4ucHJvcCApIF0gIT0gbnVsbCApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0gRGF0ZS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2UtYXNjaWktd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VzVG9BcnJheSggdmFsdWUgKSB7XG5cdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdH1cblx0cmV0dXJuIFtdO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSxcblx0XHRcdGlzVmFsaWRWYWx1ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiBpc1ZhbGlkVmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCBpc1ZhbGlkVmFsdWUgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgdmFsdWVJc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuXHRzdG9wUHJvcGFnYXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uKCBlICkge1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH07XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCwgbGFzdEVsZW1lbnQsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IGxhc3RFbGVtZW50ID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0bGFzdEVsZW1lbnQgPSBjdXI7XG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKFxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApXG5cdFx0XHRcdClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIEhhbmRsZTogcmVndWxhciBub2RlcyAodmlhIGB0aGlzLm93bmVyRG9jdW1lbnRgKSwgd2luZG93XG5cdFx0XHRcdC8vICh2aWEgYHRoaXMuZG9jdW1lbnRgKSAmIGRvY3VtZW50ICh2aWEgYHRoaXNgKS5cblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IHsgZ3VpZDogRGF0ZS5ub3coKSB9O1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWw7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIHRvVHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBpc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHRpZiAoIGEgPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gXCJcIjtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIF9pLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSA9XG5cdFx0XHRcdFx0XHRcdFx0XHQoIHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSB8fCBbXSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5jb25jYXQoIG1hdGNoWyAyIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2guam9pbiggXCIsIFwiICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSBhbmQgc2hvdWxkIGJlIHByb2Nlc3NlZCwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSAmJiAoIHMucHJvY2Vzc0RhdGEgfHwgdHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiApICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZS5ndWlkKysgKSArXG5cdFx0XHRcdFx0dW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFVzZSBhIG5vb3AgY29udmVydGVyIGZvciBtaXNzaW5nIHNjcmlwdFxuXHRcdFx0aWYgKCAhaXNTdWNjZXNzICYmIGpRdWVyeS5pbkFycmF5KCBcInNjcmlwdFwiLCBzLmRhdGFUeXBlcyApID4gLTEgKSB7XG5cdFx0XHRcdHMuY29udmVydGVyc1sgXCJ0ZXh0IHNjcmlwdFwiIF0gPSBmdW5jdGlvbigpIHt9O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBfaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdHZhciBpO1xuXHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRpZiAoIGkudG9Mb3dlckNhc2UoKSA9PT0gXCJjb250ZW50LXR5cGVcIiApIHtcblx0XHRcdHMuY29udGVudFR5cGUgPSBzLmhlYWRlcnNbIGkgXSB8fCBcIlwiO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMsIGRvYyApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXG5cdFx0Ly8gT25seSBldmFsdWF0ZSB0aGUgcmVzcG9uc2UgaWYgaXQgaXMgc3VjY2Vzc2Z1bCAoZ2gtNDEyNilcblx0XHQvLyBkYXRhRmlsdGVyIGlzIG5vdCBpbnZva2VkIGZvciBmYWlsdXJlIHJlc3BvbnNlcywgc28gdXNpbmcgaXQgaW5zdGVhZFxuXHRcdC8vIG9mIHRoZSBkZWZhdWx0IGNvbnZlcnRlciBpcyBrbHVkZ3kgYnV0IGl0IHdvcmtzLlxuXHRcdGNvbnZlcnRlcnM6IHtcblx0XHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oKSB7fVxuXHRcdH0sXG5cdFx0ZGF0YUZpbHRlcjogZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHJlc3BvbnNlLCBvcHRpb25zLCBkb2MgKTtcblx0XHR9XG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGh0bWxJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sSXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcbn07XG5cblxuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufTtcblxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnRpbWVvdXQgPVxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IHhoci5vbnRpbWVvdXQgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gb3IgZm9yY2VkLWJ5LWF0dHJzIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiB8fCBzLnNjcmlwdEF0dHJzICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiIClcblx0XHRcdFx0XHQuYXR0ciggcy5zY3JpcHRBdHRycyB8fCB7fSApXG5cdFx0XHRcdFx0LnByb3AoIHsgY2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LCBzcmM6IHMudXJsIH0gKVxuXHRcdFx0XHRcdC5vbiggXCJsb2FkIGVycm9yXCIsIGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZS5ndWlkKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBwcm9wcy50b3AgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHByb3BzLnRvcCArPSBcInB4XCI7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHR5cGVvZiBwcm9wcy5sZWZ0ID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRwcm9wcy5sZWZ0ICs9IFwicHhcIjtcblx0XHRcdH1cblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdC8vIG9mZnNldCgpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIGJvcmRlciBib3ggdG8gdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGRvY3VtZW50LXJlbGF0aXZlIHBvc2l0aW9uIGJ5IGFkZGluZyB2aWV3cG9ydCBzY3JvbGwgdG8gdmlld3BvcnQtcmVsYXRpdmUgZ0JDUlxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldFxuXHRcdH07XG5cdH0sXG5cblx0Ly8gcG9zaXRpb24oKSByZWxhdGVzIGFuIGVsZW1lbnQncyBtYXJnaW4gYm94IHRvIGl0cyBvZmZzZXQgcGFyZW50J3MgcGFkZGluZyBib3hcblx0Ly8gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgYmVoYXZpb3Igb2YgQ1NTIGFic29sdXRlIHBvc2l0aW9uaW5nXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIHBvc2l0aW9uOmZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB0aGUgdmlld3BvcnQsIHdoaWNoIGl0c2VsZiBhbHdheXMgaGFzIHplcm8gb2Zmc2V0XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgcG9zaXRpb246Zml4ZWQgaW1wbGllcyBhdmFpbGFiaWxpdHkgb2YgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHRoZSAqcmVhbCogb2Zmc2V0IHBhcmVudCwgd2hpY2ggY2FuIGJlIHRoZSBkb2N1bWVudCBvciBpdHMgcm9vdCBlbGVtZW50XG5cdFx0XHQvLyB3aGVuIGEgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnQgaXMgaWRlbnRpZmllZFxuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0b2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmXG5cdFx0XHRcdCggb2Zmc2V0UGFyZW50ID09PSBkb2MuYm9keSB8fCBvZmZzZXRQYXJlbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgKSAmJlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBlbGVtICYmIG9mZnNldFBhcmVudC5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSBib3JkZXJzIGludG8gaXRzIG9mZnNldCwgc2luY2UgdGhleSBhcmUgb3V0c2lkZSBpdHMgY29udGVudCBvcmlnaW5cblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0galF1ZXJ5KCBvZmZzZXRQYXJlbnQgKS5vZmZzZXQoKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIF9pLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBfaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH0sXG5cblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXG5cdFx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0XHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0XHR9O1xuXHR9ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuLy8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG52YXIgcnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2c7XG5cbi8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuLy8gYXJndW1lbnRzLlxuLy8galF1ZXJ5LnByb3h5IGlzIGRlcHJlY2F0ZWQgdG8gcHJvbW90ZSBzdGFuZGFyZHMgKHNwZWNpZmljYWxseSBGdW5jdGlvbiNiaW5kKVxuLy8gSG93ZXZlciwgaXQgaXMgbm90IHNsYXRlZCBmb3IgcmVtb3ZhbCBhbnkgdGltZSBzb29uXG5qUXVlcnkucHJveHkgPSBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRjb250ZXh0ID0gZm47XG5cdFx0Zm4gPSB0bXA7XG5cdH1cblxuXHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRpZiAoICFpc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHQvLyBTaW11bGF0ZWQgYmluZFxuXHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdH07XG5cblx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdHJldHVybiBwcm94eTtcbn07XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5qUXVlcnkuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5qUXVlcnkuaXNXaW5kb3cgPSBpc1dpbmRvdztcbmpRdWVyeS5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG5qUXVlcnkudHlwZSA9IHRvVHlwZTtcblxualF1ZXJ5Lm5vdyA9IERhdGUubm93O1xuXG5qUXVlcnkuaXNOdW1lcmljID0gZnVuY3Rpb24oIG9iaiApIHtcblxuXHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcbn07XG5cbmpRdWVyeS50cmltID0gZnVuY3Rpb24oIHRleHQgKSB7XG5cdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFwiXCIgOlxuXHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xufTtcblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoIHR5cGVvZiBub0dsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuIiwiLyohXG4gKiBNYXNvbnJ5IHY0LjIuMlxuICogQ2FzY2FkaW5nIGdyaWQgbGF5b3V0IGxpYnJhcnlcbiAqIGh0dHBzOi8vbWFzb25yeS5kZXNhbmRyby5jb21cbiAqIE1JVCBMaWNlbnNlXG4gKiBieSBEYXZpZCBEZVNhbmRyb1xuICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgcmVxdWlyZSAqL1xuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggW1xuICAgICAgICAnb3V0bGF5ZXIvb3V0bGF5ZXInLFxuICAgICAgICAnZ2V0LXNpemUvZ2V0LXNpemUnXG4gICAgICBdLFxuICAgICAgZmFjdG9yeSApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgcmVxdWlyZSgnb3V0bGF5ZXInKSxcbiAgICAgIHJlcXVpcmUoJ2dldC1zaXplJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93Lk1hc29ucnkgPSBmYWN0b3J5KFxuICAgICAgd2luZG93Lk91dGxheWVyLFxuICAgICAgd2luZG93LmdldFNpemVcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggT3V0bGF5ZXIsIGdldFNpemUgKSB7XG5cbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gbWFzb25yeURlZmluaXRpb24gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICAvLyBjcmVhdGUgYW4gT3V0bGF5ZXIgbGF5b3V0IGNsYXNzXG4gIHZhciBNYXNvbnJ5ID0gT3V0bGF5ZXIuY3JlYXRlKCdtYXNvbnJ5Jyk7XG4gIC8vIGlzRml0V2lkdGggLT4gZml0V2lkdGhcbiAgTWFzb25yeS5jb21wYXRPcHRpb25zLmZpdFdpZHRoID0gJ2lzRml0V2lkdGgnO1xuXG4gIHZhciBwcm90byA9IE1hc29ucnkucHJvdG90eXBlO1xuXG4gIHByb3RvLl9yZXNldExheW91dCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZ2V0U2l6ZSgpO1xuICAgIHRoaXMuX2dldE1lYXN1cmVtZW50KCAnY29sdW1uV2lkdGgnLCAnb3V0ZXJXaWR0aCcgKTtcbiAgICB0aGlzLl9nZXRNZWFzdXJlbWVudCggJ2d1dHRlcicsICdvdXRlcldpZHRoJyApO1xuICAgIHRoaXMubWVhc3VyZUNvbHVtbnMoKTtcblxuICAgIC8vIHJlc2V0IGNvbHVtbiBZXG4gICAgdGhpcy5jb2xZcyA9IFtdO1xuICAgIGZvciAoIHZhciBpPTA7IGkgPCB0aGlzLmNvbHM7IGkrKyApIHtcbiAgICAgIHRoaXMuY29sWXMucHVzaCggMCApO1xuICAgIH1cblxuICAgIHRoaXMubWF4WSA9IDA7XG4gICAgdGhpcy5ob3Jpem9udGFsQ29sSW5kZXggPSAwO1xuICB9O1xuXG4gIHByb3RvLm1lYXN1cmVDb2x1bW5zID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5nZXRDb250YWluZXJXaWR0aCgpO1xuICAgIC8vIGlmIGNvbHVtbldpZHRoIGlzIDAsIGRlZmF1bHQgdG8gb3V0ZXJXaWR0aCBvZiBmaXJzdCBpdGVtXG4gICAgaWYgKCAhdGhpcy5jb2x1bW5XaWR0aCApIHtcbiAgICAgIHZhciBmaXJzdEl0ZW0gPSB0aGlzLml0ZW1zWzBdO1xuICAgICAgdmFyIGZpcnN0SXRlbUVsZW0gPSBmaXJzdEl0ZW0gJiYgZmlyc3RJdGVtLmVsZW1lbnQ7XG4gICAgICAvLyBjb2x1bW5XaWR0aCBmYWxsIGJhY2sgdG8gaXRlbSBvZiBmaXJzdCBlbGVtZW50XG4gICAgICB0aGlzLmNvbHVtbldpZHRoID0gZmlyc3RJdGVtRWxlbSAmJiBnZXRTaXplKCBmaXJzdEl0ZW1FbGVtICkub3V0ZXJXaWR0aCB8fFxuICAgICAgICAvLyBpZiBmaXJzdCBlbGVtIGhhcyBubyB3aWR0aCwgZGVmYXVsdCB0byBzaXplIG9mIGNvbnRhaW5lclxuICAgICAgICB0aGlzLmNvbnRhaW5lcldpZHRoO1xuICAgIH1cblxuICAgIHZhciBjb2x1bW5XaWR0aCA9IHRoaXMuY29sdW1uV2lkdGggKz0gdGhpcy5ndXR0ZXI7XG5cbiAgICAvLyBjYWxjdWxhdGUgY29sdW1uc1xuICAgIHZhciBjb250YWluZXJXaWR0aCA9IHRoaXMuY29udGFpbmVyV2lkdGggKyB0aGlzLmd1dHRlcjtcbiAgICB2YXIgY29scyA9IGNvbnRhaW5lcldpZHRoIC8gY29sdW1uV2lkdGg7XG4gICAgLy8gZml4IHJvdW5kaW5nIGVycm9ycywgdHlwaWNhbGx5IHdpdGggZ3V0dGVyc1xuICAgIHZhciBleGNlc3MgPSBjb2x1bW5XaWR0aCAtIGNvbnRhaW5lcldpZHRoICUgY29sdW1uV2lkdGg7XG4gICAgLy8gaWYgb3ZlcnNob290IGlzIGxlc3MgdGhhbiBhIHBpeGVsLCByb3VuZCB1cCwgb3RoZXJ3aXNlIGZsb29yIGl0XG4gICAgdmFyIG1hdGhNZXRob2QgPSBleGNlc3MgJiYgZXhjZXNzIDwgMSA/ICdyb3VuZCcgOiAnZmxvb3InO1xuICAgIGNvbHMgPSBNYXRoWyBtYXRoTWV0aG9kIF0oIGNvbHMgKTtcbiAgICB0aGlzLmNvbHMgPSBNYXRoLm1heCggY29scywgMSApO1xuICB9O1xuXG4gIHByb3RvLmdldENvbnRhaW5lcldpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gY29udGFpbmVyIGlzIHBhcmVudCBpZiBmaXQgd2lkdGhcbiAgICB2YXIgaXNGaXRXaWR0aCA9IHRoaXMuX2dldE9wdGlvbignZml0V2lkdGgnKTtcbiAgICB2YXIgY29udGFpbmVyID0gaXNGaXRXaWR0aCA/IHRoaXMuZWxlbWVudC5wYXJlbnROb2RlIDogdGhpcy5lbGVtZW50O1xuICAgIC8vIGNoZWNrIHRoYXQgdGhpcy5zaXplIGFuZCBzaXplIGFyZSB0aGVyZVxuICAgIC8vIElFOCB0cmlnZ2VycyByZXNpemUgb24gYm9keSBzaXplIGNoYW5nZSwgc28gdGhleSBtaWdodCBub3QgYmVcbiAgICB2YXIgc2l6ZSA9IGdldFNpemUoIGNvbnRhaW5lciApO1xuICAgIHRoaXMuY29udGFpbmVyV2lkdGggPSBzaXplICYmIHNpemUuaW5uZXJXaWR0aDtcbiAgfTtcblxuICBwcm90by5fZ2V0SXRlbUxheW91dFBvc2l0aW9uID0gZnVuY3Rpb24oIGl0ZW0gKSB7XG4gICAgaXRlbS5nZXRTaXplKCk7XG4gICAgLy8gaG93IG1hbnkgY29sdW1ucyBkb2VzIHRoaXMgYnJpY2sgc3BhblxuICAgIHZhciByZW1haW5kZXIgPSBpdGVtLnNpemUub3V0ZXJXaWR0aCAlIHRoaXMuY29sdW1uV2lkdGg7XG4gICAgdmFyIG1hdGhNZXRob2QgPSByZW1haW5kZXIgJiYgcmVtYWluZGVyIDwgMSA/ICdyb3VuZCcgOiAnY2VpbCc7XG4gICAgLy8gcm91bmQgaWYgb2ZmIGJ5IDEgcGl4ZWwsIG90aGVyd2lzZSB1c2UgY2VpbFxuICAgIHZhciBjb2xTcGFuID0gTWF0aFsgbWF0aE1ldGhvZCBdKCBpdGVtLnNpemUub3V0ZXJXaWR0aCAvIHRoaXMuY29sdW1uV2lkdGggKTtcbiAgICBjb2xTcGFuID0gTWF0aC5taW4oIGNvbFNwYW4sIHRoaXMuY29scyApO1xuICAgIC8vIHVzZSBob3Jpem9udGFsIG9yIHRvcCBjb2x1bW4gcG9zaXRpb25cbiAgICB2YXIgY29sUG9zTWV0aG9kID0gdGhpcy5vcHRpb25zLmhvcml6b250YWxPcmRlciA/XG4gICAgICAnX2dldEhvcml6b250YWxDb2xQb3NpdGlvbicgOiAnX2dldFRvcENvbFBvc2l0aW9uJztcbiAgICB2YXIgY29sUG9zaXRpb24gPSB0aGlzWyBjb2xQb3NNZXRob2QgXSggY29sU3BhbiwgaXRlbSApO1xuICAgIC8vIHBvc2l0aW9uIHRoZSBicmlja1xuICAgIHZhciBwb3NpdGlvbiA9IHtcbiAgICAgIHg6IHRoaXMuY29sdW1uV2lkdGggKiBjb2xQb3NpdGlvbi5jb2wsXG4gICAgICB5OiBjb2xQb3NpdGlvbi55XG4gICAgfTtcbiAgICAvLyBhcHBseSBzZXRIZWlnaHQgdG8gbmVjZXNzYXJ5IGNvbHVtbnNcbiAgICB2YXIgc2V0SGVpZ2h0ID0gY29sUG9zaXRpb24ueSArIGl0ZW0uc2l6ZS5vdXRlckhlaWdodDtcbiAgICB2YXIgc2V0TWF4ID0gY29sU3BhbiArIGNvbFBvc2l0aW9uLmNvbDtcbiAgICBmb3IgKCB2YXIgaSA9IGNvbFBvc2l0aW9uLmNvbDsgaSA8IHNldE1heDsgaSsrICkge1xuICAgICAgdGhpcy5jb2xZc1tpXSA9IHNldEhlaWdodDtcbiAgICB9XG5cbiAgICByZXR1cm4gcG9zaXRpb247XG4gIH07XG5cbiAgcHJvdG8uX2dldFRvcENvbFBvc2l0aW9uID0gZnVuY3Rpb24oIGNvbFNwYW4gKSB7XG4gICAgdmFyIGNvbEdyb3VwID0gdGhpcy5fZ2V0VG9wQ29sR3JvdXAoIGNvbFNwYW4gKTtcbiAgICAvLyBnZXQgdGhlIG1pbmltdW0gWSB2YWx1ZSBmcm9tIHRoZSBjb2x1bW5zXG4gICAgdmFyIG1pbmltdW1ZID0gTWF0aC5taW4uYXBwbHkoIE1hdGgsIGNvbEdyb3VwICk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgY29sOiBjb2xHcm91cC5pbmRleE9mKCBtaW5pbXVtWSApLFxuICAgICAgeTogbWluaW11bVksXG4gICAgfTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGNvbFNwYW4gLSBudW1iZXIgb2YgY29sdW1ucyB0aGUgZWxlbWVudCBzcGFuc1xuICAgKiBAcmV0dXJucyB7QXJyYXl9IGNvbEdyb3VwXG4gICAqL1xuICBwcm90by5fZ2V0VG9wQ29sR3JvdXAgPSBmdW5jdGlvbiggY29sU3BhbiApIHtcbiAgICBpZiAoIGNvbFNwYW4gPCAyICkge1xuICAgICAgLy8gaWYgYnJpY2sgc3BhbnMgb25seSBvbmUgY29sdW1uLCB1c2UgYWxsIHRoZSBjb2x1bW4gWXNcbiAgICAgIHJldHVybiB0aGlzLmNvbFlzO1xuICAgIH1cblxuICAgIHZhciBjb2xHcm91cCA9IFtdO1xuICAgIC8vIGhvdyBtYW55IGRpZmZlcmVudCBwbGFjZXMgY291bGQgdGhpcyBicmljayBmaXQgaG9yaXpvbnRhbGx5XG4gICAgdmFyIGdyb3VwQ291bnQgPSB0aGlzLmNvbHMgKyAxIC0gY29sU3BhbjtcbiAgICAvLyBmb3IgZWFjaCBncm91cCBwb3RlbnRpYWwgaG9yaXpvbnRhbCBwb3NpdGlvblxuICAgIGZvciAoIHZhciBpID0gMDsgaSA8IGdyb3VwQ291bnQ7IGkrKyApIHtcbiAgICAgIGNvbEdyb3VwW2ldID0gdGhpcy5fZ2V0Q29sR3JvdXBZKCBpLCBjb2xTcGFuICk7XG4gICAgfVxuICAgIHJldHVybiBjb2xHcm91cDtcbiAgfTtcblxuICBwcm90by5fZ2V0Q29sR3JvdXBZID0gZnVuY3Rpb24oIGNvbCwgY29sU3BhbiApIHtcbiAgICBpZiAoIGNvbFNwYW4gPCAyICkge1xuICAgICAgcmV0dXJuIHRoaXMuY29sWXNbIGNvbCBdO1xuICAgIH1cbiAgICAvLyBtYWtlIGFuIGFycmF5IG9mIGNvbFkgdmFsdWVzIGZvciB0aGF0IG9uZSBncm91cFxuICAgIHZhciBncm91cENvbFlzID0gdGhpcy5jb2xZcy5zbGljZSggY29sLCBjb2wgKyBjb2xTcGFuICk7XG4gICAgLy8gYW5kIGdldCB0aGUgbWF4IHZhbHVlIG9mIHRoZSBhcnJheVxuICAgIHJldHVybiBNYXRoLm1heC5hcHBseSggTWF0aCwgZ3JvdXBDb2xZcyApO1xuICB9O1xuXG4gIC8vIGdldCBjb2x1bW4gcG9zaXRpb24gYmFzZWQgb24gaG9yaXpvbnRhbCBpbmRleC4gIzg3M1xuICBwcm90by5fZ2V0SG9yaXpvbnRhbENvbFBvc2l0aW9uID0gZnVuY3Rpb24oIGNvbFNwYW4sIGl0ZW0gKSB7XG4gICAgdmFyIGNvbCA9IHRoaXMuaG9yaXpvbnRhbENvbEluZGV4ICUgdGhpcy5jb2xzO1xuICAgIHZhciBpc092ZXIgPSBjb2xTcGFuID4gMSAmJiBjb2wgKyBjb2xTcGFuID4gdGhpcy5jb2xzO1xuICAgIC8vIHNoaWZ0IHRvIG5leHQgcm93IGlmIGl0ZW0gY2FuJ3QgZml0IG9uIGN1cnJlbnQgcm93XG4gICAgY29sID0gaXNPdmVyID8gMCA6IGNvbDtcbiAgICAvLyBkb24ndCBsZXQgemVyby1zaXplIGl0ZW1zIHRha2UgdXAgc3BhY2VcbiAgICB2YXIgaGFzU2l6ZSA9IGl0ZW0uc2l6ZS5vdXRlcldpZHRoICYmIGl0ZW0uc2l6ZS5vdXRlckhlaWdodDtcbiAgICB0aGlzLmhvcml6b250YWxDb2xJbmRleCA9IGhhc1NpemUgPyBjb2wgKyBjb2xTcGFuIDogdGhpcy5ob3Jpem9udGFsQ29sSW5kZXg7XG5cbiAgICByZXR1cm4ge1xuICAgICAgY29sOiBjb2wsXG4gICAgICB5OiB0aGlzLl9nZXRDb2xHcm91cFkoIGNvbCwgY29sU3BhbiApLFxuICAgIH07XG4gIH07XG5cbiAgcHJvdG8uX21hbmFnZVN0YW1wID0gZnVuY3Rpb24oIHN0YW1wICkge1xuICAgIHZhciBzdGFtcFNpemUgPSBnZXRTaXplKCBzdGFtcCApO1xuICAgIHZhciBvZmZzZXQgPSB0aGlzLl9nZXRFbGVtZW50T2Zmc2V0KCBzdGFtcCApO1xuICAgIC8vIGdldCB0aGUgY29sdW1ucyB0aGF0IHRoaXMgc3RhbXAgYWZmZWN0c1xuICAgIHZhciBpc09yaWdpbkxlZnQgPSB0aGlzLl9nZXRPcHRpb24oJ29yaWdpbkxlZnQnKTtcbiAgICB2YXIgZmlyc3RYID0gaXNPcmlnaW5MZWZ0ID8gb2Zmc2V0LmxlZnQgOiBvZmZzZXQucmlnaHQ7XG4gICAgdmFyIGxhc3RYID0gZmlyc3RYICsgc3RhbXBTaXplLm91dGVyV2lkdGg7XG4gICAgdmFyIGZpcnN0Q29sID0gTWF0aC5mbG9vciggZmlyc3RYIC8gdGhpcy5jb2x1bW5XaWR0aCApO1xuICAgIGZpcnN0Q29sID0gTWF0aC5tYXgoIDAsIGZpcnN0Q29sICk7XG4gICAgdmFyIGxhc3RDb2wgPSBNYXRoLmZsb29yKCBsYXN0WCAvIHRoaXMuY29sdW1uV2lkdGggKTtcbiAgICAvLyBsYXN0Q29sIHNob3VsZCBub3QgZ28gb3ZlciBpZiBtdWx0aXBsZSBvZiBjb2x1bW5XaWR0aCAjNDI1XG4gICAgbGFzdENvbCAtPSBsYXN0WCAlIHRoaXMuY29sdW1uV2lkdGggPyAwIDogMTtcbiAgICBsYXN0Q29sID0gTWF0aC5taW4oIHRoaXMuY29scyAtIDEsIGxhc3RDb2wgKTtcbiAgICAvLyBzZXQgY29sWXMgdG8gYm90dG9tIG9mIHRoZSBzdGFtcFxuXG4gICAgdmFyIGlzT3JpZ2luVG9wID0gdGhpcy5fZ2V0T3B0aW9uKCdvcmlnaW5Ub3AnKTtcbiAgICB2YXIgc3RhbXBNYXhZID0gKCBpc09yaWdpblRvcCA/IG9mZnNldC50b3AgOiBvZmZzZXQuYm90dG9tICkgK1xuICAgICAgc3RhbXBTaXplLm91dGVySGVpZ2h0O1xuICAgIGZvciAoIHZhciBpID0gZmlyc3RDb2w7IGkgPD0gbGFzdENvbDsgaSsrICkge1xuICAgICAgdGhpcy5jb2xZc1tpXSA9IE1hdGgubWF4KCBzdGFtcE1heFksIHRoaXMuY29sWXNbaV0gKTtcbiAgICB9XG4gIH07XG5cbiAgcHJvdG8uX2dldENvbnRhaW5lclNpemUgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLm1heFkgPSBNYXRoLm1heC5hcHBseSggTWF0aCwgdGhpcy5jb2xZcyApO1xuICAgIHZhciBzaXplID0ge1xuICAgICAgaGVpZ2h0OiB0aGlzLm1heFlcbiAgICB9O1xuXG4gICAgaWYgKCB0aGlzLl9nZXRPcHRpb24oJ2ZpdFdpZHRoJykgKSB7XG4gICAgICBzaXplLndpZHRoID0gdGhpcy5fZ2V0Q29udGFpbmVyRml0V2lkdGgoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2l6ZTtcbiAgfTtcblxuICBwcm90by5fZ2V0Q29udGFpbmVyRml0V2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdW51c2VkQ29scyA9IDA7XG4gICAgLy8gY291bnQgdW51c2VkIGNvbHVtbnNcbiAgICB2YXIgaSA9IHRoaXMuY29scztcbiAgICB3aGlsZSAoIC0taSApIHtcbiAgICAgIGlmICggdGhpcy5jb2xZc1tpXSAhPT0gMCApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICB1bnVzZWRDb2xzKys7XG4gICAgfVxuICAgIC8vIGZpdCBjb250YWluZXIgdG8gY29sdW1ucyB0aGF0IGhhdmUgYmVlbiB1c2VkXG4gICAgcmV0dXJuICggdGhpcy5jb2xzIC0gdW51c2VkQ29scyApICogdGhpcy5jb2x1bW5XaWR0aCAtIHRoaXMuZ3V0dGVyO1xuICB9O1xuXG4gIHByb3RvLm5lZWRzUmVzaXplTGF5b3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHByZXZpb3VzV2lkdGggPSB0aGlzLmNvbnRhaW5lcldpZHRoO1xuICAgIHRoaXMuZ2V0Q29udGFpbmVyV2lkdGgoKTtcbiAgICByZXR1cm4gcHJldmlvdXNXaWR0aCAhPSB0aGlzLmNvbnRhaW5lcldpZHRoO1xuICB9O1xuXG4gIHJldHVybiBNYXNvbnJ5O1xuXG59KSk7XG4iLCIvKipcbiAqIE91dGxheWVyIEl0ZW1cbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKiBnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCByZXF1aXJlICovXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EIC0gUmVxdWlyZUpTXG4gICAgZGVmaW5lKCBbXG4gICAgICAgICdldi1lbWl0dGVyL2V2LWVtaXR0ZXInLFxuICAgICAgICAnZ2V0LXNpemUvZ2V0LXNpemUnXG4gICAgICBdLFxuICAgICAgZmFjdG9yeVxuICAgICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlMgLSBCcm93c2VyaWZ5LCBXZWJwYWNrXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgcmVxdWlyZSgnZXYtZW1pdHRlcicpLFxuICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuT3V0bGF5ZXIgPSB7fTtcbiAgICB3aW5kb3cuT3V0bGF5ZXIuSXRlbSA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3cuRXZFbWl0dGVyLFxuICAgICAgd2luZG93LmdldFNpemVcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggRXZFbWl0dGVyLCBnZXRTaXplICkge1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyAtLS0tLSBoZWxwZXJzIC0tLS0tIC8vXG5cbmZ1bmN0aW9uIGlzRW1wdHlPYmooIG9iaiApIHtcbiAgZm9yICggdmFyIHByb3AgaW4gb2JqICkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBwcm9wID0gbnVsbDtcbiAgcmV0dXJuIHRydWU7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENTUzMgc3VwcG9ydCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5cbnZhciBkb2NFbGVtU3R5bGUgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGU7XG5cbnZhciB0cmFuc2l0aW9uUHJvcGVydHkgPSB0eXBlb2YgZG9jRWxlbVN0eWxlLnRyYW5zaXRpb24gPT0gJ3N0cmluZycgP1xuICAndHJhbnNpdGlvbicgOiAnV2Via2l0VHJhbnNpdGlvbic7XG52YXIgdHJhbnNmb3JtUHJvcGVydHkgPSB0eXBlb2YgZG9jRWxlbVN0eWxlLnRyYW5zZm9ybSA9PSAnc3RyaW5nJyA/XG4gICd0cmFuc2Zvcm0nIDogJ1dlYmtpdFRyYW5zZm9ybSc7XG5cbnZhciB0cmFuc2l0aW9uRW5kRXZlbnQgPSB7XG4gIFdlYmtpdFRyYW5zaXRpb246ICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcbiAgdHJhbnNpdGlvbjogJ3RyYW5zaXRpb25lbmQnXG59WyB0cmFuc2l0aW9uUHJvcGVydHkgXTtcblxuLy8gY2FjaGUgYWxsIHZlbmRvciBwcm9wZXJ0aWVzIHRoYXQgY291bGQgaGF2ZSB2ZW5kb3IgcHJlZml4XG52YXIgdmVuZG9yUHJvcGVydGllcyA9IHtcbiAgdHJhbnNmb3JtOiB0cmFuc2Zvcm1Qcm9wZXJ0eSxcbiAgdHJhbnNpdGlvbjogdHJhbnNpdGlvblByb3BlcnR5LFxuICB0cmFuc2l0aW9uRHVyYXRpb246IHRyYW5zaXRpb25Qcm9wZXJ0eSArICdEdXJhdGlvbicsXG4gIHRyYW5zaXRpb25Qcm9wZXJ0eTogdHJhbnNpdGlvblByb3BlcnR5ICsgJ1Byb3BlcnR5JyxcbiAgdHJhbnNpdGlvbkRlbGF5OiB0cmFuc2l0aW9uUHJvcGVydHkgKyAnRGVsYXknXG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBJdGVtIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIEl0ZW0oIGVsZW1lbnQsIGxheW91dCApIHtcbiAgaWYgKCAhZWxlbWVudCApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAvLyBwYXJlbnQgbGF5b3V0IGNsYXNzLCBpLmUuIE1hc29ucnksIElzb3RvcGUsIG9yIFBhY2tlcnlcbiAgdGhpcy5sYXlvdXQgPSBsYXlvdXQ7XG4gIHRoaXMucG9zaXRpb24gPSB7XG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH07XG5cbiAgdGhpcy5fY3JlYXRlKCk7XG59XG5cbi8vIGluaGVyaXQgRXZFbWl0dGVyXG52YXIgcHJvdG8gPSBJdGVtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcbnByb3RvLmNvbnN0cnVjdG9yID0gSXRlbTtcblxucHJvdG8uX2NyZWF0ZSA9IGZ1bmN0aW9uKCkge1xuICAvLyB0cmFuc2l0aW9uIG9iamVjdHNcbiAgdGhpcy5fdHJhbnNuID0ge1xuICAgIGluZ1Byb3BlcnRpZXM6IHt9LFxuICAgIGNsZWFuOiB7fSxcbiAgICBvbkVuZDoge31cbiAgfTtcblxuICB0aGlzLmNzcyh7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgfSk7XG59O1xuXG4vLyB0cmlnZ2VyIHNwZWNpZmllZCBoYW5kbGVyIGZvciBldmVudCB0eXBlXG5wcm90by5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdmFyIG1ldGhvZCA9ICdvbicgKyBldmVudC50eXBlO1xuICBpZiAoIHRoaXNbIG1ldGhvZCBdICkge1xuICAgIHRoaXNbIG1ldGhvZCBdKCBldmVudCApO1xuICB9XG59O1xuXG5wcm90by5nZXRTaXplID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2l6ZSA9IGdldFNpemUoIHRoaXMuZWxlbWVudCApO1xufTtcblxuLyoqXG4gKiBhcHBseSBDU1Mgc3R5bGVzIHRvIGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZVxuICovXG5wcm90by5jc3MgPSBmdW5jdGlvbiggc3R5bGUgKSB7XG4gIHZhciBlbGVtU3R5bGUgPSB0aGlzLmVsZW1lbnQuc3R5bGU7XG5cbiAgZm9yICggdmFyIHByb3AgaW4gc3R5bGUgKSB7XG4gICAgLy8gdXNlIHZlbmRvciBwcm9wZXJ0eSBpZiBhdmFpbGFibGVcbiAgICB2YXIgc3VwcG9ydGVkUHJvcCA9IHZlbmRvclByb3BlcnRpZXNbIHByb3AgXSB8fCBwcm9wO1xuICAgIGVsZW1TdHlsZVsgc3VwcG9ydGVkUHJvcCBdID0gc3R5bGVbIHByb3AgXTtcbiAgfVxufTtcblxuIC8vIG1lYXN1cmUgcG9zaXRpb24sIGFuZCBzZXRzIGl0XG5wcm90by5nZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKCB0aGlzLmVsZW1lbnQgKTtcbiAgdmFyIGlzT3JpZ2luTGVmdCA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oJ29yaWdpbkxlZnQnKTtcbiAgdmFyIGlzT3JpZ2luVG9wID0gdGhpcy5sYXlvdXQuX2dldE9wdGlvbignb3JpZ2luVG9wJyk7XG4gIHZhciB4VmFsdWUgPSBzdHlsZVsgaXNPcmlnaW5MZWZ0ID8gJ2xlZnQnIDogJ3JpZ2h0JyBdO1xuICB2YXIgeVZhbHVlID0gc3R5bGVbIGlzT3JpZ2luVG9wID8gJ3RvcCcgOiAnYm90dG9tJyBdO1xuICB2YXIgeCA9IHBhcnNlRmxvYXQoIHhWYWx1ZSApO1xuICB2YXIgeSA9IHBhcnNlRmxvYXQoIHlWYWx1ZSApO1xuICAvLyBjb252ZXJ0IHBlcmNlbnQgdG8gcGl4ZWxzXG4gIHZhciBsYXlvdXRTaXplID0gdGhpcy5sYXlvdXQuc2l6ZTtcbiAgaWYgKCB4VmFsdWUuaW5kZXhPZignJScpICE9IC0xICkge1xuICAgIHggPSAoIHggLyAxMDAgKSAqIGxheW91dFNpemUud2lkdGg7XG4gIH1cbiAgaWYgKCB5VmFsdWUuaW5kZXhPZignJScpICE9IC0xICkge1xuICAgIHkgPSAoIHkgLyAxMDAgKSAqIGxheW91dFNpemUuaGVpZ2h0O1xuICB9XG4gIC8vIGNsZWFuIHVwICdhdXRvJyBvciBvdGhlciBub24taW50ZWdlciB2YWx1ZXNcbiAgeCA9IGlzTmFOKCB4ICkgPyAwIDogeDtcbiAgeSA9IGlzTmFOKCB5ICkgPyAwIDogeTtcbiAgLy8gcmVtb3ZlIHBhZGRpbmcgZnJvbSBtZWFzdXJlbWVudFxuICB4IC09IGlzT3JpZ2luTGVmdCA/IGxheW91dFNpemUucGFkZGluZ0xlZnQgOiBsYXlvdXRTaXplLnBhZGRpbmdSaWdodDtcbiAgeSAtPSBpc09yaWdpblRvcCA/IGxheW91dFNpemUucGFkZGluZ1RvcCA6IGxheW91dFNpemUucGFkZGluZ0JvdHRvbTtcblxuICB0aGlzLnBvc2l0aW9uLnggPSB4O1xuICB0aGlzLnBvc2l0aW9uLnkgPSB5O1xufTtcblxuLy8gc2V0IHNldHRsZWQgcG9zaXRpb24sIGFwcGx5IHBhZGRpbmdcbnByb3RvLmxheW91dFBvc2l0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHZhciBsYXlvdXRTaXplID0gdGhpcy5sYXlvdXQuc2l6ZTtcbiAgdmFyIHN0eWxlID0ge307XG4gIHZhciBpc09yaWdpbkxlZnQgPSB0aGlzLmxheW91dC5fZ2V0T3B0aW9uKCdvcmlnaW5MZWZ0Jyk7XG4gIHZhciBpc09yaWdpblRvcCA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oJ29yaWdpblRvcCcpO1xuXG4gIC8vIHhcbiAgdmFyIHhQYWRkaW5nID0gaXNPcmlnaW5MZWZ0ID8gJ3BhZGRpbmdMZWZ0JyA6ICdwYWRkaW5nUmlnaHQnO1xuICB2YXIgeFByb3BlcnR5ID0gaXNPcmlnaW5MZWZ0ID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgdmFyIHhSZXNldFByb3BlcnR5ID0gaXNPcmlnaW5MZWZ0ID8gJ3JpZ2h0JyA6ICdsZWZ0JztcblxuICB2YXIgeCA9IHRoaXMucG9zaXRpb24ueCArIGxheW91dFNpemVbIHhQYWRkaW5nIF07XG4gIC8vIHNldCBpbiBwZXJjZW50YWdlIG9yIHBpeGVsc1xuICBzdHlsZVsgeFByb3BlcnR5IF0gPSB0aGlzLmdldFhWYWx1ZSggeCApO1xuICAvLyByZXNldCBvdGhlciBwcm9wZXJ0eVxuICBzdHlsZVsgeFJlc2V0UHJvcGVydHkgXSA9ICcnO1xuXG4gIC8vIHlcbiAgdmFyIHlQYWRkaW5nID0gaXNPcmlnaW5Ub3AgPyAncGFkZGluZ1RvcCcgOiAncGFkZGluZ0JvdHRvbSc7XG4gIHZhciB5UHJvcGVydHkgPSBpc09yaWdpblRvcCA/ICd0b3AnIDogJ2JvdHRvbSc7XG4gIHZhciB5UmVzZXRQcm9wZXJ0eSA9IGlzT3JpZ2luVG9wID8gJ2JvdHRvbScgOiAndG9wJztcblxuICB2YXIgeSA9IHRoaXMucG9zaXRpb24ueSArIGxheW91dFNpemVbIHlQYWRkaW5nIF07XG4gIC8vIHNldCBpbiBwZXJjZW50YWdlIG9yIHBpeGVsc1xuICBzdHlsZVsgeVByb3BlcnR5IF0gPSB0aGlzLmdldFlWYWx1ZSggeSApO1xuICAvLyByZXNldCBvdGhlciBwcm9wZXJ0eVxuICBzdHlsZVsgeVJlc2V0UHJvcGVydHkgXSA9ICcnO1xuXG4gIHRoaXMuY3NzKCBzdHlsZSApO1xuICB0aGlzLmVtaXRFdmVudCggJ2xheW91dCcsIFsgdGhpcyBdICk7XG59O1xuXG5wcm90by5nZXRYVmFsdWUgPSBmdW5jdGlvbiggeCApIHtcbiAgdmFyIGlzSG9yaXpvbnRhbCA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oJ2hvcml6b250YWwnKTtcbiAgcmV0dXJuIHRoaXMubGF5b3V0Lm9wdGlvbnMucGVyY2VudFBvc2l0aW9uICYmICFpc0hvcml6b250YWwgP1xuICAgICggKCB4IC8gdGhpcy5sYXlvdXQuc2l6ZS53aWR0aCApICogMTAwICkgKyAnJScgOiB4ICsgJ3B4Jztcbn07XG5cbnByb3RvLmdldFlWYWx1ZSA9IGZ1bmN0aW9uKCB5ICkge1xuICB2YXIgaXNIb3Jpem9udGFsID0gdGhpcy5sYXlvdXQuX2dldE9wdGlvbignaG9yaXpvbnRhbCcpO1xuICByZXR1cm4gdGhpcy5sYXlvdXQub3B0aW9ucy5wZXJjZW50UG9zaXRpb24gJiYgaXNIb3Jpem9udGFsID9cbiAgICAoICggeSAvIHRoaXMubGF5b3V0LnNpemUuaGVpZ2h0ICkgKiAxMDAgKSArICclJyA6IHkgKyAncHgnO1xufTtcblxucHJvdG8uX3RyYW5zaXRpb25UbyA9IGZ1bmN0aW9uKCB4LCB5ICkge1xuICB0aGlzLmdldFBvc2l0aW9uKCk7XG4gIC8vIGdldCBjdXJyZW50IHggJiB5IGZyb20gdG9wL2xlZnRcbiAgdmFyIGN1clggPSB0aGlzLnBvc2l0aW9uLng7XG4gIHZhciBjdXJZID0gdGhpcy5wb3NpdGlvbi55O1xuXG4gIHZhciBkaWROb3RNb3ZlID0geCA9PSB0aGlzLnBvc2l0aW9uLnggJiYgeSA9PSB0aGlzLnBvc2l0aW9uLnk7XG5cbiAgLy8gc2F2ZSBlbmQgcG9zaXRpb25cbiAgdGhpcy5zZXRQb3NpdGlvbiggeCwgeSApO1xuXG4gIC8vIGlmIGRpZCBub3QgbW92ZSBhbmQgbm90IHRyYW5zaXRpb25pbmcsIGp1c3QgZ28gdG8gbGF5b3V0XG4gIGlmICggZGlkTm90TW92ZSAmJiAhdGhpcy5pc1RyYW5zaXRpb25pbmcgKSB7XG4gICAgdGhpcy5sYXlvdXRQb3NpdGlvbigpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB0cmFuc1ggPSB4IC0gY3VyWDtcbiAgdmFyIHRyYW5zWSA9IHkgLSBjdXJZO1xuICB2YXIgdHJhbnNpdGlvblN0eWxlID0ge307XG4gIHRyYW5zaXRpb25TdHlsZS50cmFuc2Zvcm0gPSB0aGlzLmdldFRyYW5zbGF0ZSggdHJhbnNYLCB0cmFuc1kgKTtcblxuICB0aGlzLnRyYW5zaXRpb24oe1xuICAgIHRvOiB0cmFuc2l0aW9uU3R5bGUsXG4gICAgb25UcmFuc2l0aW9uRW5kOiB7XG4gICAgICB0cmFuc2Zvcm06IHRoaXMubGF5b3V0UG9zaXRpb25cbiAgICB9LFxuICAgIGlzQ2xlYW5pbmc6IHRydWVcbiAgfSk7XG59O1xuXG5wcm90by5nZXRUcmFuc2xhdGUgPSBmdW5jdGlvbiggeCwgeSApIHtcbiAgLy8gZmxpcCBjb29yaWRpbmF0ZXMgaWYgb3JpZ2luIG9uIHJpZ2h0IG9yIGJvdHRvbVxuICB2YXIgaXNPcmlnaW5MZWZ0ID0gdGhpcy5sYXlvdXQuX2dldE9wdGlvbignb3JpZ2luTGVmdCcpO1xuICB2YXIgaXNPcmlnaW5Ub3AgPSB0aGlzLmxheW91dC5fZ2V0T3B0aW9uKCdvcmlnaW5Ub3AnKTtcbiAgeCA9IGlzT3JpZ2luTGVmdCA/IHggOiAteDtcbiAgeSA9IGlzT3JpZ2luVG9wID8geSA6IC15O1xuICByZXR1cm4gJ3RyYW5zbGF0ZTNkKCcgKyB4ICsgJ3B4LCAnICsgeSArICdweCwgMCknO1xufTtcblxuLy8gbm9uIHRyYW5zaXRpb24gKyB0cmFuc2Zvcm0gc3VwcG9ydFxucHJvdG8uZ29UbyA9IGZ1bmN0aW9uKCB4LCB5ICkge1xuICB0aGlzLnNldFBvc2l0aW9uKCB4LCB5ICk7XG4gIHRoaXMubGF5b3V0UG9zaXRpb24oKTtcbn07XG5cbnByb3RvLm1vdmVUbyA9IHByb3RvLl90cmFuc2l0aW9uVG87XG5cbnByb3RvLnNldFBvc2l0aW9uID0gZnVuY3Rpb24oIHgsIHkgKSB7XG4gIHRoaXMucG9zaXRpb24ueCA9IHBhcnNlRmxvYXQoIHggKTtcbiAgdGhpcy5wb3NpdGlvbi55ID0gcGFyc2VGbG9hdCggeSApO1xufTtcblxuLy8gLS0tLS0gdHJhbnNpdGlvbiAtLS0tLSAvL1xuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZSAtIENTU1xuICogQHBhcmFtIHtGdW5jdGlvbn0gb25UcmFuc2l0aW9uRW5kXG4gKi9cblxuLy8gbm9uIHRyYW5zaXRpb24sIGp1c3QgdHJpZ2dlciBjYWxsYmFja1xucHJvdG8uX25vblRyYW5zaXRpb24gPSBmdW5jdGlvbiggYXJncyApIHtcbiAgdGhpcy5jc3MoIGFyZ3MudG8gKTtcbiAgaWYgKCBhcmdzLmlzQ2xlYW5pbmcgKSB7XG4gICAgdGhpcy5fcmVtb3ZlU3R5bGVzKCBhcmdzLnRvICk7XG4gIH1cbiAgZm9yICggdmFyIHByb3AgaW4gYXJncy5vblRyYW5zaXRpb25FbmQgKSB7XG4gICAgYXJncy5vblRyYW5zaXRpb25FbmRbIHByb3AgXS5jYWxsKCB0aGlzICk7XG4gIH1cbn07XG5cbi8qKlxuICogcHJvcGVyIHRyYW5zaXRpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSBhcmdzIC0gYXJndW1lbnRzXG4gKiAgIEBwYXJhbSB7T2JqZWN0fSB0byAtIHN0eWxlIHRvIHRyYW5zaXRpb24gdG9cbiAqICAgQHBhcmFtIHtPYmplY3R9IGZyb20gLSBzdHlsZSB0byBzdGFydCB0cmFuc2l0aW9uIGZyb21cbiAqICAgQHBhcmFtIHtCb29sZWFufSBpc0NsZWFuaW5nIC0gcmVtb3ZlcyB0cmFuc2l0aW9uIHN0eWxlcyBhZnRlciB0cmFuc2l0aW9uXG4gKiAgIEBwYXJhbSB7RnVuY3Rpb259IG9uVHJhbnNpdGlvbkVuZCAtIGNhbGxiYWNrXG4gKi9cbnByb3RvLnRyYW5zaXRpb24gPSBmdW5jdGlvbiggYXJncyApIHtcbiAgLy8gcmVkaXJlY3QgdG8gbm9uVHJhbnNpdGlvbiBpZiBubyB0cmFuc2l0aW9uIGR1cmF0aW9uXG4gIGlmICggIXBhcnNlRmxvYXQoIHRoaXMubGF5b3V0Lm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uICkgKSB7XG4gICAgdGhpcy5fbm9uVHJhbnNpdGlvbiggYXJncyApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBfdHJhbnNpdGlvbiA9IHRoaXMuX3RyYW5zbjtcbiAgLy8ga2VlcCB0cmFjayBvZiBvblRyYW5zaXRpb25FbmQgY2FsbGJhY2sgYnkgY3NzIHByb3BlcnR5XG4gIGZvciAoIHZhciBwcm9wIGluIGFyZ3Mub25UcmFuc2l0aW9uRW5kICkge1xuICAgIF90cmFuc2l0aW9uLm9uRW5kWyBwcm9wIF0gPSBhcmdzLm9uVHJhbnNpdGlvbkVuZFsgcHJvcCBdO1xuICB9XG4gIC8vIGtlZXAgdHJhY2sgb2YgcHJvcGVydGllcyB0aGF0IGFyZSB0cmFuc2l0aW9uaW5nXG4gIGZvciAoIHByb3AgaW4gYXJncy50byApIHtcbiAgICBfdHJhbnNpdGlvbi5pbmdQcm9wZXJ0aWVzWyBwcm9wIF0gPSB0cnVlO1xuICAgIC8vIGtlZXAgdHJhY2sgb2YgcHJvcGVydGllcyB0byBjbGVhbiB1cCB3aGVuIHRyYW5zaXRpb24gaXMgZG9uZVxuICAgIGlmICggYXJncy5pc0NsZWFuaW5nICkge1xuICAgICAgX3RyYW5zaXRpb24uY2xlYW5bIHByb3AgXSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLy8gc2V0IGZyb20gc3R5bGVzXG4gIGlmICggYXJncy5mcm9tICkge1xuICAgIHRoaXMuY3NzKCBhcmdzLmZyb20gKTtcbiAgICAvLyBmb3JjZSByZWRyYXcuIGh0dHA6Ly9ibG9nLmFsZXhtYWNjYXcuY29tL2Nzcy10cmFuc2l0aW9uc1xuICAgIHZhciBoID0gdGhpcy5lbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICAvLyBoYWNrIGZvciBKU0hpbnQgdG8gaHVzaCBhYm91dCB1bnVzZWQgdmFyXG4gICAgaCA9IG51bGw7XG4gIH1cbiAgLy8gZW5hYmxlIHRyYW5zaXRpb25cbiAgdGhpcy5lbmFibGVUcmFuc2l0aW9uKCBhcmdzLnRvICk7XG4gIC8vIHNldCBzdHlsZXMgdGhhdCBhcmUgdHJhbnNpdGlvbmluZ1xuICB0aGlzLmNzcyggYXJncy50byApO1xuXG4gIHRoaXMuaXNUcmFuc2l0aW9uaW5nID0gdHJ1ZTtcblxufTtcblxuLy8gZGFzaCBiZWZvcmUgYWxsIGNhcCBsZXR0ZXJzLCBpbmNsdWRpbmcgZmlyc3QgZm9yXG4vLyBXZWJraXRUcmFuc2Zvcm0gPT4gLXdlYmtpdC10cmFuc2Zvcm1cbmZ1bmN0aW9uIHRvRGFzaGVkQWxsKCBzdHIgKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSggLyhbQS1aXSkvZywgZnVuY3Rpb24oICQxICkge1xuICAgIHJldHVybiAnLScgKyAkMS50b0xvd2VyQ2FzZSgpO1xuICB9KTtcbn1cblxudmFyIHRyYW5zaXRpb25Qcm9wcyA9ICdvcGFjaXR5LCcgKyB0b0Rhc2hlZEFsbCggdHJhbnNmb3JtUHJvcGVydHkgKTtcblxucHJvdG8uZW5hYmxlVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKC8qIHN0eWxlICovKSB7XG4gIC8vIEhBQ0sgY2hhbmdpbmcgdHJhbnNpdGlvblByb3BlcnR5IGR1cmluZyBhIHRyYW5zaXRpb25cbiAgLy8gd2lsbCBjYXVzZSB0cmFuc2l0aW9uIHRvIGp1bXBcbiAgaWYgKCB0aGlzLmlzVHJhbnNpdGlvbmluZyApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBtYWtlIGB0cmFuc2l0aW9uOiBmb28sIGJhciwgYmF6YCBmcm9tIHN0eWxlIG9iamVjdFxuICAvLyBIQUNLIHVuLWNvbW1lbnQgdGhpcyB3aGVuIGVuYWJsZVRyYW5zaXRpb24gY2FuIHdvcmtcbiAgLy8gd2hpbGUgYSB0cmFuc2l0aW9uIGlzIGhhcHBlbmluZ1xuICAvLyB2YXIgdHJhbnNpdGlvblZhbHVlcyA9IFtdO1xuICAvLyBmb3IgKCB2YXIgcHJvcCBpbiBzdHlsZSApIHtcbiAgLy8gICAvLyBkYXNoLWlmeSBjYW1lbENhc2VkIHByb3BlcnRpZXMgbGlrZSBXZWJraXRUcmFuc2l0aW9uXG4gIC8vICAgcHJvcCA9IHZlbmRvclByb3BlcnRpZXNbIHByb3AgXSB8fCBwcm9wO1xuICAvLyAgIHRyYW5zaXRpb25WYWx1ZXMucHVzaCggdG9EYXNoZWRBbGwoIHByb3AgKSApO1xuICAvLyB9XG4gIC8vIG11bmdlIG51bWJlciB0byBtaWxsaXNlY29uZCwgdG8gbWF0Y2ggc3RhZ2dlclxuICB2YXIgZHVyYXRpb24gPSB0aGlzLmxheW91dC5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbjtcbiAgZHVyYXRpb24gPSB0eXBlb2YgZHVyYXRpb24gPT0gJ251bWJlcicgPyBkdXJhdGlvbiArICdtcycgOiBkdXJhdGlvbjtcbiAgLy8gZW5hYmxlIHRyYW5zaXRpb24gc3R5bGVzXG4gIHRoaXMuY3NzKHtcbiAgICB0cmFuc2l0aW9uUHJvcGVydHk6IHRyYW5zaXRpb25Qcm9wcyxcbiAgICB0cmFuc2l0aW9uRHVyYXRpb246IGR1cmF0aW9uLFxuICAgIHRyYW5zaXRpb25EZWxheTogdGhpcy5zdGFnZ2VyRGVsYXkgfHwgMFxuICB9KTtcbiAgLy8gbGlzdGVuIGZvciB0cmFuc2l0aW9uIGVuZCBldmVudFxuICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggdHJhbnNpdGlvbkVuZEV2ZW50LCB0aGlzLCBmYWxzZSApO1xufTtcblxuLy8gLS0tLS0gZXZlbnRzIC0tLS0tIC8vXG5cbnByb3RvLm9ud2Via2l0VHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5vbnRyYW5zaXRpb25lbmQoIGV2ZW50ICk7XG59O1xuXG5wcm90by5vbm90cmFuc2l0aW9uZW5kID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLm9udHJhbnNpdGlvbmVuZCggZXZlbnQgKTtcbn07XG5cbi8vIHByb3BlcnRpZXMgdGhhdCBJIG11bmdlIHRvIG1ha2UgbXkgbGlmZSBlYXNpZXJcbnZhciBkYXNoZWRWZW5kb3JQcm9wZXJ0aWVzID0ge1xuICAnLXdlYmtpdC10cmFuc2Zvcm0nOiAndHJhbnNmb3JtJ1xufTtcblxucHJvdG8ub250cmFuc2l0aW9uZW5kID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICAvLyBkaXNyZWdhcmQgYnViYmxlZCBldmVudHMgZnJvbSBjaGlsZHJlblxuICBpZiAoIGV2ZW50LnRhcmdldCAhPT0gdGhpcy5lbGVtZW50ICkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgX3RyYW5zaXRpb24gPSB0aGlzLl90cmFuc247XG4gIC8vIGdldCBwcm9wZXJ0eSBuYW1lIG9mIHRyYW5zaXRpb25lZCBwcm9wZXJ0eSwgY29udmVydCB0byBwcmVmaXgtZnJlZVxuICB2YXIgcHJvcGVydHlOYW1lID0gZGFzaGVkVmVuZG9yUHJvcGVydGllc1sgZXZlbnQucHJvcGVydHlOYW1lIF0gfHwgZXZlbnQucHJvcGVydHlOYW1lO1xuXG4gIC8vIHJlbW92ZSBwcm9wZXJ0eSB0aGF0IGhhcyBjb21wbGV0ZWQgdHJhbnNpdGlvbmluZ1xuICBkZWxldGUgX3RyYW5zaXRpb24uaW5nUHJvcGVydGllc1sgcHJvcGVydHlOYW1lIF07XG4gIC8vIGNoZWNrIGlmIGFueSBwcm9wZXJ0aWVzIGFyZSBzdGlsbCB0cmFuc2l0aW9uaW5nXG4gIGlmICggaXNFbXB0eU9iaiggX3RyYW5zaXRpb24uaW5nUHJvcGVydGllcyApICkge1xuICAgIC8vIGFsbCBwcm9wZXJ0aWVzIGhhdmUgY29tcGxldGVkIHRyYW5zaXRpb25pbmdcbiAgICB0aGlzLmRpc2FibGVUcmFuc2l0aW9uKCk7XG4gIH1cbiAgLy8gY2xlYW4gc3R5bGVcbiAgaWYgKCBwcm9wZXJ0eU5hbWUgaW4gX3RyYW5zaXRpb24uY2xlYW4gKSB7XG4gICAgLy8gY2xlYW4gdXAgc3R5bGVcbiAgICB0aGlzLmVsZW1lbnQuc3R5bGVbIGV2ZW50LnByb3BlcnR5TmFtZSBdID0gJyc7XG4gICAgZGVsZXRlIF90cmFuc2l0aW9uLmNsZWFuWyBwcm9wZXJ0eU5hbWUgXTtcbiAgfVxuICAvLyB0cmlnZ2VyIG9uVHJhbnNpdGlvbkVuZCBjYWxsYmFja1xuICBpZiAoIHByb3BlcnR5TmFtZSBpbiBfdHJhbnNpdGlvbi5vbkVuZCApIHtcbiAgICB2YXIgb25UcmFuc2l0aW9uRW5kID0gX3RyYW5zaXRpb24ub25FbmRbIHByb3BlcnR5TmFtZSBdO1xuICAgIG9uVHJhbnNpdGlvbkVuZC5jYWxsKCB0aGlzICk7XG4gICAgZGVsZXRlIF90cmFuc2l0aW9uLm9uRW5kWyBwcm9wZXJ0eU5hbWUgXTtcbiAgfVxuXG4gIHRoaXMuZW1pdEV2ZW50KCAndHJhbnNpdGlvbkVuZCcsIFsgdGhpcyBdICk7XG59O1xuXG5wcm90by5kaXNhYmxlVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnJlbW92ZVRyYW5zaXRpb25TdHlsZXMoKTtcbiAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHRyYW5zaXRpb25FbmRFdmVudCwgdGhpcywgZmFsc2UgKTtcbiAgdGhpcy5pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogcmVtb3ZlcyBzdHlsZSBwcm9wZXJ0eSBmcm9tIGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZVxuKiovXG5wcm90by5fcmVtb3ZlU3R5bGVzID0gZnVuY3Rpb24oIHN0eWxlICkge1xuICAvLyBjbGVhbiB1cCB0cmFuc2l0aW9uIHN0eWxlc1xuICB2YXIgY2xlYW5TdHlsZSA9IHt9O1xuICBmb3IgKCB2YXIgcHJvcCBpbiBzdHlsZSApIHtcbiAgICBjbGVhblN0eWxlWyBwcm9wIF0gPSAnJztcbiAgfVxuICB0aGlzLmNzcyggY2xlYW5TdHlsZSApO1xufTtcblxudmFyIGNsZWFuVHJhbnNpdGlvblN0eWxlID0ge1xuICB0cmFuc2l0aW9uUHJvcGVydHk6ICcnLFxuICB0cmFuc2l0aW9uRHVyYXRpb246ICcnLFxuICB0cmFuc2l0aW9uRGVsYXk6ICcnXG59O1xuXG5wcm90by5yZW1vdmVUcmFuc2l0aW9uU3R5bGVzID0gZnVuY3Rpb24oKSB7XG4gIC8vIHJlbW92ZSB0cmFuc2l0aW9uXG4gIHRoaXMuY3NzKCBjbGVhblRyYW5zaXRpb25TdHlsZSApO1xufTtcblxuLy8gLS0tLS0gc3RhZ2dlciAtLS0tLSAvL1xuXG5wcm90by5zdGFnZ2VyID0gZnVuY3Rpb24oIGRlbGF5ICkge1xuICBkZWxheSA9IGlzTmFOKCBkZWxheSApID8gMCA6IGRlbGF5O1xuICB0aGlzLnN0YWdnZXJEZWxheSA9IGRlbGF5ICsgJ21zJztcbn07XG5cbi8vIC0tLS0tIHNob3cvaGlkZS9yZW1vdmUgLS0tLS0gLy9cblxuLy8gcmVtb3ZlIGVsZW1lbnQgZnJvbSBET01cbnByb3RvLnJlbW92ZUVsZW0gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRoaXMuZWxlbWVudCApO1xuICAvLyByZW1vdmUgZGlzcGxheTogbm9uZVxuICB0aGlzLmNzcyh7IGRpc3BsYXk6ICcnIH0pO1xuICB0aGlzLmVtaXRFdmVudCggJ3JlbW92ZScsIFsgdGhpcyBdICk7XG59O1xuXG5wcm90by5yZW1vdmUgPSBmdW5jdGlvbigpIHtcbiAgLy8ganVzdCByZW1vdmUgZWxlbWVudCBpZiBubyB0cmFuc2l0aW9uIHN1cHBvcnQgb3Igbm8gdHJhbnNpdGlvblxuICBpZiAoICF0cmFuc2l0aW9uUHJvcGVydHkgfHwgIXBhcnNlRmxvYXQoIHRoaXMubGF5b3V0Lm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uICkgKSB7XG4gICAgdGhpcy5yZW1vdmVFbGVtKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gc3RhcnQgdHJhbnNpdGlvblxuICB0aGlzLm9uY2UoICd0cmFuc2l0aW9uRW5kJywgZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVFbGVtKCk7XG4gIH0pO1xuICB0aGlzLmhpZGUoKTtcbn07XG5cbnByb3RvLnJldmVhbCA9IGZ1bmN0aW9uKCkge1xuICBkZWxldGUgdGhpcy5pc0hpZGRlbjtcbiAgLy8gcmVtb3ZlIGRpc3BsYXk6IG5vbmVcbiAgdGhpcy5jc3MoeyBkaXNwbGF5OiAnJyB9KTtcblxuICB2YXIgb3B0aW9ucyA9IHRoaXMubGF5b3V0Lm9wdGlvbnM7XG5cbiAgdmFyIG9uVHJhbnNpdGlvbkVuZCA9IHt9O1xuICB2YXIgdHJhbnNpdGlvbkVuZFByb3BlcnR5ID0gdGhpcy5nZXRIaWRlUmV2ZWFsVHJhbnNpdGlvbkVuZFByb3BlcnR5KCd2aXNpYmxlU3R5bGUnKTtcbiAgb25UcmFuc2l0aW9uRW5kWyB0cmFuc2l0aW9uRW5kUHJvcGVydHkgXSA9IHRoaXMub25SZXZlYWxUcmFuc2l0aW9uRW5kO1xuXG4gIHRoaXMudHJhbnNpdGlvbih7XG4gICAgZnJvbTogb3B0aW9ucy5oaWRkZW5TdHlsZSxcbiAgICB0bzogb3B0aW9ucy52aXNpYmxlU3R5bGUsXG4gICAgaXNDbGVhbmluZzogdHJ1ZSxcbiAgICBvblRyYW5zaXRpb25FbmQ6IG9uVHJhbnNpdGlvbkVuZFxuICB9KTtcbn07XG5cbnByb3RvLm9uUmV2ZWFsVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uKCkge1xuICAvLyBjaGVjayBpZiBzdGlsbCB2aXNpYmxlXG4gIC8vIGR1cmluZyB0cmFuc2l0aW9uLCBpdGVtIG1heSBoYXZlIGJlZW4gaGlkZGVuXG4gIGlmICggIXRoaXMuaXNIaWRkZW4gKSB7XG4gICAgdGhpcy5lbWl0RXZlbnQoJ3JldmVhbCcpO1xuICB9XG59O1xuXG4vKipcbiAqIGdldCBzdHlsZSBwcm9wZXJ0eSB1c2UgZm9yIGhpZGUvcmV2ZWFsIHRyYW5zaXRpb24gZW5kXG4gKiBAcGFyYW0ge1N0cmluZ30gc3R5bGVQcm9wZXJ0eSAtIGhpZGRlblN0eWxlL3Zpc2libGVTdHlsZVxuICogQHJldHVybnMge1N0cmluZ31cbiAqL1xucHJvdG8uZ2V0SGlkZVJldmVhbFRyYW5zaXRpb25FbmRQcm9wZXJ0eSA9IGZ1bmN0aW9uKCBzdHlsZVByb3BlcnR5ICkge1xuICB2YXIgb3B0aW9uU3R5bGUgPSB0aGlzLmxheW91dC5vcHRpb25zWyBzdHlsZVByb3BlcnR5IF07XG4gIC8vIHVzZSBvcGFjaXR5XG4gIGlmICggb3B0aW9uU3R5bGUub3BhY2l0eSApIHtcbiAgICByZXR1cm4gJ29wYWNpdHknO1xuICB9XG4gIC8vIGdldCBmaXJzdCBwcm9wZXJ0eVxuICBmb3IgKCB2YXIgcHJvcCBpbiBvcHRpb25TdHlsZSApIHtcbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxucHJvdG8uaGlkZSA9IGZ1bmN0aW9uKCkge1xuICAvLyBzZXQgZmxhZ1xuICB0aGlzLmlzSGlkZGVuID0gdHJ1ZTtcbiAgLy8gcmVtb3ZlIGRpc3BsYXk6IG5vbmVcbiAgdGhpcy5jc3MoeyBkaXNwbGF5OiAnJyB9KTtcblxuICB2YXIgb3B0aW9ucyA9IHRoaXMubGF5b3V0Lm9wdGlvbnM7XG5cbiAgdmFyIG9uVHJhbnNpdGlvbkVuZCA9IHt9O1xuICB2YXIgdHJhbnNpdGlvbkVuZFByb3BlcnR5ID0gdGhpcy5nZXRIaWRlUmV2ZWFsVHJhbnNpdGlvbkVuZFByb3BlcnR5KCdoaWRkZW5TdHlsZScpO1xuICBvblRyYW5zaXRpb25FbmRbIHRyYW5zaXRpb25FbmRQcm9wZXJ0eSBdID0gdGhpcy5vbkhpZGVUcmFuc2l0aW9uRW5kO1xuXG4gIHRoaXMudHJhbnNpdGlvbih7XG4gICAgZnJvbTogb3B0aW9ucy52aXNpYmxlU3R5bGUsXG4gICAgdG86IG9wdGlvbnMuaGlkZGVuU3R5bGUsXG4gICAgLy8ga2VlcCBoaWRkZW4gc3R1ZmYgaGlkZGVuXG4gICAgaXNDbGVhbmluZzogdHJ1ZSxcbiAgICBvblRyYW5zaXRpb25FbmQ6IG9uVHJhbnNpdGlvbkVuZFxuICB9KTtcbn07XG5cbnByb3RvLm9uSGlkZVRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbigpIHtcbiAgLy8gY2hlY2sgaWYgc3RpbGwgaGlkZGVuXG4gIC8vIGR1cmluZyB0cmFuc2l0aW9uLCBpdGVtIG1heSBoYXZlIGJlZW4gdW4taGlkZGVuXG4gIGlmICggdGhpcy5pc0hpZGRlbiApIHtcbiAgICB0aGlzLmNzcyh7IGRpc3BsYXk6ICdub25lJyB9KTtcbiAgICB0aGlzLmVtaXRFdmVudCgnaGlkZScpO1xuICB9XG59O1xuXG5wcm90by5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY3NzKHtcbiAgICBwb3NpdGlvbjogJycsXG4gICAgbGVmdDogJycsXG4gICAgcmlnaHQ6ICcnLFxuICAgIHRvcDogJycsXG4gICAgYm90dG9tOiAnJyxcbiAgICB0cmFuc2l0aW9uOiAnJyxcbiAgICB0cmFuc2Zvcm06ICcnXG4gIH0pO1xufTtcblxucmV0dXJuIEl0ZW07XG5cbn0pKTtcbiIsIi8qIVxuICogT3V0bGF5ZXIgdjIuMS4xXG4gKiB0aGUgYnJhaW5zIGFuZCBndXRzIG9mIGEgbGF5b3V0IGxpYnJhcnlcbiAqIE1JVCBsaWNlbnNlXG4gKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKiBnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCByZXF1aXJlICovXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EIC0gUmVxdWlyZUpTXG4gICAgZGVmaW5lKCBbXG4gICAgICAgICdldi1lbWl0dGVyL2V2LWVtaXR0ZXInLFxuICAgICAgICAnZ2V0LXNpemUvZ2V0LXNpemUnLFxuICAgICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnLFxuICAgICAgICAnLi9pdGVtJ1xuICAgICAgXSxcbiAgICAgIGZ1bmN0aW9uKCBFdkVtaXR0ZXIsIGdldFNpemUsIHV0aWxzLCBJdGVtICkge1xuICAgICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBFdkVtaXR0ZXIsIGdldFNpemUsIHV0aWxzLCBJdGVtKTtcbiAgICAgIH1cbiAgICApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTIC0gQnJvd3NlcmlmeSwgV2VicGFja1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHJlcXVpcmUoJ2V2LWVtaXR0ZXInKSxcbiAgICAgIHJlcXVpcmUoJ2dldC1zaXplJyksXG4gICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpLFxuICAgICAgcmVxdWlyZSgnLi9pdGVtJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93Lk91dGxheWVyID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHdpbmRvdy5FdkVtaXR0ZXIsXG4gICAgICB3aW5kb3cuZ2V0U2l6ZSxcbiAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHMsXG4gICAgICB3aW5kb3cuT3V0bGF5ZXIuSXRlbVxuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIEV2RW1pdHRlciwgZ2V0U2l6ZSwgdXRpbHMsIEl0ZW0gKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8vIC0tLS0tIHZhcnMgLS0tLS0gLy9cblxudmFyIGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZTtcbnZhciBqUXVlcnkgPSB3aW5kb3cualF1ZXJ5O1xudmFyIG5vb3AgPSBmdW5jdGlvbigpIHt9O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBPdXRsYXllciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllcnNcbnZhciBHVUlEID0gMDtcbi8vIGludGVybmFsIHN0b3JlIG9mIGFsbCBPdXRsYXllciBpbnRhbmNlc1xudmFyIGluc3RhbmNlcyA9IHt9O1xuXG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50LCBTdHJpbmd9IGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gT3V0bGF5ZXIoIGVsZW1lbnQsIG9wdGlvbnMgKSB7XG4gIHZhciBxdWVyeUVsZW1lbnQgPSB1dGlscy5nZXRRdWVyeUVsZW1lbnQoIGVsZW1lbnQgKTtcbiAgaWYgKCAhcXVlcnlFbGVtZW50ICkge1xuICAgIGlmICggY29uc29sZSApIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoICdCYWQgZWxlbWVudCBmb3IgJyArIHRoaXMuY29uc3RydWN0b3IubmFtZXNwYWNlICtcbiAgICAgICAgJzogJyArICggcXVlcnlFbGVtZW50IHx8IGVsZW1lbnQgKSApO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5lbGVtZW50ID0gcXVlcnlFbGVtZW50O1xuICAvLyBhZGQgalF1ZXJ5XG4gIGlmICggalF1ZXJ5ICkge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBqUXVlcnkoIHRoaXMuZWxlbWVudCApO1xuICB9XG5cbiAgLy8gb3B0aW9uc1xuICB0aGlzLm9wdGlvbnMgPSB1dGlscy5leHRlbmQoIHt9LCB0aGlzLmNvbnN0cnVjdG9yLmRlZmF1bHRzICk7XG4gIHRoaXMub3B0aW9uKCBvcHRpb25zICk7XG5cbiAgLy8gYWRkIGlkIGZvciBPdXRsYXllci5nZXRGcm9tRWxlbWVudFxuICB2YXIgaWQgPSArK0dVSUQ7XG4gIHRoaXMuZWxlbWVudC5vdXRsYXllckdVSUQgPSBpZDsgLy8gZXhwYW5kb1xuICBpbnN0YW5jZXNbIGlkIF0gPSB0aGlzOyAvLyBhc3NvY2lhdGUgdmlhIGlkXG5cbiAgLy8ga2ljayBpdCBvZmZcbiAgdGhpcy5fY3JlYXRlKCk7XG5cbiAgdmFyIGlzSW5pdExheW91dCA9IHRoaXMuX2dldE9wdGlvbignaW5pdExheW91dCcpO1xuICBpZiAoIGlzSW5pdExheW91dCApIHtcbiAgICB0aGlzLmxheW91dCgpO1xuICB9XG59XG5cbi8vIHNldHRpbmdzIGFyZSBmb3IgaW50ZXJuYWwgdXNlIG9ubHlcbk91dGxheWVyLm5hbWVzcGFjZSA9ICdvdXRsYXllcic7XG5PdXRsYXllci5JdGVtID0gSXRlbTtcblxuLy8gZGVmYXVsdCBvcHRpb25zXG5PdXRsYXllci5kZWZhdWx0cyA9IHtcbiAgY29udGFpbmVyU3R5bGU6IHtcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICB9LFxuICBpbml0TGF5b3V0OiB0cnVlLFxuICBvcmlnaW5MZWZ0OiB0cnVlLFxuICBvcmlnaW5Ub3A6IHRydWUsXG4gIHJlc2l6ZTogdHJ1ZSxcbiAgcmVzaXplQ29udGFpbmVyOiB0cnVlLFxuICAvLyBpdGVtIG9wdGlvbnNcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiAnMC40cycsXG4gIGhpZGRlblN0eWxlOiB7XG4gICAgb3BhY2l0eTogMCxcbiAgICB0cmFuc2Zvcm06ICdzY2FsZSgwLjAwMSknXG4gIH0sXG4gIHZpc2libGVTdHlsZToge1xuICAgIG9wYWNpdHk6IDEsXG4gICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknXG4gIH1cbn07XG5cbnZhciBwcm90byA9IE91dGxheWVyLnByb3RvdHlwZTtcbi8vIGluaGVyaXQgRXZFbWl0dGVyXG51dGlscy5leHRlbmQoIHByb3RvLCBFdkVtaXR0ZXIucHJvdG90eXBlICk7XG5cbi8qKlxuICogc2V0IG9wdGlvbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKi9cbnByb3RvLm9wdGlvbiA9IGZ1bmN0aW9uKCBvcHRzICkge1xuICB1dGlscy5leHRlbmQoIHRoaXMub3B0aW9ucywgb3B0cyApO1xufTtcblxuLyoqXG4gKiBnZXQgYmFja3dhcmRzIGNvbXBhdGlibGUgb3B0aW9uIHZhbHVlLCBjaGVjayBvbGQgbmFtZVxuICovXG5wcm90by5fZ2V0T3B0aW9uID0gZnVuY3Rpb24oIG9wdGlvbiApIHtcbiAgdmFyIG9sZE9wdGlvbiA9IHRoaXMuY29uc3RydWN0b3IuY29tcGF0T3B0aW9uc1sgb3B0aW9uIF07XG4gIHJldHVybiBvbGRPcHRpb24gJiYgdGhpcy5vcHRpb25zWyBvbGRPcHRpb24gXSAhPT0gdW5kZWZpbmVkID9cbiAgICB0aGlzLm9wdGlvbnNbIG9sZE9wdGlvbiBdIDogdGhpcy5vcHRpb25zWyBvcHRpb24gXTtcbn07XG5cbk91dGxheWVyLmNvbXBhdE9wdGlvbnMgPSB7XG4gIC8vIGN1cnJlbnROYW1lOiBvbGROYW1lXG4gIGluaXRMYXlvdXQ6ICdpc0luaXRMYXlvdXQnLFxuICBob3Jpem9udGFsOiAnaXNIb3Jpem9udGFsJyxcbiAgbGF5b3V0SW5zdGFudDogJ2lzTGF5b3V0SW5zdGFudCcsXG4gIG9yaWdpbkxlZnQ6ICdpc09yaWdpbkxlZnQnLFxuICBvcmlnaW5Ub3A6ICdpc09yaWdpblRvcCcsXG4gIHJlc2l6ZTogJ2lzUmVzaXplQm91bmQnLFxuICByZXNpemVDb250YWluZXI6ICdpc1Jlc2l6aW5nQ29udGFpbmVyJ1xufTtcblxucHJvdG8uX2NyZWF0ZSA9IGZ1bmN0aW9uKCkge1xuICAvLyBnZXQgaXRlbXMgZnJvbSBjaGlsZHJlblxuICB0aGlzLnJlbG9hZEl0ZW1zKCk7XG4gIC8vIGVsZW1lbnRzIHRoYXQgYWZmZWN0IGxheW91dCwgYnV0IGFyZSBub3QgbGFpZCBvdXRcbiAgdGhpcy5zdGFtcHMgPSBbXTtcbiAgdGhpcy5zdGFtcCggdGhpcy5vcHRpb25zLnN0YW1wICk7XG4gIC8vIHNldCBjb250YWluZXIgc3R5bGVcbiAgdXRpbHMuZXh0ZW5kKCB0aGlzLmVsZW1lbnQuc3R5bGUsIHRoaXMub3B0aW9ucy5jb250YWluZXJTdHlsZSApO1xuXG4gIC8vIGJpbmQgcmVzaXplIG1ldGhvZFxuICB2YXIgY2FuQmluZFJlc2l6ZSA9IHRoaXMuX2dldE9wdGlvbigncmVzaXplJyk7XG4gIGlmICggY2FuQmluZFJlc2l6ZSApIHtcbiAgICB0aGlzLmJpbmRSZXNpemUoKTtcbiAgfVxufTtcblxuLy8gZ29lcyB0aHJvdWdoIGFsbCBjaGlsZHJlbiBhZ2FpbiBhbmQgZ2V0cyBicmlja3MgaW4gcHJvcGVyIG9yZGVyXG5wcm90by5yZWxvYWRJdGVtcyA9IGZ1bmN0aW9uKCkge1xuICAvLyBjb2xsZWN0aW9uIG9mIGl0ZW0gZWxlbWVudHNcbiAgdGhpcy5pdGVtcyA9IHRoaXMuX2l0ZW1pemUoIHRoaXMuZWxlbWVudC5jaGlsZHJlbiApO1xufTtcblxuXG4vKipcbiAqIHR1cm4gZWxlbWVudHMgaW50byBPdXRsYXllci5JdGVtcyB0byBiZSB1c2VkIGluIGxheW91dFxuICogQHBhcmFtIHtBcnJheSBvciBOb2RlTGlzdCBvciBIVE1MRWxlbWVudH0gZWxlbXNcbiAqIEByZXR1cm5zIHtBcnJheX0gaXRlbXMgLSBjb2xsZWN0aW9uIG9mIG5ldyBPdXRsYXllciBJdGVtc1xuICovXG5wcm90by5faXRlbWl6ZSA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuICB2YXIgaXRlbUVsZW1zID0gdGhpcy5fZmlsdGVyRmluZEl0ZW1FbGVtZW50cyggZWxlbXMgKTtcbiAgdmFyIEl0ZW0gPSB0aGlzLmNvbnN0cnVjdG9yLkl0ZW07XG5cbiAgLy8gY3JlYXRlIG5ldyBPdXRsYXllciBJdGVtcyBmb3IgY29sbGVjdGlvblxuICB2YXIgaXRlbXMgPSBbXTtcbiAgZm9yICggdmFyIGk9MDsgaSA8IGl0ZW1FbGVtcy5sZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgZWxlbSA9IGl0ZW1FbGVtc1tpXTtcbiAgICB2YXIgaXRlbSA9IG5ldyBJdGVtKCBlbGVtLCB0aGlzICk7XG4gICAgaXRlbXMucHVzaCggaXRlbSApO1xuICB9XG5cbiAgcmV0dXJuIGl0ZW1zO1xufTtcblxuLyoqXG4gKiBnZXQgaXRlbSBlbGVtZW50cyB0byBiZSB1c2VkIGluIGxheW91dFxuICogQHBhcmFtIHtBcnJheSBvciBOb2RlTGlzdCBvciBIVE1MRWxlbWVudH0gZWxlbXNcbiAqIEByZXR1cm5zIHtBcnJheX0gaXRlbXMgLSBpdGVtIGVsZW1lbnRzXG4gKi9cbnByb3RvLl9maWx0ZXJGaW5kSXRlbUVsZW1lbnRzID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICByZXR1cm4gdXRpbHMuZmlsdGVyRmluZEVsZW1lbnRzKCBlbGVtcywgdGhpcy5vcHRpb25zLml0ZW1TZWxlY3RvciApO1xufTtcblxuLyoqXG4gKiBnZXR0ZXIgbWV0aG9kIGZvciBnZXR0aW5nIGl0ZW0gZWxlbWVudHNcbiAqIEByZXR1cm5zIHtBcnJheX0gZWxlbXMgLSBjb2xsZWN0aW9uIG9mIGl0ZW0gZWxlbWVudHNcbiAqL1xucHJvdG8uZ2V0SXRlbUVsZW1lbnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLml0ZW1zLm1hcCggZnVuY3Rpb24oIGl0ZW0gKSB7XG4gICAgcmV0dXJuIGl0ZW0uZWxlbWVudDtcbiAgfSk7XG59O1xuXG4vLyAtLS0tLSBpbml0ICYgbGF5b3V0IC0tLS0tIC8vXG5cbi8qKlxuICogbGF5cyBvdXQgYWxsIGl0ZW1zXG4gKi9cbnByb3RvLmxheW91dCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9yZXNldExheW91dCgpO1xuICB0aGlzLl9tYW5hZ2VTdGFtcHMoKTtcblxuICAvLyBkb24ndCBhbmltYXRlIGZpcnN0IGxheW91dFxuICB2YXIgbGF5b3V0SW5zdGFudCA9IHRoaXMuX2dldE9wdGlvbignbGF5b3V0SW5zdGFudCcpO1xuICB2YXIgaXNJbnN0YW50ID0gbGF5b3V0SW5zdGFudCAhPT0gdW5kZWZpbmVkID9cbiAgICBsYXlvdXRJbnN0YW50IDogIXRoaXMuX2lzTGF5b3V0SW5pdGVkO1xuICB0aGlzLmxheW91dEl0ZW1zKCB0aGlzLml0ZW1zLCBpc0luc3RhbnQgKTtcblxuICAvLyBmbGFnIGZvciBpbml0YWxpemVkXG4gIHRoaXMuX2lzTGF5b3V0SW5pdGVkID0gdHJ1ZTtcbn07XG5cbi8vIF9pbml0IGlzIGFsaWFzIGZvciBsYXlvdXRcbnByb3RvLl9pbml0ID0gcHJvdG8ubGF5b3V0O1xuXG4vKipcbiAqIGxvZ2ljIGJlZm9yZSBhbnkgbmV3IGxheW91dFxuICovXG5wcm90by5fcmVzZXRMYXlvdXQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5nZXRTaXplKCk7XG59O1xuXG5cbnByb3RvLmdldFNpemUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zaXplID0gZ2V0U2l6ZSggdGhpcy5lbGVtZW50ICk7XG59O1xuXG4vKipcbiAqIGdldCBtZWFzdXJlbWVudCBmcm9tIG9wdGlvbiwgZm9yIGNvbHVtbldpZHRoLCByb3dIZWlnaHQsIGd1dHRlclxuICogaWYgb3B0aW9uIGlzIFN0cmluZyAtPiBnZXQgZWxlbWVudCBmcm9tIHNlbGVjdG9yIHN0cmluZywgJiBnZXQgc2l6ZSBvZiBlbGVtZW50XG4gKiBpZiBvcHRpb24gaXMgRWxlbWVudCAtPiBnZXQgc2l6ZSBvZiBlbGVtZW50XG4gKiBlbHNlIHVzZSBvcHRpb24gYXMgYSBudW1iZXJcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVhc3VyZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBzaXplIC0gd2lkdGggb3IgaGVpZ2h0XG4gKiBAcHJpdmF0ZVxuICovXG5wcm90by5fZ2V0TWVhc3VyZW1lbnQgPSBmdW5jdGlvbiggbWVhc3VyZW1lbnQsIHNpemUgKSB7XG4gIHZhciBvcHRpb24gPSB0aGlzLm9wdGlvbnNbIG1lYXN1cmVtZW50IF07XG4gIHZhciBlbGVtO1xuICBpZiAoICFvcHRpb24gKSB7XG4gICAgLy8gZGVmYXVsdCB0byAwXG4gICAgdGhpc1sgbWVhc3VyZW1lbnQgXSA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gdXNlIG9wdGlvbiBhcyBhbiBlbGVtZW50XG4gICAgaWYgKCB0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnICkge1xuICAgICAgZWxlbSA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCBvcHRpb24gKTtcbiAgICB9IGVsc2UgaWYgKCBvcHRpb24gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCApIHtcbiAgICAgIGVsZW0gPSBvcHRpb247XG4gICAgfVxuICAgIC8vIHVzZSBzaXplIG9mIGVsZW1lbnQsIGlmIGVsZW1lbnRcbiAgICB0aGlzWyBtZWFzdXJlbWVudCBdID0gZWxlbSA/IGdldFNpemUoIGVsZW0gKVsgc2l6ZSBdIDogb3B0aW9uO1xuICB9XG59O1xuXG4vKipcbiAqIGxheW91dCBhIGNvbGxlY3Rpb24gb2YgaXRlbSBlbGVtZW50c1xuICogQGFwaSBwdWJsaWNcbiAqL1xucHJvdG8ubGF5b3V0SXRlbXMgPSBmdW5jdGlvbiggaXRlbXMsIGlzSW5zdGFudCApIHtcbiAgaXRlbXMgPSB0aGlzLl9nZXRJdGVtc0ZvckxheW91dCggaXRlbXMgKTtcblxuICB0aGlzLl9sYXlvdXRJdGVtcyggaXRlbXMsIGlzSW5zdGFudCApO1xuXG4gIHRoaXMuX3Bvc3RMYXlvdXQoKTtcbn07XG5cbi8qKlxuICogZ2V0IHRoZSBpdGVtcyB0byBiZSBsYWlkIG91dFxuICogeW91IG1heSB3YW50IHRvIHNraXAgb3ZlciBzb21lIGl0ZW1zXG4gKiBAcGFyYW0ge0FycmF5fSBpdGVtc1xuICogQHJldHVybnMge0FycmF5fSBpdGVtc1xuICovXG5wcm90by5fZ2V0SXRlbXNGb3JMYXlvdXQgPSBmdW5jdGlvbiggaXRlbXMgKSB7XG4gIHJldHVybiBpdGVtcy5maWx0ZXIoIGZ1bmN0aW9uKCBpdGVtICkge1xuICAgIHJldHVybiAhaXRlbS5pc0lnbm9yZWQ7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBsYXlvdXQgaXRlbXNcbiAqIEBwYXJhbSB7QXJyYXl9IGl0ZW1zXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzSW5zdGFudFxuICovXG5wcm90by5fbGF5b3V0SXRlbXMgPSBmdW5jdGlvbiggaXRlbXMsIGlzSW5zdGFudCApIHtcbiAgdGhpcy5fZW1pdENvbXBsZXRlT25JdGVtcyggJ2xheW91dCcsIGl0ZW1zICk7XG5cbiAgaWYgKCAhaXRlbXMgfHwgIWl0ZW1zLmxlbmd0aCApIHtcbiAgICAvLyBubyBpdGVtcywgZW1pdCBldmVudCB3aXRoIGVtcHR5IGFycmF5XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHF1ZXVlID0gW107XG5cbiAgaXRlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGl0ZW0gKSB7XG4gICAgLy8gZ2V0IHgveSBvYmplY3QgZnJvbSBtZXRob2RcbiAgICB2YXIgcG9zaXRpb24gPSB0aGlzLl9nZXRJdGVtTGF5b3V0UG9zaXRpb24oIGl0ZW0gKTtcbiAgICAvLyBlbnF1ZXVlXG4gICAgcG9zaXRpb24uaXRlbSA9IGl0ZW07XG4gICAgcG9zaXRpb24uaXNJbnN0YW50ID0gaXNJbnN0YW50IHx8IGl0ZW0uaXNMYXlvdXRJbnN0YW50O1xuICAgIHF1ZXVlLnB1c2goIHBvc2l0aW9uICk7XG4gIH0sIHRoaXMgKTtcblxuICB0aGlzLl9wcm9jZXNzTGF5b3V0UXVldWUoIHF1ZXVlICk7XG59O1xuXG4vKipcbiAqIGdldCBpdGVtIGxheW91dCBwb3NpdGlvblxuICogQHBhcmFtIHtPdXRsYXllci5JdGVtfSBpdGVtXG4gKiBAcmV0dXJucyB7T2JqZWN0fSB4IGFuZCB5IHBvc2l0aW9uXG4gKi9cbnByb3RvLl9nZXRJdGVtTGF5b3V0UG9zaXRpb24gPSBmdW5jdGlvbiggLyogaXRlbSAqLyApIHtcbiAgcmV0dXJuIHtcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfTtcbn07XG5cbi8qKlxuICogaXRlcmF0ZSBvdmVyIGFycmF5IGFuZCBwb3NpdGlvbiBlYWNoIGl0ZW1cbiAqIFJlYXNvbiBiZWluZyAtIHNlcGFyYXRpbmcgdGhpcyBsb2dpYyBwcmV2ZW50cyAnbGF5b3V0IGludmFsaWRhdGlvbidcbiAqIHRoeCBAcGF1bF9pcmlzaFxuICogQHBhcmFtIHtBcnJheX0gcXVldWVcbiAqL1xucHJvdG8uX3Byb2Nlc3NMYXlvdXRRdWV1ZSA9IGZ1bmN0aW9uKCBxdWV1ZSApIHtcbiAgdGhpcy51cGRhdGVTdGFnZ2VyKCk7XG4gIHF1ZXVlLmZvckVhY2goIGZ1bmN0aW9uKCBvYmosIGkgKSB7XG4gICAgdGhpcy5fcG9zaXRpb25JdGVtKCBvYmouaXRlbSwgb2JqLngsIG9iai55LCBvYmouaXNJbnN0YW50LCBpICk7XG4gIH0sIHRoaXMgKTtcbn07XG5cbi8vIHNldCBzdGFnZ2VyIGZyb20gb3B0aW9uIGluIG1pbGxpc2Vjb25kcyBudW1iZXJcbnByb3RvLnVwZGF0ZVN0YWdnZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHN0YWdnZXIgPSB0aGlzLm9wdGlvbnMuc3RhZ2dlcjtcbiAgaWYgKCBzdGFnZ2VyID09PSBudWxsIHx8IHN0YWdnZXIgPT09IHVuZGVmaW5lZCApIHtcbiAgICB0aGlzLnN0YWdnZXIgPSAwO1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLnN0YWdnZXIgPSBnZXRNaWxsaXNlY29uZHMoIHN0YWdnZXIgKTtcbiAgcmV0dXJuIHRoaXMuc3RhZ2dlcjtcbn07XG5cbi8qKlxuICogU2V0cyBwb3NpdGlvbiBvZiBpdGVtIGluIERPTVxuICogQHBhcmFtIHtPdXRsYXllci5JdGVtfSBpdGVtXG4gKiBAcGFyYW0ge051bWJlcn0geCAtIGhvcml6b250YWwgcG9zaXRpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSB5IC0gdmVydGljYWwgcG9zaXRpb25cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNJbnN0YW50IC0gZGlzYWJsZXMgdHJhbnNpdGlvbnNcbiAqL1xucHJvdG8uX3Bvc2l0aW9uSXRlbSA9IGZ1bmN0aW9uKCBpdGVtLCB4LCB5LCBpc0luc3RhbnQsIGkgKSB7XG4gIGlmICggaXNJbnN0YW50ICkge1xuICAgIC8vIGlmIG5vdCB0cmFuc2l0aW9uLCBqdXN0IHNldCBDU1NcbiAgICBpdGVtLmdvVG8oIHgsIHkgKTtcbiAgfSBlbHNlIHtcbiAgICBpdGVtLnN0YWdnZXIoIGkgKiB0aGlzLnN0YWdnZXIgKTtcbiAgICBpdGVtLm1vdmVUbyggeCwgeSApO1xuICB9XG59O1xuXG4vKipcbiAqIEFueSBsb2dpYyB5b3Ugd2FudCB0byBkbyBhZnRlciBlYWNoIGxheW91dCxcbiAqIGkuZS4gc2l6ZSB0aGUgY29udGFpbmVyXG4gKi9cbnByb3RvLl9wb3N0TGF5b3V0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucmVzaXplQ29udGFpbmVyKCk7XG59O1xuXG5wcm90by5yZXNpemVDb250YWluZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGlzUmVzaXppbmdDb250YWluZXIgPSB0aGlzLl9nZXRPcHRpb24oJ3Jlc2l6ZUNvbnRhaW5lcicpO1xuICBpZiAoICFpc1Jlc2l6aW5nQ29udGFpbmVyICkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgc2l6ZSA9IHRoaXMuX2dldENvbnRhaW5lclNpemUoKTtcbiAgaWYgKCBzaXplICkge1xuICAgIHRoaXMuX3NldENvbnRhaW5lck1lYXN1cmUoIHNpemUud2lkdGgsIHRydWUgKTtcbiAgICB0aGlzLl9zZXRDb250YWluZXJNZWFzdXJlKCBzaXplLmhlaWdodCwgZmFsc2UgKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTZXRzIHdpZHRoIG9yIGhlaWdodCBvZiBjb250YWluZXIgaWYgcmV0dXJuZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IHNpemVcbiAqICAgQHBhcmFtIHtOdW1iZXJ9IHdpZHRoXG4gKiAgIEBwYXJhbSB7TnVtYmVyfSBoZWlnaHRcbiAqL1xucHJvdG8uX2dldENvbnRhaW5lclNpemUgPSBub29wO1xuXG4vKipcbiAqIEBwYXJhbSB7TnVtYmVyfSBtZWFzdXJlIC0gc2l6ZSBvZiB3aWR0aCBvciBoZWlnaHRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNXaWR0aFxuICovXG5wcm90by5fc2V0Q29udGFpbmVyTWVhc3VyZSA9IGZ1bmN0aW9uKCBtZWFzdXJlLCBpc1dpZHRoICkge1xuICBpZiAoIG1lYXN1cmUgPT09IHVuZGVmaW5lZCApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZWxlbVNpemUgPSB0aGlzLnNpemU7XG4gIC8vIGFkZCBwYWRkaW5nIGFuZCBib3JkZXIgd2lkdGggaWYgYm9yZGVyIGJveFxuICBpZiAoIGVsZW1TaXplLmlzQm9yZGVyQm94ICkge1xuICAgIG1lYXN1cmUgKz0gaXNXaWR0aCA/IGVsZW1TaXplLnBhZGRpbmdMZWZ0ICsgZWxlbVNpemUucGFkZGluZ1JpZ2h0ICtcbiAgICAgIGVsZW1TaXplLmJvcmRlckxlZnRXaWR0aCArIGVsZW1TaXplLmJvcmRlclJpZ2h0V2lkdGggOlxuICAgICAgZWxlbVNpemUucGFkZGluZ0JvdHRvbSArIGVsZW1TaXplLnBhZGRpbmdUb3AgK1xuICAgICAgZWxlbVNpemUuYm9yZGVyVG9wV2lkdGggKyBlbGVtU2l6ZS5ib3JkZXJCb3R0b21XaWR0aDtcbiAgfVxuXG4gIG1lYXN1cmUgPSBNYXRoLm1heCggbWVhc3VyZSwgMCApO1xuICB0aGlzLmVsZW1lbnQuc3R5bGVbIGlzV2lkdGggPyAnd2lkdGgnIDogJ2hlaWdodCcgXSA9IG1lYXN1cmUgKyAncHgnO1xufTtcblxuLyoqXG4gKiBlbWl0IGV2ZW50Q29tcGxldGUgb24gYSBjb2xsZWN0aW9uIG9mIGl0ZW1zIGV2ZW50c1xuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50TmFtZVxuICogQHBhcmFtIHtBcnJheX0gaXRlbXMgLSBPdXRsYXllci5JdGVtc1xuICovXG5wcm90by5fZW1pdENvbXBsZXRlT25JdGVtcyA9IGZ1bmN0aW9uKCBldmVudE5hbWUsIGl0ZW1zICkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuICBmdW5jdGlvbiBvbkNvbXBsZXRlKCkge1xuICAgIF90aGlzLmRpc3BhdGNoRXZlbnQoIGV2ZW50TmFtZSArICdDb21wbGV0ZScsIG51bGwsIFsgaXRlbXMgXSApO1xuICB9XG5cbiAgdmFyIGNvdW50ID0gaXRlbXMubGVuZ3RoO1xuICBpZiAoICFpdGVtcyB8fCAhY291bnQgKSB7XG4gICAgb25Db21wbGV0ZSgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBkb25lQ291bnQgPSAwO1xuICBmdW5jdGlvbiB0aWNrKCkge1xuICAgIGRvbmVDb3VudCsrO1xuICAgIGlmICggZG9uZUNvdW50ID09IGNvdW50ICkge1xuICAgICAgb25Db21wbGV0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGJpbmQgY2FsbGJhY2tcbiAgaXRlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGl0ZW0gKSB7XG4gICAgaXRlbS5vbmNlKCBldmVudE5hbWUsIHRpY2sgKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIGVtaXRzIGV2ZW50cyB2aWEgRXZFbWl0dGVyIGFuZCBqUXVlcnkgZXZlbnRzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZSAtIG5hbWUgb2YgZXZlbnRcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gb3JpZ2luYWwgZXZlbnRcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgLSBleHRyYSBhcmd1bWVudHNcbiAqL1xucHJvdG8uZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uKCB0eXBlLCBldmVudCwgYXJncyApIHtcbiAgLy8gYWRkIG9yaWdpbmFsIGV2ZW50IHRvIGFyZ3VtZW50c1xuICB2YXIgZW1pdEFyZ3MgPSBldmVudCA/IFsgZXZlbnQgXS5jb25jYXQoIGFyZ3MgKSA6IGFyZ3M7XG4gIHRoaXMuZW1pdEV2ZW50KCB0eXBlLCBlbWl0QXJncyApO1xuXG4gIGlmICggalF1ZXJ5ICkge1xuICAgIC8vIHNldCB0aGlzLiRlbGVtZW50XG4gICAgdGhpcy4kZWxlbWVudCA9IHRoaXMuJGVsZW1lbnQgfHwgalF1ZXJ5KCB0aGlzLmVsZW1lbnQgKTtcbiAgICBpZiAoIGV2ZW50ICkge1xuICAgICAgLy8gY3JlYXRlIGpRdWVyeSBldmVudFxuICAgICAgdmFyICRldmVudCA9IGpRdWVyeS5FdmVudCggZXZlbnQgKTtcbiAgICAgICRldmVudC50eXBlID0gdHlwZTtcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlciggJGV2ZW50LCBhcmdzICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGp1c3QgdHJpZ2dlciB3aXRoIHR5cGUgaWYgbm8gZXZlbnQgYXZhaWxhYmxlXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoIHR5cGUsIGFyZ3MgKTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGlnbm9yZSAmIHN0YW1wcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5cbi8qKlxuICoga2VlcCBpdGVtIGluIGNvbGxlY3Rpb24sIGJ1dCBkbyBub3QgbGF5IGl0IG91dFxuICogaWdub3JlZCBpdGVtcyBkbyBub3QgZ2V0IHNraXBwZWQgaW4gbGF5b3V0XG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1cbiAqL1xucHJvdG8uaWdub3JlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIHZhciBpdGVtID0gdGhpcy5nZXRJdGVtKCBlbGVtICk7XG4gIGlmICggaXRlbSApIHtcbiAgICBpdGVtLmlzSWdub3JlZCA9IHRydWU7XG4gIH1cbn07XG5cbi8qKlxuICogcmV0dXJuIGl0ZW0gdG8gbGF5b3V0IGNvbGxlY3Rpb25cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbVxuICovXG5wcm90by51bmlnbm9yZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICB2YXIgaXRlbSA9IHRoaXMuZ2V0SXRlbSggZWxlbSApO1xuICBpZiAoIGl0ZW0gKSB7XG4gICAgZGVsZXRlIGl0ZW0uaXNJZ25vcmVkO1xuICB9XG59O1xuXG4vKipcbiAqIGFkZHMgZWxlbWVudHMgdG8gc3RhbXBzXG4gKiBAcGFyYW0ge05vZGVMaXN0LCBBcnJheSwgRWxlbWVudCwgb3IgU3RyaW5nfSBlbGVtc1xuICovXG5wcm90by5zdGFtcCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgZWxlbXMgPSB0aGlzLl9maW5kKCBlbGVtcyApO1xuICBpZiAoICFlbGVtcyApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLnN0YW1wcyA9IHRoaXMuc3RhbXBzLmNvbmNhdCggZWxlbXMgKTtcbiAgLy8gaWdub3JlXG4gIGVsZW1zLmZvckVhY2goIHRoaXMuaWdub3JlLCB0aGlzICk7XG59O1xuXG4vKipcbiAqIHJlbW92ZXMgZWxlbWVudHMgdG8gc3RhbXBzXG4gKiBAcGFyYW0ge05vZGVMaXN0LCBBcnJheSwgb3IgRWxlbWVudH0gZWxlbXNcbiAqL1xucHJvdG8udW5zdGFtcCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgZWxlbXMgPSB0aGlzLl9maW5kKCBlbGVtcyApO1xuICBpZiAoICFlbGVtcyApe1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGVsZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgIC8vIGZpbHRlciBvdXQgcmVtb3ZlZCBzdGFtcCBlbGVtZW50c1xuICAgIHV0aWxzLnJlbW92ZUZyb20oIHRoaXMuc3RhbXBzLCBlbGVtICk7XG4gICAgdGhpcy51bmlnbm9yZSggZWxlbSApO1xuICB9LCB0aGlzICk7XG59O1xuXG4vKipcbiAqIGZpbmRzIGNoaWxkIGVsZW1lbnRzXG4gKiBAcGFyYW0ge05vZGVMaXN0LCBBcnJheSwgRWxlbWVudCwgb3IgU3RyaW5nfSBlbGVtc1xuICogQHJldHVybnMge0FycmF5fSBlbGVtc1xuICovXG5wcm90by5fZmluZCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgaWYgKCAhZWxlbXMgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGlmIHN0cmluZywgdXNlIGFyZ3VtZW50IGFzIHNlbGVjdG9yIHN0cmluZ1xuICBpZiAoIHR5cGVvZiBlbGVtcyA9PSAnc3RyaW5nJyApIHtcbiAgICBlbGVtcyA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCBlbGVtcyApO1xuICB9XG4gIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBlbGVtcyApO1xuICByZXR1cm4gZWxlbXM7XG59O1xuXG5wcm90by5fbWFuYWdlU3RhbXBzID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMuc3RhbXBzIHx8ICF0aGlzLnN0YW1wcy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5fZ2V0Qm91bmRpbmdSZWN0KCk7XG5cbiAgdGhpcy5zdGFtcHMuZm9yRWFjaCggdGhpcy5fbWFuYWdlU3RhbXAsIHRoaXMgKTtcbn07XG5cbi8vIHVwZGF0ZSBib3VuZGluZ0xlZnQgLyBUb3BcbnByb3RvLl9nZXRCb3VuZGluZ1JlY3QgPSBmdW5jdGlvbigpIHtcbiAgLy8gZ2V0IGJvdW5kaW5nIHJlY3QgZm9yIGNvbnRhaW5lciBlbGVtZW50XG4gIHZhciBib3VuZGluZ1JlY3QgPSB0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBzaXplID0gdGhpcy5zaXplO1xuICB0aGlzLl9ib3VuZGluZ1JlY3QgPSB7XG4gICAgbGVmdDogYm91bmRpbmdSZWN0LmxlZnQgKyBzaXplLnBhZGRpbmdMZWZ0ICsgc2l6ZS5ib3JkZXJMZWZ0V2lkdGgsXG4gICAgdG9wOiBib3VuZGluZ1JlY3QudG9wICsgc2l6ZS5wYWRkaW5nVG9wICsgc2l6ZS5ib3JkZXJUb3BXaWR0aCxcbiAgICByaWdodDogYm91bmRpbmdSZWN0LnJpZ2h0IC0gKCBzaXplLnBhZGRpbmdSaWdodCArIHNpemUuYm9yZGVyUmlnaHRXaWR0aCApLFxuICAgIGJvdHRvbTogYm91bmRpbmdSZWN0LmJvdHRvbSAtICggc2l6ZS5wYWRkaW5nQm90dG9tICsgc2l6ZS5ib3JkZXJCb3R0b21XaWR0aCApXG4gIH07XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0gc3RhbXBcbioqL1xucHJvdG8uX21hbmFnZVN0YW1wID0gbm9vcDtcblxuLyoqXG4gKiBnZXQgeC95IHBvc2l0aW9uIG9mIGVsZW1lbnQgcmVsYXRpdmUgdG8gY29udGFpbmVyIGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbVxuICogQHJldHVybnMge09iamVjdH0gb2Zmc2V0IC0gaGFzIGxlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbVxuICovXG5wcm90by5fZ2V0RWxlbWVudE9mZnNldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICB2YXIgYm91bmRpbmdSZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHRoaXNSZWN0ID0gdGhpcy5fYm91bmRpbmdSZWN0O1xuICB2YXIgc2l6ZSA9IGdldFNpemUoIGVsZW0gKTtcbiAgdmFyIG9mZnNldCA9IHtcbiAgICBsZWZ0OiBib3VuZGluZ1JlY3QubGVmdCAtIHRoaXNSZWN0LmxlZnQgLSBzaXplLm1hcmdpbkxlZnQsXG4gICAgdG9wOiBib3VuZGluZ1JlY3QudG9wIC0gdGhpc1JlY3QudG9wIC0gc2l6ZS5tYXJnaW5Ub3AsXG4gICAgcmlnaHQ6IHRoaXNSZWN0LnJpZ2h0IC0gYm91bmRpbmdSZWN0LnJpZ2h0IC0gc2l6ZS5tYXJnaW5SaWdodCxcbiAgICBib3R0b206IHRoaXNSZWN0LmJvdHRvbSAtIGJvdW5kaW5nUmVjdC5ib3R0b20gLSBzaXplLm1hcmdpbkJvdHRvbVxuICB9O1xuICByZXR1cm4gb2Zmc2V0O1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gcmVzaXplIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8vIGVuYWJsZSBldmVudCBoYW5kbGVycyBmb3IgbGlzdGVuZXJzXG4vLyBpLmUuIHJlc2l6ZSAtPiBvbnJlc2l6ZVxucHJvdG8uaGFuZGxlRXZlbnQgPSB1dGlscy5oYW5kbGVFdmVudDtcblxuLyoqXG4gKiBCaW5kIGxheW91dCB0byB3aW5kb3cgcmVzaXppbmdcbiAqL1xucHJvdG8uYmluZFJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ3Jlc2l6ZScsIHRoaXMgKTtcbiAgdGhpcy5pc1Jlc2l6ZUJvdW5kID0gdHJ1ZTtcbn07XG5cbi8qKlxuICogVW5iaW5kIGxheW91dCB0byB3aW5kb3cgcmVzaXppbmdcbiAqL1xucHJvdG8udW5iaW5kUmVzaXplID0gZnVuY3Rpb24oKSB7XG4gIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCAncmVzaXplJywgdGhpcyApO1xuICB0aGlzLmlzUmVzaXplQm91bmQgPSBmYWxzZTtcbn07XG5cbnByb3RvLm9ucmVzaXplID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucmVzaXplKCk7XG59O1xuXG51dGlscy5kZWJvdW5jZU1ldGhvZCggT3V0bGF5ZXIsICdvbnJlc2l6ZScsIDEwMCApO1xuXG5wcm90by5yZXNpemUgPSBmdW5jdGlvbigpIHtcbiAgLy8gZG9uJ3QgdHJpZ2dlciBpZiBzaXplIGRpZCBub3QgY2hhbmdlXG4gIC8vIG9yIGlmIHJlc2l6ZSB3YXMgdW5ib3VuZC4gU2VlICM5XG4gIGlmICggIXRoaXMuaXNSZXNpemVCb3VuZCB8fCAhdGhpcy5uZWVkc1Jlc2l6ZUxheW91dCgpICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMubGF5b3V0KCk7XG59O1xuXG4vKipcbiAqIGNoZWNrIGlmIGxheW91dCBpcyBuZWVkZWQgcG9zdCBsYXlvdXRcbiAqIEByZXR1cm5zIEJvb2xlYW5cbiAqL1xucHJvdG8ubmVlZHNSZXNpemVMYXlvdXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNpemUgPSBnZXRTaXplKCB0aGlzLmVsZW1lbnQgKTtcbiAgLy8gY2hlY2sgdGhhdCB0aGlzLnNpemUgYW5kIHNpemUgYXJlIHRoZXJlXG4gIC8vIElFOCB0cmlnZ2VycyByZXNpemUgb24gYm9keSBzaXplIGNoYW5nZSwgc28gdGhleSBtaWdodCBub3QgYmVcbiAgdmFyIGhhc1NpemVzID0gdGhpcy5zaXplICYmIHNpemU7XG4gIHJldHVybiBoYXNTaXplcyAmJiBzaXplLmlubmVyV2lkdGggIT09IHRoaXMuc2l6ZS5pbm5lcldpZHRoO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gbWV0aG9kcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIGFkZCBpdGVtcyB0byBPdXRsYXllciBpbnN0YW5jZVxuICogQHBhcmFtIHtBcnJheSBvciBOb2RlTGlzdCBvciBFbGVtZW50fSBlbGVtc1xuICogQHJldHVybnMge0FycmF5fSBpdGVtcyAtIE91dGxheWVyLkl0ZW1zXG4qKi9cbnByb3RvLmFkZEl0ZW1zID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICB2YXIgaXRlbXMgPSB0aGlzLl9pdGVtaXplKCBlbGVtcyApO1xuICAvLyBhZGQgaXRlbXMgdG8gY29sbGVjdGlvblxuICBpZiAoIGl0ZW1zLmxlbmd0aCApIHtcbiAgICB0aGlzLml0ZW1zID0gdGhpcy5pdGVtcy5jb25jYXQoIGl0ZW1zICk7XG4gIH1cbiAgcmV0dXJuIGl0ZW1zO1xufTtcblxuLyoqXG4gKiBMYXlvdXQgbmV3bHktYXBwZW5kZWQgaXRlbSBlbGVtZW50c1xuICogQHBhcmFtIHtBcnJheSBvciBOb2RlTGlzdCBvciBFbGVtZW50fSBlbGVtc1xuICovXG5wcm90by5hcHBlbmRlZCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgdmFyIGl0ZW1zID0gdGhpcy5hZGRJdGVtcyggZWxlbXMgKTtcbiAgaWYgKCAhaXRlbXMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBsYXlvdXQgYW5kIHJldmVhbCBqdXN0IHRoZSBuZXcgaXRlbXNcbiAgdGhpcy5sYXlvdXRJdGVtcyggaXRlbXMsIHRydWUgKTtcbiAgdGhpcy5yZXZlYWwoIGl0ZW1zICk7XG59O1xuXG4vKipcbiAqIExheW91dCBwcmVwZW5kZWQgZWxlbWVudHNcbiAqIEBwYXJhbSB7QXJyYXkgb3IgTm9kZUxpc3Qgb3IgRWxlbWVudH0gZWxlbXNcbiAqL1xucHJvdG8ucHJlcGVuZGVkID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICB2YXIgaXRlbXMgPSB0aGlzLl9pdGVtaXplKCBlbGVtcyApO1xuICBpZiAoICFpdGVtcy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGFkZCBpdGVtcyB0byBiZWdpbm5pbmcgb2YgY29sbGVjdGlvblxuICB2YXIgcHJldmlvdXNJdGVtcyA9IHRoaXMuaXRlbXMuc2xpY2UoMCk7XG4gIHRoaXMuaXRlbXMgPSBpdGVtcy5jb25jYXQoIHByZXZpb3VzSXRlbXMgKTtcbiAgLy8gc3RhcnQgbmV3IGxheW91dFxuICB0aGlzLl9yZXNldExheW91dCgpO1xuICB0aGlzLl9tYW5hZ2VTdGFtcHMoKTtcbiAgLy8gbGF5b3V0IG5ldyBzdHVmZiB3aXRob3V0IHRyYW5zaXRpb25cbiAgdGhpcy5sYXlvdXRJdGVtcyggaXRlbXMsIHRydWUgKTtcbiAgdGhpcy5yZXZlYWwoIGl0ZW1zICk7XG4gIC8vIGxheW91dCBwcmV2aW91cyBpdGVtc1xuICB0aGlzLmxheW91dEl0ZW1zKCBwcmV2aW91c0l0ZW1zICk7XG59O1xuXG4vKipcbiAqIHJldmVhbCBhIGNvbGxlY3Rpb24gb2YgaXRlbXNcbiAqIEBwYXJhbSB7QXJyYXkgb2YgT3V0bGF5ZXIuSXRlbXN9IGl0ZW1zXG4gKi9cbnByb3RvLnJldmVhbCA9IGZ1bmN0aW9uKCBpdGVtcyApIHtcbiAgdGhpcy5fZW1pdENvbXBsZXRlT25JdGVtcyggJ3JldmVhbCcsIGl0ZW1zICk7XG4gIGlmICggIWl0ZW1zIHx8ICFpdGVtcy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBzdGFnZ2VyID0gdGhpcy51cGRhdGVTdGFnZ2VyKCk7XG4gIGl0ZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBpdGVtLCBpICkge1xuICAgIGl0ZW0uc3RhZ2dlciggaSAqIHN0YWdnZXIgKTtcbiAgICBpdGVtLnJldmVhbCgpO1xuICB9KTtcbn07XG5cbi8qKlxuICogaGlkZSBhIGNvbGxlY3Rpb24gb2YgaXRlbXNcbiAqIEBwYXJhbSB7QXJyYXkgb2YgT3V0bGF5ZXIuSXRlbXN9IGl0ZW1zXG4gKi9cbnByb3RvLmhpZGUgPSBmdW5jdGlvbiggaXRlbXMgKSB7XG4gIHRoaXMuX2VtaXRDb21wbGV0ZU9uSXRlbXMoICdoaWRlJywgaXRlbXMgKTtcbiAgaWYgKCAhaXRlbXMgfHwgIWl0ZW1zLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHN0YWdnZXIgPSB0aGlzLnVwZGF0ZVN0YWdnZXIoKTtcbiAgaXRlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGl0ZW0sIGkgKSB7XG4gICAgaXRlbS5zdGFnZ2VyKCBpICogc3RhZ2dlciApO1xuICAgIGl0ZW0uaGlkZSgpO1xuICB9KTtcbn07XG5cbi8qKlxuICogcmV2ZWFsIGl0ZW0gZWxlbWVudHNcbiAqIEBwYXJhbSB7QXJyYXl9LCB7RWxlbWVudH0sIHtOb2RlTGlzdH0gaXRlbXNcbiAqL1xucHJvdG8ucmV2ZWFsSXRlbUVsZW1lbnRzID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICB2YXIgaXRlbXMgPSB0aGlzLmdldEl0ZW1zKCBlbGVtcyApO1xuICB0aGlzLnJldmVhbCggaXRlbXMgKTtcbn07XG5cbi8qKlxuICogaGlkZSBpdGVtIGVsZW1lbnRzXG4gKiBAcGFyYW0ge0FycmF5fSwge0VsZW1lbnR9LCB7Tm9kZUxpc3R9IGl0ZW1zXG4gKi9cbnByb3RvLmhpZGVJdGVtRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHZhciBpdGVtcyA9IHRoaXMuZ2V0SXRlbXMoIGVsZW1zICk7XG4gIHRoaXMuaGlkZSggaXRlbXMgKTtcbn07XG5cbi8qKlxuICogZ2V0IE91dGxheWVyLkl0ZW0sIGdpdmVuIGFuIEVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtPdXRsYXllci5JdGVtfSBpdGVtXG4gKi9cbnByb3RvLmdldEl0ZW0gPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgLy8gbG9vcCB0aHJvdWdoIGl0ZW1zIHRvIGdldCB0aGUgb25lIHRoYXQgbWF0Y2hlc1xuICBmb3IgKCB2YXIgaT0wOyBpIDwgdGhpcy5pdGVtcy5sZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgaXRlbSA9IHRoaXMuaXRlbXNbaV07XG4gICAgaWYgKCBpdGVtLmVsZW1lbnQgPT0gZWxlbSApIHtcbiAgICAgIC8vIHJldHVybiBpdGVtXG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogZ2V0IGNvbGxlY3Rpb24gb2YgT3V0bGF5ZXIuSXRlbXMsIGdpdmVuIEVsZW1lbnRzXG4gKiBAcGFyYW0ge0FycmF5fSBlbGVtc1xuICogQHJldHVybnMge0FycmF5fSBpdGVtcyAtIE91dGxheWVyLkl0ZW1zXG4gKi9cbnByb3RvLmdldEl0ZW1zID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcbiAgdmFyIGl0ZW1zID0gW107XG4gIGVsZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgIHZhciBpdGVtID0gdGhpcy5nZXRJdGVtKCBlbGVtICk7XG4gICAgaWYgKCBpdGVtICkge1xuICAgICAgaXRlbXMucHVzaCggaXRlbSApO1xuICAgIH1cbiAgfSwgdGhpcyApO1xuXG4gIHJldHVybiBpdGVtcztcbn07XG5cbi8qKlxuICogcmVtb3ZlIGVsZW1lbnQocykgZnJvbSBpbnN0YW5jZSBhbmQgRE9NXG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEVsZW1lbnR9IGVsZW1zXG4gKi9cbnByb3RvLnJlbW92ZSA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgdmFyIHJlbW92ZUl0ZW1zID0gdGhpcy5nZXRJdGVtcyggZWxlbXMgKTtcblxuICB0aGlzLl9lbWl0Q29tcGxldGVPbkl0ZW1zKCAncmVtb3ZlJywgcmVtb3ZlSXRlbXMgKTtcblxuICAvLyBiYWlsIGlmIG5vIGl0ZW1zIHRvIHJlbW92ZVxuICBpZiAoICFyZW1vdmVJdGVtcyB8fCAhcmVtb3ZlSXRlbXMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHJlbW92ZUl0ZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBpdGVtICkge1xuICAgIGl0ZW0ucmVtb3ZlKCk7XG4gICAgLy8gcmVtb3ZlIGl0ZW0gZnJvbSBjb2xsZWN0aW9uXG4gICAgdXRpbHMucmVtb3ZlRnJvbSggdGhpcy5pdGVtcywgaXRlbSApO1xuICB9LCB0aGlzICk7XG59O1xuXG4vLyAtLS0tLSBkZXN0cm95IC0tLS0tIC8vXG5cbi8vIHJlbW92ZSBhbmQgZGlzYWJsZSBPdXRsYXllciBpbnN0YW5jZVxucHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAvLyBjbGVhbiB1cCBkeW5hbWljIHN0eWxlc1xuICB2YXIgc3R5bGUgPSB0aGlzLmVsZW1lbnQuc3R5bGU7XG4gIHN0eWxlLmhlaWdodCA9ICcnO1xuICBzdHlsZS5wb3NpdGlvbiA9ICcnO1xuICBzdHlsZS53aWR0aCA9ICcnO1xuICAvLyBkZXN0cm95IGl0ZW1zXG4gIHRoaXMuaXRlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGl0ZW0gKSB7XG4gICAgaXRlbS5kZXN0cm95KCk7XG4gIH0pO1xuXG4gIHRoaXMudW5iaW5kUmVzaXplKCk7XG5cbiAgdmFyIGlkID0gdGhpcy5lbGVtZW50Lm91dGxheWVyR1VJRDtcbiAgZGVsZXRlIGluc3RhbmNlc1sgaWQgXTsgLy8gcmVtb3ZlIHJlZmVyZW5jZSB0byBpbnN0YW5jZSBieSBpZFxuICBkZWxldGUgdGhpcy5lbGVtZW50Lm91dGxheWVyR1VJRDtcbiAgLy8gcmVtb3ZlIGRhdGEgZm9yIGpRdWVyeVxuICBpZiAoIGpRdWVyeSApIHtcbiAgICBqUXVlcnkucmVtb3ZlRGF0YSggdGhpcy5lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLm5hbWVzcGFjZSApO1xuICB9XG5cbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGRhdGEgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLyoqXG4gKiBnZXQgT3V0bGF5ZXIgaW5zdGFuY2UgZnJvbSBlbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1cbiAqIEByZXR1cm5zIHtPdXRsYXllcn1cbiAqL1xuT3V0bGF5ZXIuZGF0YSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICBlbGVtID0gdXRpbHMuZ2V0UXVlcnlFbGVtZW50KCBlbGVtICk7XG4gIHZhciBpZCA9IGVsZW0gJiYgZWxlbS5vdXRsYXllckdVSUQ7XG4gIHJldHVybiBpZCAmJiBpbnN0YW5jZXNbIGlkIF07XG59O1xuXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGNyZWF0ZSBPdXRsYXllciBjbGFzcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIGNyZWF0ZSBhIGxheW91dCBjbGFzc1xuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICovXG5PdXRsYXllci5jcmVhdGUgPSBmdW5jdGlvbiggbmFtZXNwYWNlLCBvcHRpb25zICkge1xuICAvLyBzdWItY2xhc3MgT3V0bGF5ZXJcbiAgdmFyIExheW91dCA9IHN1YmNsYXNzKCBPdXRsYXllciApO1xuICAvLyBhcHBseSBuZXcgb3B0aW9ucyBhbmQgY29tcGF0T3B0aW9uc1xuICBMYXlvdXQuZGVmYXVsdHMgPSB1dGlscy5leHRlbmQoIHt9LCBPdXRsYXllci5kZWZhdWx0cyApO1xuICB1dGlscy5leHRlbmQoIExheW91dC5kZWZhdWx0cywgb3B0aW9ucyApO1xuICBMYXlvdXQuY29tcGF0T3B0aW9ucyA9IHV0aWxzLmV4dGVuZCgge30sIE91dGxheWVyLmNvbXBhdE9wdGlvbnMgICk7XG5cbiAgTGF5b3V0Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcblxuICBMYXlvdXQuZGF0YSA9IE91dGxheWVyLmRhdGE7XG5cbiAgLy8gc3ViLWNsYXNzIEl0ZW1cbiAgTGF5b3V0Lkl0ZW0gPSBzdWJjbGFzcyggSXRlbSApO1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGRlY2xhcmF0aXZlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgdXRpbHMuaHRtbEluaXQoIExheW91dCwgbmFtZXNwYWNlICk7XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0galF1ZXJ5IGJyaWRnZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4gIC8vIG1ha2UgaW50byBqUXVlcnkgcGx1Z2luXG4gIGlmICggalF1ZXJ5ICYmIGpRdWVyeS5icmlkZ2V0ICkge1xuICAgIGpRdWVyeS5icmlkZ2V0KCBuYW1lc3BhY2UsIExheW91dCApO1xuICB9XG5cbiAgcmV0dXJuIExheW91dDtcbn07XG5cbmZ1bmN0aW9uIHN1YmNsYXNzKCBQYXJlbnQgKSB7XG4gIGZ1bmN0aW9uIFN1YkNsYXNzKCkge1xuICAgIFBhcmVudC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG4gIH1cblxuICBTdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBQYXJlbnQucHJvdG90eXBlICk7XG4gIFN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1YkNsYXNzO1xuXG4gIHJldHVybiBTdWJDbGFzcztcbn1cblxuLy8gLS0tLS0gaGVscGVycyAtLS0tLSAvL1xuXG4vLyBob3cgbWFueSBtaWxsaXNlY29uZHMgYXJlIGluIGVhY2ggdW5pdFxudmFyIG1zVW5pdHMgPSB7XG4gIG1zOiAxLFxuICBzOiAxMDAwXG59O1xuXG4vLyBtdW5nZSB0aW1lLWxpa2UgcGFyYW1ldGVyIGludG8gbWlsbGlzZWNvbmQgbnVtYmVyXG4vLyAnMC40cycgLT4gNDBcbmZ1bmN0aW9uIGdldE1pbGxpc2Vjb25kcyggdGltZSApIHtcbiAgaWYgKCB0eXBlb2YgdGltZSA9PSAnbnVtYmVyJyApIHtcbiAgICByZXR1cm4gdGltZTtcbiAgfVxuICB2YXIgbWF0Y2hlcyA9IHRpbWUubWF0Y2goIC8oXlxcZCpcXC4/XFxkKikoXFx3KikvICk7XG4gIHZhciBudW0gPSBtYXRjaGVzICYmIG1hdGNoZXNbMV07XG4gIHZhciB1bml0ID0gbWF0Y2hlcyAmJiBtYXRjaGVzWzJdO1xuICBpZiAoICFudW0ubGVuZ3RoICkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIG51bSA9IHBhcnNlRmxvYXQoIG51bSApO1xuICB2YXIgbXVsdCA9IG1zVW5pdHNbIHVuaXQgXSB8fCAxO1xuICByZXR1cm4gbnVtICogbXVsdDtcbn1cblxuLy8gLS0tLS0gZmluIC0tLS0tIC8vXG5cbi8vIGJhY2sgaW4gZ2xvYmFsXG5PdXRsYXllci5JdGVtID0gSXRlbTtcblxucmV0dXJuIE91dGxheWVyO1xuXG59KSk7XG4iLCIvKipcbiAqIE93bCBDYXJvdXNlbCB2Mi4zLjRcbiAqIENvcHlyaWdodCAyMDEzLTIwMTggRGF2aWQgRGV1dHNjaFxuICogTGljZW5zZWQgdW5kZXI6IFNFRSBMSUNFTlNFIElOIGh0dHBzOi8vZ2l0aHViLmNvbS9Pd2xDYXJvdXNlbDIvT3dsQ2Fyb3VzZWwyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuLyoqXG4gKiBPd2wgY2Fyb3VzZWxcbiAqIEB2ZXJzaW9uIDIuMy40XG4gKiBAYXV0aG9yIEJhcnRvc3ogV29qY2llY2hvd3NraVxuICogQGF1dGhvciBEYXZpZCBEZXV0c2NoXG4gKiBAbGljZW5zZSBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqIEB0b2RvIExhenkgTG9hZCBJY29uXG4gKiBAdG9kbyBwcmV2ZW50IGFuaW1hdGlvbmVuZCBidWJsaW5nXG4gKiBAdG9kbyBpdGVtc1NjYWxlVXBcbiAqIEB0b2RvIFRlc3QgWmVwdG9cbiAqIEB0b2RvIHN0YWdlUGFkZGluZyBjYWxjdWxhdGUgd3JvbmcgYWN0aXZlIGNsYXNzZXNcbiAqL1xuOyhmdW5jdGlvbigkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIGNhcm91c2VsLlxuXHQgKiBAY2xhc3MgVGhlIE93bCBDYXJvdXNlbC5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge0hUTUxFbGVtZW50fGpRdWVyeX0gZWxlbWVudCAtIFRoZSBlbGVtZW50IHRvIGNyZWF0ZSB0aGUgY2Fyb3VzZWwgZm9yLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gVGhlIG9wdGlvbnNcblx0ICovXG5cdGZ1bmN0aW9uIE93bChlbGVtZW50LCBvcHRpb25zKSB7XG5cblx0XHQvKipcblx0XHQgKiBDdXJyZW50IHNldHRpbmdzIGZvciB0aGUgY2Fyb3VzZWwuXG5cdFx0ICogQHB1YmxpY1xuXHRcdCAqL1xuXHRcdHRoaXMuc2V0dGluZ3MgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQ3VycmVudCBvcHRpb25zIHNldCBieSB0aGUgY2FsbGVyIGluY2x1ZGluZyBkZWZhdWx0cy5cblx0XHQgKiBAcHVibGljXG5cdFx0ICovXG5cdFx0dGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIE93bC5EZWZhdWx0cywgb3B0aW9ucyk7XG5cblx0XHQvKipcblx0XHQgKiBQbHVnaW4gZWxlbWVudC5cblx0XHQgKiBAcHVibGljXG5cdFx0ICovXG5cdFx0dGhpcy4kZWxlbWVudCA9ICQoZWxlbWVudCk7XG5cblx0XHQvKipcblx0XHQgKiBQcm94aWVkIGV2ZW50IGhhbmRsZXJzLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLl9oYW5kbGVycyA9IHt9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmVmZXJlbmNlcyB0byB0aGUgcnVubmluZyBwbHVnaW5zIG9mIHRoaXMgY2Fyb3VzZWwuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuX3BsdWdpbnMgPSB7fTtcblxuXHRcdC8qKlxuXHRcdCAqIEN1cnJlbnRseSBzdXBwcmVzc2VkIGV2ZW50cyB0byBwcmV2ZW50IHRoZW0gZnJvbSBiZWluZyByZXRyaWdnZXJlZC5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5fc3VwcmVzcyA9IHt9O1xuXG5cdFx0LyoqXG5cdFx0ICogQWJzb2x1dGUgY3VycmVudCBwb3NpdGlvbi5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5fY3VycmVudCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBbmltYXRpb24gc3BlZWQgaW4gbWlsbGlzZWNvbmRzLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLl9zcGVlZCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBDb29yZGluYXRlcyBvZiBhbGwgaXRlbXMgaW4gcGl4ZWwuXG5cdFx0ICogQHRvZG8gVGhlIG5hbWUgb2YgdGhpcyBtZW1iZXIgaXMgbWlzc2xlYWRpbmcuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuX2Nvb3JkaW5hdGVzID0gW107XG5cblx0XHQvKipcblx0XHQgKiBDdXJyZW50IGJyZWFrcG9pbnQuXG5cdFx0ICogQHRvZG8gUmVhbCBtZWRpYSBxdWVyaWVzIHdvdWxkIGJlIG5pY2UuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuX2JyZWFrcG9pbnQgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQ3VycmVudCB3aWR0aCBvZiB0aGUgcGx1Z2luIGVsZW1lbnQuXG5cdFx0ICovXG5cdFx0dGhpcy5fd2lkdGggPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQWxsIHJlYWwgaXRlbXMuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuX2l0ZW1zID0gW107XG5cblx0XHQvKipcblx0XHQgKiBBbGwgY2xvbmVkIGl0ZW1zLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLl9jbG9uZXMgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIE1lcmdlIHZhbHVlcyBvZiBhbGwgaXRlbXMuXG5cdFx0ICogQHRvZG8gTWF5YmUgdGhpcyBjb3VsZCBiZSBwYXJ0IG9mIGEgcGx1Z2luLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLl9tZXJnZXJzID0gW107XG5cblx0XHQvKipcblx0XHQgKiBXaWR0aHMgb2YgYWxsIGl0ZW1zLlxuXHRcdCAqL1xuXHRcdHRoaXMuX3dpZHRocyA9IFtdO1xuXG5cdFx0LyoqXG5cdFx0ICogSW52YWxpZGF0ZWQgcGFydHMgd2l0aGluIHRoZSB1cGRhdGUgcHJvY2Vzcy5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5faW52YWxpZGF0ZWQgPSB7fTtcblxuXHRcdC8qKlxuXHRcdCAqIE9yZGVyZWQgbGlzdCBvZiB3b3JrZXJzIGZvciB0aGUgdXBkYXRlIHByb2Nlc3MuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuX3BpcGUgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIEN1cnJlbnQgc3RhdGUgaW5mb3JtYXRpb24gZm9yIHRoZSBkcmFnIG9wZXJhdGlvbi5cblx0XHQgKiBAdG9kbyAjMjYxXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuX2RyYWcgPSB7XG5cdFx0XHR0aW1lOiBudWxsLFxuXHRcdFx0dGFyZ2V0OiBudWxsLFxuXHRcdFx0cG9pbnRlcjogbnVsbCxcblx0XHRcdHN0YWdlOiB7XG5cdFx0XHRcdHN0YXJ0OiBudWxsLFxuXHRcdFx0XHRjdXJyZW50OiBudWxsXG5cdFx0XHR9LFxuXHRcdFx0ZGlyZWN0aW9uOiBudWxsXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIEN1cnJlbnQgc3RhdGUgaW5mb3JtYXRpb24gYW5kIHRoZWlyIHRhZ3MuXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5fc3RhdGVzID0ge1xuXHRcdFx0Y3VycmVudDoge30sXG5cdFx0XHR0YWdzOiB7XG5cdFx0XHRcdCdpbml0aWFsaXppbmcnOiBbICdidXN5JyBdLFxuXHRcdFx0XHQnYW5pbWF0aW5nJzogWyAnYnVzeScgXSxcblx0XHRcdFx0J2RyYWdnaW5nJzogWyAnaW50ZXJhY3RpbmcnIF1cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0JC5lYWNoKFsgJ29uUmVzaXplJywgJ29uVGhyb3R0bGVkUmVzaXplJyBdLCAkLnByb3h5KGZ1bmN0aW9uKGksIGhhbmRsZXIpIHtcblx0XHRcdHRoaXMuX2hhbmRsZXJzW2hhbmRsZXJdID0gJC5wcm94eSh0aGlzW2hhbmRsZXJdLCB0aGlzKTtcblx0XHR9LCB0aGlzKSk7XG5cblx0XHQkLmVhY2goT3dsLlBsdWdpbnMsICQucHJveHkoZnVuY3Rpb24oa2V5LCBwbHVnaW4pIHtcblx0XHRcdHRoaXMuX3BsdWdpbnNba2V5LmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsga2V5LnNsaWNlKDEpXVxuXHRcdFx0XHQ9IG5ldyBwbHVnaW4odGhpcyk7XG5cdFx0fSwgdGhpcykpO1xuXG5cdFx0JC5lYWNoKE93bC5Xb3JrZXJzLCAkLnByb3h5KGZ1bmN0aW9uKHByaW9yaXR5LCB3b3JrZXIpIHtcblx0XHRcdHRoaXMuX3BpcGUucHVzaCh7XG5cdFx0XHRcdCdmaWx0ZXInOiB3b3JrZXIuZmlsdGVyLFxuXHRcdFx0XHQncnVuJzogJC5wcm94eSh3b3JrZXIucnVuLCB0aGlzKVxuXHRcdFx0fSk7XG5cdFx0fSwgdGhpcykpO1xuXG5cdFx0dGhpcy5zZXR1cCgpO1xuXHRcdHRoaXMuaW5pdGlhbGl6ZSgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIERlZmF1bHQgb3B0aW9ucyBmb3IgdGhlIGNhcm91c2VsLlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRPd2wuRGVmYXVsdHMgPSB7XG5cdFx0aXRlbXM6IDMsXG5cdFx0bG9vcDogZmFsc2UsXG5cdFx0Y2VudGVyOiBmYWxzZSxcblx0XHRyZXdpbmQ6IGZhbHNlLFxuXHRcdGNoZWNrVmlzaWJpbGl0eTogdHJ1ZSxcblxuXHRcdG1vdXNlRHJhZzogdHJ1ZSxcblx0XHR0b3VjaERyYWc6IHRydWUsXG5cdFx0cHVsbERyYWc6IHRydWUsXG5cdFx0ZnJlZURyYWc6IGZhbHNlLFxuXG5cdFx0bWFyZ2luOiAwLFxuXHRcdHN0YWdlUGFkZGluZzogMCxcblxuXHRcdG1lcmdlOiBmYWxzZSxcblx0XHRtZXJnZUZpdDogdHJ1ZSxcblx0XHRhdXRvV2lkdGg6IGZhbHNlLFxuXG5cdFx0c3RhcnRQb3NpdGlvbjogMCxcblx0XHRydGw6IGZhbHNlLFxuXG5cdFx0c21hcnRTcGVlZDogMjUwLFxuXHRcdGZsdWlkU3BlZWQ6IGZhbHNlLFxuXHRcdGRyYWdFbmRTcGVlZDogZmFsc2UsXG5cblx0XHRyZXNwb25zaXZlOiB7fSxcblx0XHRyZXNwb25zaXZlUmVmcmVzaFJhdGU6IDIwMCxcblx0XHRyZXNwb25zaXZlQmFzZUVsZW1lbnQ6IHdpbmRvdyxcblxuXHRcdGZhbGxiYWNrRWFzaW5nOiAnc3dpbmcnLFxuXHRcdHNsaWRlVHJhbnNpdGlvbjogJycsXG5cblx0XHRpbmZvOiBmYWxzZSxcblxuXHRcdG5lc3RlZEl0ZW1TZWxlY3RvcjogZmFsc2UsXG5cdFx0aXRlbUVsZW1lbnQ6ICdkaXYnLFxuXHRcdHN0YWdlRWxlbWVudDogJ2RpdicsXG5cblx0XHRyZWZyZXNoQ2xhc3M6ICdvd2wtcmVmcmVzaCcsXG5cdFx0bG9hZGVkQ2xhc3M6ICdvd2wtbG9hZGVkJyxcblx0XHRsb2FkaW5nQ2xhc3M6ICdvd2wtbG9hZGluZycsXG5cdFx0cnRsQ2xhc3M6ICdvd2wtcnRsJyxcblx0XHRyZXNwb25zaXZlQ2xhc3M6ICdvd2wtcmVzcG9uc2l2ZScsXG5cdFx0ZHJhZ0NsYXNzOiAnb3dsLWRyYWcnLFxuXHRcdGl0ZW1DbGFzczogJ293bC1pdGVtJyxcblx0XHRzdGFnZUNsYXNzOiAnb3dsLXN0YWdlJyxcblx0XHRzdGFnZU91dGVyQ2xhc3M6ICdvd2wtc3RhZ2Utb3V0ZXInLFxuXHRcdGdyYWJDbGFzczogJ293bC1ncmFiJ1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBFbnVtZXJhdGlvbiBmb3Igd2lkdGguXG5cdCAqIEBwdWJsaWNcblx0ICogQHJlYWRvbmx5XG5cdCAqIEBlbnVtIHtTdHJpbmd9XG5cdCAqL1xuXHRPd2wuV2lkdGggPSB7XG5cdFx0RGVmYXVsdDogJ2RlZmF1bHQnLFxuXHRcdElubmVyOiAnaW5uZXInLFxuXHRcdE91dGVyOiAnb3V0ZXInXG5cdH07XG5cblx0LyoqXG5cdCAqIEVudW1lcmF0aW9uIGZvciB0eXBlcy5cblx0ICogQHB1YmxpY1xuXHQgKiBAcmVhZG9ubHlcblx0ICogQGVudW0ge1N0cmluZ31cblx0ICovXG5cdE93bC5UeXBlID0ge1xuXHRcdEV2ZW50OiAnZXZlbnQnLFxuXHRcdFN0YXRlOiAnc3RhdGUnXG5cdH07XG5cblx0LyoqXG5cdCAqIENvbnRhaW5zIGFsbCByZWdpc3RlcmVkIHBsdWdpbnMuXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdE93bC5QbHVnaW5zID0ge307XG5cblx0LyoqXG5cdCAqIExpc3Qgb2Ygd29ya2VycyBpbnZvbHZlZCBpbiB0aGUgdXBkYXRlIHByb2Nlc3MuXG5cdCAqL1xuXHRPd2wuV29ya2VycyA9IFsge1xuXHRcdGZpbHRlcjogWyAnd2lkdGgnLCAnc2V0dGluZ3MnIF0sXG5cdFx0cnVuOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuX3dpZHRoID0gdGhpcy4kZWxlbWVudC53aWR0aCgpO1xuXHRcdH1cblx0fSwge1xuXHRcdGZpbHRlcjogWyAnd2lkdGgnLCAnaXRlbXMnLCAnc2V0dGluZ3MnIF0sXG5cdFx0cnVuOiBmdW5jdGlvbihjYWNoZSkge1xuXHRcdFx0Y2FjaGUuY3VycmVudCA9IHRoaXMuX2l0ZW1zICYmIHRoaXMuX2l0ZW1zW3RoaXMucmVsYXRpdmUodGhpcy5fY3VycmVudCldO1xuXHRcdH1cblx0fSwge1xuXHRcdGZpbHRlcjogWyAnaXRlbXMnLCAnc2V0dGluZ3MnIF0sXG5cdFx0cnVuOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuJHN0YWdlLmNoaWxkcmVuKCcuY2xvbmVkJykucmVtb3ZlKCk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0ZmlsdGVyOiBbICd3aWR0aCcsICdpdGVtcycsICdzZXR0aW5ncycgXSxcblx0XHRydW46IGZ1bmN0aW9uKGNhY2hlKSB7XG5cdFx0XHR2YXIgbWFyZ2luID0gdGhpcy5zZXR0aW5ncy5tYXJnaW4gfHwgJycsXG5cdFx0XHRcdGdyaWQgPSAhdGhpcy5zZXR0aW5ncy5hdXRvV2lkdGgsXG5cdFx0XHRcdHJ0bCA9IHRoaXMuc2V0dGluZ3MucnRsLFxuXHRcdFx0XHRjc3MgPSB7XG5cdFx0XHRcdFx0J3dpZHRoJzogJ2F1dG8nLFxuXHRcdFx0XHRcdCdtYXJnaW4tbGVmdCc6IHJ0bCA/IG1hcmdpbiA6ICcnLFxuXHRcdFx0XHRcdCdtYXJnaW4tcmlnaHQnOiBydGwgPyAnJyA6IG1hcmdpblxuXHRcdFx0XHR9O1xuXG5cdFx0XHQhZ3JpZCAmJiB0aGlzLiRzdGFnZS5jaGlsZHJlbigpLmNzcyhjc3MpO1xuXG5cdFx0XHRjYWNoZS5jc3MgPSBjc3M7XG5cdFx0fVxuXHR9LCB7XG5cdFx0ZmlsdGVyOiBbICd3aWR0aCcsICdpdGVtcycsICdzZXR0aW5ncycgXSxcblx0XHRydW46IGZ1bmN0aW9uKGNhY2hlKSB7XG5cdFx0XHR2YXIgd2lkdGggPSAodGhpcy53aWR0aCgpIC8gdGhpcy5zZXR0aW5ncy5pdGVtcykudG9GaXhlZCgzKSAtIHRoaXMuc2V0dGluZ3MubWFyZ2luLFxuXHRcdFx0XHRtZXJnZSA9IG51bGwsXG5cdFx0XHRcdGl0ZXJhdG9yID0gdGhpcy5faXRlbXMubGVuZ3RoLFxuXHRcdFx0XHRncmlkID0gIXRoaXMuc2V0dGluZ3MuYXV0b1dpZHRoLFxuXHRcdFx0XHR3aWR0aHMgPSBbXTtcblxuXHRcdFx0Y2FjaGUuaXRlbXMgPSB7XG5cdFx0XHRcdG1lcmdlOiBmYWxzZSxcblx0XHRcdFx0d2lkdGg6IHdpZHRoXG5cdFx0XHR9O1xuXG5cdFx0XHR3aGlsZSAoaXRlcmF0b3ItLSkge1xuXHRcdFx0XHRtZXJnZSA9IHRoaXMuX21lcmdlcnNbaXRlcmF0b3JdO1xuXHRcdFx0XHRtZXJnZSA9IHRoaXMuc2V0dGluZ3MubWVyZ2VGaXQgJiYgTWF0aC5taW4obWVyZ2UsIHRoaXMuc2V0dGluZ3MuaXRlbXMpIHx8IG1lcmdlO1xuXG5cdFx0XHRcdGNhY2hlLml0ZW1zLm1lcmdlID0gbWVyZ2UgPiAxIHx8IGNhY2hlLml0ZW1zLm1lcmdlO1xuXG5cdFx0XHRcdHdpZHRoc1tpdGVyYXRvcl0gPSAhZ3JpZCA/IHRoaXMuX2l0ZW1zW2l0ZXJhdG9yXS53aWR0aCgpIDogd2lkdGggKiBtZXJnZTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fd2lkdGhzID0gd2lkdGhzO1xuXHRcdH1cblx0fSwge1xuXHRcdGZpbHRlcjogWyAnaXRlbXMnLCAnc2V0dGluZ3MnIF0sXG5cdFx0cnVuOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbG9uZXMgPSBbXSxcblx0XHRcdFx0aXRlbXMgPSB0aGlzLl9pdGVtcyxcblx0XHRcdFx0c2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzLFxuXHRcdFx0XHQvLyBUT0RPOiBTaG91bGQgYmUgY29tcHV0ZWQgZnJvbSBudW1iZXIgb2YgbWluIHdpZHRoIGl0ZW1zIGluIHN0YWdlXG5cdFx0XHRcdHZpZXcgPSBNYXRoLm1heChzZXR0aW5ncy5pdGVtcyAqIDIsIDQpLFxuXHRcdFx0XHRzaXplID0gTWF0aC5jZWlsKGl0ZW1zLmxlbmd0aCAvIDIpICogMixcblx0XHRcdFx0cmVwZWF0ID0gc2V0dGluZ3MubG9vcCAmJiBpdGVtcy5sZW5ndGggPyBzZXR0aW5ncy5yZXdpbmQgPyB2aWV3IDogTWF0aC5tYXgodmlldywgc2l6ZSkgOiAwLFxuXHRcdFx0XHRhcHBlbmQgPSAnJyxcblx0XHRcdFx0cHJlcGVuZCA9ICcnO1xuXG5cdFx0XHRyZXBlYXQgLz0gMjtcblxuXHRcdFx0d2hpbGUgKHJlcGVhdCA+IDApIHtcblx0XHRcdFx0Ly8gU3dpdGNoIHRvIG9ubHkgdXNpbmcgYXBwZW5kZWQgY2xvbmVzXG5cdFx0XHRcdGNsb25lcy5wdXNoKHRoaXMubm9ybWFsaXplKGNsb25lcy5sZW5ndGggLyAyLCB0cnVlKSk7XG5cdFx0XHRcdGFwcGVuZCA9IGFwcGVuZCArIGl0ZW1zW2Nsb25lc1tjbG9uZXMubGVuZ3RoIC0gMV1dWzBdLm91dGVySFRNTDtcblx0XHRcdFx0Y2xvbmVzLnB1c2godGhpcy5ub3JtYWxpemUoaXRlbXMubGVuZ3RoIC0gMSAtIChjbG9uZXMubGVuZ3RoIC0gMSkgLyAyLCB0cnVlKSk7XG5cdFx0XHRcdHByZXBlbmQgPSBpdGVtc1tjbG9uZXNbY2xvbmVzLmxlbmd0aCAtIDFdXVswXS5vdXRlckhUTUwgKyBwcmVwZW5kO1xuXHRcdFx0XHRyZXBlYXQgLT0gMTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fY2xvbmVzID0gY2xvbmVzO1xuXG5cdFx0XHQkKGFwcGVuZCkuYWRkQ2xhc3MoJ2Nsb25lZCcpLmFwcGVuZFRvKHRoaXMuJHN0YWdlKTtcblx0XHRcdCQocHJlcGVuZCkuYWRkQ2xhc3MoJ2Nsb25lZCcpLnByZXBlbmRUbyh0aGlzLiRzdGFnZSk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0ZmlsdGVyOiBbICd3aWR0aCcsICdpdGVtcycsICdzZXR0aW5ncycgXSxcblx0XHRydW46IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHJ0bCA9IHRoaXMuc2V0dGluZ3MucnRsID8gMSA6IC0xLFxuXHRcdFx0XHRzaXplID0gdGhpcy5fY2xvbmVzLmxlbmd0aCArIHRoaXMuX2l0ZW1zLmxlbmd0aCxcblx0XHRcdFx0aXRlcmF0b3IgPSAtMSxcblx0XHRcdFx0cHJldmlvdXMgPSAwLFxuXHRcdFx0XHRjdXJyZW50ID0gMCxcblx0XHRcdFx0Y29vcmRpbmF0ZXMgPSBbXTtcblxuXHRcdFx0d2hpbGUgKCsraXRlcmF0b3IgPCBzaXplKSB7XG5cdFx0XHRcdHByZXZpb3VzID0gY29vcmRpbmF0ZXNbaXRlcmF0b3IgLSAxXSB8fCAwO1xuXHRcdFx0XHRjdXJyZW50ID0gdGhpcy5fd2lkdGhzW3RoaXMucmVsYXRpdmUoaXRlcmF0b3IpXSArIHRoaXMuc2V0dGluZ3MubWFyZ2luO1xuXHRcdFx0XHRjb29yZGluYXRlcy5wdXNoKHByZXZpb3VzICsgY3VycmVudCAqIHJ0bCk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX2Nvb3JkaW5hdGVzID0gY29vcmRpbmF0ZXM7XG5cdFx0fVxuXHR9LCB7XG5cdFx0ZmlsdGVyOiBbICd3aWR0aCcsICdpdGVtcycsICdzZXR0aW5ncycgXSxcblx0XHRydW46IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHBhZGRpbmcgPSB0aGlzLnNldHRpbmdzLnN0YWdlUGFkZGluZyxcblx0XHRcdFx0Y29vcmRpbmF0ZXMgPSB0aGlzLl9jb29yZGluYXRlcyxcblx0XHRcdFx0Y3NzID0ge1xuXHRcdFx0XHRcdCd3aWR0aCc6IE1hdGguY2VpbChNYXRoLmFicyhjb29yZGluYXRlc1tjb29yZGluYXRlcy5sZW5ndGggLSAxXSkpICsgcGFkZGluZyAqIDIsXG5cdFx0XHRcdFx0J3BhZGRpbmctbGVmdCc6IHBhZGRpbmcgfHwgJycsXG5cdFx0XHRcdFx0J3BhZGRpbmctcmlnaHQnOiBwYWRkaW5nIHx8ICcnXG5cdFx0XHRcdH07XG5cblx0XHRcdHRoaXMuJHN0YWdlLmNzcyhjc3MpO1xuXHRcdH1cblx0fSwge1xuXHRcdGZpbHRlcjogWyAnd2lkdGgnLCAnaXRlbXMnLCAnc2V0dGluZ3MnIF0sXG5cdFx0cnVuOiBmdW5jdGlvbihjYWNoZSkge1xuXHRcdFx0dmFyIGl0ZXJhdG9yID0gdGhpcy5fY29vcmRpbmF0ZXMubGVuZ3RoLFxuXHRcdFx0XHRncmlkID0gIXRoaXMuc2V0dGluZ3MuYXV0b1dpZHRoLFxuXHRcdFx0XHRpdGVtcyA9IHRoaXMuJHN0YWdlLmNoaWxkcmVuKCk7XG5cblx0XHRcdGlmIChncmlkICYmIGNhY2hlLml0ZW1zLm1lcmdlKSB7XG5cdFx0XHRcdHdoaWxlIChpdGVyYXRvci0tKSB7XG5cdFx0XHRcdFx0Y2FjaGUuY3NzLndpZHRoID0gdGhpcy5fd2lkdGhzW3RoaXMucmVsYXRpdmUoaXRlcmF0b3IpXTtcblx0XHRcdFx0XHRpdGVtcy5lcShpdGVyYXRvcikuY3NzKGNhY2hlLmNzcyk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoZ3JpZCkge1xuXHRcdFx0XHRjYWNoZS5jc3Mud2lkdGggPSBjYWNoZS5pdGVtcy53aWR0aDtcblx0XHRcdFx0aXRlbXMuY3NzKGNhY2hlLmNzcyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LCB7XG5cdFx0ZmlsdGVyOiBbICdpdGVtcycgXSxcblx0XHRydW46IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5fY29vcmRpbmF0ZXMubGVuZ3RoIDwgMSAmJiB0aGlzLiRzdGFnZS5yZW1vdmVBdHRyKCdzdHlsZScpO1xuXHRcdH1cblx0fSwge1xuXHRcdGZpbHRlcjogWyAnd2lkdGgnLCAnaXRlbXMnLCAnc2V0dGluZ3MnIF0sXG5cdFx0cnVuOiBmdW5jdGlvbihjYWNoZSkge1xuXHRcdFx0Y2FjaGUuY3VycmVudCA9IGNhY2hlLmN1cnJlbnQgPyB0aGlzLiRzdGFnZS5jaGlsZHJlbigpLmluZGV4KGNhY2hlLmN1cnJlbnQpIDogMDtcblx0XHRcdGNhY2hlLmN1cnJlbnQgPSBNYXRoLm1heCh0aGlzLm1pbmltdW0oKSwgTWF0aC5taW4odGhpcy5tYXhpbXVtKCksIGNhY2hlLmN1cnJlbnQpKTtcblx0XHRcdHRoaXMucmVzZXQoY2FjaGUuY3VycmVudCk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0ZmlsdGVyOiBbICdwb3NpdGlvbicgXSxcblx0XHRydW46IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5hbmltYXRlKHRoaXMuY29vcmRpbmF0ZXModGhpcy5fY3VycmVudCkpO1xuXHRcdH1cblx0fSwge1xuXHRcdGZpbHRlcjogWyAnd2lkdGgnLCAncG9zaXRpb24nLCAnaXRlbXMnLCAnc2V0dGluZ3MnIF0sXG5cdFx0cnVuOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBydGwgPSB0aGlzLnNldHRpbmdzLnJ0bCA/IDEgOiAtMSxcblx0XHRcdFx0cGFkZGluZyA9IHRoaXMuc2V0dGluZ3Muc3RhZ2VQYWRkaW5nICogMixcblx0XHRcdFx0YmVnaW4gPSB0aGlzLmNvb3JkaW5hdGVzKHRoaXMuY3VycmVudCgpKSArIHBhZGRpbmcsXG5cdFx0XHRcdGVuZCA9IGJlZ2luICsgdGhpcy53aWR0aCgpICogcnRsLFxuXHRcdFx0XHRpbm5lciwgb3V0ZXIsIG1hdGNoZXMgPSBbXSwgaSwgbjtcblxuXHRcdFx0Zm9yIChpID0gMCwgbiA9IHRoaXMuX2Nvb3JkaW5hdGVzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuXHRcdFx0XHRpbm5lciA9IHRoaXMuX2Nvb3JkaW5hdGVzW2kgLSAxXSB8fCAwO1xuXHRcdFx0XHRvdXRlciA9IE1hdGguYWJzKHRoaXMuX2Nvb3JkaW5hdGVzW2ldKSArIHBhZGRpbmcgKiBydGw7XG5cblx0XHRcdFx0aWYgKCh0aGlzLm9wKGlubmVyLCAnPD0nLCBiZWdpbikgJiYgKHRoaXMub3AoaW5uZXIsICc+JywgZW5kKSkpXG5cdFx0XHRcdFx0fHwgKHRoaXMub3Aob3V0ZXIsICc8JywgYmVnaW4pICYmIHRoaXMub3Aob3V0ZXIsICc+JywgZW5kKSkpIHtcblx0XHRcdFx0XHRtYXRjaGVzLnB1c2goaSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0dGhpcy4kc3RhZ2UuY2hpbGRyZW4oJy5hY3RpdmUnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG5cdFx0XHR0aGlzLiRzdGFnZS5jaGlsZHJlbignOmVxKCcgKyBtYXRjaGVzLmpvaW4oJyksIDplcSgnKSArICcpJykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuXG5cdFx0XHR0aGlzLiRzdGFnZS5jaGlsZHJlbignLmNlbnRlcicpLnJlbW92ZUNsYXNzKCdjZW50ZXInKTtcblx0XHRcdGlmICh0aGlzLnNldHRpbmdzLmNlbnRlcikge1xuXHRcdFx0XHR0aGlzLiRzdGFnZS5jaGlsZHJlbigpLmVxKHRoaXMuY3VycmVudCgpKS5hZGRDbGFzcygnY2VudGVyJyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IF07XG5cblx0LyoqXG5cdCAqIENyZWF0ZSB0aGUgc3RhZ2UgRE9NIGVsZW1lbnRcblx0ICovXG5cdE93bC5wcm90b3R5cGUuaW5pdGlhbGl6ZVN0YWdlID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy4kc3RhZ2UgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy4nICsgdGhpcy5zZXR0aW5ncy5zdGFnZUNsYXNzKTtcblxuXHRcdC8vIGlmIHRoZSBzdGFnZSBpcyBhbHJlYWR5IGluIHRoZSBET00sIGdyYWIgaXQgYW5kIHNraXAgc3RhZ2UgaW5pdGlhbGl6YXRpb25cblx0XHRpZiAodGhpcy4kc3RhZ2UubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMubG9hZGluZ0NsYXNzKTtcblxuXHRcdC8vIGNyZWF0ZSBzdGFnZVxuXHRcdHRoaXMuJHN0YWdlID0gJCgnPCcgKyB0aGlzLnNldHRpbmdzLnN0YWdlRWxlbWVudCArICc+Jywge1xuXHRcdFx0XCJjbGFzc1wiOiB0aGlzLnNldHRpbmdzLnN0YWdlQ2xhc3Ncblx0XHR9KS53cmFwKCAkKCAnPGRpdi8+Jywge1xuXHRcdFx0XCJjbGFzc1wiOiB0aGlzLnNldHRpbmdzLnN0YWdlT3V0ZXJDbGFzc1xuXHRcdH0pKTtcblxuXHRcdC8vIGFwcGVuZCBzdGFnZVxuXHRcdHRoaXMuJGVsZW1lbnQuYXBwZW5kKHRoaXMuJHN0YWdlLnBhcmVudCgpKTtcblx0fTtcblxuXHQvKipcblx0ICogQ3JlYXRlIGl0ZW0gRE9NIGVsZW1lbnRzXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLmluaXRpYWxpemVJdGVtcyA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciAkaXRlbXMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5vd2wtaXRlbScpO1xuXG5cdFx0Ly8gaWYgdGhlIGl0ZW1zIGFyZSBhbHJlYWR5IGluIHRoZSBET00sIGdyYWIgdGhlbSBhbmQgc2tpcCBpdGVtIGluaXRpYWxpemF0aW9uXG5cdFx0aWYgKCRpdGVtcy5sZW5ndGgpIHtcblx0XHRcdHRoaXMuX2l0ZW1zID0gJGl0ZW1zLmdldCgpLm1hcChmdW5jdGlvbihpdGVtKSB7XG5cdFx0XHRcdHJldHVybiAkKGl0ZW0pO1xuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMuX21lcmdlcnMgPSB0aGlzLl9pdGVtcy5tYXAoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMucmVmcmVzaCgpO1xuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gYXBwZW5kIGNvbnRlbnRcblx0XHR0aGlzLnJlcGxhY2UodGhpcy4kZWxlbWVudC5jaGlsZHJlbigpLm5vdCh0aGlzLiRzdGFnZS5wYXJlbnQoKSkpO1xuXG5cdFx0Ly8gY2hlY2sgdmlzaWJpbGl0eVxuXHRcdGlmICh0aGlzLmlzVmlzaWJsZSgpKSB7XG5cdFx0XHQvLyB1cGRhdGUgdmlld1xuXHRcdFx0dGhpcy5yZWZyZXNoKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGludmFsaWRhdGUgd2lkdGhcblx0XHRcdHRoaXMuaW52YWxpZGF0ZSgnd2lkdGgnKTtcblx0XHR9XG5cblx0XHR0aGlzLiRlbGVtZW50XG5cdFx0XHQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmxvYWRpbmdDbGFzcylcblx0XHRcdC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMubG9hZGVkQ2xhc3MpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBJbml0aWFsaXplcyB0aGUgY2Fyb3VzZWwuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdE93bC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuZW50ZXIoJ2luaXRpYWxpemluZycpO1xuXHRcdHRoaXMudHJpZ2dlcignaW5pdGlhbGl6ZScpO1xuXG5cdFx0dGhpcy4kZWxlbWVudC50b2dnbGVDbGFzcyh0aGlzLnNldHRpbmdzLnJ0bENsYXNzLCB0aGlzLnNldHRpbmdzLnJ0bCk7XG5cblx0XHRpZiAodGhpcy5zZXR0aW5ncy5hdXRvV2lkdGggJiYgIXRoaXMuaXMoJ3ByZS1sb2FkaW5nJykpIHtcblx0XHRcdHZhciBpbWdzLCBuZXN0ZWRTZWxlY3Rvciwgd2lkdGg7XG5cdFx0XHRpbWdzID0gdGhpcy4kZWxlbWVudC5maW5kKCdpbWcnKTtcblx0XHRcdG5lc3RlZFNlbGVjdG9yID0gdGhpcy5zZXR0aW5ncy5uZXN0ZWRJdGVtU2VsZWN0b3IgPyAnLicgKyB0aGlzLnNldHRpbmdzLm5lc3RlZEl0ZW1TZWxlY3RvciA6IHVuZGVmaW5lZDtcblx0XHRcdHdpZHRoID0gdGhpcy4kZWxlbWVudC5jaGlsZHJlbihuZXN0ZWRTZWxlY3Rvcikud2lkdGgoKTtcblxuXHRcdFx0aWYgKGltZ3MubGVuZ3RoICYmIHdpZHRoIDw9IDApIHtcblx0XHRcdFx0dGhpcy5wcmVsb2FkQXV0b1dpZHRoSW1hZ2VzKGltZ3MpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuaW5pdGlhbGl6ZVN0YWdlKCk7XG5cdFx0dGhpcy5pbml0aWFsaXplSXRlbXMoKTtcblxuXHRcdC8vIHJlZ2lzdGVyIGV2ZW50IGhhbmRsZXJzXG5cdFx0dGhpcy5yZWdpc3RlckV2ZW50SGFuZGxlcnMoKTtcblxuXHRcdHRoaXMubGVhdmUoJ2luaXRpYWxpemluZycpO1xuXHRcdHRoaXMudHJpZ2dlcignaW5pdGlhbGl6ZWQnKTtcblx0fTtcblxuXHQvKipcblx0ICogQHJldHVybnMge0Jvb2xlYW59IHZpc2liaWxpdHkgb2YgJGVsZW1lbnRcblx0ICogICAgICAgICAgICAgICAgICAgIGlmIHlvdSBrbm93IHRoZSBjYXJvdXNlbCB3aWxsIGFsd2F5cyBiZSB2aXNpYmxlIHlvdSBjYW4gc2V0IGBjaGVja1Zpc2liaWxpdHlgIHRvIGBmYWxzZWAgdG9cblx0ICogICAgICAgICAgICAgICAgICAgIHByZXZlbnQgdGhlIGV4cGVuc2l2ZSBicm93c2VyIGxheW91dCBmb3JjZWQgcmVmbG93IHRoZSAkZWxlbWVudC5pcygnOnZpc2libGUnKSBkb2VzXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLmlzVmlzaWJsZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnNldHRpbmdzLmNoZWNrVmlzaWJpbGl0eVxuXHRcdFx0PyB0aGlzLiRlbGVtZW50LmlzKCc6dmlzaWJsZScpXG5cdFx0XHQ6IHRydWU7XG5cdH07XG5cblx0LyoqXG5cdCAqIFNldHVwcyB0aGUgY3VycmVudCBzZXR0aW5ncy5cblx0ICogQHRvZG8gUmVtb3ZlIHJlc3BvbnNpdmUgY2xhc3Nlcy4gV2h5IHNob3VsZCBhZGFwdGl2ZSBkZXNpZ25zIGJlIGJyb3VnaHQgaW50byBJRTg/XG5cdCAqIEB0b2RvIFN1cHBvcnQgZm9yIG1lZGlhIHF1ZXJpZXMgYnkgdXNpbmcgYG1hdGNoTWVkaWFgIHdvdWxkIGJlIG5pY2UuXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdE93bC5wcm90b3R5cGUuc2V0dXAgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgdmlld3BvcnQgPSB0aGlzLnZpZXdwb3J0KCksXG5cdFx0XHRvdmVyd3JpdGVzID0gdGhpcy5vcHRpb25zLnJlc3BvbnNpdmUsXG5cdFx0XHRtYXRjaCA9IC0xLFxuXHRcdFx0c2V0dGluZ3MgPSBudWxsO1xuXG5cdFx0aWYgKCFvdmVyd3JpdGVzKSB7XG5cdFx0XHRzZXR0aW5ncyA9ICQuZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQkLmVhY2gob3ZlcndyaXRlcywgZnVuY3Rpb24oYnJlYWtwb2ludCkge1xuXHRcdFx0XHRpZiAoYnJlYWtwb2ludCA8PSB2aWV3cG9ydCAmJiBicmVha3BvaW50ID4gbWF0Y2gpIHtcblx0XHRcdFx0XHRtYXRjaCA9IE51bWJlcihicmVha3BvaW50KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHNldHRpbmdzID0gJC5leHRlbmQoe30sIHRoaXMub3B0aW9ucywgb3ZlcndyaXRlc1ttYXRjaF0pO1xuXHRcdFx0aWYgKHR5cGVvZiBzZXR0aW5ncy5zdGFnZVBhZGRpbmcgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0c2V0dGluZ3Muc3RhZ2VQYWRkaW5nID0gc2V0dGluZ3Muc3RhZ2VQYWRkaW5nKCk7XG5cdFx0XHR9XG5cdFx0XHRkZWxldGUgc2V0dGluZ3MucmVzcG9uc2l2ZTtcblxuXHRcdFx0Ly8gcmVzcG9uc2l2ZSBjbGFzc1xuXHRcdFx0aWYgKHNldHRpbmdzLnJlc3BvbnNpdmVDbGFzcykge1xuXHRcdFx0XHR0aGlzLiRlbGVtZW50LmF0dHIoJ2NsYXNzJyxcblx0XHRcdFx0XHR0aGlzLiRlbGVtZW50LmF0dHIoJ2NsYXNzJykucmVwbGFjZShuZXcgUmVnRXhwKCcoJyArIHRoaXMub3B0aW9ucy5yZXNwb25zaXZlQ2xhc3MgKyAnLSlcXFxcUytcXFxccycsICdnJyksICckMScgKyBtYXRjaClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLnRyaWdnZXIoJ2NoYW5nZScsIHsgcHJvcGVydHk6IHsgbmFtZTogJ3NldHRpbmdzJywgdmFsdWU6IHNldHRpbmdzIH0gfSk7XG5cdFx0dGhpcy5fYnJlYWtwb2ludCA9IG1hdGNoO1xuXHRcdHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcblx0XHR0aGlzLmludmFsaWRhdGUoJ3NldHRpbmdzJyk7XG5cdFx0dGhpcy50cmlnZ2VyKCdjaGFuZ2VkJywgeyBwcm9wZXJ0eTogeyBuYW1lOiAnc2V0dGluZ3MnLCB2YWx1ZTogdGhpcy5zZXR0aW5ncyB9IH0pO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIG9wdGlvbiBsb2dpYyBpZiBuZWNlc3NlcnkuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdE93bC5wcm90b3R5cGUub3B0aW9uc0xvZ2ljID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKHRoaXMuc2V0dGluZ3MuYXV0b1dpZHRoKSB7XG5cdFx0XHR0aGlzLnNldHRpbmdzLnN0YWdlUGFkZGluZyA9IGZhbHNlO1xuXHRcdFx0dGhpcy5zZXR0aW5ncy5tZXJnZSA9IGZhbHNlO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogUHJlcGFyZXMgYW4gaXRlbSBiZWZvcmUgYWRkLlxuXHQgKiBAdG9kbyBSZW5hbWUgZXZlbnQgcGFyYW1ldGVyIGBjb250ZW50YCB0byBgaXRlbWAuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHJldHVybnMge2pRdWVyeXxIVE1MRWxlbWVudH0gLSBUaGUgaXRlbSBjb250YWluZXIuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLnByZXBhcmUgPSBmdW5jdGlvbihpdGVtKSB7XG5cdFx0dmFyIGV2ZW50ID0gdGhpcy50cmlnZ2VyKCdwcmVwYXJlJywgeyBjb250ZW50OiBpdGVtIH0pO1xuXG5cdFx0aWYgKCFldmVudC5kYXRhKSB7XG5cdFx0XHRldmVudC5kYXRhID0gJCgnPCcgKyB0aGlzLnNldHRpbmdzLml0ZW1FbGVtZW50ICsgJy8+Jylcblx0XHRcdFx0LmFkZENsYXNzKHRoaXMub3B0aW9ucy5pdGVtQ2xhc3MpLmFwcGVuZChpdGVtKVxuXHRcdH1cblxuXHRcdHRoaXMudHJpZ2dlcigncHJlcGFyZWQnLCB7IGNvbnRlbnQ6IGV2ZW50LmRhdGEgfSk7XG5cblx0XHRyZXR1cm4gZXZlbnQuZGF0YTtcblx0fTtcblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgdmlldy5cblx0ICogQHB1YmxpY1xuXHQgKi9cblx0T3dsLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRuID0gdGhpcy5fcGlwZS5sZW5ndGgsXG5cdFx0XHRmaWx0ZXIgPSAkLnByb3h5KGZ1bmN0aW9uKHApIHsgcmV0dXJuIHRoaXNbcF0gfSwgdGhpcy5faW52YWxpZGF0ZWQpLFxuXHRcdFx0Y2FjaGUgPSB7fTtcblxuXHRcdHdoaWxlIChpIDwgbikge1xuXHRcdFx0aWYgKHRoaXMuX2ludmFsaWRhdGVkLmFsbCB8fCAkLmdyZXAodGhpcy5fcGlwZVtpXS5maWx0ZXIsIGZpbHRlcikubGVuZ3RoID4gMCkge1xuXHRcdFx0XHR0aGlzLl9waXBlW2ldLnJ1bihjYWNoZSk7XG5cdFx0XHR9XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0dGhpcy5faW52YWxpZGF0ZWQgPSB7fTtcblxuXHRcdCF0aGlzLmlzKCd2YWxpZCcpICYmIHRoaXMuZW50ZXIoJ3ZhbGlkJyk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIHdpZHRoIG9mIHRoZSB2aWV3LlxuXHQgKiBAcHVibGljXG5cdCAqIEBwYXJhbSB7T3dsLldpZHRofSBbZGltZW5zaW9uPU93bC5XaWR0aC5EZWZhdWx0XSAtIFRoZSBkaW1lbnNpb24gdG8gcmV0dXJuLlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSAtIFRoZSB3aWR0aCBvZiB0aGUgdmlldyBpbiBwaXhlbC5cblx0ICovXG5cdE93bC5wcm90b3R5cGUud2lkdGggPSBmdW5jdGlvbihkaW1lbnNpb24pIHtcblx0XHRkaW1lbnNpb24gPSBkaW1lbnNpb24gfHwgT3dsLldpZHRoLkRlZmF1bHQ7XG5cdFx0c3dpdGNoIChkaW1lbnNpb24pIHtcblx0XHRcdGNhc2UgT3dsLldpZHRoLklubmVyOlxuXHRcdFx0Y2FzZSBPd2wuV2lkdGguT3V0ZXI6XG5cdFx0XHRcdHJldHVybiB0aGlzLl93aWR0aDtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiB0aGlzLl93aWR0aCAtIHRoaXMuc2V0dGluZ3Muc3RhZ2VQYWRkaW5nICogMiArIHRoaXMuc2V0dGluZ3MubWFyZ2luO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogUmVmcmVzaGVzIHRoZSBjYXJvdXNlbCBwcmltYXJpbHkgZm9yIGFkYXB0aXZlIHB1cnBvc2VzLlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmVudGVyKCdyZWZyZXNoaW5nJyk7XG5cdFx0dGhpcy50cmlnZ2VyKCdyZWZyZXNoJyk7XG5cblx0XHR0aGlzLnNldHVwKCk7XG5cblx0XHR0aGlzLm9wdGlvbnNMb2dpYygpO1xuXG5cdFx0dGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMucmVmcmVzaENsYXNzKTtcblxuXHRcdHRoaXMudXBkYXRlKCk7XG5cblx0XHR0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5yZWZyZXNoQ2xhc3MpO1xuXG5cdFx0dGhpcy5sZWF2ZSgncmVmcmVzaGluZycpO1xuXHRcdHRoaXMudHJpZ2dlcigncmVmcmVzaGVkJyk7XG5cdH07XG5cblx0LyoqXG5cdCAqIENoZWNrcyB3aW5kb3cgYHJlc2l6ZWAgZXZlbnQuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdE93bC5wcm90b3R5cGUub25UaHJvdHRsZWRSZXNpemUgPSBmdW5jdGlvbigpIHtcblx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMucmVzaXplVGltZXIpO1xuXHRcdHRoaXMucmVzaXplVGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCh0aGlzLl9oYW5kbGVycy5vblJlc2l6ZSwgdGhpcy5zZXR0aW5ncy5yZXNwb25zaXZlUmVmcmVzaFJhdGUpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBDaGVja3Mgd2luZG93IGByZXNpemVgIGV2ZW50LlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLm9uUmVzaXplID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCF0aGlzLl9pdGVtcy5sZW5ndGgpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5fd2lkdGggPT09IHRoaXMuJGVsZW1lbnQud2lkdGgoKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGlmICghdGhpcy5pc1Zpc2libGUoKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHRoaXMuZW50ZXIoJ3Jlc2l6aW5nJyk7XG5cblx0XHRpZiAodGhpcy50cmlnZ2VyKCdyZXNpemUnKS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuXHRcdFx0dGhpcy5sZWF2ZSgncmVzaXppbmcnKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHR0aGlzLmludmFsaWRhdGUoJ3dpZHRoJyk7XG5cblx0XHR0aGlzLnJlZnJlc2goKTtcblxuXHRcdHRoaXMubGVhdmUoJ3Jlc2l6aW5nJyk7XG5cdFx0dGhpcy50cmlnZ2VyKCdyZXNpemVkJyk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFJlZ2lzdGVycyBldmVudCBoYW5kbGVycy5cblx0ICogQHRvZG8gQ2hlY2sgYG1zUG9pbnRlckVuYWJsZWRgXG5cdCAqIEB0b2RvICMyNjFcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5yZWdpc3RlckV2ZW50SGFuZGxlcnMgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoJC5zdXBwb3J0LnRyYW5zaXRpb24pIHtcblx0XHRcdHRoaXMuJHN0YWdlLm9uKCQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCArICcub3dsLmNvcmUnLCAkLnByb3h5KHRoaXMub25UcmFuc2l0aW9uRW5kLCB0aGlzKSk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuc2V0dGluZ3MucmVzcG9uc2l2ZSAhPT0gZmFsc2UpIHtcblx0XHRcdHRoaXMub24od2luZG93LCAncmVzaXplJywgdGhpcy5faGFuZGxlcnMub25UaHJvdHRsZWRSZXNpemUpO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLnNldHRpbmdzLm1vdXNlRHJhZykge1xuXHRcdFx0dGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuZHJhZ0NsYXNzKTtcblx0XHRcdHRoaXMuJHN0YWdlLm9uKCdtb3VzZWRvd24ub3dsLmNvcmUnLCAkLnByb3h5KHRoaXMub25EcmFnU3RhcnQsIHRoaXMpKTtcblx0XHRcdHRoaXMuJHN0YWdlLm9uKCdkcmFnc3RhcnQub3dsLmNvcmUgc2VsZWN0c3RhcnQub3dsLmNvcmUnLCBmdW5jdGlvbigpIHsgcmV0dXJuIGZhbHNlIH0pO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLnNldHRpbmdzLnRvdWNoRHJhZyl7XG5cdFx0XHR0aGlzLiRzdGFnZS5vbigndG91Y2hzdGFydC5vd2wuY29yZScsICQucHJveHkodGhpcy5vbkRyYWdTdGFydCwgdGhpcykpO1xuXHRcdFx0dGhpcy4kc3RhZ2Uub24oJ3RvdWNoY2FuY2VsLm93bC5jb3JlJywgJC5wcm94eSh0aGlzLm9uRHJhZ0VuZCwgdGhpcykpO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogSGFuZGxlcyBgdG91Y2hzdGFydGAgYW5kIGBtb3VzZWRvd25gIGV2ZW50cy5cblx0ICogQHRvZG8gSG9yaXpvbnRhbCBzd2lwZSB0aHJlc2hvbGQgYXMgb3B0aW9uXG5cdCAqIEB0b2RvICMyNjFcblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSBldmVudCBhcmd1bWVudHMuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLm9uRHJhZ1N0YXJ0ID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHR2YXIgc3RhZ2UgPSBudWxsO1xuXG5cdFx0aWYgKGV2ZW50LndoaWNoID09PSAzKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCQuc3VwcG9ydC50cmFuc2Zvcm0pIHtcblx0XHRcdHN0YWdlID0gdGhpcy4kc3RhZ2UuY3NzKCd0cmFuc2Zvcm0nKS5yZXBsYWNlKC8uKlxcKHxcXCl8IC9nLCAnJykuc3BsaXQoJywnKTtcblx0XHRcdHN0YWdlID0ge1xuXHRcdFx0XHR4OiBzdGFnZVtzdGFnZS5sZW5ndGggPT09IDE2ID8gMTIgOiA0XSxcblx0XHRcdFx0eTogc3RhZ2Vbc3RhZ2UubGVuZ3RoID09PSAxNiA/IDEzIDogNV1cblx0XHRcdH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0YWdlID0gdGhpcy4kc3RhZ2UucG9zaXRpb24oKTtcblx0XHRcdHN0YWdlID0ge1xuXHRcdFx0XHR4OiB0aGlzLnNldHRpbmdzLnJ0bCA/XG5cdFx0XHRcdFx0c3RhZ2UubGVmdCArIHRoaXMuJHN0YWdlLndpZHRoKCkgLSB0aGlzLndpZHRoKCkgKyB0aGlzLnNldHRpbmdzLm1hcmdpbiA6XG5cdFx0XHRcdFx0c3RhZ2UubGVmdCxcblx0XHRcdFx0eTogc3RhZ2UudG9wXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLmlzKCdhbmltYXRpbmcnKSkge1xuXHRcdFx0JC5zdXBwb3J0LnRyYW5zZm9ybSA/IHRoaXMuYW5pbWF0ZShzdGFnZS54KSA6IHRoaXMuJHN0YWdlLnN0b3AoKVxuXHRcdFx0dGhpcy5pbnZhbGlkYXRlKCdwb3NpdGlvbicpO1xuXHRcdH1cblxuXHRcdHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3ModGhpcy5vcHRpb25zLmdyYWJDbGFzcywgZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bicpO1xuXG5cdFx0dGhpcy5zcGVlZCgwKTtcblxuXHRcdHRoaXMuX2RyYWcudGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXHRcdHRoaXMuX2RyYWcudGFyZ2V0ID0gJChldmVudC50YXJnZXQpO1xuXHRcdHRoaXMuX2RyYWcuc3RhZ2Uuc3RhcnQgPSBzdGFnZTtcblx0XHR0aGlzLl9kcmFnLnN0YWdlLmN1cnJlbnQgPSBzdGFnZTtcblx0XHR0aGlzLl9kcmFnLnBvaW50ZXIgPSB0aGlzLnBvaW50ZXIoZXZlbnQpO1xuXG5cdFx0JChkb2N1bWVudCkub24oJ21vdXNldXAub3dsLmNvcmUgdG91Y2hlbmQub3dsLmNvcmUnLCAkLnByb3h5KHRoaXMub25EcmFnRW5kLCB0aGlzKSk7XG5cblx0XHQkKGRvY3VtZW50KS5vbmUoJ21vdXNlbW92ZS5vd2wuY29yZSB0b3VjaG1vdmUub3dsLmNvcmUnLCAkLnByb3h5KGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHR2YXIgZGVsdGEgPSB0aGlzLmRpZmZlcmVuY2UodGhpcy5fZHJhZy5wb2ludGVyLCB0aGlzLnBvaW50ZXIoZXZlbnQpKTtcblxuXHRcdFx0JChkb2N1bWVudCkub24oJ21vdXNlbW92ZS5vd2wuY29yZSB0b3VjaG1vdmUub3dsLmNvcmUnLCAkLnByb3h5KHRoaXMub25EcmFnTW92ZSwgdGhpcykpO1xuXG5cdFx0XHRpZiAoTWF0aC5hYnMoZGVsdGEueCkgPCBNYXRoLmFicyhkZWx0YS55KSAmJiB0aGlzLmlzKCd2YWxpZCcpKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0dGhpcy5lbnRlcignZHJhZ2dpbmcnKTtcblx0XHRcdHRoaXMudHJpZ2dlcignZHJhZycpO1xuXHRcdH0sIHRoaXMpKTtcblx0fTtcblxuXHQvKipcblx0ICogSGFuZGxlcyB0aGUgYHRvdWNobW92ZWAgYW5kIGBtb3VzZW1vdmVgIGV2ZW50cy5cblx0ICogQHRvZG8gIzI2MVxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gVGhlIGV2ZW50IGFyZ3VtZW50cy5cblx0ICovXG5cdE93bC5wcm90b3R5cGUub25EcmFnTW92ZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0dmFyIG1pbmltdW0gPSBudWxsLFxuXHRcdFx0bWF4aW11bSA9IG51bGwsXG5cdFx0XHRwdWxsID0gbnVsbCxcblx0XHRcdGRlbHRhID0gdGhpcy5kaWZmZXJlbmNlKHRoaXMuX2RyYWcucG9pbnRlciwgdGhpcy5wb2ludGVyKGV2ZW50KSksXG5cdFx0XHRzdGFnZSA9IHRoaXMuZGlmZmVyZW5jZSh0aGlzLl9kcmFnLnN0YWdlLnN0YXJ0LCBkZWx0YSk7XG5cblx0XHRpZiAoIXRoaXMuaXMoJ2RyYWdnaW5nJykpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0aWYgKHRoaXMuc2V0dGluZ3MubG9vcCkge1xuXHRcdFx0bWluaW11bSA9IHRoaXMuY29vcmRpbmF0ZXModGhpcy5taW5pbXVtKCkpO1xuXHRcdFx0bWF4aW11bSA9IHRoaXMuY29vcmRpbmF0ZXModGhpcy5tYXhpbXVtKCkgKyAxKSAtIG1pbmltdW07XG5cdFx0XHRzdGFnZS54ID0gKCgoc3RhZ2UueCAtIG1pbmltdW0pICUgbWF4aW11bSArIG1heGltdW0pICUgbWF4aW11bSkgKyBtaW5pbXVtO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtaW5pbXVtID0gdGhpcy5zZXR0aW5ncy5ydGwgPyB0aGlzLmNvb3JkaW5hdGVzKHRoaXMubWF4aW11bSgpKSA6IHRoaXMuY29vcmRpbmF0ZXModGhpcy5taW5pbXVtKCkpO1xuXHRcdFx0bWF4aW11bSA9IHRoaXMuc2V0dGluZ3MucnRsID8gdGhpcy5jb29yZGluYXRlcyh0aGlzLm1pbmltdW0oKSkgOiB0aGlzLmNvb3JkaW5hdGVzKHRoaXMubWF4aW11bSgpKTtcblx0XHRcdHB1bGwgPSB0aGlzLnNldHRpbmdzLnB1bGxEcmFnID8gLTEgKiBkZWx0YS54IC8gNSA6IDA7XG5cdFx0XHRzdGFnZS54ID0gTWF0aC5tYXgoTWF0aC5taW4oc3RhZ2UueCwgbWluaW11bSArIHB1bGwpLCBtYXhpbXVtICsgcHVsbCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fZHJhZy5zdGFnZS5jdXJyZW50ID0gc3RhZ2U7XG5cblx0XHR0aGlzLmFuaW1hdGUoc3RhZ2UueCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEhhbmRsZXMgdGhlIGB0b3VjaGVuZGAgYW5kIGBtb3VzZXVwYCBldmVudHMuXG5cdCAqIEB0b2RvICMyNjFcblx0ICogQHRvZG8gVGhyZXNob2xkIGZvciBjbGljayBldmVudFxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gVGhlIGV2ZW50IGFyZ3VtZW50cy5cblx0ICovXG5cdE93bC5wcm90b3R5cGUub25EcmFnRW5kID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHR2YXIgZGVsdGEgPSB0aGlzLmRpZmZlcmVuY2UodGhpcy5fZHJhZy5wb2ludGVyLCB0aGlzLnBvaW50ZXIoZXZlbnQpKSxcblx0XHRcdHN0YWdlID0gdGhpcy5fZHJhZy5zdGFnZS5jdXJyZW50LFxuXHRcdFx0ZGlyZWN0aW9uID0gZGVsdGEueCA+IDAgXiB0aGlzLnNldHRpbmdzLnJ0bCA/ICdsZWZ0JyA6ICdyaWdodCc7XG5cblx0XHQkKGRvY3VtZW50KS5vZmYoJy5vd2wuY29yZScpO1xuXG5cdFx0dGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuZ3JhYkNsYXNzKTtcblxuXHRcdGlmIChkZWx0YS54ICE9PSAwICYmIHRoaXMuaXMoJ2RyYWdnaW5nJykgfHwgIXRoaXMuaXMoJ3ZhbGlkJykpIHtcblx0XHRcdHRoaXMuc3BlZWQodGhpcy5zZXR0aW5ncy5kcmFnRW5kU3BlZWQgfHwgdGhpcy5zZXR0aW5ncy5zbWFydFNwZWVkKTtcblx0XHRcdHRoaXMuY3VycmVudCh0aGlzLmNsb3Nlc3Qoc3RhZ2UueCwgZGVsdGEueCAhPT0gMCA/IGRpcmVjdGlvbiA6IHRoaXMuX2RyYWcuZGlyZWN0aW9uKSk7XG5cdFx0XHR0aGlzLmludmFsaWRhdGUoJ3Bvc2l0aW9uJyk7XG5cdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdFx0XHR0aGlzLl9kcmFnLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcblxuXHRcdFx0aWYgKE1hdGguYWJzKGRlbHRhLngpID4gMyB8fCBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRoaXMuX2RyYWcudGltZSA+IDMwMCkge1xuXHRcdFx0XHR0aGlzLl9kcmFnLnRhcmdldC5vbmUoJ2NsaWNrLm93bC5jb3JlJywgZnVuY3Rpb24oKSB7IHJldHVybiBmYWxzZTsgfSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCF0aGlzLmlzKCdkcmFnZ2luZycpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5sZWF2ZSgnZHJhZ2dpbmcnKTtcblx0XHR0aGlzLnRyaWdnZXIoJ2RyYWdnZWQnKTtcblx0fTtcblxuXHQvKipcblx0ICogR2V0cyBhYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgY2xvc2VzdCBpdGVtIGZvciBhIGNvb3JkaW5hdGUuXG5cdCAqIEB0b2RvIFNldHRpbmcgYGZyZWVEcmFnYCBtYWtlcyBgY2xvc2VzdGAgbm90IHJldXNhYmxlLiBTZWUgIzE2NS5cblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcGFyYW0ge051bWJlcn0gY29vcmRpbmF0ZSAtIFRoZSBjb29yZGluYXRlIGluIHBpeGVsLlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gZGlyZWN0aW9uIC0gVGhlIGRpcmVjdGlvbiB0byBjaGVjayBmb3IgdGhlIGNsb3Nlc3QgaXRlbS4gRXRoZXIgYGxlZnRgIG9yIGByaWdodGAuXG5cdCAqIEByZXR1cm4ge051bWJlcn0gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIGNsb3Nlc3QgaXRlbS5cblx0ICovXG5cdE93bC5wcm90b3R5cGUuY2xvc2VzdCA9IGZ1bmN0aW9uKGNvb3JkaW5hdGUsIGRpcmVjdGlvbikge1xuXHRcdHZhciBwb3NpdGlvbiA9IC0xLFxuXHRcdFx0cHVsbCA9IDMwLFxuXHRcdFx0d2lkdGggPSB0aGlzLndpZHRoKCksXG5cdFx0XHRjb29yZGluYXRlcyA9IHRoaXMuY29vcmRpbmF0ZXMoKTtcblxuXHRcdGlmICghdGhpcy5zZXR0aW5ncy5mcmVlRHJhZykge1xuXHRcdFx0Ly8gY2hlY2sgY2xvc2VzdCBpdGVtXG5cdFx0XHQkLmVhY2goY29vcmRpbmF0ZXMsICQucHJveHkoZnVuY3Rpb24oaW5kZXgsIHZhbHVlKSB7XG5cdFx0XHRcdC8vIG9uIGEgbGVmdCBwdWxsLCBjaGVjayBvbiBjdXJyZW50IGluZGV4XG5cdFx0XHRcdGlmIChkaXJlY3Rpb24gPT09ICdsZWZ0JyAmJiBjb29yZGluYXRlID4gdmFsdWUgLSBwdWxsICYmIGNvb3JkaW5hdGUgPCB2YWx1ZSArIHB1bGwpIHtcblx0XHRcdFx0XHRwb3NpdGlvbiA9IGluZGV4O1xuXHRcdFx0XHQvLyBvbiBhIHJpZ2h0IHB1bGwsIGNoZWNrIG9uIHByZXZpb3VzIGluZGV4XG5cdFx0XHRcdC8vIHRvIGRvIHNvLCBzdWJ0cmFjdCB3aWR0aCBmcm9tIHZhbHVlIGFuZCBzZXQgcG9zaXRpb24gPSBpbmRleCArIDFcblx0XHRcdFx0fSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdyaWdodCcgJiYgY29vcmRpbmF0ZSA+IHZhbHVlIC0gd2lkdGggLSBwdWxsICYmIGNvb3JkaW5hdGUgPCB2YWx1ZSAtIHdpZHRoICsgcHVsbCkge1xuXHRcdFx0XHRcdHBvc2l0aW9uID0gaW5kZXggKyAxO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMub3AoY29vcmRpbmF0ZSwgJzwnLCB2YWx1ZSlcblx0XHRcdFx0XHQmJiB0aGlzLm9wKGNvb3JkaW5hdGUsICc+JywgY29vcmRpbmF0ZXNbaW5kZXggKyAxXSAhPT0gdW5kZWZpbmVkID8gY29vcmRpbmF0ZXNbaW5kZXggKyAxXSA6IHZhbHVlIC0gd2lkdGgpKSB7XG5cdFx0XHRcdFx0cG9zaXRpb24gPSBkaXJlY3Rpb24gPT09ICdsZWZ0JyA/IGluZGV4ICsgMSA6IGluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBwb3NpdGlvbiA9PT0gLTE7XG5cdFx0XHR9LCB0aGlzKSk7XG5cdFx0fVxuXG5cdFx0aWYgKCF0aGlzLnNldHRpbmdzLmxvb3ApIHtcblx0XHRcdC8vIG5vbiBsb29wIGJvdW5kcmllc1xuXHRcdFx0aWYgKHRoaXMub3AoY29vcmRpbmF0ZSwgJz4nLCBjb29yZGluYXRlc1t0aGlzLm1pbmltdW0oKV0pKSB7XG5cdFx0XHRcdHBvc2l0aW9uID0gY29vcmRpbmF0ZSA9IHRoaXMubWluaW11bSgpO1xuXHRcdFx0fSBlbHNlIGlmICh0aGlzLm9wKGNvb3JkaW5hdGUsICc8JywgY29vcmRpbmF0ZXNbdGhpcy5tYXhpbXVtKCldKSkge1xuXHRcdFx0XHRwb3NpdGlvbiA9IGNvb3JkaW5hdGUgPSB0aGlzLm1heGltdW0oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcG9zaXRpb247XG5cdH07XG5cblx0LyoqXG5cdCAqIEFuaW1hdGVzIHRoZSBzdGFnZS5cblx0ICogQHRvZG8gIzI3MFxuXHQgKiBAcHVibGljXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBjb29yZGluYXRlIC0gVGhlIGNvb3JkaW5hdGUgaW4gcGl4ZWxzLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5hbmltYXRlID0gZnVuY3Rpb24oY29vcmRpbmF0ZSkge1xuXHRcdHZhciBhbmltYXRlID0gdGhpcy5zcGVlZCgpID4gMDtcblxuXHRcdHRoaXMuaXMoJ2FuaW1hdGluZycpICYmIHRoaXMub25UcmFuc2l0aW9uRW5kKCk7XG5cblx0XHRpZiAoYW5pbWF0ZSkge1xuXHRcdFx0dGhpcy5lbnRlcignYW5pbWF0aW5nJyk7XG5cdFx0XHR0aGlzLnRyaWdnZXIoJ3RyYW5zbGF0ZScpO1xuXHRcdH1cblxuXHRcdGlmICgkLnN1cHBvcnQudHJhbnNmb3JtM2QgJiYgJC5zdXBwb3J0LnRyYW5zaXRpb24pIHtcblx0XHRcdHRoaXMuJHN0YWdlLmNzcyh7XG5cdFx0XHRcdHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKCcgKyBjb29yZGluYXRlICsgJ3B4LDBweCwwcHgpJyxcblx0XHRcdFx0dHJhbnNpdGlvbjogKHRoaXMuc3BlZWQoKSAvIDEwMDApICsgJ3MnICsgKFxuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3Muc2xpZGVUcmFuc2l0aW9uID8gJyAnICsgdGhpcy5zZXR0aW5ncy5zbGlkZVRyYW5zaXRpb24gOiAnJ1xuXHRcdFx0XHQpXG5cdFx0XHR9KTtcblx0XHR9IGVsc2UgaWYgKGFuaW1hdGUpIHtcblx0XHRcdHRoaXMuJHN0YWdlLmFuaW1hdGUoe1xuXHRcdFx0XHRsZWZ0OiBjb29yZGluYXRlICsgJ3B4J1xuXHRcdFx0fSwgdGhpcy5zcGVlZCgpLCB0aGlzLnNldHRpbmdzLmZhbGxiYWNrRWFzaW5nLCAkLnByb3h5KHRoaXMub25UcmFuc2l0aW9uRW5kLCB0aGlzKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuJHN0YWdlLmNzcyh7XG5cdFx0XHRcdGxlZnQ6IGNvb3JkaW5hdGUgKyAncHgnXG5cdFx0XHR9KTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIENoZWNrcyB3aGV0aGVyIHRoZSBjYXJvdXNlbCBpcyBpbiBhIHNwZWNpZmljIHN0YXRlIG9yIG5vdC5cblx0ICogQHBhcmFtIHtTdHJpbmd9IHN0YXRlIC0gVGhlIHN0YXRlIHRvIGNoZWNrLlxuXHQgKiBAcmV0dXJucyB7Qm9vbGVhbn0gLSBUaGUgZmxhZyB3aGljaCBpbmRpY2F0ZXMgaWYgdGhlIGNhcm91c2VsIGlzIGJ1c3kuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLmlzID0gZnVuY3Rpb24oc3RhdGUpIHtcblx0XHRyZXR1cm4gdGhpcy5fc3RhdGVzLmN1cnJlbnRbc3RhdGVdICYmIHRoaXMuX3N0YXRlcy5jdXJyZW50W3N0YXRlXSA+IDA7XG5cdH07XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGFic29sdXRlIHBvc2l0aW9uIG9mIHRoZSBjdXJyZW50IGl0ZW0uXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtwb3NpdGlvbl0gLSBUaGUgbmV3IGFic29sdXRlIHBvc2l0aW9uIG9yIG5vdGhpbmcgdG8gbGVhdmUgaXQgdW5jaGFuZ2VkLlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSAtIFRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgY3VycmVudCBpdGVtLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5jdXJyZW50ID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcblx0XHRpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX2N1cnJlbnQ7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuX2l0ZW1zLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHRwb3NpdGlvbiA9IHRoaXMubm9ybWFsaXplKHBvc2l0aW9uKTtcblxuXHRcdGlmICh0aGlzLl9jdXJyZW50ICE9PSBwb3NpdGlvbikge1xuXHRcdFx0dmFyIGV2ZW50ID0gdGhpcy50cmlnZ2VyKCdjaGFuZ2UnLCB7IHByb3BlcnR5OiB7IG5hbWU6ICdwb3NpdGlvbicsIHZhbHVlOiBwb3NpdGlvbiB9IH0pO1xuXG5cdFx0XHRpZiAoZXZlbnQuZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHBvc2l0aW9uID0gdGhpcy5ub3JtYWxpemUoZXZlbnQuZGF0YSk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX2N1cnJlbnQgPSBwb3NpdGlvbjtcblxuXHRcdFx0dGhpcy5pbnZhbGlkYXRlKCdwb3NpdGlvbicpO1xuXG5cdFx0XHR0aGlzLnRyaWdnZXIoJ2NoYW5nZWQnLCB7IHByb3BlcnR5OiB7IG5hbWU6ICdwb3NpdGlvbicsIHZhbHVlOiB0aGlzLl9jdXJyZW50IH0gfSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuX2N1cnJlbnQ7XG5cdH07XG5cblx0LyoqXG5cdCAqIEludmFsaWRhdGVzIHRoZSBnaXZlbiBwYXJ0IG9mIHRoZSB1cGRhdGUgcm91dGluZS5cblx0ICogQHBhcmFtIHtTdHJpbmd9IFtwYXJ0XSAtIFRoZSBwYXJ0IHRvIGludmFsaWRhdGUuXG5cdCAqIEByZXR1cm5zIHtBcnJheS48U3RyaW5nPn0gLSBUaGUgaW52YWxpZGF0ZWQgcGFydHMuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLmludmFsaWRhdGUgPSBmdW5jdGlvbihwYXJ0KSB7XG5cdFx0aWYgKCQudHlwZShwYXJ0KSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdHRoaXMuX2ludmFsaWRhdGVkW3BhcnRdID0gdHJ1ZTtcblx0XHRcdHRoaXMuaXMoJ3ZhbGlkJykgJiYgdGhpcy5sZWF2ZSgndmFsaWQnKTtcblx0XHR9XG5cdFx0cmV0dXJuICQubWFwKHRoaXMuX2ludmFsaWRhdGVkLCBmdW5jdGlvbih2LCBpKSB7IHJldHVybiBpIH0pO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBSZXNldHMgdGhlIGFic29sdXRlIHBvc2l0aW9uIG9mIHRoZSBjdXJyZW50IGl0ZW0uXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHBvc2l0aW9uIC0gVGhlIGFic29sdXRlIHBvc2l0aW9uIG9mIHRoZSBuZXcgaXRlbS5cblx0ICovXG5cdE93bC5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbihwb3NpdGlvbikge1xuXHRcdHBvc2l0aW9uID0gdGhpcy5ub3JtYWxpemUocG9zaXRpb24pO1xuXG5cdFx0aWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLl9zcGVlZCA9IDA7XG5cdFx0dGhpcy5fY3VycmVudCA9IHBvc2l0aW9uO1xuXG5cdFx0dGhpcy5zdXBwcmVzcyhbICd0cmFuc2xhdGUnLCAndHJhbnNsYXRlZCcgXSk7XG5cblx0XHR0aGlzLmFuaW1hdGUodGhpcy5jb29yZGluYXRlcyhwb3NpdGlvbikpO1xuXG5cdFx0dGhpcy5yZWxlYXNlKFsgJ3RyYW5zbGF0ZScsICd0cmFuc2xhdGVkJyBdKTtcblx0fTtcblxuXHQvKipcblx0ICogTm9ybWFsaXplcyBhbiBhYnNvbHV0ZSBvciBhIHJlbGF0aXZlIHBvc2l0aW9uIG9mIGFuIGl0ZW0uXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHBvc2l0aW9uIC0gVGhlIGFic29sdXRlIG9yIHJlbGF0aXZlIHBvc2l0aW9uIHRvIG5vcm1hbGl6ZS5cblx0ICogQHBhcmFtIHtCb29sZWFufSBbcmVsYXRpdmU9ZmFsc2VdIC0gV2hldGhlciB0aGUgZ2l2ZW4gcG9zaXRpb24gaXMgcmVsYXRpdmUgb3Igbm90LlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSAtIFRoZSBub3JtYWxpemVkIHBvc2l0aW9uLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbihwb3NpdGlvbiwgcmVsYXRpdmUpIHtcblx0XHR2YXIgbiA9IHRoaXMuX2l0ZW1zLmxlbmd0aCxcblx0XHRcdG0gPSByZWxhdGl2ZSA/IDAgOiB0aGlzLl9jbG9uZXMubGVuZ3RoO1xuXG5cdFx0aWYgKCF0aGlzLmlzTnVtZXJpYyhwb3NpdGlvbikgfHwgbiA8IDEpIHtcblx0XHRcdHBvc2l0aW9uID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IG4gKyBtKSB7XG5cdFx0XHRwb3NpdGlvbiA9ICgocG9zaXRpb24gLSBtIC8gMikgJSBuICsgbikgJSBuICsgbSAvIDI7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBvc2l0aW9uO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhbiBhYnNvbHV0ZSBwb3NpdGlvbiBvZiBhbiBpdGVtIGludG8gYSByZWxhdGl2ZSBvbmUuXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHBvc2l0aW9uIC0gVGhlIGFic29sdXRlIHBvc2l0aW9uIHRvIGNvbnZlcnQuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IC0gVGhlIGNvbnZlcnRlZCBwb3NpdGlvbi5cblx0ICovXG5cdE93bC5wcm90b3R5cGUucmVsYXRpdmUgPSBmdW5jdGlvbihwb3NpdGlvbikge1xuXHRcdHBvc2l0aW9uIC09IHRoaXMuX2Nsb25lcy5sZW5ndGggLyAyO1xuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZShwb3NpdGlvbiwgdHJ1ZSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIG1heGltdW0gcG9zaXRpb24gZm9yIHRoZSBjdXJyZW50IGl0ZW0uXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtCb29sZWFufSBbcmVsYXRpdmU9ZmFsc2VdIC0gV2hldGhlciB0byByZXR1cm4gYW4gYWJzb2x1dGUgcG9zaXRpb24gb3IgYSByZWxhdGl2ZSBwb3NpdGlvbi5cblx0ICogQHJldHVybnMge051bWJlcn1cblx0ICovXG5cdE93bC5wcm90b3R5cGUubWF4aW11bSA9IGZ1bmN0aW9uKHJlbGF0aXZlKSB7XG5cdFx0dmFyIHNldHRpbmdzID0gdGhpcy5zZXR0aW5ncyxcblx0XHRcdG1heGltdW0gPSB0aGlzLl9jb29yZGluYXRlcy5sZW5ndGgsXG5cdFx0XHRpdGVyYXRvcixcblx0XHRcdHJlY2lwcm9jYWxJdGVtc1dpZHRoLFxuXHRcdFx0ZWxlbWVudFdpZHRoO1xuXG5cdFx0aWYgKHNldHRpbmdzLmxvb3ApIHtcblx0XHRcdG1heGltdW0gPSB0aGlzLl9jbG9uZXMubGVuZ3RoIC8gMiArIHRoaXMuX2l0ZW1zLmxlbmd0aCAtIDE7XG5cdFx0fSBlbHNlIGlmIChzZXR0aW5ncy5hdXRvV2lkdGggfHwgc2V0dGluZ3MubWVyZ2UpIHtcblx0XHRcdGl0ZXJhdG9yID0gdGhpcy5faXRlbXMubGVuZ3RoO1xuXHRcdFx0aWYgKGl0ZXJhdG9yKSB7XG5cdFx0XHRcdHJlY2lwcm9jYWxJdGVtc1dpZHRoID0gdGhpcy5faXRlbXNbLS1pdGVyYXRvcl0ud2lkdGgoKTtcblx0XHRcdFx0ZWxlbWVudFdpZHRoID0gdGhpcy4kZWxlbWVudC53aWR0aCgpO1xuXHRcdFx0XHR3aGlsZSAoaXRlcmF0b3ItLSkge1xuXHRcdFx0XHRcdHJlY2lwcm9jYWxJdGVtc1dpZHRoICs9IHRoaXMuX2l0ZW1zW2l0ZXJhdG9yXS53aWR0aCgpICsgdGhpcy5zZXR0aW5ncy5tYXJnaW47XG5cdFx0XHRcdFx0aWYgKHJlY2lwcm9jYWxJdGVtc1dpZHRoID4gZWxlbWVudFdpZHRoKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1heGltdW0gPSBpdGVyYXRvciArIDE7XG5cdFx0fSBlbHNlIGlmIChzZXR0aW5ncy5jZW50ZXIpIHtcblx0XHRcdG1heGltdW0gPSB0aGlzLl9pdGVtcy5sZW5ndGggLSAxO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXhpbXVtID0gdGhpcy5faXRlbXMubGVuZ3RoIC0gc2V0dGluZ3MuaXRlbXM7XG5cdFx0fVxuXG5cdFx0aWYgKHJlbGF0aXZlKSB7XG5cdFx0XHRtYXhpbXVtIC09IHRoaXMuX2Nsb25lcy5sZW5ndGggLyAyO1xuXHRcdH1cblxuXHRcdHJldHVybiBNYXRoLm1heChtYXhpbXVtLCAwKTtcblx0fTtcblxuXHQvKipcblx0ICogR2V0cyB0aGUgbWluaW11bSBwb3NpdGlvbiBmb3IgdGhlIGN1cnJlbnQgaXRlbS5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IFtyZWxhdGl2ZT1mYWxzZV0gLSBXaGV0aGVyIHRvIHJldHVybiBhbiBhYnNvbHV0ZSBwb3NpdGlvbiBvciBhIHJlbGF0aXZlIHBvc2l0aW9uLlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfVxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5taW5pbXVtID0gZnVuY3Rpb24ocmVsYXRpdmUpIHtcblx0XHRyZXR1cm4gcmVsYXRpdmUgPyAwIDogdGhpcy5fY2xvbmVzLmxlbmd0aCAvIDI7XG5cdH07XG5cblx0LyoqXG5cdCAqIEdldHMgYW4gaXRlbSBhdCB0aGUgc3BlY2lmaWVkIHJlbGF0aXZlIHBvc2l0aW9uLlxuXHQgKiBAcHVibGljXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbcG9zaXRpb25dIC0gVGhlIHJlbGF0aXZlIHBvc2l0aW9uIG9mIHRoZSBpdGVtLlxuXHQgKiBAcmV0dXJuIHtqUXVlcnl8QXJyYXkuPGpRdWVyeT59IC0gVGhlIGl0ZW0gYXQgdGhlIGdpdmVuIHBvc2l0aW9uIG9yIGFsbCBpdGVtcyBpZiBubyBwb3NpdGlvbiB3YXMgZ2l2ZW4uXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLml0ZW1zID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcblx0XHRpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX2l0ZW1zLnNsaWNlKCk7XG5cdFx0fVxuXG5cdFx0cG9zaXRpb24gPSB0aGlzLm5vcm1hbGl6ZShwb3NpdGlvbiwgdHJ1ZSk7XG5cdFx0cmV0dXJuIHRoaXMuX2l0ZW1zW3Bvc2l0aW9uXTtcblx0fTtcblxuXHQvKipcblx0ICogR2V0cyBhbiBpdGVtIGF0IHRoZSBzcGVjaWZpZWQgcmVsYXRpdmUgcG9zaXRpb24uXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtwb3NpdGlvbl0gLSBUaGUgcmVsYXRpdmUgcG9zaXRpb24gb2YgdGhlIGl0ZW0uXG5cdCAqIEByZXR1cm4ge2pRdWVyeXxBcnJheS48alF1ZXJ5Pn0gLSBUaGUgaXRlbSBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24gb3IgYWxsIGl0ZW1zIGlmIG5vIHBvc2l0aW9uIHdhcyBnaXZlbi5cblx0ICovXG5cdE93bC5wcm90b3R5cGUubWVyZ2VycyA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG5cdFx0aWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB0aGlzLl9tZXJnZXJzLnNsaWNlKCk7XG5cdFx0fVxuXG5cdFx0cG9zaXRpb24gPSB0aGlzLm5vcm1hbGl6ZShwb3NpdGlvbiwgdHJ1ZSk7XG5cdFx0cmV0dXJuIHRoaXMuX21lcmdlcnNbcG9zaXRpb25dO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBhYnNvbHV0ZSBwb3NpdGlvbnMgb2YgY2xvbmVzIGZvciBhbiBpdGVtLlxuXHQgKiBAcHVibGljXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbcG9zaXRpb25dIC0gVGhlIHJlbGF0aXZlIHBvc2l0aW9uIG9mIHRoZSBpdGVtLlxuXHQgKiBAcmV0dXJucyB7QXJyYXkuPE51bWJlcj59IC0gVGhlIGFic29sdXRlIHBvc2l0aW9ucyBvZiBjbG9uZXMgZm9yIHRoZSBpdGVtIG9yIGFsbCBpZiBubyBwb3NpdGlvbiB3YXMgZ2l2ZW4uXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLmNsb25lcyA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG5cdFx0dmFyIG9kZCA9IHRoaXMuX2Nsb25lcy5sZW5ndGggLyAyLFxuXHRcdFx0ZXZlbiA9IG9kZCArIHRoaXMuX2l0ZW1zLmxlbmd0aCxcblx0XHRcdG1hcCA9IGZ1bmN0aW9uKGluZGV4KSB7IHJldHVybiBpbmRleCAlIDIgPT09IDAgPyBldmVuICsgaW5kZXggLyAyIDogb2RkIC0gKGluZGV4ICsgMSkgLyAyIH07XG5cblx0XHRpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuICQubWFwKHRoaXMuX2Nsb25lcywgZnVuY3Rpb24odiwgaSkgeyByZXR1cm4gbWFwKGkpIH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiAkLm1hcCh0aGlzLl9jbG9uZXMsIGZ1bmN0aW9uKHYsIGkpIHsgcmV0dXJuIHYgPT09IHBvc2l0aW9uID8gbWFwKGkpIDogbnVsbCB9KTtcblx0fTtcblxuXHQvKipcblx0ICogU2V0cyB0aGUgY3VycmVudCBhbmltYXRpb24gc3BlZWQuXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtzcGVlZF0gLSBUaGUgYW5pbWF0aW9uIHNwZWVkIGluIG1pbGxpc2Vjb25kcyBvciBub3RoaW5nIHRvIGxlYXZlIGl0IHVuY2hhbmdlZC5cblx0ICogQHJldHVybnMge051bWJlcn0gLSBUaGUgY3VycmVudCBhbmltYXRpb24gc3BlZWQgaW4gbWlsbGlzZWNvbmRzLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5zcGVlZCA9IGZ1bmN0aW9uKHNwZWVkKSB7XG5cdFx0aWYgKHNwZWVkICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHRoaXMuX3NwZWVkID0gc3BlZWQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuX3NwZWVkO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBjb29yZGluYXRlIG9mIGFuIGl0ZW0uXG5cdCAqIEB0b2RvIFRoZSBuYW1lIG9mIHRoaXMgbWV0aG9kIGlzIG1pc3NsZWFuZGluZy5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIGl0ZW0gd2l0aGluIGBtaW5pbXVtKClgIGFuZCBgbWF4aW11bSgpYC5cblx0ICogQHJldHVybnMge051bWJlcnxBcnJheS48TnVtYmVyPn0gLSBUaGUgY29vcmRpbmF0ZSBvZiB0aGUgaXRlbSBpbiBwaXhlbCBvciBhbGwgY29vcmRpbmF0ZXMuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLmNvb3JkaW5hdGVzID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcblx0XHR2YXIgbXVsdGlwbGllciA9IDEsXG5cdFx0XHRuZXdQb3NpdGlvbiA9IHBvc2l0aW9uIC0gMSxcblx0XHRcdGNvb3JkaW5hdGU7XG5cblx0XHRpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuICQubWFwKHRoaXMuX2Nvb3JkaW5hdGVzLCAkLnByb3h5KGZ1bmN0aW9uKGNvb3JkaW5hdGUsIGluZGV4KSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvb3JkaW5hdGVzKGluZGV4KTtcblx0XHRcdH0sIHRoaXMpKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5zZXR0aW5ncy5jZW50ZXIpIHtcblx0XHRcdGlmICh0aGlzLnNldHRpbmdzLnJ0bCkge1xuXHRcdFx0XHRtdWx0aXBsaWVyID0gLTE7XG5cdFx0XHRcdG5ld1Bvc2l0aW9uID0gcG9zaXRpb24gKyAxO1xuXHRcdFx0fVxuXG5cdFx0XHRjb29yZGluYXRlID0gdGhpcy5fY29vcmRpbmF0ZXNbcG9zaXRpb25dO1xuXHRcdFx0Y29vcmRpbmF0ZSArPSAodGhpcy53aWR0aCgpIC0gY29vcmRpbmF0ZSArICh0aGlzLl9jb29yZGluYXRlc1tuZXdQb3NpdGlvbl0gfHwgMCkpIC8gMiAqIG11bHRpcGxpZXI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvb3JkaW5hdGUgPSB0aGlzLl9jb29yZGluYXRlc1tuZXdQb3NpdGlvbl0gfHwgMDtcblx0XHR9XG5cblx0XHRjb29yZGluYXRlID0gTWF0aC5jZWlsKGNvb3JkaW5hdGUpO1xuXG5cdFx0cmV0dXJuIGNvb3JkaW5hdGU7XG5cdH07XG5cblx0LyoqXG5cdCAqIENhbGN1bGF0ZXMgdGhlIHNwZWVkIGZvciBhIHRyYW5zbGF0aW9uLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBmcm9tIC0gVGhlIGFic29sdXRlIHBvc2l0aW9uIG9mIHRoZSBzdGFydCBpdGVtLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gdG8gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIHRhcmdldCBpdGVtLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gW2ZhY3Rvcj11bmRlZmluZWRdIC0gVGhlIHRpbWUgZmFjdG9yIGluIG1pbGxpc2Vjb25kcy5cblx0ICogQHJldHVybnMge051bWJlcn0gLSBUaGUgdGltZSBpbiBtaWxsaXNlY29uZHMgZm9yIHRoZSB0cmFuc2xhdGlvbi5cblx0ICovXG5cdE93bC5wcm90b3R5cGUuZHVyYXRpb24gPSBmdW5jdGlvbihmcm9tLCB0bywgZmFjdG9yKSB7XG5cdFx0aWYgKGZhY3RvciA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIE1hdGgubWluKE1hdGgubWF4KE1hdGguYWJzKHRvIC0gZnJvbSksIDEpLCA2KSAqIE1hdGguYWJzKChmYWN0b3IgfHwgdGhpcy5zZXR0aW5ncy5zbWFydFNwZWVkKSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFNsaWRlcyB0byB0aGUgc3BlY2lmaWVkIGl0ZW0uXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHBvc2l0aW9uIC0gVGhlIHBvc2l0aW9uIG9mIHRoZSBpdGVtLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NwZWVkXSAtIFRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIHRyYW5zaXRpb24uXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLnRvID0gZnVuY3Rpb24ocG9zaXRpb24sIHNwZWVkKSB7XG5cdFx0dmFyIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQoKSxcblx0XHRcdHJldmVydCA9IG51bGwsXG5cdFx0XHRkaXN0YW5jZSA9IHBvc2l0aW9uIC0gdGhpcy5yZWxhdGl2ZShjdXJyZW50KSxcblx0XHRcdGRpcmVjdGlvbiA9IChkaXN0YW5jZSA+IDApIC0gKGRpc3RhbmNlIDwgMCksXG5cdFx0XHRpdGVtcyA9IHRoaXMuX2l0ZW1zLmxlbmd0aCxcblx0XHRcdG1pbmltdW0gPSB0aGlzLm1pbmltdW0oKSxcblx0XHRcdG1heGltdW0gPSB0aGlzLm1heGltdW0oKTtcblxuXHRcdGlmICh0aGlzLnNldHRpbmdzLmxvb3ApIHtcblx0XHRcdGlmICghdGhpcy5zZXR0aW5ncy5yZXdpbmQgJiYgTWF0aC5hYnMoZGlzdGFuY2UpID4gaXRlbXMgLyAyKSB7XG5cdFx0XHRcdGRpc3RhbmNlICs9IGRpcmVjdGlvbiAqIC0xICogaXRlbXM7XG5cdFx0XHR9XG5cblx0XHRcdHBvc2l0aW9uID0gY3VycmVudCArIGRpc3RhbmNlO1xuXHRcdFx0cmV2ZXJ0ID0gKChwb3NpdGlvbiAtIG1pbmltdW0pICUgaXRlbXMgKyBpdGVtcykgJSBpdGVtcyArIG1pbmltdW07XG5cblx0XHRcdGlmIChyZXZlcnQgIT09IHBvc2l0aW9uICYmIHJldmVydCAtIGRpc3RhbmNlIDw9IG1heGltdW0gJiYgcmV2ZXJ0IC0gZGlzdGFuY2UgPiAwKSB7XG5cdFx0XHRcdGN1cnJlbnQgPSByZXZlcnQgLSBkaXN0YW5jZTtcblx0XHRcdFx0cG9zaXRpb24gPSByZXZlcnQ7XG5cdFx0XHRcdHRoaXMucmVzZXQoY3VycmVudCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICh0aGlzLnNldHRpbmdzLnJld2luZCkge1xuXHRcdFx0bWF4aW11bSArPSAxO1xuXHRcdFx0cG9zaXRpb24gPSAocG9zaXRpb24gJSBtYXhpbXVtICsgbWF4aW11bSkgJSBtYXhpbXVtO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwb3NpdGlvbiA9IE1hdGgubWF4KG1pbmltdW0sIE1hdGgubWluKG1heGltdW0sIHBvc2l0aW9uKSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zcGVlZCh0aGlzLmR1cmF0aW9uKGN1cnJlbnQsIHBvc2l0aW9uLCBzcGVlZCkpO1xuXHRcdHRoaXMuY3VycmVudChwb3NpdGlvbik7XG5cblx0XHRpZiAodGhpcy5pc1Zpc2libGUoKSkge1xuXHRcdFx0dGhpcy51cGRhdGUoKTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIFNsaWRlcyB0byB0aGUgbmV4dCBpdGVtLlxuXHQgKiBAcHVibGljXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbc3BlZWRdIC0gVGhlIHRpbWUgaW4gbWlsbGlzZWNvbmRzIGZvciB0aGUgdHJhbnNpdGlvbi5cblx0ICovXG5cdE93bC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKHNwZWVkKSB7XG5cdFx0c3BlZWQgPSBzcGVlZCB8fCBmYWxzZTtcblx0XHR0aGlzLnRvKHRoaXMucmVsYXRpdmUodGhpcy5jdXJyZW50KCkpICsgMSwgc3BlZWQpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBTbGlkZXMgdG8gdGhlIHByZXZpb3VzIGl0ZW0uXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtzcGVlZF0gLSBUaGUgdGltZSBpbiBtaWxsaXNlY29uZHMgZm9yIHRoZSB0cmFuc2l0aW9uLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5wcmV2ID0gZnVuY3Rpb24oc3BlZWQpIHtcblx0XHRzcGVlZCA9IHNwZWVkIHx8IGZhbHNlO1xuXHRcdHRoaXMudG8odGhpcy5yZWxhdGl2ZSh0aGlzLmN1cnJlbnQoKSkgLSAxLCBzcGVlZCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEhhbmRsZXMgdGhlIGVuZCBvZiBhbiBhbmltYXRpb24uXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBUaGUgZXZlbnQgYXJndW1lbnRzLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5vblRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbihldmVudCkge1xuXG5cdFx0Ly8gaWYgY3NzMiBhbmltYXRpb24gdGhlbiBldmVudCBvYmplY3QgaXMgdW5kZWZpbmVkXG5cdFx0aWYgKGV2ZW50ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG5cdFx0XHQvLyBDYXRjaCBvbmx5IG93bC1zdGFnZSB0cmFuc2l0aW9uRW5kIGV2ZW50XG5cdFx0XHRpZiAoKGV2ZW50LnRhcmdldCB8fCBldmVudC5zcmNFbGVtZW50IHx8IGV2ZW50Lm9yaWdpbmFsVGFyZ2V0KSAhPT0gdGhpcy4kc3RhZ2UuZ2V0KDApKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLmxlYXZlKCdhbmltYXRpbmcnKTtcblx0XHR0aGlzLnRyaWdnZXIoJ3RyYW5zbGF0ZWQnKTtcblx0fTtcblxuXHQvKipcblx0ICogR2V0cyB2aWV3cG9ydCB3aWR0aC5cblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcmV0dXJuIHtOdW1iZXJ9IC0gVGhlIHdpZHRoIGluIHBpeGVsLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS52aWV3cG9ydCA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB3aWR0aDtcblx0XHRpZiAodGhpcy5vcHRpb25zLnJlc3BvbnNpdmVCYXNlRWxlbWVudCAhPT0gd2luZG93KSB7XG5cdFx0XHR3aWR0aCA9ICQodGhpcy5vcHRpb25zLnJlc3BvbnNpdmVCYXNlRWxlbWVudCkud2lkdGgoKTtcblx0XHR9IGVsc2UgaWYgKHdpbmRvdy5pbm5lcldpZHRoKSB7XG5cdFx0XHR3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuXHRcdH0gZWxzZSBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCkge1xuXHRcdFx0d2lkdGggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybignQ2FuIG5vdCBkZXRlY3Qgdmlld3BvcnQgd2lkdGguJyk7XG5cdFx0fVxuXHRcdHJldHVybiB3aWR0aDtcblx0fTtcblxuXHQvKipcblx0ICogUmVwbGFjZXMgdGhlIGN1cnJlbnQgY29udGVudC5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge0hUTUxFbGVtZW50fGpRdWVyeXxTdHJpbmd9IGNvbnRlbnQgLSBUaGUgbmV3IGNvbnRlbnQuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbihjb250ZW50KSB7XG5cdFx0dGhpcy4kc3RhZ2UuZW1wdHkoKTtcblx0XHR0aGlzLl9pdGVtcyA9IFtdO1xuXG5cdFx0aWYgKGNvbnRlbnQpIHtcblx0XHRcdGNvbnRlbnQgPSAoY29udGVudCBpbnN0YW5jZW9mIGpRdWVyeSkgPyBjb250ZW50IDogJChjb250ZW50KTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5zZXR0aW5ncy5uZXN0ZWRJdGVtU2VsZWN0b3IpIHtcblx0XHRcdGNvbnRlbnQgPSBjb250ZW50LmZpbmQoJy4nICsgdGhpcy5zZXR0aW5ncy5uZXN0ZWRJdGVtU2VsZWN0b3IpO1xuXHRcdH1cblxuXHRcdGNvbnRlbnQuZmlsdGVyKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMubm9kZVR5cGUgPT09IDE7XG5cdFx0fSkuZWFjaCgkLnByb3h5KGZ1bmN0aW9uKGluZGV4LCBpdGVtKSB7XG5cdFx0XHRpdGVtID0gdGhpcy5wcmVwYXJlKGl0ZW0pO1xuXHRcdFx0dGhpcy4kc3RhZ2UuYXBwZW5kKGl0ZW0pO1xuXHRcdFx0dGhpcy5faXRlbXMucHVzaChpdGVtKTtcblx0XHRcdHRoaXMuX21lcmdlcnMucHVzaChpdGVtLmZpbmQoJ1tkYXRhLW1lcmdlXScpLmFkZEJhY2soJ1tkYXRhLW1lcmdlXScpLmF0dHIoJ2RhdGEtbWVyZ2UnKSAqIDEgfHwgMSk7XG5cdFx0fSwgdGhpcykpO1xuXG5cdFx0dGhpcy5yZXNldCh0aGlzLmlzTnVtZXJpYyh0aGlzLnNldHRpbmdzLnN0YXJ0UG9zaXRpb24pID8gdGhpcy5zZXR0aW5ncy5zdGFydFBvc2l0aW9uIDogMCk7XG5cblx0XHR0aGlzLmludmFsaWRhdGUoJ2l0ZW1zJyk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEFkZHMgYW4gaXRlbS5cblx0ICogQHRvZG8gVXNlIGBpdGVtYCBpbnN0ZWFkIG9mIGBjb250ZW50YCBmb3IgdGhlIGV2ZW50IGFyZ3VtZW50cy5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge0hUTUxFbGVtZW50fGpRdWVyeXxTdHJpbmd9IGNvbnRlbnQgLSBUaGUgaXRlbSBjb250ZW50IHRvIGFkZC5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtwb3NpdGlvbl0gLSBUaGUgcmVsYXRpdmUgcG9zaXRpb24gYXQgd2hpY2ggdG8gaW5zZXJ0IHRoZSBpdGVtIG90aGVyd2lzZSB0aGUgaXRlbSB3aWxsIGJlIGFkZGVkIHRvIHRoZSBlbmQuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKGNvbnRlbnQsIHBvc2l0aW9uKSB7XG5cdFx0dmFyIGN1cnJlbnQgPSB0aGlzLnJlbGF0aXZlKHRoaXMuX2N1cnJlbnQpO1xuXG5cdFx0cG9zaXRpb24gPSBwb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gdGhpcy5faXRlbXMubGVuZ3RoIDogdGhpcy5ub3JtYWxpemUocG9zaXRpb24sIHRydWUpO1xuXHRcdGNvbnRlbnQgPSBjb250ZW50IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGVudCA6ICQoY29udGVudCk7XG5cblx0XHR0aGlzLnRyaWdnZXIoJ2FkZCcsIHsgY29udGVudDogY29udGVudCwgcG9zaXRpb246IHBvc2l0aW9uIH0pO1xuXG5cdFx0Y29udGVudCA9IHRoaXMucHJlcGFyZShjb250ZW50KTtcblxuXHRcdGlmICh0aGlzLl9pdGVtcy5sZW5ndGggPT09IDAgfHwgcG9zaXRpb24gPT09IHRoaXMuX2l0ZW1zLmxlbmd0aCkge1xuXHRcdFx0dGhpcy5faXRlbXMubGVuZ3RoID09PSAwICYmIHRoaXMuJHN0YWdlLmFwcGVuZChjb250ZW50KTtcblx0XHRcdHRoaXMuX2l0ZW1zLmxlbmd0aCAhPT0gMCAmJiB0aGlzLl9pdGVtc1twb3NpdGlvbiAtIDFdLmFmdGVyKGNvbnRlbnQpO1xuXHRcdFx0dGhpcy5faXRlbXMucHVzaChjb250ZW50KTtcblx0XHRcdHRoaXMuX21lcmdlcnMucHVzaChjb250ZW50LmZpbmQoJ1tkYXRhLW1lcmdlXScpLmFkZEJhY2soJ1tkYXRhLW1lcmdlXScpLmF0dHIoJ2RhdGEtbWVyZ2UnKSAqIDEgfHwgMSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX2l0ZW1zW3Bvc2l0aW9uXS5iZWZvcmUoY29udGVudCk7XG5cdFx0XHR0aGlzLl9pdGVtcy5zcGxpY2UocG9zaXRpb24sIDAsIGNvbnRlbnQpO1xuXHRcdFx0dGhpcy5fbWVyZ2Vycy5zcGxpY2UocG9zaXRpb24sIDAsIGNvbnRlbnQuZmluZCgnW2RhdGEtbWVyZ2VdJykuYWRkQmFjaygnW2RhdGEtbWVyZ2VdJykuYXR0cignZGF0YS1tZXJnZScpICogMSB8fCAxKTtcblx0XHR9XG5cblx0XHR0aGlzLl9pdGVtc1tjdXJyZW50XSAmJiB0aGlzLnJlc2V0KHRoaXMuX2l0ZW1zW2N1cnJlbnRdLmluZGV4KCkpO1xuXG5cdFx0dGhpcy5pbnZhbGlkYXRlKCdpdGVtcycpO1xuXG5cdFx0dGhpcy50cmlnZ2VyKCdhZGRlZCcsIHsgY29udGVudDogY29udGVudCwgcG9zaXRpb246IHBvc2l0aW9uIH0pO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIGFuIGl0ZW0gYnkgaXRzIHBvc2l0aW9uLlxuXHQgKiBAdG9kbyBVc2UgYGl0ZW1gIGluc3RlYWQgb2YgYGNvbnRlbnRgIGZvciB0aGUgZXZlbnQgYXJndW1lbnRzLlxuXHQgKiBAcHVibGljXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvbiAtIFRoZSByZWxhdGl2ZSBwb3NpdGlvbiBvZiB0aGUgaXRlbSB0byByZW1vdmUuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG5cdFx0cG9zaXRpb24gPSB0aGlzLm5vcm1hbGl6ZShwb3NpdGlvbiwgdHJ1ZSk7XG5cblx0XHRpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMudHJpZ2dlcigncmVtb3ZlJywgeyBjb250ZW50OiB0aGlzLl9pdGVtc1twb3NpdGlvbl0sIHBvc2l0aW9uOiBwb3NpdGlvbiB9KTtcblxuXHRcdHRoaXMuX2l0ZW1zW3Bvc2l0aW9uXS5yZW1vdmUoKTtcblx0XHR0aGlzLl9pdGVtcy5zcGxpY2UocG9zaXRpb24sIDEpO1xuXHRcdHRoaXMuX21lcmdlcnMuc3BsaWNlKHBvc2l0aW9uLCAxKTtcblxuXHRcdHRoaXMuaW52YWxpZGF0ZSgnaXRlbXMnKTtcblxuXHRcdHRoaXMudHJpZ2dlcigncmVtb3ZlZCcsIHsgY29udGVudDogbnVsbCwgcG9zaXRpb246IHBvc2l0aW9uIH0pO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBQcmVsb2FkcyBpbWFnZXMgd2l0aCBhdXRvIHdpZHRoLlxuXHQgKiBAdG9kbyBSZXBsYWNlIGJ5IGEgbW9yZSBnZW5lcmljIGFwcHJvYWNoXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdE93bC5wcm90b3R5cGUucHJlbG9hZEF1dG9XaWR0aEltYWdlcyA9IGZ1bmN0aW9uKGltYWdlcykge1xuXHRcdGltYWdlcy5lYWNoKCQucHJveHkoZnVuY3Rpb24oaSwgZWxlbWVudCkge1xuXHRcdFx0dGhpcy5lbnRlcigncHJlLWxvYWRpbmcnKTtcblx0XHRcdGVsZW1lbnQgPSAkKGVsZW1lbnQpO1xuXHRcdFx0JChuZXcgSW1hZ2UoKSkub25lKCdsb2FkJywgJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGVsZW1lbnQuYXR0cignc3JjJywgZS50YXJnZXQuc3JjKTtcblx0XHRcdFx0ZWxlbWVudC5jc3MoJ29wYWNpdHknLCAxKTtcblx0XHRcdFx0dGhpcy5sZWF2ZSgncHJlLWxvYWRpbmcnKTtcblx0XHRcdFx0IXRoaXMuaXMoJ3ByZS1sb2FkaW5nJykgJiYgIXRoaXMuaXMoJ2luaXRpYWxpemluZycpICYmIHRoaXMucmVmcmVzaCgpO1xuXHRcdFx0fSwgdGhpcykpLmF0dHIoJ3NyYycsIGVsZW1lbnQuYXR0cignc3JjJykgfHwgZWxlbWVudC5hdHRyKCdkYXRhLXNyYycpIHx8IGVsZW1lbnQuYXR0cignZGF0YS1zcmMtcmV0aW5hJykpO1xuXHRcdH0sIHRoaXMpKTtcblx0fTtcblxuXHQvKipcblx0ICogRGVzdHJveXMgdGhlIGNhcm91c2VsLlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcblxuXHRcdHRoaXMuJGVsZW1lbnQub2ZmKCcub3dsLmNvcmUnKTtcblx0XHR0aGlzLiRzdGFnZS5vZmYoJy5vd2wuY29yZScpO1xuXHRcdCQoZG9jdW1lbnQpLm9mZignLm93bC5jb3JlJyk7XG5cblx0XHRpZiAodGhpcy5zZXR0aW5ncy5yZXNwb25zaXZlICE9PSBmYWxzZSkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCh0aGlzLnJlc2l6ZVRpbWVyKTtcblx0XHRcdHRoaXMub2ZmKHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuX2hhbmRsZXJzLm9uVGhyb3R0bGVkUmVzaXplKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpIGluIHRoaXMuX3BsdWdpbnMpIHtcblx0XHRcdHRoaXMuX3BsdWdpbnNbaV0uZGVzdHJveSgpO1xuXHRcdH1cblxuXHRcdHRoaXMuJHN0YWdlLmNoaWxkcmVuKCcuY2xvbmVkJykucmVtb3ZlKCk7XG5cblx0XHR0aGlzLiRzdGFnZS51bndyYXAoKTtcblx0XHR0aGlzLiRzdGFnZS5jaGlsZHJlbigpLmNvbnRlbnRzKCkudW53cmFwKCk7XG5cdFx0dGhpcy4kc3RhZ2UuY2hpbGRyZW4oKS51bndyYXAoKTtcblx0XHR0aGlzLiRzdGFnZS5yZW1vdmUoKTtcblx0XHR0aGlzLiRlbGVtZW50XG5cdFx0XHQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLnJlZnJlc2hDbGFzcylcblx0XHRcdC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMubG9hZGluZ0NsYXNzKVxuXHRcdFx0LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5sb2FkZWRDbGFzcylcblx0XHRcdC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMucnRsQ2xhc3MpXG5cdFx0XHQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmRyYWdDbGFzcylcblx0XHRcdC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuZ3JhYkNsYXNzKVxuXHRcdFx0LmF0dHIoJ2NsYXNzJywgdGhpcy4kZWxlbWVudC5hdHRyKCdjbGFzcycpLnJlcGxhY2UobmV3IFJlZ0V4cCh0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZUNsYXNzICsgJy1cXFxcUytcXFxccycsICdnJyksICcnKSlcblx0XHRcdC5yZW1vdmVEYXRhKCdvd2wuY2Fyb3VzZWwnKTtcblx0fTtcblxuXHQvKipcblx0ICogT3BlcmF0b3JzIHRvIGNhbGN1bGF0ZSByaWdodC10by1sZWZ0IGFuZCBsZWZ0LXRvLXJpZ2h0LlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbYV0gLSBUaGUgbGVmdCBzaWRlIG9wZXJhbmQuXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBbb10gLSBUaGUgb3BlcmF0b3IuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbYl0gLSBUaGUgcmlnaHQgc2lkZSBvcGVyYW5kLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5vcCA9IGZ1bmN0aW9uKGEsIG8sIGIpIHtcblx0XHR2YXIgcnRsID0gdGhpcy5zZXR0aW5ncy5ydGw7XG5cdFx0c3dpdGNoIChvKSB7XG5cdFx0XHRjYXNlICc8Jzpcblx0XHRcdFx0cmV0dXJuIHJ0bCA/IGEgPiBiIDogYSA8IGI7XG5cdFx0XHRjYXNlICc+Jzpcblx0XHRcdFx0cmV0dXJuIHJ0bCA/IGEgPCBiIDogYSA+IGI7XG5cdFx0XHRjYXNlICc+PSc6XG5cdFx0XHRcdHJldHVybiBydGwgPyBhIDw9IGIgOiBhID49IGI7XG5cdFx0XHRjYXNlICc8PSc6XG5cdFx0XHRcdHJldHVybiBydGwgPyBhID49IGIgOiBhIDw9IGI7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIEF0dGFjaGVzIHRvIGFuIGludGVybmFsIGV2ZW50LlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBUaGUgZXZlbnQgc291cmNlLlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgLSBUaGUgZXZlbnQgbmFtZS5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgLSBUaGUgZXZlbnQgaGFuZGxlciB0byBhdHRhY2guXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gY2FwdHVyZSAtIFdldGhlciB0aGUgZXZlbnQgc2hvdWxkIGJlIGhhbmRsZWQgYXQgdGhlIGNhcHR1cmluZyBwaGFzZSBvciBub3QuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oZWxlbWVudCwgZXZlbnQsIGxpc3RlbmVyLCBjYXB0dXJlKSB7XG5cdFx0aWYgKGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikge1xuXHRcdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgY2FwdHVyZSk7XG5cdFx0fSBlbHNlIGlmIChlbGVtZW50LmF0dGFjaEV2ZW50KSB7XG5cdFx0XHRlbGVtZW50LmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogRGV0YWNoZXMgZnJvbSBhbiBpbnRlcm5hbCBldmVudC5cblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGV2ZW50IHNvdXJjZS5cblx0ICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IC0gVGhlIGV2ZW50IG5hbWUuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIC0gVGhlIGF0dGFjaGVkIGV2ZW50IGhhbmRsZXIgdG8gZGV0YWNoLlxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IGNhcHR1cmUgLSBXZXRoZXIgdGhlIGF0dGFjaGVkIGV2ZW50IGhhbmRsZXIgd2FzIHJlZ2lzdGVyZWQgYXMgYSBjYXB0dXJpbmcgbGlzdGVuZXIgb3Igbm90LlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbihlbGVtZW50LCBldmVudCwgbGlzdGVuZXIsIGNhcHR1cmUpIHtcblx0XHRpZiAoZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG5cdFx0XHRlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBjYXB0dXJlKTtcblx0XHR9IGVsc2UgaWYgKGVsZW1lbnQuZGV0YWNoRXZlbnQpIHtcblx0XHRcdGVsZW1lbnQuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBUcmlnZ2VycyBhIHB1YmxpYyBldmVudC5cblx0ICogQHRvZG8gUmVtb3ZlIGBzdGF0dXNgLCBgcmVsYXRlZFRhcmdldGAgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZC5cblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAtIFRoZSBldmVudCBuYW1lLlxuXHQgKiBAcGFyYW0geyp9IFtkYXRhPW51bGxdIC0gVGhlIGV2ZW50IGRhdGEuXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZXNwYWNlPWNhcm91c2VsXSAtIFRoZSBldmVudCBuYW1lc3BhY2UuXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBbc3RhdGVdIC0gVGhlIHN0YXRlIHdoaWNoIGlzIGFzc29jaWF0ZWQgd2l0aCB0aGUgZXZlbnQuXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gW2VudGVyPWZhbHNlXSAtIEluZGljYXRlcyBpZiB0aGUgY2FsbCBlbnRlcnMgdGhlIHNwZWNpZmllZCBzdGF0ZSBvciBub3QuXG5cdCAqIEByZXR1cm5zIHtFdmVudH0gLSBUaGUgZXZlbnQgYXJndW1lbnRzLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24obmFtZSwgZGF0YSwgbmFtZXNwYWNlLCBzdGF0ZSwgZW50ZXIpIHtcblx0XHR2YXIgc3RhdHVzID0ge1xuXHRcdFx0aXRlbTogeyBjb3VudDogdGhpcy5faXRlbXMubGVuZ3RoLCBpbmRleDogdGhpcy5jdXJyZW50KCkgfVxuXHRcdH0sIGhhbmRsZXIgPSAkLmNhbWVsQ2FzZShcblx0XHRcdCQuZ3JlcChbICdvbicsIG5hbWUsIG5hbWVzcGFjZSBdLCBmdW5jdGlvbih2KSB7IHJldHVybiB2IH0pXG5cdFx0XHRcdC5qb2luKCctJykudG9Mb3dlckNhc2UoKVxuXHRcdCksIGV2ZW50ID0gJC5FdmVudChcblx0XHRcdFsgbmFtZSwgJ293bCcsIG5hbWVzcGFjZSB8fCAnY2Fyb3VzZWwnIF0uam9pbignLicpLnRvTG93ZXJDYXNlKCksXG5cdFx0XHQkLmV4dGVuZCh7IHJlbGF0ZWRUYXJnZXQ6IHRoaXMgfSwgc3RhdHVzLCBkYXRhKVxuXHRcdCk7XG5cblx0XHRpZiAoIXRoaXMuX3N1cHJlc3NbbmFtZV0pIHtcblx0XHRcdCQuZWFjaCh0aGlzLl9wbHVnaW5zLCBmdW5jdGlvbihuYW1lLCBwbHVnaW4pIHtcblx0XHRcdFx0aWYgKHBsdWdpbi5vblRyaWdnZXIpIHtcblx0XHRcdFx0XHRwbHVnaW4ub25UcmlnZ2VyKGV2ZW50KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMucmVnaXN0ZXIoeyB0eXBlOiBPd2wuVHlwZS5FdmVudCwgbmFtZTogbmFtZSB9KTtcblx0XHRcdHRoaXMuJGVsZW1lbnQudHJpZ2dlcihldmVudCk7XG5cblx0XHRcdGlmICh0aGlzLnNldHRpbmdzICYmIHR5cGVvZiB0aGlzLnNldHRpbmdzW2hhbmRsZXJdID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdHRoaXMuc2V0dGluZ3NbaGFuZGxlcl0uY2FsbCh0aGlzLCBldmVudCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50O1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBFbnRlcnMgYSBzdGF0ZS5cblx0ICogQHBhcmFtIG5hbWUgLSBUaGUgc3RhdGUgbmFtZS5cblx0ICovXG5cdE93bC5wcm90b3R5cGUuZW50ZXIgPSBmdW5jdGlvbihuYW1lKSB7XG5cdFx0JC5lYWNoKFsgbmFtZSBdLmNvbmNhdCh0aGlzLl9zdGF0ZXMudGFnc1tuYW1lXSB8fCBbXSksICQucHJveHkoZnVuY3Rpb24oaSwgbmFtZSkge1xuXHRcdFx0aWYgKHRoaXMuX3N0YXRlcy5jdXJyZW50W25hbWVdID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0dGhpcy5fc3RhdGVzLmN1cnJlbnRbbmFtZV0gPSAwO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9zdGF0ZXMuY3VycmVudFtuYW1lXSsrO1xuXHRcdH0sIHRoaXMpKTtcblx0fTtcblxuXHQvKipcblx0ICogTGVhdmVzIGEgc3RhdGUuXG5cdCAqIEBwYXJhbSBuYW1lIC0gVGhlIHN0YXRlIG5hbWUuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLmxlYXZlID0gZnVuY3Rpb24obmFtZSkge1xuXHRcdCQuZWFjaChbIG5hbWUgXS5jb25jYXQodGhpcy5fc3RhdGVzLnRhZ3NbbmFtZV0gfHwgW10pLCAkLnByb3h5KGZ1bmN0aW9uKGksIG5hbWUpIHtcblx0XHRcdHRoaXMuX3N0YXRlcy5jdXJyZW50W25hbWVdLS07XG5cdFx0fSwgdGhpcykpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBSZWdpc3RlcnMgYW4gZXZlbnQgb3Igc3RhdGUuXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCAtIFRoZSBldmVudCBvciBzdGF0ZSB0byByZWdpc3Rlci5cblx0ICovXG5cdE93bC5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbihvYmplY3QpIHtcblx0XHRpZiAob2JqZWN0LnR5cGUgPT09IE93bC5UeXBlLkV2ZW50KSB7XG5cdFx0XHRpZiAoISQuZXZlbnQuc3BlY2lhbFtvYmplY3QubmFtZV0pIHtcblx0XHRcdFx0JC5ldmVudC5zcGVjaWFsW29iamVjdC5uYW1lXSA9IHt9O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoISQuZXZlbnQuc3BlY2lhbFtvYmplY3QubmFtZV0ub3dsKSB7XG5cdFx0XHRcdHZhciBfZGVmYXVsdCA9ICQuZXZlbnQuc3BlY2lhbFtvYmplY3QubmFtZV0uX2RlZmF1bHQ7XG5cdFx0XHRcdCQuZXZlbnQuc3BlY2lhbFtvYmplY3QubmFtZV0uX2RlZmF1bHQgPSBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdFx0aWYgKF9kZWZhdWx0ICYmIF9kZWZhdWx0LmFwcGx5ICYmICghZS5uYW1lc3BhY2UgfHwgZS5uYW1lc3BhY2UuaW5kZXhPZignb3dsJykgPT09IC0xKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIF9kZWZhdWx0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBlLm5hbWVzcGFjZSAmJiBlLm5hbWVzcGFjZS5pbmRleE9mKCdvd2wnKSA+IC0xO1xuXHRcdFx0XHR9O1xuXHRcdFx0XHQkLmV2ZW50LnNwZWNpYWxbb2JqZWN0Lm5hbWVdLm93bCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChvYmplY3QudHlwZSA9PT0gT3dsLlR5cGUuU3RhdGUpIHtcblx0XHRcdGlmICghdGhpcy5fc3RhdGVzLnRhZ3Nbb2JqZWN0Lm5hbWVdKSB7XG5cdFx0XHRcdHRoaXMuX3N0YXRlcy50YWdzW29iamVjdC5uYW1lXSA9IG9iamVjdC50YWdzO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5fc3RhdGVzLnRhZ3Nbb2JqZWN0Lm5hbWVdID0gdGhpcy5fc3RhdGVzLnRhZ3Nbb2JqZWN0Lm5hbWVdLmNvbmNhdChvYmplY3QudGFncyk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX3N0YXRlcy50YWdzW29iamVjdC5uYW1lXSA9ICQuZ3JlcCh0aGlzLl9zdGF0ZXMudGFnc1tvYmplY3QubmFtZV0sICQucHJveHkoZnVuY3Rpb24odGFnLCBpKSB7XG5cdFx0XHRcdHJldHVybiAkLmluQXJyYXkodGFnLCB0aGlzLl9zdGF0ZXMudGFnc1tvYmplY3QubmFtZV0pID09PSBpO1xuXHRcdFx0fSwgdGhpcykpO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogU3VwcHJlc3NlcyBldmVudHMuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gZXZlbnRzIC0gVGhlIGV2ZW50cyB0byBzdXBwcmVzcy5cblx0ICovXG5cdE93bC5wcm90b3R5cGUuc3VwcHJlc3MgPSBmdW5jdGlvbihldmVudHMpIHtcblx0XHQkLmVhY2goZXZlbnRzLCAkLnByb3h5KGZ1bmN0aW9uKGluZGV4LCBldmVudCkge1xuXHRcdFx0dGhpcy5fc3VwcmVzc1tldmVudF0gPSB0cnVlO1xuXHRcdH0sIHRoaXMpKTtcblx0fTtcblxuXHQvKipcblx0ICogUmVsZWFzZXMgc3VwcHJlc3NlZCBldmVudHMuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gZXZlbnRzIC0gVGhlIGV2ZW50cyB0byByZWxlYXNlLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5yZWxlYXNlID0gZnVuY3Rpb24oZXZlbnRzKSB7XG5cdFx0JC5lYWNoKGV2ZW50cywgJC5wcm94eShmdW5jdGlvbihpbmRleCwgZXZlbnQpIHtcblx0XHRcdGRlbGV0ZSB0aGlzLl9zdXByZXNzW2V2ZW50XTtcblx0XHR9LCB0aGlzKSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEdldHMgdW5pZmllZCBwb2ludGVyIGNvb3JkaW5hdGVzIGZyb20gZXZlbnQuXG5cdCAqIEB0b2RvICMyNjFcblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcGFyYW0ge0V2ZW50fSAtIFRoZSBgbW91c2Vkb3duYCBvciBgdG91Y2hzdGFydGAgZXZlbnQuXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IC0gQ29udGFpbnMgYHhgIGFuZCBgeWAgY29vcmRpbmF0ZXMgb2YgY3VycmVudCBwb2ludGVyIHBvc2l0aW9uLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5wb2ludGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHR2YXIgcmVzdWx0ID0geyB4OiBudWxsLCB5OiBudWxsIH07XG5cblx0XHRldmVudCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQgfHwgZXZlbnQgfHwgd2luZG93LmV2ZW50O1xuXG5cdFx0ZXZlbnQgPSBldmVudC50b3VjaGVzICYmIGV2ZW50LnRvdWNoZXMubGVuZ3RoID9cblx0XHRcdGV2ZW50LnRvdWNoZXNbMF0gOiBldmVudC5jaGFuZ2VkVG91Y2hlcyAmJiBldmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGggP1xuXHRcdFx0XHRldmVudC5jaGFuZ2VkVG91Y2hlc1swXSA6IGV2ZW50O1xuXG5cdFx0aWYgKGV2ZW50LnBhZ2VYKSB7XG5cdFx0XHRyZXN1bHQueCA9IGV2ZW50LnBhZ2VYO1xuXHRcdFx0cmVzdWx0LnkgPSBldmVudC5wYWdlWTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0LnggPSBldmVudC5jbGllbnRYO1xuXHRcdFx0cmVzdWx0LnkgPSBldmVudC5jbGllbnRZO1xuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0LyoqXG5cdCAqIERldGVybWluZXMgaWYgdGhlIGlucHV0IGlzIGEgTnVtYmVyIG9yIHNvbWV0aGluZyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGEgTnVtYmVyXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHBhcmFtIHtOdW1iZXJ8U3RyaW5nfE9iamVjdHxBcnJheXxCb29sZWFufFJlZ0V4cHxGdW5jdGlvbnxTeW1ib2x9IC0gVGhlIGlucHV0IHRvIGJlIHRlc3RlZFxuXHQgKiBAcmV0dXJucyB7Qm9vbGVhbn0gLSBBbiBpbmRpY2F0aW9uIGlmIHRoZSBpbnB1dCBpcyBhIE51bWJlciBvciBjYW4gYmUgY29lcmNlZCB0byBhIE51bWJlclxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5pc051bWVyaWMgPSBmdW5jdGlvbihudW1iZXIpIHtcblx0XHRyZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQobnVtYmVyKSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIGRpZmZlcmVuY2Ugb2YgdHdvIHZlY3RvcnMuXG5cdCAqIEB0b2RvICMyNjFcblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcGFyYW0ge09iamVjdH0gLSBUaGUgZmlyc3QgdmVjdG9yLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gLSBUaGUgc2Vjb25kIHZlY3Rvci5cblx0ICogQHJldHVybnMge09iamVjdH0gLSBUaGUgZGlmZmVyZW5jZS5cblx0ICovXG5cdE93bC5wcm90b3R5cGUuZGlmZmVyZW5jZSA9IGZ1bmN0aW9uKGZpcnN0LCBzZWNvbmQpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0eDogZmlyc3QueCAtIHNlY29uZC54LFxuXHRcdFx0eTogZmlyc3QueSAtIHNlY29uZC55XG5cdFx0fTtcblx0fTtcblxuXHQvKipcblx0ICogVGhlIGpRdWVyeSBQbHVnaW4gZm9yIHRoZSBPd2wgQ2Fyb3VzZWxcblx0ICogQHRvZG8gTmF2aWdhdGlvbiBwbHVnaW4gYG5leHRgIGFuZCBgcHJldmBcblx0ICogQHB1YmxpY1xuXHQgKi9cblx0JC5mbi5vd2xDYXJvdXNlbCA9IGZ1bmN0aW9uKG9wdGlvbikge1xuXHRcdHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgJHRoaXMgPSAkKHRoaXMpLFxuXHRcdFx0XHRkYXRhID0gJHRoaXMuZGF0YSgnb3dsLmNhcm91c2VsJyk7XG5cblx0XHRcdGlmICghZGF0YSkge1xuXHRcdFx0XHRkYXRhID0gbmV3IE93bCh0aGlzLCB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbik7XG5cdFx0XHRcdCR0aGlzLmRhdGEoJ293bC5jYXJvdXNlbCcsIGRhdGEpO1xuXG5cdFx0XHRcdCQuZWFjaChbXG5cdFx0XHRcdFx0J25leHQnLCAncHJldicsICd0bycsICdkZXN0cm95JywgJ3JlZnJlc2gnLCAncmVwbGFjZScsICdhZGQnLCAncmVtb3ZlJ1xuXHRcdFx0XHRdLCBmdW5jdGlvbihpLCBldmVudCkge1xuXHRcdFx0XHRcdGRhdGEucmVnaXN0ZXIoeyB0eXBlOiBPd2wuVHlwZS5FdmVudCwgbmFtZTogZXZlbnQgfSk7XG5cdFx0XHRcdFx0ZGF0YS4kZWxlbWVudC5vbihldmVudCArICcub3dsLmNhcm91c2VsLmNvcmUnLCAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiBlLnJlbGF0ZWRUYXJnZXQgIT09IHRoaXMpIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5zdXBwcmVzcyhbIGV2ZW50IF0pO1xuXHRcdFx0XHRcdFx0XHRkYXRhW2V2ZW50XS5hcHBseSh0aGlzLCBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuXHRcdFx0XHRcdFx0XHR0aGlzLnJlbGVhc2UoWyBldmVudCBdKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LCBkYXRhKSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJyAmJiBvcHRpb24uY2hhckF0KDApICE9PSAnXycpIHtcblx0XHRcdFx0ZGF0YVtvcHRpb25dLmFwcGx5KGRhdGEsIGFyZ3MpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBUaGUgY29uc3RydWN0b3IgZm9yIHRoZSBqUXVlcnkgUGx1Z2luXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdCQuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IgPSBPd2w7XG5cbn0pKHdpbmRvdy5aZXB0byB8fCB3aW5kb3cualF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcblxuLyoqXG4gKiBBdXRvUmVmcmVzaCBQbHVnaW5cbiAqIEB2ZXJzaW9uIDIuMy40XG4gKiBAYXV0aG9yIEFydHVzIEtvbGFub3dza2lcbiAqIEBhdXRob3IgRGF2aWQgRGV1dHNjaFxuICogQGxpY2Vuc2UgVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKi9cbjsoZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgdGhlIGF1dG8gcmVmcmVzaCBwbHVnaW4uXG5cdCAqIEBjbGFzcyBUaGUgQXV0byBSZWZyZXNoIFBsdWdpblxuXHQgKiBAcGFyYW0ge093bH0gY2Fyb3VzZWwgLSBUaGUgT3dsIENhcm91c2VsXG5cdCAqL1xuXHR2YXIgQXV0b1JlZnJlc2ggPSBmdW5jdGlvbihjYXJvdXNlbCkge1xuXHRcdC8qKlxuXHRcdCAqIFJlZmVyZW5jZSB0byB0aGUgY29yZS5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICogQHR5cGUge093bH1cblx0XHQgKi9cblx0XHR0aGlzLl9jb3JlID0gY2Fyb3VzZWw7XG5cblx0XHQvKipcblx0XHQgKiBSZWZyZXNoIGludGVydmFsLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMuX2ludGVydmFsID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIGVsZW1lbnQgaXMgY3VycmVudGx5IHZpc2libGUgb3Igbm90LlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKiBAdHlwZSB7Qm9vbGVhbn1cblx0XHQgKi9cblx0XHR0aGlzLl92aXNpYmxlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEFsbCBldmVudCBoYW5kbGVycy5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLl9oYW5kbGVycyA9IHtcblx0XHRcdCdpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b1JlZnJlc2gpIHtcblx0XHRcdFx0XHR0aGlzLndhdGNoKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpXG5cdFx0fTtcblxuXHRcdC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcblx0XHR0aGlzLl9jb3JlLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQXV0b1JlZnJlc2guRGVmYXVsdHMsIHRoaXMuX2NvcmUub3B0aW9ucyk7XG5cblx0XHQvLyByZWdpc3RlciBldmVudCBoYW5kbGVyc1xuXHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZWZhdWx0IG9wdGlvbnMuXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdEF1dG9SZWZyZXNoLkRlZmF1bHRzID0ge1xuXHRcdGF1dG9SZWZyZXNoOiB0cnVlLFxuXHRcdGF1dG9SZWZyZXNoSW50ZXJ2YWw6IDUwMFxuXHR9O1xuXG5cdC8qKlxuXHQgKiBXYXRjaGVzIHRoZSBlbGVtZW50LlxuXHQgKi9cblx0QXV0b1JlZnJlc2gucHJvdG90eXBlLndhdGNoID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKHRoaXMuX2ludGVydmFsKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5fdmlzaWJsZSA9IHRoaXMuX2NvcmUuaXNWaXNpYmxlKCk7XG5cdFx0dGhpcy5faW50ZXJ2YWwgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoJC5wcm94eSh0aGlzLnJlZnJlc2gsIHRoaXMpLCB0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9SZWZyZXNoSW50ZXJ2YWwpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBSZWZyZXNoZXMgdGhlIGVsZW1lbnQuXG5cdCAqL1xuXHRBdXRvUmVmcmVzaC5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICh0aGlzLl9jb3JlLmlzVmlzaWJsZSgpID09PSB0aGlzLl92aXNpYmxlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5fdmlzaWJsZSA9ICF0aGlzLl92aXNpYmxlO1xuXG5cdFx0dGhpcy5fY29yZS4kZWxlbWVudC50b2dnbGVDbGFzcygnb3dsLWhpZGRlbicsICF0aGlzLl92aXNpYmxlKTtcblxuXHRcdHRoaXMuX3Zpc2libGUgJiYgKHRoaXMuX2NvcmUuaW52YWxpZGF0ZSgnd2lkdGgnKSAmJiB0aGlzLl9jb3JlLnJlZnJlc2goKSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIERlc3Ryb3lzIHRoZSBwbHVnaW4uXG5cdCAqL1xuXHRBdXRvUmVmcmVzaC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBoYW5kbGVyLCBwcm9wZXJ0eTtcblxuXHRcdHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKTtcblxuXHRcdGZvciAoaGFuZGxlciBpbiB0aGlzLl9oYW5kbGVycykge1xuXHRcdFx0dGhpcy5fY29yZS4kZWxlbWVudC5vZmYoaGFuZGxlciwgdGhpcy5faGFuZGxlcnNbaGFuZGxlcl0pO1xuXHRcdH1cblx0XHRmb3IgKHByb3BlcnR5IGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKSB7XG5cdFx0XHR0eXBlb2YgdGhpc1twcm9wZXJ0eV0gIT0gJ2Z1bmN0aW9uJyAmJiAodGhpc1twcm9wZXJ0eV0gPSBudWxsKTtcblx0XHR9XG5cdH07XG5cblx0JC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLkF1dG9SZWZyZXNoID0gQXV0b1JlZnJlc2g7XG5cbn0pKHdpbmRvdy5aZXB0byB8fCB3aW5kb3cualF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcblxuLyoqXG4gKiBMYXp5IFBsdWdpblxuICogQHZlcnNpb24gMi4zLjRcbiAqIEBhdXRob3IgQmFydG9zeiBXb2pjaWVjaG93c2tpXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICovXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIHRoZSBsYXp5IHBsdWdpbi5cblx0ICogQGNsYXNzIFRoZSBMYXp5IFBsdWdpblxuXHQgKiBAcGFyYW0ge093bH0gY2Fyb3VzZWwgLSBUaGUgT3dsIENhcm91c2VsXG5cdCAqL1xuXHR2YXIgTGF6eSA9IGZ1bmN0aW9uKGNhcm91c2VsKSB7XG5cblx0XHQvKipcblx0XHQgKiBSZWZlcmVuY2UgdG8gdGhlIGNvcmUuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtPd2x9XG5cdFx0ICovXG5cdFx0dGhpcy5fY29yZSA9IGNhcm91c2VsO1xuXG5cdFx0LyoqXG5cdFx0ICogQWxyZWFkeSBsb2FkZWQgaXRlbXMuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtBcnJheS48alF1ZXJ5Pn1cblx0XHQgKi9cblx0XHR0aGlzLl9sb2FkZWQgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIEV2ZW50IGhhbmRsZXJzLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMuX2hhbmRsZXJzID0ge1xuXHRcdFx0J2luaXRpYWxpemVkLm93bC5jYXJvdXNlbCBjaGFuZ2Uub3dsLmNhcm91c2VsIHJlc2l6ZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmICghZS5uYW1lc3BhY2UpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIXRoaXMuX2NvcmUuc2V0dGluZ3MgfHwgIXRoaXMuX2NvcmUuc2V0dGluZ3MubGF6eUxvYWQpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoKGUucHJvcGVydHkgJiYgZS5wcm9wZXJ0eS5uYW1lID09ICdwb3NpdGlvbicpIHx8IGUudHlwZSA9PSAnaW5pdGlhbGl6ZWQnKSB7XG5cdFx0XHRcdFx0dmFyIHNldHRpbmdzID0gdGhpcy5fY29yZS5zZXR0aW5ncyxcblx0XHRcdFx0XHRcdG4gPSAoc2V0dGluZ3MuY2VudGVyICYmIE1hdGguY2VpbChzZXR0aW5ncy5pdGVtcyAvIDIpIHx8IHNldHRpbmdzLml0ZW1zKSxcblx0XHRcdFx0XHRcdGkgPSAoKHNldHRpbmdzLmNlbnRlciAmJiBuICogLTEpIHx8IDApLFxuXHRcdFx0XHRcdFx0cG9zaXRpb24gPSAoZS5wcm9wZXJ0eSAmJiBlLnByb3BlcnR5LnZhbHVlICE9PSB1bmRlZmluZWQgPyBlLnByb3BlcnR5LnZhbHVlIDogdGhpcy5fY29yZS5jdXJyZW50KCkpICsgaSxcblx0XHRcdFx0XHRcdGNsb25lcyA9IHRoaXMuX2NvcmUuY2xvbmVzKCkubGVuZ3RoLFxuXHRcdFx0XHRcdFx0bG9hZCA9ICQucHJveHkoZnVuY3Rpb24oaSwgdikgeyB0aGlzLmxvYWQodikgfSwgdGhpcyk7XG5cdFx0XHRcdFx0Ly9UT0RPOiBOZWVkIGRvY3VtZW50YXRpb24gZm9yIHRoaXMgbmV3IG9wdGlvblxuXHRcdFx0XHRcdGlmIChzZXR0aW5ncy5sYXp5TG9hZEVhZ2VyID4gMCkge1xuXHRcdFx0XHRcdFx0biArPSBzZXR0aW5ncy5sYXp5TG9hZEVhZ2VyO1xuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIGNhcm91c2VsIGlzIGxvb3BpbmcgYWxzbyBwcmVsb2FkIGltYWdlcyB0aGF0IGFyZSB0byB0aGUgXCJsZWZ0XCJcblx0XHRcdFx0XHRcdGlmIChzZXR0aW5ncy5sb29wKSB7XG4gICAgICAgICAgICAgIHBvc2l0aW9uIC09IHNldHRpbmdzLmxhenlMb2FkRWFnZXI7XG4gICAgICAgICAgICAgIG4rKztcbiAgICAgICAgICAgIH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR3aGlsZSAoaSsrIDwgbikge1xuXHRcdFx0XHRcdFx0dGhpcy5sb2FkKGNsb25lcyAvIDIgKyB0aGlzLl9jb3JlLnJlbGF0aXZlKHBvc2l0aW9uKSk7XG5cdFx0XHRcdFx0XHRjbG9uZXMgJiYgJC5lYWNoKHRoaXMuX2NvcmUuY2xvbmVzKHRoaXMuX2NvcmUucmVsYXRpdmUocG9zaXRpb24pKSwgbG9hZCk7XG5cdFx0XHRcdFx0XHRwb3NpdGlvbisrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcylcblx0XHR9O1xuXG5cdFx0Ly8gc2V0IHRoZSBkZWZhdWx0IG9wdGlvbnNcblx0XHR0aGlzLl9jb3JlLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgTGF6eS5EZWZhdWx0cywgdGhpcy5fY29yZS5vcHRpb25zKTtcblxuXHRcdC8vIHJlZ2lzdGVyIGV2ZW50IGhhbmRsZXJcblx0XHR0aGlzLl9jb3JlLiRlbGVtZW50Lm9uKHRoaXMuX2hhbmRsZXJzKTtcblx0fTtcblxuXHQvKipcblx0ICogRGVmYXVsdCBvcHRpb25zLlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRMYXp5LkRlZmF1bHRzID0ge1xuXHRcdGxhenlMb2FkOiBmYWxzZSxcblx0XHRsYXp5TG9hZEVhZ2VyOiAwXG5cdH07XG5cblx0LyoqXG5cdCAqIExvYWRzIGFsbCByZXNvdXJjZXMgb2YgYW4gaXRlbSBhdCB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIGl0ZW0uXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdExhenkucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbihwb3NpdGlvbikge1xuXHRcdHZhciAkaXRlbSA9IHRoaXMuX2NvcmUuJHN0YWdlLmNoaWxkcmVuKCkuZXEocG9zaXRpb24pLFxuXHRcdFx0JGVsZW1lbnRzID0gJGl0ZW0gJiYgJGl0ZW0uZmluZCgnLm93bC1sYXp5Jyk7XG5cblx0XHRpZiAoISRlbGVtZW50cyB8fCAkLmluQXJyYXkoJGl0ZW0uZ2V0KDApLCB0aGlzLl9sb2FkZWQpID4gLTEpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQkZWxlbWVudHMuZWFjaCgkLnByb3h5KGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG5cdFx0XHR2YXIgJGVsZW1lbnQgPSAkKGVsZW1lbnQpLCBpbWFnZSxcbiAgICAgICAgICAgICAgICB1cmwgPSAod2luZG93LmRldmljZVBpeGVsUmF0aW8gPiAxICYmICRlbGVtZW50LmF0dHIoJ2RhdGEtc3JjLXJldGluYScpKSB8fCAkZWxlbWVudC5hdHRyKCdkYXRhLXNyYycpIHx8ICRlbGVtZW50LmF0dHIoJ2RhdGEtc3Jjc2V0Jyk7XG5cblx0XHRcdHRoaXMuX2NvcmUudHJpZ2dlcignbG9hZCcsIHsgZWxlbWVudDogJGVsZW1lbnQsIHVybDogdXJsIH0sICdsYXp5Jyk7XG5cblx0XHRcdGlmICgkZWxlbWVudC5pcygnaW1nJykpIHtcblx0XHRcdFx0JGVsZW1lbnQub25lKCdsb2FkLm93bC5sYXp5JywgJC5wcm94eShmdW5jdGlvbigpIHtcblx0XHRcdFx0XHQkZWxlbWVudC5jc3MoJ29wYWNpdHknLCAxKTtcblx0XHRcdFx0XHR0aGlzLl9jb3JlLnRyaWdnZXIoJ2xvYWRlZCcsIHsgZWxlbWVudDogJGVsZW1lbnQsIHVybDogdXJsIH0sICdsYXp5Jyk7XG5cdFx0XHRcdH0sIHRoaXMpKS5hdHRyKCdzcmMnLCB1cmwpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgkZWxlbWVudC5pcygnc291cmNlJykpIHtcbiAgICAgICAgICAgICAgICAkZWxlbWVudC5vbmUoJ2xvYWQub3dsLmxhenknLCAkLnByb3h5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb3JlLnRyaWdnZXIoJ2xvYWRlZCcsIHsgZWxlbWVudDogJGVsZW1lbnQsIHVybDogdXJsIH0sICdsYXp5Jyk7XG4gICAgICAgICAgICAgICAgfSwgdGhpcykpLmF0dHIoJ3NyY3NldCcsIHVybCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpbWFnZSA9IG5ldyBJbWFnZSgpO1xuXHRcdFx0XHRpbWFnZS5vbmxvYWQgPSAkLnByb3h5KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdCRlbGVtZW50LmNzcyh7XG5cdFx0XHRcdFx0XHQnYmFja2dyb3VuZC1pbWFnZSc6ICd1cmwoXCInICsgdXJsICsgJ1wiKScsXG5cdFx0XHRcdFx0XHQnb3BhY2l0eSc6ICcxJ1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHRoaXMuX2NvcmUudHJpZ2dlcignbG9hZGVkJywgeyBlbGVtZW50OiAkZWxlbWVudCwgdXJsOiB1cmwgfSwgJ2xhenknKTtcblx0XHRcdFx0fSwgdGhpcyk7XG5cdFx0XHRcdGltYWdlLnNyYyA9IHVybDtcblx0XHRcdH1cblx0XHR9LCB0aGlzKSk7XG5cblx0XHR0aGlzLl9sb2FkZWQucHVzaCgkaXRlbS5nZXQoMCkpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZXN0cm95cyB0aGUgcGx1Z2luLlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRMYXp5LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhhbmRsZXIsIHByb3BlcnR5O1xuXG5cdFx0Zm9yIChoYW5kbGVyIGluIHRoaXMuaGFuZGxlcnMpIHtcblx0XHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGhhbmRsZXIsIHRoaXMuaGFuZGxlcnNbaGFuZGxlcl0pO1xuXHRcdH1cblx0XHRmb3IgKHByb3BlcnR5IGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKSB7XG5cdFx0XHR0eXBlb2YgdGhpc1twcm9wZXJ0eV0gIT0gJ2Z1bmN0aW9uJyAmJiAodGhpc1twcm9wZXJ0eV0gPSBudWxsKTtcblx0XHR9XG5cdH07XG5cblx0JC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLkxhenkgPSBMYXp5O1xuXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XG5cbi8qKlxuICogQXV0b0hlaWdodCBQbHVnaW5cbiAqIEB2ZXJzaW9uIDIuMy40XG4gKiBAYXV0aG9yIEJhcnRvc3ogV29qY2llY2hvd3NraVxuICogQGF1dGhvciBEYXZpZCBEZXV0c2NoXG4gKiBAbGljZW5zZSBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqL1xuOyhmdW5jdGlvbigkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcblxuXHQvKipcblx0ICogQ3JlYXRlcyB0aGUgYXV0byBoZWlnaHQgcGx1Z2luLlxuXHQgKiBAY2xhc3MgVGhlIEF1dG8gSGVpZ2h0IFBsdWdpblxuXHQgKiBAcGFyYW0ge093bH0gY2Fyb3VzZWwgLSBUaGUgT3dsIENhcm91c2VsXG5cdCAqL1xuXHR2YXIgQXV0b0hlaWdodCA9IGZ1bmN0aW9uKGNhcm91c2VsKSB7XG5cdFx0LyoqXG5cdFx0ICogUmVmZXJlbmNlIHRvIHRoZSBjb3JlLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKiBAdHlwZSB7T3dsfVxuXHRcdCAqL1xuXHRcdHRoaXMuX2NvcmUgPSBjYXJvdXNlbDtcblxuXHRcdHRoaXMuX3ByZXZpb3VzSGVpZ2h0ID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEFsbCBldmVudCBoYW5kbGVycy5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLl9oYW5kbGVycyA9IHtcblx0XHRcdCdpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwgcmVmcmVzaGVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvSGVpZ2h0KSB7XG5cdFx0XHRcdFx0dGhpcy51cGRhdGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyksXG5cdFx0XHQnY2hhbmdlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b0hlaWdodCAmJiBlLnByb3BlcnR5Lm5hbWUgPT09ICdwb3NpdGlvbicpe1xuXHRcdFx0XHRcdHRoaXMudXBkYXRlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpLFxuXHRcdFx0J2xvYWRlZC5vd2wubGF6eSc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvSGVpZ2h0XG5cdFx0XHRcdFx0JiYgZS5lbGVtZW50LmNsb3Nlc3QoJy4nICsgdGhpcy5fY29yZS5zZXR0aW5ncy5pdGVtQ2xhc3MpLmluZGV4KCkgPT09IHRoaXMuX2NvcmUuY3VycmVudCgpKSB7XG5cdFx0XHRcdFx0dGhpcy51cGRhdGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcylcblx0XHR9O1xuXG5cdFx0Ly8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuXHRcdHRoaXMuX2NvcmUub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBBdXRvSGVpZ2h0LkRlZmF1bHRzLCB0aGlzLl9jb3JlLm9wdGlvbnMpO1xuXG5cdFx0Ly8gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnNcblx0XHR0aGlzLl9jb3JlLiRlbGVtZW50Lm9uKHRoaXMuX2hhbmRsZXJzKTtcblx0XHR0aGlzLl9pbnRlcnZhbElkID0gbnVsbDtcblx0XHR2YXIgcmVmVGhpcyA9IHRoaXM7XG5cblx0XHQvLyBUaGVzZSBjaGFuZ2VzIGhhdmUgYmVlbiB0YWtlbiBmcm9tIGEgUFIgYnkgZ2F2cm9jaGVsZWdub3UgcHJvcG9zZWQgaW4gIzE1NzVcblx0XHQvLyBhbmQgaGF2ZSBiZWVuIG1hZGUgY29tcGF0aWJsZSB3aXRoIHRoZSBsYXRlc3QgalF1ZXJ5IHZlcnNpb25cblx0XHQkKHdpbmRvdykub24oJ2xvYWQnLCBmdW5jdGlvbigpIHtcblx0XHRcdGlmIChyZWZUaGlzLl9jb3JlLnNldHRpbmdzLmF1dG9IZWlnaHQpIHtcblx0XHRcdFx0cmVmVGhpcy51cGRhdGUoKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIEF1dG9yZXNpemUgdGhlIGhlaWdodCBvZiB0aGUgY2Fyb3VzZWwgd2hlbiB3aW5kb3cgaXMgcmVzaXplZFxuXHRcdC8vIFdoZW4gY2Fyb3VzZWwgaGFzIGltYWdlcywgdGhlIGhlaWdodCBpcyBkZXBlbmRlbnQgb24gdGhlIHdpZHRoXG5cdFx0Ly8gYW5kIHNob3VsZCBhbHNvIGNoYW5nZSBvbiByZXNpemVcblx0XHQkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKHJlZlRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b0hlaWdodCkge1xuXHRcdFx0XHRpZiAocmVmVGhpcy5faW50ZXJ2YWxJZCAhPSBudWxsKSB7XG5cdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KHJlZlRoaXMuX2ludGVydmFsSWQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVmVGhpcy5faW50ZXJ2YWxJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmVmVGhpcy51cGRhdGUoKTtcblx0XHRcdFx0fSwgMjUwKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZWZhdWx0IG9wdGlvbnMuXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdEF1dG9IZWlnaHQuRGVmYXVsdHMgPSB7XG5cdFx0YXV0b0hlaWdodDogZmFsc2UsXG5cdFx0YXV0b0hlaWdodENsYXNzOiAnb3dsLWhlaWdodCdcblx0fTtcblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgdmlldy5cblx0ICovXG5cdEF1dG9IZWlnaHQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBzdGFydCA9IHRoaXMuX2NvcmUuX2N1cnJlbnQsXG5cdFx0XHRlbmQgPSBzdGFydCArIHRoaXMuX2NvcmUuc2V0dGluZ3MuaXRlbXMsXG5cdFx0XHRsYXp5TG9hZEVuYWJsZWQgPSB0aGlzLl9jb3JlLnNldHRpbmdzLmxhenlMb2FkLFxuXHRcdFx0dmlzaWJsZSA9IHRoaXMuX2NvcmUuJHN0YWdlLmNoaWxkcmVuKCkudG9BcnJheSgpLnNsaWNlKHN0YXJ0LCBlbmQpLFxuXHRcdFx0aGVpZ2h0cyA9IFtdLFxuXHRcdFx0bWF4aGVpZ2h0ID0gMDtcblxuXHRcdCQuZWFjaCh2aXNpYmxlLCBmdW5jdGlvbihpbmRleCwgaXRlbSkge1xuXHRcdFx0aGVpZ2h0cy5wdXNoKCQoaXRlbSkuaGVpZ2h0KCkpO1xuXHRcdH0pO1xuXG5cdFx0bWF4aGVpZ2h0ID0gTWF0aC5tYXguYXBwbHkobnVsbCwgaGVpZ2h0cyk7XG5cblx0XHRpZiAobWF4aGVpZ2h0IDw9IDEgJiYgbGF6eUxvYWRFbmFibGVkICYmIHRoaXMuX3ByZXZpb3VzSGVpZ2h0KSB7XG5cdFx0XHRtYXhoZWlnaHQgPSB0aGlzLl9wcmV2aW91c0hlaWdodDtcblx0XHR9XG5cblx0XHR0aGlzLl9wcmV2aW91c0hlaWdodCA9IG1heGhlaWdodDtcblxuXHRcdHRoaXMuX2NvcmUuJHN0YWdlLnBhcmVudCgpXG5cdFx0XHQuaGVpZ2h0KG1heGhlaWdodClcblx0XHRcdC5hZGRDbGFzcyh0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9IZWlnaHRDbGFzcyk7XG5cdH07XG5cblx0QXV0b0hlaWdodC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBoYW5kbGVyLCBwcm9wZXJ0eTtcblxuXHRcdGZvciAoaGFuZGxlciBpbiB0aGlzLl9oYW5kbGVycykge1xuXHRcdFx0dGhpcy5fY29yZS4kZWxlbWVudC5vZmYoaGFuZGxlciwgdGhpcy5faGFuZGxlcnNbaGFuZGxlcl0pO1xuXHRcdH1cblx0XHRmb3IgKHByb3BlcnR5IGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKSB7XG5cdFx0XHR0eXBlb2YgdGhpc1twcm9wZXJ0eV0gIT09ICdmdW5jdGlvbicgJiYgKHRoaXNbcHJvcGVydHldID0gbnVsbCk7XG5cdFx0fVxuXHR9O1xuXG5cdCQuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5BdXRvSGVpZ2h0ID0gQXV0b0hlaWdodDtcblxufSkod2luZG93LlplcHRvIHx8IHdpbmRvdy5qUXVlcnksIHdpbmRvdywgZG9jdW1lbnQpO1xuXG4vKipcbiAqIFZpZGVvIFBsdWdpblxuICogQHZlcnNpb24gMi4zLjRcbiAqIEBhdXRob3IgQmFydG9zeiBXb2pjaWVjaG93c2tpXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICovXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIHRoZSB2aWRlbyBwbHVnaW4uXG5cdCAqIEBjbGFzcyBUaGUgVmlkZW8gUGx1Z2luXG5cdCAqIEBwYXJhbSB7T3dsfSBjYXJvdXNlbCAtIFRoZSBPd2wgQ2Fyb3VzZWxcblx0ICovXG5cdHZhciBWaWRlbyA9IGZ1bmN0aW9uKGNhcm91c2VsKSB7XG5cdFx0LyoqXG5cdFx0ICogUmVmZXJlbmNlIHRvIHRoZSBjb3JlLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKiBAdHlwZSB7T3dsfVxuXHRcdCAqL1xuXHRcdHRoaXMuX2NvcmUgPSBjYXJvdXNlbDtcblxuXHRcdC8qKlxuXHRcdCAqIENhY2hlIGFsbCB2aWRlbyBVUkxzLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMuX3ZpZGVvcyA9IHt9O1xuXG5cdFx0LyoqXG5cdFx0ICogQ3VycmVudCBwbGF5aW5nIGl0ZW0uXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtqUXVlcnl9XG5cdFx0ICovXG5cdFx0dGhpcy5fcGxheWluZyA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBbGwgZXZlbnQgaGFuZGxlcnMuXG5cdFx0ICogQHRvZG8gVGhlIGNsb25lZCBjb250ZW50IHJlbW92YWxlIGlzIHRvbyBsYXRlXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5faGFuZGxlcnMgPSB7XG5cdFx0XHQnaW5pdGlhbGl6ZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSkge1xuXHRcdFx0XHRcdHRoaXMuX2NvcmUucmVnaXN0ZXIoeyB0eXBlOiAnc3RhdGUnLCBuYW1lOiAncGxheWluZycsIHRhZ3M6IFsgJ2ludGVyYWN0aW5nJyBdIH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKSxcblx0XHRcdCdyZXNpemUub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLnZpZGVvICYmIHRoaXMuaXNJbkZ1bGxTY3JlZW4oKSkge1xuXHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyksXG5cdFx0XHQncmVmcmVzaGVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5pcygncmVzaXppbmcnKSkge1xuXHRcdFx0XHRcdHRoaXMuX2NvcmUuJHN0YWdlLmZpbmQoJy5jbG9uZWQgLm93bC12aWRlby1mcmFtZScpLnJlbW92ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKSxcblx0XHRcdCdjaGFuZ2VkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgZS5wcm9wZXJ0eS5uYW1lID09PSAncG9zaXRpb24nICYmIHRoaXMuX3BsYXlpbmcpIHtcblx0XHRcdFx0XHR0aGlzLnN0b3AoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyksXG5cdFx0XHQncHJlcGFyZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmICghZS5uYW1lc3BhY2UpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgJGVsZW1lbnQgPSAkKGUuY29udGVudCkuZmluZCgnLm93bC12aWRlbycpO1xuXG5cdFx0XHRcdGlmICgkZWxlbWVudC5sZW5ndGgpIHtcblx0XHRcdFx0XHQkZWxlbWVudC5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xuXHRcdFx0XHRcdHRoaXMuZmV0Y2goJGVsZW1lbnQsICQoZS5jb250ZW50KSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpXG5cdFx0fTtcblxuXHRcdC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcblx0XHR0aGlzLl9jb3JlLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgVmlkZW8uRGVmYXVsdHMsIHRoaXMuX2NvcmUub3B0aW9ucyk7XG5cblx0XHQvLyByZWdpc3RlciBldmVudCBoYW5kbGVyc1xuXHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpO1xuXG5cdFx0dGhpcy5fY29yZS4kZWxlbWVudC5vbignY2xpY2sub3dsLnZpZGVvJywgJy5vd2wtdmlkZW8tcGxheS1pY29uJywgJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHR0aGlzLnBsYXkoZSk7XG5cdFx0fSwgdGhpcykpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZWZhdWx0IG9wdGlvbnMuXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdFZpZGVvLkRlZmF1bHRzID0ge1xuXHRcdHZpZGVvOiBmYWxzZSxcblx0XHR2aWRlb0hlaWdodDogZmFsc2UsXG5cdFx0dmlkZW9XaWR0aDogZmFsc2Vcblx0fTtcblxuXHQvKipcblx0ICogR2V0cyB0aGUgdmlkZW8gSUQgYW5kIHRoZSB0eXBlIChZb3VUdWJlL1ZpbWVvL3Z6YWFyIG9ubHkpLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBwYXJhbSB7alF1ZXJ5fSB0YXJnZXQgLSBUaGUgdGFyZ2V0IGNvbnRhaW5pbmcgdGhlIHZpZGVvIGRhdGEuXG5cdCAqIEBwYXJhbSB7alF1ZXJ5fSBpdGVtIC0gVGhlIGl0ZW0gY29udGFpbmluZyB0aGUgdmlkZW8uXG5cdCAqL1xuXHRWaWRlby5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbih0YXJnZXQsIGl0ZW0pIHtcblx0XHRcdHZhciB0eXBlID0gKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICh0YXJnZXQuYXR0cignZGF0YS12aW1lby1pZCcpKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gJ3ZpbWVvJztcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHRhcmdldC5hdHRyKCdkYXRhLXZ6YWFyLWlkJykpIHtcblx0XHRcdFx0XHRcdHJldHVybiAndnphYXInXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiAneW91dHViZSc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSgpLFxuXHRcdFx0XHRpZCA9IHRhcmdldC5hdHRyKCdkYXRhLXZpbWVvLWlkJykgfHwgdGFyZ2V0LmF0dHIoJ2RhdGEteW91dHViZS1pZCcpIHx8IHRhcmdldC5hdHRyKCdkYXRhLXZ6YWFyLWlkJyksXG5cdFx0XHRcdHdpZHRoID0gdGFyZ2V0LmF0dHIoJ2RhdGEtd2lkdGgnKSB8fCB0aGlzLl9jb3JlLnNldHRpbmdzLnZpZGVvV2lkdGgsXG5cdFx0XHRcdGhlaWdodCA9IHRhcmdldC5hdHRyKCdkYXRhLWhlaWdodCcpIHx8IHRoaXMuX2NvcmUuc2V0dGluZ3MudmlkZW9IZWlnaHQsXG5cdFx0XHRcdHVybCA9IHRhcmdldC5hdHRyKCdocmVmJyk7XG5cblx0XHRpZiAodXJsKSB7XG5cblx0XHRcdC8qXG5cdFx0XHRcdFx0UGFyc2VzIHRoZSBpZCdzIG91dCBvZiB0aGUgZm9sbG93aW5nIHVybHMgKGFuZCBwcm9iYWJseSBtb3JlKTpcblx0XHRcdFx0XHRodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTppZFxuXHRcdFx0XHRcdGh0dHBzOi8veW91dHUuYmUvOmlkXG5cdFx0XHRcdFx0aHR0cHM6Ly92aW1lby5jb20vOmlkXG5cdFx0XHRcdFx0aHR0cHM6Ly92aW1lby5jb20vY2hhbm5lbHMvOmNoYW5uZWwvOmlkXG5cdFx0XHRcdFx0aHR0cHM6Ly92aW1lby5jb20vZ3JvdXBzLzpncm91cC92aWRlb3MvOmlkXG5cdFx0XHRcdFx0aHR0cHM6Ly9hcHAudnphYXIuY29tL3ZpZGVvcy86aWRcblxuXHRcdFx0XHRcdFZpc3VhbCBleGFtcGxlOiBodHRwczovL3JlZ2V4cGVyLmNvbS8jKGh0dHAlM0ElN0NodHRwcyUzQSU3QyklNUMlMkYlNUMlMkYocGxheWVyLiU3Q3d3dy4lN0NhcHAuKSUzRih2aW1lbyU1Qy5jb20lN0N5b3V0dShiZSU1Qy5jb20lN0MlNUMuYmUlN0NiZSU1Qy5nb29nbGVhcGlzJTVDLmNvbSklN0N2emFhciU1Qy5jb20pJTVDJTJGKHZpZGVvJTVDJTJGJTdDdmlkZW9zJTVDJTJGJTdDZW1iZWQlNUMlMkYlN0NjaGFubmVscyU1QyUyRi4lMkIlNUMlMkYlN0Nncm91cHMlNUMlMkYuJTJCJTVDJTJGJTdDd2F0Y2glNUMlM0Z2JTNEJTdDdiU1QyUyRiklM0YoJTVCQS1aYS16MC05Ll8lMjUtJTVEKikoJTVDJTI2JTVDUyUyQiklM0Zcblx0XHRcdCovXG5cblx0XHRcdGlkID0gdXJsLm1hdGNoKC8oaHR0cDp8aHR0cHM6fClcXC9cXC8ocGxheWVyLnx3d3cufGFwcC4pPyh2aW1lb1xcLmNvbXx5b3V0dShiZVxcLmNvbXxcXC5iZXxiZVxcLmdvb2dsZWFwaXNcXC5jb218YmVcXC1ub2Nvb2tpZVxcLmNvbSl8dnphYXJcXC5jb20pXFwvKHZpZGVvXFwvfHZpZGVvc1xcL3xlbWJlZFxcL3xjaGFubmVsc1xcLy4rXFwvfGdyb3Vwc1xcLy4rXFwvfHdhdGNoXFw/dj18dlxcLyk/KFtBLVphLXowLTkuXyUtXSopKFxcJlxcUyspPy8pO1xuXG5cdFx0XHRpZiAoaWRbM10uaW5kZXhPZigneW91dHUnKSA+IC0xKSB7XG5cdFx0XHRcdHR5cGUgPSAneW91dHViZSc7XG5cdFx0XHR9IGVsc2UgaWYgKGlkWzNdLmluZGV4T2YoJ3ZpbWVvJykgPiAtMSkge1xuXHRcdFx0XHR0eXBlID0gJ3ZpbWVvJztcblx0XHRcdH0gZWxzZSBpZiAoaWRbM10uaW5kZXhPZigndnphYXInKSA+IC0xKSB7XG5cdFx0XHRcdHR5cGUgPSAndnphYXInO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdWaWRlbyBVUkwgbm90IHN1cHBvcnRlZC4nKTtcblx0XHRcdH1cblx0XHRcdGlkID0gaWRbNl07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignTWlzc2luZyB2aWRlbyBVUkwuJyk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fdmlkZW9zW3VybF0gPSB7XG5cdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0aWQ6IGlkLFxuXHRcdFx0d2lkdGg6IHdpZHRoLFxuXHRcdFx0aGVpZ2h0OiBoZWlnaHRcblx0XHR9O1xuXG5cdFx0aXRlbS5hdHRyKCdkYXRhLXZpZGVvJywgdXJsKTtcblxuXHRcdHRoaXMudGh1bWJuYWlsKHRhcmdldCwgdGhpcy5fdmlkZW9zW3VybF0pO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIHZpZGVvIHRodW1ibmFpbC5cblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcGFyYW0ge2pRdWVyeX0gdGFyZ2V0IC0gVGhlIHRhcmdldCBjb250YWluaW5nIHRoZSB2aWRlbyBkYXRhLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gaW5mbyAtIFRoZSB2aWRlbyBpbmZvIG9iamVjdC5cblx0ICogQHNlZSBgZmV0Y2hgXG5cdCAqL1xuXHRWaWRlby5wcm90b3R5cGUudGh1bWJuYWlsID0gZnVuY3Rpb24odGFyZ2V0LCB2aWRlbykge1xuXHRcdHZhciB0bkxpbmssXG5cdFx0XHRpY29uLFxuXHRcdFx0cGF0aCxcblx0XHRcdGRpbWVuc2lvbnMgPSB2aWRlby53aWR0aCAmJiB2aWRlby5oZWlnaHQgPyAnd2lkdGg6JyArIHZpZGVvLndpZHRoICsgJ3B4O2hlaWdodDonICsgdmlkZW8uaGVpZ2h0ICsgJ3B4OycgOiAnJyxcblx0XHRcdGN1c3RvbVRuID0gdGFyZ2V0LmZpbmQoJ2ltZycpLFxuXHRcdFx0c3JjVHlwZSA9ICdzcmMnLFxuXHRcdFx0bGF6eUNsYXNzID0gJycsXG5cdFx0XHRzZXR0aW5ncyA9IHRoaXMuX2NvcmUuc2V0dGluZ3MsXG5cdFx0XHRjcmVhdGUgPSBmdW5jdGlvbihwYXRoKSB7XG5cdFx0XHRcdGljb24gPSAnPGRpdiBjbGFzcz1cIm93bC12aWRlby1wbGF5LWljb25cIj48L2Rpdj4nO1xuXG5cdFx0XHRcdGlmIChzZXR0aW5ncy5sYXp5TG9hZCkge1xuXHRcdFx0XHRcdHRuTGluayA9ICQoJzxkaXYvPicse1xuXHRcdFx0XHRcdFx0XCJjbGFzc1wiOiAnb3dsLXZpZGVvLXRuICcgKyBsYXp5Q2xhc3MsXG5cdFx0XHRcdFx0XHRcInNyY1R5cGVcIjogcGF0aFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRuTGluayA9ICQoICc8ZGl2Lz4nLCB7XG5cdFx0XHRcdFx0XHRcImNsYXNzXCI6IFwib3dsLXZpZGVvLXRuXCIsXG5cdFx0XHRcdFx0XHRcInN0eWxlXCI6ICdvcGFjaXR5OjE7YmFja2dyb3VuZC1pbWFnZTp1cmwoJyArIHBhdGggKyAnKSdcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0YXJnZXQuYWZ0ZXIodG5MaW5rKTtcblx0XHRcdFx0dGFyZ2V0LmFmdGVyKGljb24pO1xuXHRcdFx0fTtcblxuXHRcdC8vIHdyYXAgdmlkZW8gY29udGVudCBpbnRvIG93bC12aWRlby13cmFwcGVyIGRpdlxuXHRcdHRhcmdldC53cmFwKCAkKCAnPGRpdi8+Jywge1xuXHRcdFx0XCJjbGFzc1wiOiBcIm93bC12aWRlby13cmFwcGVyXCIsXG5cdFx0XHRcInN0eWxlXCI6IGRpbWVuc2lvbnNcblx0XHR9KSk7XG5cblx0XHRpZiAodGhpcy5fY29yZS5zZXR0aW5ncy5sYXp5TG9hZCkge1xuXHRcdFx0c3JjVHlwZSA9ICdkYXRhLXNyYyc7XG5cdFx0XHRsYXp5Q2xhc3MgPSAnb3dsLWxhenknO1xuXHRcdH1cblxuXHRcdC8vIGN1c3RvbSB0aHVtYm5haWxcblx0XHRpZiAoY3VzdG9tVG4ubGVuZ3RoKSB7XG5cdFx0XHRjcmVhdGUoY3VzdG9tVG4uYXR0cihzcmNUeXBlKSk7XG5cdFx0XHRjdXN0b21Ubi5yZW1vdmUoKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAodmlkZW8udHlwZSA9PT0gJ3lvdXR1YmUnKSB7XG5cdFx0XHRwYXRoID0gXCIvL2ltZy55b3V0dWJlLmNvbS92aS9cIiArIHZpZGVvLmlkICsgXCIvaHFkZWZhdWx0LmpwZ1wiO1xuXHRcdFx0Y3JlYXRlKHBhdGgpO1xuXHRcdH0gZWxzZSBpZiAodmlkZW8udHlwZSA9PT0gJ3ZpbWVvJykge1xuXHRcdFx0JC5hamF4KHtcblx0XHRcdFx0dHlwZTogJ0dFVCcsXG5cdFx0XHRcdHVybDogJy8vdmltZW8uY29tL2FwaS92Mi92aWRlby8nICsgdmlkZW8uaWQgKyAnLmpzb24nLFxuXHRcdFx0XHRqc29ucDogJ2NhbGxiYWNrJyxcblx0XHRcdFx0ZGF0YVR5cGU6ICdqc29ucCcsXG5cdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcblx0XHRcdFx0XHRwYXRoID0gZGF0YVswXS50aHVtYm5haWxfbGFyZ2U7XG5cdFx0XHRcdFx0Y3JlYXRlKHBhdGgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9IGVsc2UgaWYgKHZpZGVvLnR5cGUgPT09ICd2emFhcicpIHtcblx0XHRcdCQuYWpheCh7XG5cdFx0XHRcdHR5cGU6ICdHRVQnLFxuXHRcdFx0XHR1cmw6ICcvL3Z6YWFyLmNvbS9hcGkvdmlkZW9zLycgKyB2aWRlby5pZCArICcuanNvbicsXG5cdFx0XHRcdGpzb25wOiAnY2FsbGJhY2snLFxuXHRcdFx0XHRkYXRhVHlwZTogJ2pzb25wJyxcblx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0XHRcdHBhdGggPSBkYXRhLmZyYW1lZ3JhYl91cmw7XG5cdFx0XHRcdFx0Y3JlYXRlKHBhdGgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIFN0b3BzIHRoZSBjdXJyZW50IHZpZGVvLlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRWaWRlby5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX2NvcmUudHJpZ2dlcignc3RvcCcsIG51bGwsICd2aWRlbycpO1xuXHRcdHRoaXMuX3BsYXlpbmcuZmluZCgnLm93bC12aWRlby1mcmFtZScpLnJlbW92ZSgpO1xuXHRcdHRoaXMuX3BsYXlpbmcucmVtb3ZlQ2xhc3MoJ293bC12aWRlby1wbGF5aW5nJyk7XG5cdFx0dGhpcy5fcGxheWluZyA9IG51bGw7XG5cdFx0dGhpcy5fY29yZS5sZWF2ZSgncGxheWluZycpO1xuXHRcdHRoaXMuX2NvcmUudHJpZ2dlcignc3RvcHBlZCcsIG51bGwsICd2aWRlbycpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBTdGFydHMgdGhlIGN1cnJlbnQgdmlkZW8uXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBUaGUgZXZlbnQgYXJndW1lbnRzLlxuXHQgKi9cblx0VmlkZW8ucHJvdG90eXBlLnBsYXkgPSBmdW5jdGlvbihldmVudCkge1xuXHRcdHZhciB0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCksXG5cdFx0XHRpdGVtID0gdGFyZ2V0LmNsb3Nlc3QoJy4nICsgdGhpcy5fY29yZS5zZXR0aW5ncy5pdGVtQ2xhc3MpLFxuXHRcdFx0dmlkZW8gPSB0aGlzLl92aWRlb3NbaXRlbS5hdHRyKCdkYXRhLXZpZGVvJyldLFxuXHRcdFx0d2lkdGggPSB2aWRlby53aWR0aCB8fCAnMTAwJScsXG5cdFx0XHRoZWlnaHQgPSB2aWRlby5oZWlnaHQgfHwgdGhpcy5fY29yZS4kc3RhZ2UuaGVpZ2h0KCksXG5cdFx0XHRodG1sLFxuXHRcdFx0aWZyYW1lO1xuXG5cdFx0aWYgKHRoaXMuX3BsYXlpbmcpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLl9jb3JlLmVudGVyKCdwbGF5aW5nJyk7XG5cdFx0dGhpcy5fY29yZS50cmlnZ2VyKCdwbGF5JywgbnVsbCwgJ3ZpZGVvJyk7XG5cblx0XHRpdGVtID0gdGhpcy5fY29yZS5pdGVtcyh0aGlzLl9jb3JlLnJlbGF0aXZlKGl0ZW0uaW5kZXgoKSkpO1xuXG5cdFx0dGhpcy5fY29yZS5yZXNldChpdGVtLmluZGV4KCkpO1xuXG5cdFx0aHRtbCA9ICQoICc8aWZyYW1lIGZyYW1lYm9yZGVyPVwiMFwiIGFsbG93ZnVsbHNjcmVlbiBtb3phbGxvd2Z1bGxzY3JlZW4gd2Via2l0QWxsb3dGdWxsU2NyZWVuID48L2lmcmFtZT4nICk7XG5cdFx0aHRtbC5hdHRyKCAnaGVpZ2h0JywgaGVpZ2h0ICk7XG5cdFx0aHRtbC5hdHRyKCAnd2lkdGgnLCB3aWR0aCApO1xuXHRcdGlmICh2aWRlby50eXBlID09PSAneW91dHViZScpIHtcblx0XHRcdGh0bWwuYXR0ciggJ3NyYycsICcvL3d3dy55b3V0dWJlLmNvbS9lbWJlZC8nICsgdmlkZW8uaWQgKyAnP2F1dG9wbGF5PTEmcmVsPTAmdj0nICsgdmlkZW8uaWQgKTtcblx0XHR9IGVsc2UgaWYgKHZpZGVvLnR5cGUgPT09ICd2aW1lbycpIHtcblx0XHRcdGh0bWwuYXR0ciggJ3NyYycsICcvL3BsYXllci52aW1lby5jb20vdmlkZW8vJyArIHZpZGVvLmlkICsgJz9hdXRvcGxheT0xJyApO1xuXHRcdH0gZWxzZSBpZiAodmlkZW8udHlwZSA9PT0gJ3Z6YWFyJykge1xuXHRcdFx0aHRtbC5hdHRyKCAnc3JjJywgJy8vdmlldy52emFhci5jb20vJyArIHZpZGVvLmlkICsgJy9wbGF5ZXI/YXV0b3BsYXk9dHJ1ZScgKTtcblx0XHR9XG5cblx0XHRpZnJhbWUgPSAkKGh0bWwpLndyYXAoICc8ZGl2IGNsYXNzPVwib3dsLXZpZGVvLWZyYW1lXCIgLz4nICkuaW5zZXJ0QWZ0ZXIoaXRlbS5maW5kKCcub3dsLXZpZGVvJykpO1xuXG5cdFx0dGhpcy5fcGxheWluZyA9IGl0ZW0uYWRkQ2xhc3MoJ293bC12aWRlby1wbGF5aW5nJyk7XG5cdH07XG5cblx0LyoqXG5cdCAqIENoZWNrcyB3aGV0aGVyIGFuIHZpZGVvIGlzIGN1cnJlbnRseSBpbiBmdWxsIHNjcmVlbiBtb2RlIG9yIG5vdC5cblx0ICogQHRvZG8gQmFkIHN0eWxlIGJlY2F1c2UgbG9va3MgbGlrZSBhIHJlYWRvbmx5IG1ldGhvZCBidXQgY2hhbmdlcyBtZW1iZXJzLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEByZXR1cm5zIHtCb29sZWFufVxuXHQgKi9cblx0VmlkZW8ucHJvdG90eXBlLmlzSW5GdWxsU2NyZWVuID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW1lbnQgPSBkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudCB8fCBkb2N1bWVudC5tb3pGdWxsU2NyZWVuRWxlbWVudCB8fFxuXHRcdFx0XHRkb2N1bWVudC53ZWJraXRGdWxsc2NyZWVuRWxlbWVudDtcblxuXHRcdHJldHVybiBlbGVtZW50ICYmICQoZWxlbWVudCkucGFyZW50KCkuaGFzQ2xhc3MoJ293bC12aWRlby1mcmFtZScpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZXN0cm95cyB0aGUgcGx1Z2luLlxuXHQgKi9cblx0VmlkZW8ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgaGFuZGxlciwgcHJvcGVydHk7XG5cblx0XHR0aGlzLl9jb3JlLiRlbGVtZW50Lm9mZignY2xpY2sub3dsLnZpZGVvJyk7XG5cblx0XHRmb3IgKGhhbmRsZXIgaW4gdGhpcy5faGFuZGxlcnMpIHtcblx0XHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGhhbmRsZXIsIHRoaXMuX2hhbmRsZXJzW2hhbmRsZXJdKTtcblx0XHR9XG5cdFx0Zm9yIChwcm9wZXJ0eSBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSkge1xuXHRcdFx0dHlwZW9mIHRoaXNbcHJvcGVydHldICE9ICdmdW5jdGlvbicgJiYgKHRoaXNbcHJvcGVydHldID0gbnVsbCk7XG5cdFx0fVxuXHR9O1xuXG5cdCQuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5WaWRlbyA9IFZpZGVvO1xuXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XG5cbi8qKlxuICogQW5pbWF0ZSBQbHVnaW5cbiAqIEB2ZXJzaW9uIDIuMy40XG4gKiBAYXV0aG9yIEJhcnRvc3ogV29qY2llY2hvd3NraVxuICogQGF1dGhvciBEYXZpZCBEZXV0c2NoXG4gKiBAbGljZW5zZSBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqL1xuOyhmdW5jdGlvbigkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcblxuXHQvKipcblx0ICogQ3JlYXRlcyB0aGUgYW5pbWF0ZSBwbHVnaW4uXG5cdCAqIEBjbGFzcyBUaGUgTmF2aWdhdGlvbiBQbHVnaW5cblx0ICogQHBhcmFtIHtPd2x9IHNjb3BlIC0gVGhlIE93bCBDYXJvdXNlbFxuXHQgKi9cblx0dmFyIEFuaW1hdGUgPSBmdW5jdGlvbihzY29wZSkge1xuXHRcdHRoaXMuY29yZSA9IHNjb3BlO1xuXHRcdHRoaXMuY29yZS5vcHRpb25zID0gJC5leHRlbmQoe30sIEFuaW1hdGUuRGVmYXVsdHMsIHRoaXMuY29yZS5vcHRpb25zKTtcblx0XHR0aGlzLnN3YXBwaW5nID0gdHJ1ZTtcblx0XHR0aGlzLnByZXZpb3VzID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMubmV4dCA9IHVuZGVmaW5lZDtcblxuXHRcdHRoaXMuaGFuZGxlcnMgPSB7XG5cdFx0XHQnY2hhbmdlLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgZS5wcm9wZXJ0eS5uYW1lID09ICdwb3NpdGlvbicpIHtcblx0XHRcdFx0XHR0aGlzLnByZXZpb3VzID0gdGhpcy5jb3JlLmN1cnJlbnQoKTtcblx0XHRcdFx0XHR0aGlzLm5leHQgPSBlLnByb3BlcnR5LnZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKSxcblx0XHRcdCdkcmFnLm93bC5jYXJvdXNlbCBkcmFnZ2VkLm93bC5jYXJvdXNlbCB0cmFuc2xhdGVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UpIHtcblx0XHRcdFx0XHR0aGlzLnN3YXBwaW5nID0gZS50eXBlID09ICd0cmFuc2xhdGVkJztcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyksXG5cdFx0XHQndHJhbnNsYXRlLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5zd2FwcGluZyAmJiAodGhpcy5jb3JlLm9wdGlvbnMuYW5pbWF0ZU91dCB8fCB0aGlzLmNvcmUub3B0aW9ucy5hbmltYXRlSW4pKSB7XG5cdFx0XHRcdFx0dGhpcy5zd2FwKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpXG5cdFx0fTtcblxuXHRcdHRoaXMuY29yZS4kZWxlbWVudC5vbih0aGlzLmhhbmRsZXJzKTtcblx0fTtcblxuXHQvKipcblx0ICogRGVmYXVsdCBvcHRpb25zLlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRBbmltYXRlLkRlZmF1bHRzID0ge1xuXHRcdGFuaW1hdGVPdXQ6IGZhbHNlLFxuXHRcdGFuaW1hdGVJbjogZmFsc2Vcblx0fTtcblxuXHQvKipcblx0ICogVG9nZ2xlcyB0aGUgYW5pbWF0aW9uIGNsYXNzZXMgd2hlbmV2ZXIgYW4gdHJhbnNsYXRpb25zIHN0YXJ0cy5cblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcmV0dXJucyB7Qm9vbGVhbnx1bmRlZmluZWR9XG5cdCAqL1xuXHRBbmltYXRlLnByb3RvdHlwZS5zd2FwID0gZnVuY3Rpb24oKSB7XG5cblx0XHRpZiAodGhpcy5jb3JlLnNldHRpbmdzLml0ZW1zICE9PSAxKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCEkLnN1cHBvcnQuYW5pbWF0aW9uIHx8ICEkLnN1cHBvcnQudHJhbnNpdGlvbikge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuY29yZS5zcGVlZCgwKTtcblxuXHRcdHZhciBsZWZ0LFxuXHRcdFx0Y2xlYXIgPSAkLnByb3h5KHRoaXMuY2xlYXIsIHRoaXMpLFxuXHRcdFx0cHJldmlvdXMgPSB0aGlzLmNvcmUuJHN0YWdlLmNoaWxkcmVuKCkuZXEodGhpcy5wcmV2aW91cyksXG5cdFx0XHRuZXh0ID0gdGhpcy5jb3JlLiRzdGFnZS5jaGlsZHJlbigpLmVxKHRoaXMubmV4dCksXG5cdFx0XHRpbmNvbWluZyA9IHRoaXMuY29yZS5zZXR0aW5ncy5hbmltYXRlSW4sXG5cdFx0XHRvdXRnb2luZyA9IHRoaXMuY29yZS5zZXR0aW5ncy5hbmltYXRlT3V0O1xuXG5cdFx0aWYgKHRoaXMuY29yZS5jdXJyZW50KCkgPT09IHRoaXMucHJldmlvdXMpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAob3V0Z29pbmcpIHtcblx0XHRcdGxlZnQgPSB0aGlzLmNvcmUuY29vcmRpbmF0ZXModGhpcy5wcmV2aW91cykgLSB0aGlzLmNvcmUuY29vcmRpbmF0ZXModGhpcy5uZXh0KTtcblx0XHRcdHByZXZpb3VzLm9uZSgkLnN1cHBvcnQuYW5pbWF0aW9uLmVuZCwgY2xlYXIpXG5cdFx0XHRcdC5jc3MoIHsgJ2xlZnQnOiBsZWZ0ICsgJ3B4JyB9IClcblx0XHRcdFx0LmFkZENsYXNzKCdhbmltYXRlZCBvd2wtYW5pbWF0ZWQtb3V0Jylcblx0XHRcdFx0LmFkZENsYXNzKG91dGdvaW5nKTtcblx0XHR9XG5cblx0XHRpZiAoaW5jb21pbmcpIHtcblx0XHRcdG5leHQub25lKCQuc3VwcG9ydC5hbmltYXRpb24uZW5kLCBjbGVhcilcblx0XHRcdFx0LmFkZENsYXNzKCdhbmltYXRlZCBvd2wtYW5pbWF0ZWQtaW4nKVxuXHRcdFx0XHQuYWRkQ2xhc3MoaW5jb21pbmcpO1xuXHRcdH1cblx0fTtcblxuXHRBbmltYXRlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKGUpIHtcblx0XHQkKGUudGFyZ2V0KS5jc3MoIHsgJ2xlZnQnOiAnJyB9IClcblx0XHRcdC5yZW1vdmVDbGFzcygnYW5pbWF0ZWQgb3dsLWFuaW1hdGVkLW91dCBvd2wtYW5pbWF0ZWQtaW4nKVxuXHRcdFx0LnJlbW92ZUNsYXNzKHRoaXMuY29yZS5zZXR0aW5ncy5hbmltYXRlSW4pXG5cdFx0XHQucmVtb3ZlQ2xhc3ModGhpcy5jb3JlLnNldHRpbmdzLmFuaW1hdGVPdXQpO1xuXHRcdHRoaXMuY29yZS5vblRyYW5zaXRpb25FbmQoKTtcblx0fTtcblxuXHQvKipcblx0ICogRGVzdHJveXMgdGhlIHBsdWdpbi5cblx0ICogQHB1YmxpY1xuXHQgKi9cblx0QW5pbWF0ZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBoYW5kbGVyLCBwcm9wZXJ0eTtcblxuXHRcdGZvciAoaGFuZGxlciBpbiB0aGlzLmhhbmRsZXJzKSB7XG5cdFx0XHR0aGlzLmNvcmUuJGVsZW1lbnQub2ZmKGhhbmRsZXIsIHRoaXMuaGFuZGxlcnNbaGFuZGxlcl0pO1xuXHRcdH1cblx0XHRmb3IgKHByb3BlcnR5IGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKSB7XG5cdFx0XHR0eXBlb2YgdGhpc1twcm9wZXJ0eV0gIT0gJ2Z1bmN0aW9uJyAmJiAodGhpc1twcm9wZXJ0eV0gPSBudWxsKTtcblx0XHR9XG5cdH07XG5cblx0JC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLkFuaW1hdGUgPSBBbmltYXRlO1xuXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XG5cbi8qKlxuICogQXV0b3BsYXkgUGx1Z2luXG4gKiBAdmVyc2lvbiAyLjMuNFxuICogQGF1dGhvciBCYXJ0b3N6IFdvamNpZWNob3dza2lcbiAqIEBhdXRob3IgQXJ0dXMgS29sYW5vd3NraVxuICogQGF1dGhvciBEYXZpZCBEZXV0c2NoXG4gKiBAYXV0aG9yIFRvbSBEZSBDYWx1d8OpXG4gKiBAbGljZW5zZSBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqL1xuOyhmdW5jdGlvbigkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcblxuXHQvKipcblx0ICogQ3JlYXRlcyB0aGUgYXV0b3BsYXkgcGx1Z2luLlxuXHQgKiBAY2xhc3MgVGhlIEF1dG9wbGF5IFBsdWdpblxuXHQgKiBAcGFyYW0ge093bH0gc2NvcGUgLSBUaGUgT3dsIENhcm91c2VsXG5cdCAqL1xuXHR2YXIgQXV0b3BsYXkgPSBmdW5jdGlvbihjYXJvdXNlbCkge1xuXHRcdC8qKlxuXHRcdCAqIFJlZmVyZW5jZSB0byB0aGUgY29yZS5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICogQHR5cGUge093bH1cblx0XHQgKi9cblx0XHR0aGlzLl9jb3JlID0gY2Fyb3VzZWw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYXV0b3BsYXkgdGltZW91dCBpZC5cblx0XHQgKiBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMuX2NhbGwgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogRGVwZW5kaW5nIG9uIHRoZSBzdGF0ZSBvZiB0aGUgcGx1Z2luLCB0aGlzIHZhcmlhYmxlIGNvbnRhaW5zIGVpdGhlclxuXHRcdCAqIHRoZSBzdGFydCB0aW1lIG9mIHRoZSB0aW1lciBvciB0aGUgY3VycmVudCB0aW1lciB2YWx1ZSBpZiBpdCdzXG5cdFx0ICogcGF1c2VkLiBTaW5jZSB3ZSBzdGFydCBpbiBhIHBhdXNlZCBzdGF0ZSB3ZSBpbml0aWFsaXplIHRoZSB0aW1lclxuXHRcdCAqIHZhbHVlLlxuXHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5fdGltZSA9IDA7XG5cblx0XHQvKipcblx0XHQgKiBTdG9yZXMgdGhlIHRpbWVvdXQgY3VycmVudGx5IHVzZWQuXG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLl90aW1lb3V0ID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIEluZGljYXRlcyB3aGVuZXZlciB0aGUgYXV0b3BsYXkgaXMgcGF1c2VkLlxuXHRcdCAqIEB0eXBlIHtCb29sZWFufVxuXHRcdCAqL1xuXHRcdHRoaXMuX3BhdXNlZCA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBBbGwgZXZlbnQgaGFuZGxlcnMuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5faGFuZGxlcnMgPSB7XG5cdFx0XHQnY2hhbmdlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIGUucHJvcGVydHkubmFtZSA9PT0gJ3NldHRpbmdzJykge1xuXHRcdFx0XHRcdGlmICh0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5KSB7XG5cdFx0XHRcdFx0XHR0aGlzLnBsYXkoKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy5zdG9wKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKGUubmFtZXNwYWNlICYmIGUucHJvcGVydHkubmFtZSA9PT0gJ3Bvc2l0aW9uJyAmJiB0aGlzLl9wYXVzZWQpIHtcblx0XHRcdFx0XHQvLyBSZXNldCB0aGUgdGltZXIuIFRoaXMgY29kZSBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgcG9zaXRpb25cblx0XHRcdFx0XHQvLyBvZiB0aGUgY2Fyb3VzZWwgd2FzIGNoYW5nZWQgdGhyb3VnaCB1c2VyIGludGVyYWN0aW9uLlxuXHRcdFx0XHRcdHRoaXMuX3RpbWUgPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKSxcblx0XHRcdCdpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXkpIHtcblx0XHRcdFx0XHR0aGlzLnBsYXkoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyksXG5cdFx0XHQncGxheS5vd2wuYXV0b3BsYXknOiAkLnByb3h5KGZ1bmN0aW9uKGUsIHQsIHMpIHtcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlKSB7XG5cdFx0XHRcdFx0dGhpcy5wbGF5KHQsIHMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKSxcblx0XHRcdCdzdG9wLm93bC5hdXRvcGxheSc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UpIHtcblx0XHRcdFx0XHR0aGlzLnN0b3AoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyksXG5cdFx0XHQnbW91c2VvdmVyLm93bC5hdXRvcGxheSc6ICQucHJveHkoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICh0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5SG92ZXJQYXVzZSAmJiB0aGlzLl9jb3JlLmlzKCdyb3RhdGluZycpKSB7XG5cdFx0XHRcdFx0dGhpcy5wYXVzZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKSxcblx0XHRcdCdtb3VzZWxlYXZlLm93bC5hdXRvcGxheSc6ICQucHJveHkoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICh0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5SG92ZXJQYXVzZSAmJiB0aGlzLl9jb3JlLmlzKCdyb3RhdGluZycpKSB7XG5cdFx0XHRcdFx0dGhpcy5wbGF5KCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpLFxuXHRcdFx0J3RvdWNoc3RhcnQub3dsLmNvcmUnOiAkLnByb3h5KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAodGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheUhvdmVyUGF1c2UgJiYgdGhpcy5fY29yZS5pcygncm90YXRpbmcnKSkge1xuXHRcdFx0XHRcdHRoaXMucGF1c2UoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyksXG5cdFx0XHQndG91Y2hlbmQub3dsLmNvcmUnOiAkLnByb3h5KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAodGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheUhvdmVyUGF1c2UpIHtcblx0XHRcdFx0XHR0aGlzLnBsYXkoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcylcblx0XHR9O1xuXG5cdFx0Ly8gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnNcblx0XHR0aGlzLl9jb3JlLiRlbGVtZW50Lm9uKHRoaXMuX2hhbmRsZXJzKTtcblxuXHRcdC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcblx0XHR0aGlzLl9jb3JlLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQXV0b3BsYXkuRGVmYXVsdHMsIHRoaXMuX2NvcmUub3B0aW9ucyk7XG5cdH07XG5cblx0LyoqXG5cdCAqIERlZmF1bHQgb3B0aW9ucy5cblx0ICogQHB1YmxpY1xuXHQgKi9cblx0QXV0b3BsYXkuRGVmYXVsdHMgPSB7XG5cdFx0YXV0b3BsYXk6IGZhbHNlLFxuXHRcdGF1dG9wbGF5VGltZW91dDogNTAwMCxcblx0XHRhdXRvcGxheUhvdmVyUGF1c2U6IGZhbHNlLFxuXHRcdGF1dG9wbGF5U3BlZWQ6IGZhbHNlXG5cdH07XG5cblx0LyoqXG5cdCAqIFRyYW5zaXRpb24gdG8gdGhlIG5leHQgc2xpZGUgYW5kIHNldCBhIHRpbWVvdXQgZm9yIHRoZSBuZXh0IHRyYW5zaXRpb24uXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbc3BlZWRdIC0gVGhlIGFuaW1hdGlvbiBzcGVlZCBmb3IgdGhlIGFuaW1hdGlvbnMuXG5cdCAqL1xuXHRBdXRvcGxheS5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbihzcGVlZCkge1xuXHRcdHRoaXMuX2NhbGwgPSB3aW5kb3cuc2V0VGltZW91dChcblx0XHRcdCQucHJveHkodGhpcy5fbmV4dCwgdGhpcywgc3BlZWQpLFxuXHRcdFx0dGhpcy5fdGltZW91dCAqIChNYXRoLnJvdW5kKHRoaXMucmVhZCgpIC8gdGhpcy5fdGltZW91dCkgKyAxKSAtIHRoaXMucmVhZCgpXG5cdFx0KTtcblxuXHRcdGlmICh0aGlzLl9jb3JlLmlzKCdpbnRlcmFjdGluZycpIHx8IGRvY3VtZW50LmhpZGRlbikge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR0aGlzLl9jb3JlLm5leHQoc3BlZWQgfHwgdGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheVNwZWVkKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZWFkcyB0aGUgY3VycmVudCB0aW1lciB2YWx1ZSB3aGVuIHRoZSB0aW1lciBpcyBwbGF5aW5nLlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRBdXRvcGxheS5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRoaXMuX3RpbWU7XG5cdH07XG5cblx0LyoqXG5cdCAqIFN0YXJ0cyB0aGUgYXV0b3BsYXkuXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFt0aW1lb3V0XSAtIFRoZSBpbnRlcnZhbCBiZWZvcmUgdGhlIG5leHQgYW5pbWF0aW9uIHN0YXJ0cy5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtzcGVlZF0gLSBUaGUgYW5pbWF0aW9uIHNwZWVkIGZvciB0aGUgYW5pbWF0aW9ucy5cblx0ICovXG5cdEF1dG9wbGF5LnByb3RvdHlwZS5wbGF5ID0gZnVuY3Rpb24odGltZW91dCwgc3BlZWQpIHtcblx0XHR2YXIgZWxhcHNlZDtcblxuXHRcdGlmICghdGhpcy5fY29yZS5pcygncm90YXRpbmcnKSkge1xuXHRcdFx0dGhpcy5fY29yZS5lbnRlcigncm90YXRpbmcnKTtcblx0XHR9XG5cblx0XHR0aW1lb3V0ID0gdGltZW91dCB8fCB0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5VGltZW91dDtcblxuXHRcdC8vIENhbGN1bGF0ZSB0aGUgZWxhcHNlZCB0aW1lIHNpbmNlIHRoZSBsYXN0IHRyYW5zaXRpb24uIElmIHRoZSBjYXJvdXNlbFxuXHRcdC8vIHdhc24ndCBwbGF5aW5nIHRoaXMgY2FsY3VsYXRpb24gd2lsbCB5aWVsZCB6ZXJvLlxuXHRcdGVsYXBzZWQgPSBNYXRoLm1pbih0aGlzLl90aW1lICUgKHRoaXMuX3RpbWVvdXQgfHwgdGltZW91dCksIHRpbWVvdXQpO1xuXG5cdFx0aWYgKHRoaXMuX3BhdXNlZCkge1xuXHRcdFx0Ly8gU3RhcnQgdGhlIGNsb2NrLlxuXHRcdFx0dGhpcy5fdGltZSA9IHRoaXMucmVhZCgpO1xuXHRcdFx0dGhpcy5fcGF1c2VkID0gZmFsc2U7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIENsZWFyIHRoZSBhY3RpdmUgdGltZW91dCB0byBhbGxvdyByZXBsYWNlbWVudC5cblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5fY2FsbCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWRqdXN0IHRoZSBvcmlnaW4gb2YgdGhlIHRpbWVyIHRvIG1hdGNoIHRoZSBuZXcgdGltZW91dCB2YWx1ZS5cblx0XHR0aGlzLl90aW1lICs9IHRoaXMucmVhZCgpICUgdGltZW91dCAtIGVsYXBzZWQ7XG5cblx0XHR0aGlzLl90aW1lb3V0ID0gdGltZW91dDtcblx0XHR0aGlzLl9jYWxsID0gd2luZG93LnNldFRpbWVvdXQoJC5wcm94eSh0aGlzLl9uZXh0LCB0aGlzLCBzcGVlZCksIHRpbWVvdXQgLSBlbGFwc2VkKTtcblx0fTtcblxuXHQvKipcblx0ICogU3RvcHMgdGhlIGF1dG9wbGF5LlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRBdXRvcGxheS5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICh0aGlzLl9jb3JlLmlzKCdyb3RhdGluZycpKSB7XG5cdFx0XHQvLyBSZXNldCB0aGUgY2xvY2suXG5cdFx0XHR0aGlzLl90aW1lID0gMDtcblx0XHRcdHRoaXMuX3BhdXNlZCA9IHRydWU7XG5cblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5fY2FsbCk7XG5cdFx0XHR0aGlzLl9jb3JlLmxlYXZlKCdyb3RhdGluZycpO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogUGF1c2VzIHRoZSBhdXRvcGxheS5cblx0ICogQHB1YmxpY1xuXHQgKi9cblx0QXV0b3BsYXkucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKHRoaXMuX2NvcmUuaXMoJ3JvdGF0aW5nJykgJiYgIXRoaXMuX3BhdXNlZCkge1xuXHRcdFx0Ly8gUGF1c2UgdGhlIGNsb2NrLlxuXHRcdFx0dGhpcy5fdGltZSA9IHRoaXMucmVhZCgpO1xuXHRcdFx0dGhpcy5fcGF1c2VkID0gdHJ1ZTtcblxuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCh0aGlzLl9jYWxsKTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIERlc3Ryb3lzIHRoZSBwbHVnaW4uXG5cdCAqL1xuXHRBdXRvcGxheS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBoYW5kbGVyLCBwcm9wZXJ0eTtcblxuXHRcdHRoaXMuc3RvcCgpO1xuXG5cdFx0Zm9yIChoYW5kbGVyIGluIHRoaXMuX2hhbmRsZXJzKSB7XG5cdFx0XHR0aGlzLl9jb3JlLiRlbGVtZW50Lm9mZihoYW5kbGVyLCB0aGlzLl9oYW5kbGVyc1toYW5kbGVyXSk7XG5cdFx0fVxuXHRcdGZvciAocHJvcGVydHkgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpIHtcblx0XHRcdHR5cGVvZiB0aGlzW3Byb3BlcnR5XSAhPSAnZnVuY3Rpb24nICYmICh0aGlzW3Byb3BlcnR5XSA9IG51bGwpO1xuXHRcdH1cblx0fTtcblxuXHQkLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuYXV0b3BsYXkgPSBBdXRvcGxheTtcblxufSkod2luZG93LlplcHRvIHx8IHdpbmRvdy5qUXVlcnksIHdpbmRvdywgZG9jdW1lbnQpO1xuXG4vKipcbiAqIE5hdmlnYXRpb24gUGx1Z2luXG4gKiBAdmVyc2lvbiAyLjMuNFxuICogQGF1dGhvciBBcnR1cyBLb2xhbm93c2tpXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICovXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgdGhlIG5hdmlnYXRpb24gcGx1Z2luLlxuXHQgKiBAY2xhc3MgVGhlIE5hdmlnYXRpb24gUGx1Z2luXG5cdCAqIEBwYXJhbSB7T3dsfSBjYXJvdXNlbCAtIFRoZSBPd2wgQ2Fyb3VzZWwuXG5cdCAqL1xuXHR2YXIgTmF2aWdhdGlvbiA9IGZ1bmN0aW9uKGNhcm91c2VsKSB7XG5cdFx0LyoqXG5cdFx0ICogUmVmZXJlbmNlIHRvIHRoZSBjb3JlLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKiBAdHlwZSB7T3dsfVxuXHRcdCAqL1xuXHRcdHRoaXMuX2NvcmUgPSBjYXJvdXNlbDtcblxuXHRcdC8qKlxuXHRcdCAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBwbHVnaW4gaXMgaW5pdGlhbGl6ZWQgb3Igbm90LlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKiBAdHlwZSB7Qm9vbGVhbn1cblx0XHQgKi9cblx0XHR0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGN1cnJlbnQgcGFnaW5nIGluZGV4ZXMuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtBcnJheX1cblx0XHQgKi9cblx0XHR0aGlzLl9wYWdlcyA9IFtdO1xuXG5cdFx0LyoqXG5cdFx0ICogQWxsIERPTSBlbGVtZW50cyBvZiB0aGUgdXNlciBpbnRlcmZhY2UuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5fY29udHJvbHMgPSB7fTtcblxuXHRcdC8qKlxuXHRcdCAqIE1hcmt1cCBmb3IgYW4gaW5kaWNhdG9yLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKiBAdHlwZSB7QXJyYXkuPFN0cmluZz59XG5cdFx0ICovXG5cdFx0dGhpcy5fdGVtcGxhdGVzID0gW107XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY2Fyb3VzZWwgZWxlbWVudC5cblx0XHQgKiBAdHlwZSB7alF1ZXJ5fVxuXHRcdCAqL1xuXHRcdHRoaXMuJGVsZW1lbnQgPSB0aGlzLl9jb3JlLiRlbGVtZW50O1xuXG5cdFx0LyoqXG5cdFx0ICogT3ZlcnJpZGRlbiBtZXRob2RzIG9mIHRoZSBjYXJvdXNlbC5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLl9vdmVycmlkZXMgPSB7XG5cdFx0XHRuZXh0OiB0aGlzLl9jb3JlLm5leHQsXG5cdFx0XHRwcmV2OiB0aGlzLl9jb3JlLnByZXYsXG5cdFx0XHR0bzogdGhpcy5fY29yZS50b1xuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBBbGwgZXZlbnQgaGFuZGxlcnMuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5faGFuZGxlcnMgPSB7XG5cdFx0XHQncHJlcGFyZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLmRvdHNEYXRhKSB7XG5cdFx0XHRcdFx0dGhpcy5fdGVtcGxhdGVzLnB1c2goJzxkaXYgY2xhc3M9XCInICsgdGhpcy5fY29yZS5zZXR0aW5ncy5kb3RDbGFzcyArICdcIj4nICtcblx0XHRcdFx0XHRcdCQoZS5jb250ZW50KS5maW5kKCdbZGF0YS1kb3RdJykuYWRkQmFjaygnW2RhdGEtZG90XScpLmF0dHIoJ2RhdGEtZG90JykgKyAnPC9kaXY+Jyk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpLFxuXHRcdFx0J2FkZGVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5zZXR0aW5ncy5kb3RzRGF0YSkge1xuXHRcdFx0XHRcdHRoaXMuX3RlbXBsYXRlcy5zcGxpY2UoZS5wb3NpdGlvbiwgMCwgdGhpcy5fdGVtcGxhdGVzLnBvcCgpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyksXG5cdFx0XHQncmVtb3ZlLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5zZXR0aW5ncy5kb3RzRGF0YSkge1xuXHRcdFx0XHRcdHRoaXMuX3RlbXBsYXRlcy5zcGxpY2UoZS5wb3NpdGlvbiwgMSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpLFxuXHRcdFx0J2NoYW5nZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiBlLnByb3BlcnR5Lm5hbWUgPT0gJ3Bvc2l0aW9uJykge1xuXHRcdFx0XHRcdHRoaXMuZHJhdygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKSxcblx0XHRcdCdpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmICF0aGlzLl9pbml0aWFsaXplZCkge1xuXHRcdFx0XHRcdHRoaXMuX2NvcmUudHJpZ2dlcignaW5pdGlhbGl6ZScsIG51bGwsICduYXZpZ2F0aW9uJyk7XG5cdFx0XHRcdFx0dGhpcy5pbml0aWFsaXplKCk7XG5cdFx0XHRcdFx0dGhpcy51cGRhdGUoKTtcblx0XHRcdFx0XHR0aGlzLmRyYXcoKTtcblx0XHRcdFx0XHR0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7XG5cdFx0XHRcdFx0dGhpcy5fY29yZS50cmlnZ2VyKCdpbml0aWFsaXplZCcsIG51bGwsICduYXZpZ2F0aW9uJyk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpLFxuXHRcdFx0J3JlZnJlc2hlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIHRoaXMuX2luaXRpYWxpemVkKSB7XG5cdFx0XHRcdFx0dGhpcy5fY29yZS50cmlnZ2VyKCdyZWZyZXNoJywgbnVsbCwgJ25hdmlnYXRpb24nKTtcblx0XHRcdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdFx0XHRcdHRoaXMuZHJhdygpO1xuXHRcdFx0XHRcdHRoaXMuX2NvcmUudHJpZ2dlcigncmVmcmVzaGVkJywgbnVsbCwgJ25hdmlnYXRpb24nKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcylcblx0XHR9O1xuXG5cdFx0Ly8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuXHRcdHRoaXMuX2NvcmUub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBOYXZpZ2F0aW9uLkRlZmF1bHRzLCB0aGlzLl9jb3JlLm9wdGlvbnMpO1xuXG5cdFx0Ly8gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnNcblx0XHR0aGlzLiRlbGVtZW50Lm9uKHRoaXMuX2hhbmRsZXJzKTtcblx0fTtcblxuXHQvKipcblx0ICogRGVmYXVsdCBvcHRpb25zLlxuXHQgKiBAcHVibGljXG5cdCAqIEB0b2RvIFJlbmFtZSBgc2xpZGVCeWAgdG8gYG5hdkJ5YFxuXHQgKi9cblx0TmF2aWdhdGlvbi5EZWZhdWx0cyA9IHtcblx0XHRuYXY6IGZhbHNlLFxuXHRcdG5hdlRleHQ6IFtcblx0XHRcdCc8c3BhbiBhcmlhLWxhYmVsPVwiJyArICdQcmV2aW91cycgKyAnXCI+JiN4MjAzOTs8L3NwYW4+Jyxcblx0XHRcdCc8c3BhbiBhcmlhLWxhYmVsPVwiJyArICdOZXh0JyArICdcIj4mI3gyMDNhOzwvc3Bhbj4nXG5cdFx0XSxcblx0XHRuYXZTcGVlZDogZmFsc2UsXG5cdFx0bmF2RWxlbWVudDogJ2J1dHRvbiB0eXBlPVwiYnV0dG9uXCIgcm9sZT1cInByZXNlbnRhdGlvblwiJyxcblx0XHRuYXZDb250YWluZXI6IGZhbHNlLFxuXHRcdG5hdkNvbnRhaW5lckNsYXNzOiAnb3dsLW5hdicsXG5cdFx0bmF2Q2xhc3M6IFtcblx0XHRcdCdvd2wtcHJldicsXG5cdFx0XHQnb3dsLW5leHQnXG5cdFx0XSxcblx0XHRzbGlkZUJ5OiAxLFxuXHRcdGRvdENsYXNzOiAnb3dsLWRvdCcsXG5cdFx0ZG90c0NsYXNzOiAnb3dsLWRvdHMnLFxuXHRcdGRvdHM6IHRydWUsXG5cdFx0ZG90c0VhY2g6IGZhbHNlLFxuXHRcdGRvdHNEYXRhOiBmYWxzZSxcblx0XHRkb3RzU3BlZWQ6IGZhbHNlLFxuXHRcdGRvdHNDb250YWluZXI6IGZhbHNlXG5cdH07XG5cblx0LyoqXG5cdCAqIEluaXRpYWxpemVzIHRoZSBsYXlvdXQgb2YgdGhlIHBsdWdpbiBhbmQgZXh0ZW5kcyB0aGUgY2Fyb3VzZWwuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdE5hdmlnYXRpb24ucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgb3ZlcnJpZGUsXG5cdFx0XHRzZXR0aW5ncyA9IHRoaXMuX2NvcmUuc2V0dGluZ3M7XG5cblx0XHQvLyBjcmVhdGUgRE9NIHN0cnVjdHVyZSBmb3IgcmVsYXRpdmUgbmF2aWdhdGlvblxuXHRcdHRoaXMuX2NvbnRyb2xzLiRyZWxhdGl2ZSA9IChzZXR0aW5ncy5uYXZDb250YWluZXIgPyAkKHNldHRpbmdzLm5hdkNvbnRhaW5lcilcblx0XHRcdDogJCgnPGRpdj4nKS5hZGRDbGFzcyhzZXR0aW5ncy5uYXZDb250YWluZXJDbGFzcykuYXBwZW5kVG8odGhpcy4kZWxlbWVudCkpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuXG5cdFx0dGhpcy5fY29udHJvbHMuJHByZXZpb3VzID0gJCgnPCcgKyBzZXR0aW5ncy5uYXZFbGVtZW50ICsgJz4nKVxuXHRcdFx0LmFkZENsYXNzKHNldHRpbmdzLm5hdkNsYXNzWzBdKVxuXHRcdFx0Lmh0bWwoc2V0dGluZ3MubmF2VGV4dFswXSlcblx0XHRcdC5wcmVwZW5kVG8odGhpcy5fY29udHJvbHMuJHJlbGF0aXZlKVxuXHRcdFx0Lm9uKCdjbGljaycsICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHR0aGlzLnByZXYoc2V0dGluZ3MubmF2U3BlZWQpO1xuXHRcdFx0fSwgdGhpcykpO1xuXHRcdHRoaXMuX2NvbnRyb2xzLiRuZXh0ID0gJCgnPCcgKyBzZXR0aW5ncy5uYXZFbGVtZW50ICsgJz4nKVxuXHRcdFx0LmFkZENsYXNzKHNldHRpbmdzLm5hdkNsYXNzWzFdKVxuXHRcdFx0Lmh0bWwoc2V0dGluZ3MubmF2VGV4dFsxXSlcblx0XHRcdC5hcHBlbmRUbyh0aGlzLl9jb250cm9scy4kcmVsYXRpdmUpXG5cdFx0XHQub24oJ2NsaWNrJywgJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdHRoaXMubmV4dChzZXR0aW5ncy5uYXZTcGVlZCk7XG5cdFx0XHR9LCB0aGlzKSk7XG5cblx0XHQvLyBjcmVhdGUgRE9NIHN0cnVjdHVyZSBmb3IgYWJzb2x1dGUgbmF2aWdhdGlvblxuXHRcdGlmICghc2V0dGluZ3MuZG90c0RhdGEpIHtcblx0XHRcdHRoaXMuX3RlbXBsYXRlcyA9IFsgJCgnPGJ1dHRvbiByb2xlPVwiYnV0dG9uXCI+Jylcblx0XHRcdFx0LmFkZENsYXNzKHNldHRpbmdzLmRvdENsYXNzKVxuXHRcdFx0XHQuYXBwZW5kKCQoJzxzcGFuPicpKVxuXHRcdFx0XHQucHJvcCgnb3V0ZXJIVE1MJykgXTtcblx0XHR9XG5cblx0XHR0aGlzLl9jb250cm9scy4kYWJzb2x1dGUgPSAoc2V0dGluZ3MuZG90c0NvbnRhaW5lciA/ICQoc2V0dGluZ3MuZG90c0NvbnRhaW5lcilcblx0XHRcdDogJCgnPGRpdj4nKS5hZGRDbGFzcyhzZXR0aW5ncy5kb3RzQ2xhc3MpLmFwcGVuZFRvKHRoaXMuJGVsZW1lbnQpKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcblxuXHRcdHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5vbignY2xpY2snLCAnYnV0dG9uJywgJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHR2YXIgaW5kZXggPSAkKGUudGFyZ2V0KS5wYXJlbnQoKS5pcyh0aGlzLl9jb250cm9scy4kYWJzb2x1dGUpXG5cdFx0XHRcdD8gJChlLnRhcmdldCkuaW5kZXgoKSA6ICQoZS50YXJnZXQpLnBhcmVudCgpLmluZGV4KCk7XG5cblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0dGhpcy50byhpbmRleCwgc2V0dGluZ3MuZG90c1NwZWVkKTtcblx0XHR9LCB0aGlzKSk7XG5cblx0XHQvKiRlbC5vbignZm9jdXNpbicsIGZ1bmN0aW9uKCkge1xuXHRcdFx0JChkb2N1bWVudCkub2ZmKFwiLmNhcm91c2VsXCIpO1xuXG5cdFx0XHQkKGRvY3VtZW50KS5vbigna2V5ZG93bi5jYXJvdXNlbCcsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYoZS5rZXlDb2RlID09IDM3KSB7XG5cdFx0XHRcdFx0JGVsLnRyaWdnZXIoJ3ByZXYub3dsJylcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihlLmtleUNvZGUgPT0gMzkpIHtcblx0XHRcdFx0XHQkZWwudHJpZ2dlcignbmV4dC5vd2wnKVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KTsqL1xuXG5cdFx0Ly8gb3ZlcnJpZGUgcHVibGljIG1ldGhvZHMgb2YgdGhlIGNhcm91c2VsXG5cdFx0Zm9yIChvdmVycmlkZSBpbiB0aGlzLl9vdmVycmlkZXMpIHtcblx0XHRcdHRoaXMuX2NvcmVbb3ZlcnJpZGVdID0gJC5wcm94eSh0aGlzW292ZXJyaWRlXSwgdGhpcyk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZXN0cm95cyB0aGUgcGx1Z2luLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHROYXZpZ2F0aW9uLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhhbmRsZXIsIGNvbnRyb2wsIHByb3BlcnR5LCBvdmVycmlkZSwgc2V0dGluZ3M7XG5cdFx0c2V0dGluZ3MgPSB0aGlzLl9jb3JlLnNldHRpbmdzO1xuXG5cdFx0Zm9yIChoYW5kbGVyIGluIHRoaXMuX2hhbmRsZXJzKSB7XG5cdFx0XHR0aGlzLiRlbGVtZW50Lm9mZihoYW5kbGVyLCB0aGlzLl9oYW5kbGVyc1toYW5kbGVyXSk7XG5cdFx0fVxuXHRcdGZvciAoY29udHJvbCBpbiB0aGlzLl9jb250cm9scykge1xuXHRcdFx0aWYgKGNvbnRyb2wgPT09ICckcmVsYXRpdmUnICYmIHNldHRpbmdzLm5hdkNvbnRhaW5lcikge1xuXHRcdFx0XHR0aGlzLl9jb250cm9sc1tjb250cm9sXS5odG1sKCcnKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuX2NvbnRyb2xzW2NvbnRyb2xdLnJlbW92ZSgpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRmb3IgKG92ZXJyaWRlIGluIHRoaXMub3ZlcmlkZXMpIHtcblx0XHRcdHRoaXMuX2NvcmVbb3ZlcnJpZGVdID0gdGhpcy5fb3ZlcnJpZGVzW292ZXJyaWRlXTtcblx0XHR9XG5cdFx0Zm9yIChwcm9wZXJ0eSBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSkge1xuXHRcdFx0dHlwZW9mIHRoaXNbcHJvcGVydHldICE9ICdmdW5jdGlvbicgJiYgKHRoaXNbcHJvcGVydHldID0gbnVsbCk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSBpbnRlcm5hbCBzdGF0ZS5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0TmF2aWdhdGlvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGksIGosIGssXG5cdFx0XHRsb3dlciA9IHRoaXMuX2NvcmUuY2xvbmVzKCkubGVuZ3RoIC8gMixcblx0XHRcdHVwcGVyID0gbG93ZXIgKyB0aGlzLl9jb3JlLml0ZW1zKCkubGVuZ3RoLFxuXHRcdFx0bWF4aW11bSA9IHRoaXMuX2NvcmUubWF4aW11bSh0cnVlKSxcblx0XHRcdHNldHRpbmdzID0gdGhpcy5fY29yZS5zZXR0aW5ncyxcblx0XHRcdHNpemUgPSBzZXR0aW5ncy5jZW50ZXIgfHwgc2V0dGluZ3MuYXV0b1dpZHRoIHx8IHNldHRpbmdzLmRvdHNEYXRhXG5cdFx0XHRcdD8gMSA6IHNldHRpbmdzLmRvdHNFYWNoIHx8IHNldHRpbmdzLml0ZW1zO1xuXG5cdFx0aWYgKHNldHRpbmdzLnNsaWRlQnkgIT09ICdwYWdlJykge1xuXHRcdFx0c2V0dGluZ3Muc2xpZGVCeSA9IE1hdGgubWluKHNldHRpbmdzLnNsaWRlQnksIHNldHRpbmdzLml0ZW1zKTtcblx0XHR9XG5cblx0XHRpZiAoc2V0dGluZ3MuZG90cyB8fCBzZXR0aW5ncy5zbGlkZUJ5ID09ICdwYWdlJykge1xuXHRcdFx0dGhpcy5fcGFnZXMgPSBbXTtcblxuXHRcdFx0Zm9yIChpID0gbG93ZXIsIGogPSAwLCBrID0gMDsgaSA8IHVwcGVyOyBpKyspIHtcblx0XHRcdFx0aWYgKGogPj0gc2l6ZSB8fCBqID09PSAwKSB7XG5cdFx0XHRcdFx0dGhpcy5fcGFnZXMucHVzaCh7XG5cdFx0XHRcdFx0XHRzdGFydDogTWF0aC5taW4obWF4aW11bSwgaSAtIGxvd2VyKSxcblx0XHRcdFx0XHRcdGVuZDogaSAtIGxvd2VyICsgc2l6ZSAtIDFcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRpZiAoTWF0aC5taW4obWF4aW11bSwgaSAtIGxvd2VyKSA9PT0gbWF4aW11bSkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGogPSAwLCArK2s7XG5cdFx0XHRcdH1cblx0XHRcdFx0aiArPSB0aGlzLl9jb3JlLm1lcmdlcnModGhpcy5fY29yZS5yZWxhdGl2ZShpKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBEcmF3cyB0aGUgdXNlciBpbnRlcmZhY2UuXG5cdCAqIEB0b2RvIFRoZSBvcHRpb24gYGRvdHNEYXRhYCB3b250IHdvcmsuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdE5hdmlnYXRpb24ucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgZGlmZmVyZW5jZSxcblx0XHRcdHNldHRpbmdzID0gdGhpcy5fY29yZS5zZXR0aW5ncyxcblx0XHRcdGRpc2FibGVkID0gdGhpcy5fY29yZS5pdGVtcygpLmxlbmd0aCA8PSBzZXR0aW5ncy5pdGVtcyxcblx0XHRcdGluZGV4ID0gdGhpcy5fY29yZS5yZWxhdGl2ZSh0aGlzLl9jb3JlLmN1cnJlbnQoKSksXG5cdFx0XHRsb29wID0gc2V0dGluZ3MubG9vcCB8fCBzZXR0aW5ncy5yZXdpbmQ7XG5cblx0XHR0aGlzLl9jb250cm9scy4kcmVsYXRpdmUudG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJywgIXNldHRpbmdzLm5hdiB8fCBkaXNhYmxlZCk7XG5cblx0XHRpZiAoc2V0dGluZ3MubmF2KSB7XG5cdFx0XHR0aGlzLl9jb250cm9scy4kcHJldmlvdXMudG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJywgIWxvb3AgJiYgaW5kZXggPD0gdGhpcy5fY29yZS5taW5pbXVtKHRydWUpKTtcblx0XHRcdHRoaXMuX2NvbnRyb2xzLiRuZXh0LnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcsICFsb29wICYmIGluZGV4ID49IHRoaXMuX2NvcmUubWF4aW11bSh0cnVlKSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fY29udHJvbHMuJGFic29sdXRlLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcsICFzZXR0aW5ncy5kb3RzIHx8IGRpc2FibGVkKTtcblxuXHRcdGlmIChzZXR0aW5ncy5kb3RzKSB7XG5cdFx0XHRkaWZmZXJlbmNlID0gdGhpcy5fcGFnZXMubGVuZ3RoIC0gdGhpcy5fY29udHJvbHMuJGFic29sdXRlLmNoaWxkcmVuKCkubGVuZ3RoO1xuXG5cdFx0XHRpZiAoc2V0dGluZ3MuZG90c0RhdGEgJiYgZGlmZmVyZW5jZSAhPT0gMCkge1xuXHRcdFx0XHR0aGlzLl9jb250cm9scy4kYWJzb2x1dGUuaHRtbCh0aGlzLl90ZW1wbGF0ZXMuam9pbignJykpO1xuXHRcdFx0fSBlbHNlIGlmIChkaWZmZXJlbmNlID4gMCkge1xuXHRcdFx0XHR0aGlzLl9jb250cm9scy4kYWJzb2x1dGUuYXBwZW5kKG5ldyBBcnJheShkaWZmZXJlbmNlICsgMSkuam9pbih0aGlzLl90ZW1wbGF0ZXNbMF0pKTtcblx0XHRcdH0gZWxzZSBpZiAoZGlmZmVyZW5jZSA8IDApIHtcblx0XHRcdFx0dGhpcy5fY29udHJvbHMuJGFic29sdXRlLmNoaWxkcmVuKCkuc2xpY2UoZGlmZmVyZW5jZSkucmVtb3ZlKCk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5maW5kKCcuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuXHRcdFx0dGhpcy5fY29udHJvbHMuJGFic29sdXRlLmNoaWxkcmVuKCkuZXEoJC5pbkFycmF5KHRoaXMuY3VycmVudCgpLCB0aGlzLl9wYWdlcykpLmFkZENsYXNzKCdhY3RpdmUnKTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIEV4dGVuZHMgZXZlbnQgZGF0YS5cblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSBldmVudCBvYmplY3Qgd2hpY2ggZ2V0cyB0aHJvd24uXG5cdCAqL1xuXHROYXZpZ2F0aW9uLnByb3RvdHlwZS5vblRyaWdnZXIgPSBmdW5jdGlvbihldmVudCkge1xuXHRcdHZhciBzZXR0aW5ncyA9IHRoaXMuX2NvcmUuc2V0dGluZ3M7XG5cblx0XHRldmVudC5wYWdlID0ge1xuXHRcdFx0aW5kZXg6ICQuaW5BcnJheSh0aGlzLmN1cnJlbnQoKSwgdGhpcy5fcGFnZXMpLFxuXHRcdFx0Y291bnQ6IHRoaXMuX3BhZ2VzLmxlbmd0aCxcblx0XHRcdHNpemU6IHNldHRpbmdzICYmIChzZXR0aW5ncy5jZW50ZXIgfHwgc2V0dGluZ3MuYXV0b1dpZHRoIHx8IHNldHRpbmdzLmRvdHNEYXRhXG5cdFx0XHRcdD8gMSA6IHNldHRpbmdzLmRvdHNFYWNoIHx8IHNldHRpbmdzLml0ZW1zKVxuXHRcdH07XG5cdH07XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIGN1cnJlbnQgcGFnZSBwb3NpdGlvbiBvZiB0aGUgY2Fyb3VzZWwuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHJldHVybnMge051bWJlcn1cblx0ICovXG5cdE5hdmlnYXRpb24ucHJvdG90eXBlLmN1cnJlbnQgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgY3VycmVudCA9IHRoaXMuX2NvcmUucmVsYXRpdmUodGhpcy5fY29yZS5jdXJyZW50KCkpO1xuXHRcdHJldHVybiAkLmdyZXAodGhpcy5fcGFnZXMsICQucHJveHkoZnVuY3Rpb24ocGFnZSwgaW5kZXgpIHtcblx0XHRcdHJldHVybiBwYWdlLnN0YXJ0IDw9IGN1cnJlbnQgJiYgcGFnZS5lbmQgPj0gY3VycmVudDtcblx0XHR9LCB0aGlzKSkucG9wKCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIGN1cnJlbnQgc3VjY2Vzb3IvcHJlZGVjZXNzb3IgcG9zaXRpb24uXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHJldHVybnMge051bWJlcn1cblx0ICovXG5cdE5hdmlnYXRpb24ucHJvdG90eXBlLmdldFBvc2l0aW9uID0gZnVuY3Rpb24oc3VjY2Vzc29yKSB7XG5cdFx0dmFyIHBvc2l0aW9uLCBsZW5ndGgsXG5cdFx0XHRzZXR0aW5ncyA9IHRoaXMuX2NvcmUuc2V0dGluZ3M7XG5cblx0XHRpZiAoc2V0dGluZ3Muc2xpZGVCeSA9PSAncGFnZScpIHtcblx0XHRcdHBvc2l0aW9uID0gJC5pbkFycmF5KHRoaXMuY3VycmVudCgpLCB0aGlzLl9wYWdlcyk7XG5cdFx0XHRsZW5ndGggPSB0aGlzLl9wYWdlcy5sZW5ndGg7XG5cdFx0XHRzdWNjZXNzb3IgPyArK3Bvc2l0aW9uIDogLS1wb3NpdGlvbjtcblx0XHRcdHBvc2l0aW9uID0gdGhpcy5fcGFnZXNbKChwb3NpdGlvbiAlIGxlbmd0aCkgKyBsZW5ndGgpICUgbGVuZ3RoXS5zdGFydDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cG9zaXRpb24gPSB0aGlzLl9jb3JlLnJlbGF0aXZlKHRoaXMuX2NvcmUuY3VycmVudCgpKTtcblx0XHRcdGxlbmd0aCA9IHRoaXMuX2NvcmUuaXRlbXMoKS5sZW5ndGg7XG5cdFx0XHRzdWNjZXNzb3IgPyBwb3NpdGlvbiArPSBzZXR0aW5ncy5zbGlkZUJ5IDogcG9zaXRpb24gLT0gc2V0dGluZ3Muc2xpZGVCeTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcG9zaXRpb247XG5cdH07XG5cblx0LyoqXG5cdCAqIFNsaWRlcyB0byB0aGUgbmV4dCBpdGVtIG9yIHBhZ2UuXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtzcGVlZD1mYWxzZV0gLSBUaGUgdGltZSBpbiBtaWxsaXNlY29uZHMgZm9yIHRoZSB0cmFuc2l0aW9uLlxuXHQgKi9cblx0TmF2aWdhdGlvbi5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKHNwZWVkKSB7XG5cdFx0JC5wcm94eSh0aGlzLl9vdmVycmlkZXMudG8sIHRoaXMuX2NvcmUpKHRoaXMuZ2V0UG9zaXRpb24odHJ1ZSksIHNwZWVkKTtcblx0fTtcblxuXHQvKipcblx0ICogU2xpZGVzIHRvIHRoZSBwcmV2aW91cyBpdGVtIG9yIHBhZ2UuXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtzcGVlZD1mYWxzZV0gLSBUaGUgdGltZSBpbiBtaWxsaXNlY29uZHMgZm9yIHRoZSB0cmFuc2l0aW9uLlxuXHQgKi9cblx0TmF2aWdhdGlvbi5wcm90b3R5cGUucHJldiA9IGZ1bmN0aW9uKHNwZWVkKSB7XG5cdFx0JC5wcm94eSh0aGlzLl9vdmVycmlkZXMudG8sIHRoaXMuX2NvcmUpKHRoaXMuZ2V0UG9zaXRpb24oZmFsc2UpLCBzcGVlZCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFNsaWRlcyB0byB0aGUgc3BlY2lmaWVkIGl0ZW0gb3IgcGFnZS5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gLSBUaGUgcG9zaXRpb24gb2YgdGhlIGl0ZW0gb3IgcGFnZS5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtzcGVlZF0gLSBUaGUgdGltZSBpbiBtaWxsaXNlY29uZHMgZm9yIHRoZSB0cmFuc2l0aW9uLlxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IFtzdGFuZGFyZD1mYWxzZV0gLSBXaGV0aGVyIHRvIHVzZSB0aGUgc3RhbmRhcmQgYmVoYXZpb3VyIG9yIG5vdC5cblx0ICovXG5cdE5hdmlnYXRpb24ucHJvdG90eXBlLnRvID0gZnVuY3Rpb24ocG9zaXRpb24sIHNwZWVkLCBzdGFuZGFyZCkge1xuXHRcdHZhciBsZW5ndGg7XG5cblx0XHRpZiAoIXN0YW5kYXJkICYmIHRoaXMuX3BhZ2VzLmxlbmd0aCkge1xuXHRcdFx0bGVuZ3RoID0gdGhpcy5fcGFnZXMubGVuZ3RoO1xuXHRcdFx0JC5wcm94eSh0aGlzLl9vdmVycmlkZXMudG8sIHRoaXMuX2NvcmUpKHRoaXMuX3BhZ2VzWygocG9zaXRpb24gJSBsZW5ndGgpICsgbGVuZ3RoKSAlIGxlbmd0aF0uc3RhcnQsIHNwZWVkKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0JC5wcm94eSh0aGlzLl9vdmVycmlkZXMudG8sIHRoaXMuX2NvcmUpKHBvc2l0aW9uLCBzcGVlZCk7XG5cdFx0fVxuXHR9O1xuXG5cdCQuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5OYXZpZ2F0aW9uID0gTmF2aWdhdGlvbjtcblxufSkod2luZG93LlplcHRvIHx8IHdpbmRvdy5qUXVlcnksIHdpbmRvdywgZG9jdW1lbnQpO1xuXG4vKipcbiAqIEhhc2ggUGx1Z2luXG4gKiBAdmVyc2lvbiAyLjMuNFxuICogQGF1dGhvciBBcnR1cyBLb2xhbm93c2tpXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICovXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgdGhlIGhhc2ggcGx1Z2luLlxuXHQgKiBAY2xhc3MgVGhlIEhhc2ggUGx1Z2luXG5cdCAqIEBwYXJhbSB7T3dsfSBjYXJvdXNlbCAtIFRoZSBPd2wgQ2Fyb3VzZWxcblx0ICovXG5cdHZhciBIYXNoID0gZnVuY3Rpb24oY2Fyb3VzZWwpIHtcblx0XHQvKipcblx0XHQgKiBSZWZlcmVuY2UgdG8gdGhlIGNvcmUuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtPd2x9XG5cdFx0ICovXG5cdFx0dGhpcy5fY29yZSA9IGNhcm91c2VsO1xuXG5cdFx0LyoqXG5cdFx0ICogSGFzaCBpbmRleCBmb3IgdGhlIGl0ZW1zLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMuX2hhc2hlcyA9IHt9O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNhcm91c2VsIGVsZW1lbnQuXG5cdFx0ICogQHR5cGUge2pRdWVyeX1cblx0XHQgKi9cblx0XHR0aGlzLiRlbGVtZW50ID0gdGhpcy5fY29yZS4kZWxlbWVudDtcblxuXHRcdC8qKlxuXHRcdCAqIEFsbCBldmVudCBoYW5kbGVycy5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLl9oYW5kbGVycyA9IHtcblx0XHRcdCdpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIHRoaXMuX2NvcmUuc2V0dGluZ3Muc3RhcnRQb3NpdGlvbiA9PT0gJ1VSTEhhc2gnKSB7XG5cdFx0XHRcdFx0JCh3aW5kb3cpLnRyaWdnZXIoJ2hhc2hjaGFuZ2Uub3dsLm5hdmlnYXRpb24nKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyksXG5cdFx0XHQncHJlcGFyZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSkge1xuXHRcdFx0XHRcdHZhciBoYXNoID0gJChlLmNvbnRlbnQpLmZpbmQoJ1tkYXRhLWhhc2hdJykuYWRkQmFjaygnW2RhdGEtaGFzaF0nKS5hdHRyKCdkYXRhLWhhc2gnKTtcblxuXHRcdFx0XHRcdGlmICghaGFzaCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRoaXMuX2hhc2hlc1toYXNoXSA9IGUuY29udGVudDtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyksXG5cdFx0XHQnY2hhbmdlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIGUucHJvcGVydHkubmFtZSA9PT0gJ3Bvc2l0aW9uJykge1xuXHRcdFx0XHRcdHZhciBjdXJyZW50ID0gdGhpcy5fY29yZS5pdGVtcyh0aGlzLl9jb3JlLnJlbGF0aXZlKHRoaXMuX2NvcmUuY3VycmVudCgpKSksXG5cdFx0XHRcdFx0XHRoYXNoID0gJC5tYXAodGhpcy5faGFzaGVzLCBmdW5jdGlvbihpdGVtLCBoYXNoKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBpdGVtID09PSBjdXJyZW50ID8gaGFzaCA6IG51bGw7XG5cdFx0XHRcdFx0XHR9KS5qb2luKCk7XG5cblx0XHRcdFx0XHRpZiAoIWhhc2ggfHwgd2luZG93LmxvY2F0aW9uLmhhc2guc2xpY2UoMSkgPT09IGhhc2gpIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR3aW5kb3cubG9jYXRpb24uaGFzaCA9IGhhc2g7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpXG5cdFx0fTtcblxuXHRcdC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcblx0XHR0aGlzLl9jb3JlLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgSGFzaC5EZWZhdWx0cywgdGhpcy5fY29yZS5vcHRpb25zKTtcblxuXHRcdC8vIHJlZ2lzdGVyIHRoZSBldmVudCBoYW5kbGVyc1xuXHRcdHRoaXMuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpO1xuXG5cdFx0Ly8gcmVnaXN0ZXIgZXZlbnQgbGlzdGVuZXIgZm9yIGhhc2ggbmF2aWdhdGlvblxuXHRcdCQod2luZG93KS5vbignaGFzaGNoYW5nZS5vd2wubmF2aWdhdGlvbicsICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHJpbmcoMSksXG5cdFx0XHRcdGl0ZW1zID0gdGhpcy5fY29yZS4kc3RhZ2UuY2hpbGRyZW4oKSxcblx0XHRcdFx0cG9zaXRpb24gPSB0aGlzLl9oYXNoZXNbaGFzaF0gJiYgaXRlbXMuaW5kZXgodGhpcy5faGFzaGVzW2hhc2hdKTtcblxuXHRcdFx0aWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQgfHwgcG9zaXRpb24gPT09IHRoaXMuX2NvcmUuY3VycmVudCgpKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fY29yZS50byh0aGlzLl9jb3JlLnJlbGF0aXZlKHBvc2l0aW9uKSwgZmFsc2UsIHRydWUpO1xuXHRcdH0sIHRoaXMpKTtcblx0fTtcblxuXHQvKipcblx0ICogRGVmYXVsdCBvcHRpb25zLlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRIYXNoLkRlZmF1bHRzID0ge1xuXHRcdFVSTGhhc2hMaXN0ZW5lcjogZmFsc2Vcblx0fTtcblxuXHQvKipcblx0ICogRGVzdHJveXMgdGhlIHBsdWdpbi5cblx0ICogQHB1YmxpY1xuXHQgKi9cblx0SGFzaC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBoYW5kbGVyLCBwcm9wZXJ0eTtcblxuXHRcdCQod2luZG93KS5vZmYoJ2hhc2hjaGFuZ2Uub3dsLm5hdmlnYXRpb24nKTtcblxuXHRcdGZvciAoaGFuZGxlciBpbiB0aGlzLl9oYW5kbGVycykge1xuXHRcdFx0dGhpcy5fY29yZS4kZWxlbWVudC5vZmYoaGFuZGxlciwgdGhpcy5faGFuZGxlcnNbaGFuZGxlcl0pO1xuXHRcdH1cblx0XHRmb3IgKHByb3BlcnR5IGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKSB7XG5cdFx0XHR0eXBlb2YgdGhpc1twcm9wZXJ0eV0gIT0gJ2Z1bmN0aW9uJyAmJiAodGhpc1twcm9wZXJ0eV0gPSBudWxsKTtcblx0XHR9XG5cdH07XG5cblx0JC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLkhhc2ggPSBIYXNoO1xuXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XG5cbi8qKlxuICogU3VwcG9ydCBQbHVnaW5cbiAqXG4gKiBAdmVyc2lvbiAyLjMuNFxuICogQGF1dGhvciBWaXZpZCBQbGFuZXQgU29mdHdhcmUgR21iSFxuICogQGF1dGhvciBBcnR1cyBLb2xhbm93c2tpXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICovXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXG5cdHZhciBzdHlsZSA9ICQoJzxzdXBwb3J0PicpLmdldCgwKS5zdHlsZSxcblx0XHRwcmVmaXhlcyA9ICdXZWJraXQgTW96IE8gbXMnLnNwbGl0KCcgJyksXG5cdFx0ZXZlbnRzID0ge1xuXHRcdFx0dHJhbnNpdGlvbjoge1xuXHRcdFx0XHRlbmQ6IHtcblx0XHRcdFx0XHRXZWJraXRUcmFuc2l0aW9uOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG5cdFx0XHRcdFx0TW96VHJhbnNpdGlvbjogJ3RyYW5zaXRpb25lbmQnLFxuXHRcdFx0XHRcdE9UcmFuc2l0aW9uOiAnb1RyYW5zaXRpb25FbmQnLFxuXHRcdFx0XHRcdHRyYW5zaXRpb246ICd0cmFuc2l0aW9uZW5kJ1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0YW5pbWF0aW9uOiB7XG5cdFx0XHRcdGVuZDoge1xuXHRcdFx0XHRcdFdlYmtpdEFuaW1hdGlvbjogJ3dlYmtpdEFuaW1hdGlvbkVuZCcsXG5cdFx0XHRcdFx0TW96QW5pbWF0aW9uOiAnYW5pbWF0aW9uZW5kJyxcblx0XHRcdFx0XHRPQW5pbWF0aW9uOiAnb0FuaW1hdGlvbkVuZCcsXG5cdFx0XHRcdFx0YW5pbWF0aW9uOiAnYW5pbWF0aW9uZW5kJ1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHR0ZXN0cyA9IHtcblx0XHRcdGNzc3RyYW5zZm9ybXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISF0ZXN0KCd0cmFuc2Zvcm0nKTtcblx0XHRcdH0sXG5cdFx0XHRjc3N0cmFuc2Zvcm1zM2Q6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISF0ZXN0KCdwZXJzcGVjdGl2ZScpO1xuXHRcdFx0fSxcblx0XHRcdGNzc3RyYW5zaXRpb25zOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhdGVzdCgndHJhbnNpdGlvbicpO1xuXHRcdFx0fSxcblx0XHRcdGNzc2FuaW1hdGlvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISF0ZXN0KCdhbmltYXRpb24nKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdGZ1bmN0aW9uIHRlc3QocHJvcGVydHksIHByZWZpeGVkKSB7XG5cdFx0dmFyIHJlc3VsdCA9IGZhbHNlLFxuXHRcdFx0dXBwZXIgPSBwcm9wZXJ0eS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3BlcnR5LnNsaWNlKDEpO1xuXG5cdFx0JC5lYWNoKChwcm9wZXJ0eSArICcgJyArIHByZWZpeGVzLmpvaW4odXBwZXIgKyAnICcpICsgdXBwZXIpLnNwbGl0KCcgJyksIGZ1bmN0aW9uKGksIHByb3BlcnR5KSB7XG5cdFx0XHRpZiAoc3R5bGVbcHJvcGVydHldICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0cmVzdWx0ID0gcHJlZml4ZWQgPyBwcm9wZXJ0eSA6IHRydWU7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRmdW5jdGlvbiBwcmVmaXhlZChwcm9wZXJ0eSkge1xuXHRcdHJldHVybiB0ZXN0KHByb3BlcnR5LCB0cnVlKTtcblx0fVxuXG5cdGlmICh0ZXN0cy5jc3N0cmFuc2l0aW9ucygpKSB7XG5cdFx0LyoganNoaW50IC1XMDUzICovXG5cdFx0JC5zdXBwb3J0LnRyYW5zaXRpb24gPSBuZXcgU3RyaW5nKHByZWZpeGVkKCd0cmFuc2l0aW9uJykpXG5cdFx0JC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kID0gZXZlbnRzLnRyYW5zaXRpb24uZW5kWyAkLnN1cHBvcnQudHJhbnNpdGlvbiBdO1xuXHR9XG5cblx0aWYgKHRlc3RzLmNzc2FuaW1hdGlvbnMoKSkge1xuXHRcdC8qIGpzaGludCAtVzA1MyAqL1xuXHRcdCQuc3VwcG9ydC5hbmltYXRpb24gPSBuZXcgU3RyaW5nKHByZWZpeGVkKCdhbmltYXRpb24nKSlcblx0XHQkLnN1cHBvcnQuYW5pbWF0aW9uLmVuZCA9IGV2ZW50cy5hbmltYXRpb24uZW5kWyAkLnN1cHBvcnQuYW5pbWF0aW9uIF07XG5cdH1cblxuXHRpZiAodGVzdHMuY3NzdHJhbnNmb3JtcygpKSB7XG5cdFx0LyoganNoaW50IC1XMDUzICovXG5cdFx0JC5zdXBwb3J0LnRyYW5zZm9ybSA9IG5ldyBTdHJpbmcocHJlZml4ZWQoJ3RyYW5zZm9ybScpKTtcblx0XHQkLnN1cHBvcnQudHJhbnNmb3JtM2QgPSB0ZXN0cy5jc3N0cmFuc2Zvcm1zM2QoKTtcblx0fVxuXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XG4iLCIvLyBpbXBvcnQgJ2pxdWVyeSdcclxuaW1wb3J0ICQgZnJvbSAnalF1ZXJ5JztcclxuaW1wb3J0ICcuL2NvbXBvbmVudHMvc2xpZGVyJztcclxuaW1wb3J0ICcuL2NvbXBvbmVudHMvbmF2aWdhdGlvbic7XHJcbmltcG9ydCAnLi9jb21wb25lbnRzL21hc29ucnknO1xyXG5pbXBvcnQgJy4vY29tcG9uZW50cy9vd2wnO1xyXG5pbXBvcnQgJy4vY29tcG9uZW50cy9zZW5kLXN1YnNjcmliZSc7XHJcblxyXG4iLCJpbXBvcnQgTWFzb25yeSBmcm9tICdtYXNvbnJ5LWxheW91dCc7XHJcbmltcG9ydCBpbWFnZXNMb2FkZWQgZnJvbSAnaW1hZ2VzbG9hZGVkJztcclxuXHJcbmV4cG9ydCBjb25zdCBydW5NYXNvbnJ5ID0gKCkgPT4ge1xyXG4gIGNvbnN0IGVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuby1jb250YWluZXJfbWFzb25yeScpO1xyXG4gIGltYWdlc0xvYWRlZCggZWxlbSwgZnVuY3Rpb24oIGluc3RhbmNlICkge1xyXG4gIGNvbnN0IG1zbnJ5ID0gbmV3IE1hc29ucnkoIGVsZW0sIHtcclxuICAgIC8vIG9wdGlvbnNcclxuICAgIGl0ZW1TZWxlY3RvcjogJy5vLXJvd19jb2x1bW4tbWFzb25yeScsXHJcbiAgICBndXR0ZXI6IDE5LFxyXG4gICAgcGVyY2VudFBvc2l0aW9uOiB0cnVlXHJcbiAgfSk7XHJcbn0pO1xyXG59XHJcblxyXG4vLyBlbGVtZW50XHJcbmltYWdlc0xvYWRlZCggZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm8tY29udGFpbmVyX21hc29ucnknKSwgZnVuY3Rpb24oIGluc3RhbmNlICkge1xyXG4gIGNvbnNvbGUubG9nKCdhbGwgaW1hZ2VzIGFyZSBsb2FkZWQnKTtcclxuICBydW5NYXNvbnJ5KCk7XHJcbn0pO1xyXG5cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZnVuY3Rpb24oZXZlbnQpIHtcclxuICBpbWFnZXNMb2FkZWQoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5vLWNvbnRhaW5lcl9tYXNvbnJ5JyksIGZ1bmN0aW9uKCBpbnN0YW5jZSApIHtcclxuICBydW5NYXNvbnJ5KCk7XHJcbn0pO1xyXG59KTtcclxuXHJcblxyXG5cclxuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcclxuXHJcbiQoJy5jLW1haW4tbmF2aWdhdGlvbicpLm9uKCdtb3VzZWVudGVyJywnLm1lbnUtaXRlbS1oYXMtY2hpbGRyZW4nLCAoZSkgPT4ge1xyXG4gICAgJChlLmN1cnJlbnRUYXJnZXQpLmFkZENsYXNzKCdvcGVuJyk7ICAgIFxyXG59KVxyXG4kKCcuYy1tYWluLW5hdmlnYXRpb24nKS5vbignbW91c2VsZWF2ZScsJy5tZW51LWl0ZW0taGFzLWNoaWxkcmVuJywgKGUpID0+IHtcclxuICAgICQoZS5jdXJyZW50VGFyZ2V0KS5yZW1vdmVDbGFzcygnb3BlbicpOyAgICBcclxufSlcclxuXHJcbi8vIG1vYmlsZSBzZWFyY2hcclxuY29uc3QgbW9iaWxlU2VhcmNoVHJpZ2dlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2JpbGUtc2VhcmNoX190cmlnZ2VyJyk7XHJcbmNvbnN0IG1vYmlsZVNlYXJjaEZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9iaWxlLXNlYXJjaF9fZm9ybScpO1xyXG5cclxuaWYgKG1vYmlsZVNlYXJjaFRyaWdnZXIgJiYgbW9iaWxlU2VhcmNoRm9ybSkge1xyXG4gICAgbW9iaWxlU2VhcmNoVHJpZ2dlci5vbmNsaWNrID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgY29uc3QgZWwgPSBldmVudC50YXJnZXQ7XHJcbiAgICAgICAgaWYgKGVsLmRhdGFzZXQub3BlbiA9PT0gJ2ZhbHNlJykge1xyXG4gICAgICAgICAgICBlbC5kYXRhc2V0Lm9wZW4gPSB0cnVlO1xyXG4gICAgICAgICAgICBtb2JpbGVTZWFyY2hGb3JtLmNsYXNzTGlzdC5hZGQoJ29wZW4nKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZWwuZGF0YXNldC5vcGVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIG1vYmlsZVNlYXJjaEZvcm0uY2xhc3NMaXN0LnJlbW92ZSgnb3BlbicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgZGVza3RvcE1haW5NZW51Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmMtbWFpbi1uYXZpZ2F0aW9uLS1kZXNrdG9wJyk7XHJcbmNvbnN0IG1lbnVJdGVtc0NvbnRhaW5lciA9IGRlc2t0b3BNYWluTWVudUNvbnRhaW5lciAmJiBkZXNrdG9wTWFpbk1lbnVDb250YWluZXIucXVlcnlTZWxlY3RvcigndWwnKTtcclxuY29uc3QgbWVudUl0ZW1zID0gbWVudUl0ZW1zQ29udGFpbmVyICYmIG1lbnVJdGVtc0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdsaScpO1xyXG5cclxubGV0IGl0ZW1zV2lkdGhzID0gMDtcclxuaWYgKG1lbnVJdGVtcyAmJiBtZW51SXRlbXMubGVuZ3RoKSB7XHJcbiAgICBpdGVtc1dpZHRocyA9IEFycmF5LmZyb20obWVudUl0ZW1zKS5tYXAoZWwgPT4ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHdpZHRoOiBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCxcclxuICAgICAgICAgICAgZWxcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuY29uc3Qgdmlld01vcmVJbk1lbnUgPSAoKSA9PiB7XHJcbiAgICAvLyBIaWRlIG92ZXJmbG93aW5nIG1lbnUgZWxlbWVudHMgYmVoaW5kIFwiTW9yZVwiXHJcbiAgICBjb25zdCBleGlzdGluZ01vcmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanNfbW9yZS1lbGVtZW50Jyk7XHJcbiAgICBjb25zdCBtYWluTmF2RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanNfbWFpbi1uYXYnKTtcclxuICAgIGNvbnN0IHNob3VsZFJ1biA9IGRlc2t0b3BNYWluTWVudUNvbnRhaW5lciAmJlxyXG4gICAgICAgIG1haW5OYXZFbDtcclxuXHJcbiAgICBpZiAoZXhpc3RpbmdNb3JlKSB7XHJcbiAgICAgICAgZXhpc3RpbmdNb3JlLnJlbW92ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChzaG91bGRSdW4pIHtcclxuICAgICAgICBjb25zdCBtZW51V2lkdGhUaHJlc2hvbGQgPSBtYWluTmF2RWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggLSAzMDA7XHJcbiAgICAgICAgY29uc3QgbWVudXNBcnJheXMgPSB7XHJcbiAgICAgICAgICAgICd2aXNpYmxlJzogW10sXHJcbiAgICAgICAgICAgICdoaWRkZW4nOiBbXVxyXG4gICAgICAgIH07XHJcbiAgICBcclxuICAgICAgICBsZXQgYWNjV2lkdGggPSAwO1xyXG4gICAgICAgIGl0ZW1zV2lkdGhzLmZvckVhY2goZWxPYmogPT4ge1xyXG4gICAgICAgICAgICBhY2NXaWR0aCArPSBlbE9iai53aWR0aDtcclxuICAgICAgICAgICAgaWYgKGFjY1dpZHRoIDwgbWVudVdpZHRoVGhyZXNob2xkKSB7XHJcbiAgICAgICAgICAgICAgICBtZW51c0FycmF5c1sndmlzaWJsZSddLnB1c2goZWxPYmouZWwpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbWVudXNBcnJheXNbJ2hpZGRlbiddLnB1c2goZWxPYmouZWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG1lbnVJdGVtc0NvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICBPYmplY3Qua2V5cyhtZW51c0FycmF5cykuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWtleSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICd2aXNpYmxlJykge1xyXG4gICAgICAgICAgICAgICAgbWVudXNBcnJheXNba2V5XS5mb3JFYWNoKGVsID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBtZW51SXRlbXNDb250YWluZXIuYXBwZW5kQ2hpbGQoZWwpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChtZW51c0FycmF5c1trZXldLmxlbmd0aCA8IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtb3JlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xyXG4gICAgICAgICAgICAgICAgbW9yZUVsLmNsYXNzTGlzdC5hZGQoJ21lbnUtaXRlbScsICdqc19tb3JlLWVsZW1lbnQnKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRleHRMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgICAgICAgICAgICAgdGV4dExpbmsub25jbGljayA9IGUgPT4gZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hldnJvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTtcclxuICAgICAgICAgICAgICAgIGNoZXZyb24uY2xhc3NMaXN0LmFkZCgnZmFzJywgJ2ZhLWNoZXZyb24tZG93bicpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCfQldGJ0LUnKTtcclxuICAgICAgICAgICAgICAgIHRleHRMaW5rLmFwcGVuZENoaWxkKHRleHQpO1xyXG4gICAgICAgICAgICAgICAgdGV4dExpbmsuYXBwZW5kQ2hpbGQoY2hldnJvbik7XHJcbiAgICAgICAgICAgICAgICBtb3JlRWwuYXBwZW5kQ2hpbGQodGV4dExpbmspO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIW1vcmVFbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG1vcmVFbC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1lbnVzSG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcclxuICAgICAgICAgICAgICAgIG1vcmVFbC5hcHBlbmRDaGlsZChtZW51c0hvbGRlcik7XHJcbiAgICAgICAgICAgICAgICBtb3JlRWwuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBtZW51c0FycmF5c1trZXldLmZvckVhY2goZWwgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG1lbnVzSG9sZGVyLmFwcGVuZENoaWxkKGVsKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgbWVudXNIb2xkZXIuY2xhc3NMaXN0LmFkZCgnbWFpbi1kcm9wZG93bi1tZW51Jyk7XHJcbiAgICAgICAgICAgICAgICBtZW51SXRlbXNDb250YWluZXIuYXBwZW5kQ2hpbGQobW9yZUVsKTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgbW9yZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBtZW51c0hvbGRlci5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xyXG4gICAgICAgICAgICAgICAgICAgIG1lbnVzSG9sZGVyLnN0eWxlLm9wYWNpdHkgPSAnMSc7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgbW9yZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBtZW51c0hvbGRlci5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVudXNIb2xkZXIuc3R5bGUub3BhY2l0eSA9ICcwJztcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG52aWV3TW9yZUluTWVudSgpO1xyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHtcclxuICAgIHZpZXdNb3JlSW5NZW51KCk7XHJcbn0pO1xyXG5cclxuY29uc3QgdG9nZ2xlSGFtYnVyZ2VyTWVudSA9IChjbGlja2VkKSA9PiB7XHJcbiAgICBjb25zdCBoYW1idXJnZXJNZW51QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzX3RvZ2dsZS1oYW1idXJnZXItbWVudScpO1xyXG4gICAgY29uc3QgaGFtYnVyZ2VyTWVudUNvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanNfaGFtYnVyZ2VyLW1lbnUtY29udGVudCcpO1xyXG5cclxuICAgIGlmICghaGFtYnVyZ2VyTWVudUJ1dHRvbiB8fCAhaGFtYnVyZ2VyTWVudUNvbnRlbnQpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBpc09wZW4gPSBoYW1idXJnZXJNZW51QnV0dG9uLmRhdGFzZXQub3BlbiA9PT0gJ3RydWUnO1xyXG5cclxuICAgIGhhbWJ1cmdlck1lbnVCdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICB0b2dnbGVIYW1idXJnZXJNZW51KHRydWUpO1xyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoIWNsaWNrZWQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFpc09wZW4pIHtcclxuICAgICAgICBoYW1idXJnZXJNZW51QnV0dG9uLmRhdGFzZXQub3BlbiA9ICd0cnVlJztcclxuICAgICAgICBoYW1idXJnZXJNZW51Q29udGVudC5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBoYW1idXJnZXJNZW51QnV0dG9uLmRhdGFzZXQub3BlbiA9ICdmYWxzZSc7XHJcbiAgICAgICAgaGFtYnVyZ2VyTWVudUNvbnRlbnQuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxudG9nZ2xlSGFtYnVyZ2VyTWVudSgpOyIsImltcG9ydCAnb3dsLmNhcm91c2VsJztcclxuXHJcblxyXG5jb25zdCBpbml0T3dsTWVudSA9ICgpID0+IHtcclxuICAgIGNvbnN0IG1vYmlsZU1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYy1tYWluLW5hdmlnYXRpb24tLW1vYmlsZScpO1xyXG5cclxuICAgIGlmIChtb2JpbGVNZW51ICYmIG1vYmlsZU1lbnUub2Zmc2V0UGFyZW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgY29uc3Qgb3dsRWxlbWVudCA9IG1vYmlsZU1lbnUucXVlcnlTZWxlY3RvcignLm1lbnUnKTtcclxuICAgICAgICBBcnJheS5mcm9tKG93bEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnbGknKSkuZm9yRWFjaChlbCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gZWwucXVlcnlTZWxlY3RvcignYScpLm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgYHdpZHRoOiAke3dpZHRofXB4YCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgalF1ZXJ5KG93bEVsZW1lbnQpLm93bENhcm91c2VsKHtcclxuICAgICAgICAgICAgbWFyZ2luOiAxMCxcclxuICAgICAgICAgICAgbG9vcDogdHJ1ZSxcclxuICAgICAgICAgICAgYXV0b1dpZHRoOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmluaXRPd2xNZW51KCk7XHJcblxyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHtcclxuICAgIGluaXRPd2xNZW51KCk7XHJcbn0pO1xyXG5cclxuLy8gaW5pdCBob21lIHBhZ2Ugc2xpZGVyXHJcbmNvbnN0IGhvbWVQYWdlU2xpZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzX3NsaWRlci1jYXJvdXNlbCcpO1xyXG5cclxuaWYgKGhvbWVQYWdlU2xpZGVyKSB7XHJcbiAgICBqUXVlcnkoaG9tZVBhZ2VTbGlkZXIpLm93bENhcm91c2VsKHtcclxuICAgICAgICBsb29wOiB0cnVlLFxyXG4gICAgICAgIG1hcmdpbjogMjAsXHJcbiAgICAgICAgaXRlbXM6IDQsXHJcbiAgICAgICAgcmVzcG9uc2l2ZUNsYXNzOiB0cnVlLFxyXG4gICAgICAgIGRvdHM6IHRydWUsXHJcbiAgICAgICAgZG90c0VhY2g6IHRydWUsXHJcbiAgICAgICAgcmVzcG9uc2l2ZToge1xyXG4gICAgICAgICAgICAwOiB7XHJcbiAgICAgICAgICAgICAgICBpdGVtczogMSxcclxuICAgICAgICAgICAgICAgIG5hdjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBkb3RzOiB0cnVlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIDYwMDoge1xyXG4gICAgICAgICAgICAgICAgaXRlbXM6IDEsXHJcbiAgICAgICAgICAgICAgICBuYXY6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZG90c0VhY2g6IHRydWVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgMTAwMDoge1xyXG4gICAgICAgICAgICAgICAgaXRlbXM6IDQsXHJcbiAgICAgICAgICAgICAgICBuYXY6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBsb29wOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGRvdHNFYWNoOiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KVxyXG59IiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcclxuXHJcbiAgXHJcbiAgJCgnLmpzLW1vZGFsLWhpZGUnKS5jbGljayhmdW5jdGlvbigpe1xyXG4gICAgJCgnLmpzLW1vZGFsLXNob3BpZnknKS50b2dnbGVDbGFzcygnaXMtc2hvd24tLW9mZi1mbG93JykudG9nZ2xlQ2xhc3MoJ2lzLWhpZGRlbi0tb2ZmLWZsb3cnKTtcclxuICB9KTtcclxuICAkKCcubC1tb2RhbF9fY2xvc2UnKS5jbGljayhmdW5jdGlvbigpe1xyXG4gICAgJCgnLmpzLW1vZGFsLXNob3BpZnknKS50b2dnbGVDbGFzcygnaXMtc2hvd24tLW9mZi1mbG93JykudG9nZ2xlQ2xhc3MoJ2lzLWhpZGRlbi0tb2ZmLWZsb3cnKTtcclxufSk7XHJcblxyXG4kKFwiLndpZGdldF9zdWJzY3JpYmVfd2lkZ2V0X19mb3JtLXN1Ym1pdFwiKS5jbGljayhmdW5jdGlvbihlKXtcclxuXHJcbiAgICB2YXIgcmVnID0gL14oW0EtWmEtejAtOV9cXC1cXC5dKStcXEAoW0EtWmEtejAtOV9cXC1cXC5dKStcXC4oW0EtWmEtel17Miw0fSkkLztcclxuXHJcbiAgICB2YXIgYWRkcmVzcyA9ICAkKFwiLndpZGdldF9zdWJzY3JpYmVfd2lkZ2V0X19mb3JtLWlucHV0XCIpLnZhbCgpO1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAvLyBpZiB0aGUgY2xpY2tlZCBlbGVtZW50IGlzIGEgbGlua1xyXG4gICAgaWYocmVnLnRlc3QoYWRkcmVzcykgPT0gZmFsc2UpIHtcclxuICAgICAgICAkKCBcIi7RgS1wb3B1cF9kZXNjcmlwdGlvbi1zdWJzY3JpYmVcIiApLmh0bWwoJ9CS0LLQtdC00LjRgtC1INC60L7RgNGA0LXQutGC0L3Ri9C5IGUtbWFpbCDQsNC00YDQtdGBLicpO1xyXG4gICAgICAgICQoJy5qcy1tb2RhbC1zaG9waWZ5JykudG9nZ2xlQ2xhc3MoJ2lzLXNob3duLS1vZmYtZmxvdycpLnRvZ2dsZUNsYXNzKCdpcy1oaWRkZW4tLW9mZi1mbG93Jyk7XHJcbiAgICAgfSBlbHNlIHtcclxuXHJcblxyXG5cdHZhciBkYXRhID0ge1xyXG4gICAgICAgIGFjdGlvbjogJ3BlcmZvcm1hbmNlX3N1YnNjcmliZV9zZW5kJyxcclxuICAgICAgICBlbWFpbDogYWRkcmVzc1xyXG4gICAgfTtcclxuICAgICQucG9zdCggJChcIiNhamF4X3VybFwiKS52YWwoKSwgZGF0YSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICBpZihyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAkKCBcIi7RgS1wb3B1cF9kZXNjcmlwdGlvbi1zdWJzY3JpYmVcIiApLmh0bWwoJ9Cd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMINC30LDQv9GA0L7RgS48YnI+INCf0L7Qv9GA0L7QsdGD0LnRgtC1INC/0L7Qt9C20LUuJyk7XHJcbiAgICAgICAgICAgICQoJy5qcy1tb2RhbC1zaG9waWZ5JykudG9nZ2xlQ2xhc3MoJ2lzLXNob3duLS1vZmYtZmxvdycpLnRvZ2dsZUNsYXNzKCdpcy1oaWRkZW4tLW9mZi1mbG93Jyk7XHJcbiAgICAgICAgICAgIC8vIGFsZXJ0KCdub3QnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkKCBcIi7RgS1wb3B1cF9kZXNjcmlwdGlvbi1zdWJzY3JpYmVcIiApLmh0bWwoJ9CX0LDQv9GA0L7RgSDRg9GB0L/QtdGI0L3QviDQvtGC0L/RgNCw0LLQu9C10L0hJyk7XHJcbiAgICAgICAgICAgICQoJy5qcy1tb2RhbC1zaG9waWZ5JykudG9nZ2xlQ2xhc3MoJ2lzLXNob3duLS1vZmYtZmxvdycpLnRvZ2dsZUNsYXNzKCdpcy1oaWRkZW4tLW9mZi1mbG93Jyk7XHJcbiAgICAgICAgICAgIC8vIGFsZXJ0KCd5ZXMnKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbn1cclxuXHJcbiAgXHJcbiAgfSk7IiwiY29uc29sZS5sb2coJ1NMSURFZHNnc2FkZ3NkYWZmc2RmZ3NmZ3Nzc1JhYWEnKTsiLCJtb2R1bGUuZXhwb3J0cyA9IGpRdWVyeTsiXSwic291cmNlUm9vdCI6IiJ9